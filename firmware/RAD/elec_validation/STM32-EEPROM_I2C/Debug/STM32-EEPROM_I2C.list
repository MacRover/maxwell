
STM32-EEPROM_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003360  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800346c  0800346c  0000446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003498  08003498  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003498  08003498  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003498  08003498  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003498  08003498  00004498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800349c  0800349c  0000449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080034a0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000000c  080034ac  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  080034ac  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007aec  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000164b  00000000  00000000  0000cb21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000808  00000000  00000000  0000e170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000626  00000000  00000000  0000e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163d9  00000000  00000000  0000ef9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ac2  00000000  00000000  00025377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00080eb9  00000000  00000000  0002ee39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afcf2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020bc  00000000  00000000  000afd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008b  00000000  00000000  000b1df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003454 	.word	0x08003454

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003454 	.word	0x08003454

0800014c <setupTxCAN>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setupTxCAN()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    TxHeader.StdId = 0x321;
 8000150:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <setupTxCAN+0x64>)
 8000152:	f240 3221 	movw	r2, #801	@ 0x321
 8000156:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0x01;
 8000158:	4b15      	ldr	r3, [pc, #84]	@ (80001b0 <setupTxCAN+0x64>)
 800015a:	2201      	movs	r2, #1
 800015c:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800015e:	4b14      	ldr	r3, [pc, #80]	@ (80001b0 <setupTxCAN+0x64>)
 8000160:	2200      	movs	r2, #0
 8000162:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_EXT;
 8000164:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <setupTxCAN+0x64>)
 8000166:	2204      	movs	r2, #4
 8000168:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800016a:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <setupTxCAN+0x64>)
 800016c:	2208      	movs	r2, #8
 800016e:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <setupTxCAN+0x64>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]

    TxData[0] = 0xA0;
 8000176:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <setupTxCAN+0x68>)
 8000178:	22a0      	movs	r2, #160	@ 0xa0
 800017a:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0xA1;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <setupTxCAN+0x68>)
 800017e:	22a1      	movs	r2, #161	@ 0xa1
 8000180:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xA2;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <setupTxCAN+0x68>)
 8000184:	22a2      	movs	r2, #162	@ 0xa2
 8000186:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xA3;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <setupTxCAN+0x68>)
 800018a:	22a3      	movs	r2, #163	@ 0xa3
 800018c:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xA4;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <setupTxCAN+0x68>)
 8000190:	22a4      	movs	r2, #164	@ 0xa4
 8000192:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xA5;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <setupTxCAN+0x68>)
 8000196:	22a5      	movs	r2, #165	@ 0xa5
 8000198:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xA6;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <setupTxCAN+0x68>)
 800019c:	22a6      	movs	r2, #166	@ 0xa6
 800019e:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xA7;
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <setupTxCAN+0x68>)
 80001a2:	22a7      	movs	r2, #167	@ 0xa7
 80001a4:	71da      	strb	r2, [r3, #7]
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200000a4 	.word	0x200000a4
 80001b4:	200000bc 	.word	0x200000bc

080001b8 <setupRxCAN>:

void setupRxCAN()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    canfilterconfig.FilterBank = 0;
 80001bc:	4b13      	ldr	r3, [pc, #76]	@ (800020c <setupRxCAN+0x54>)
 80001be:	2200      	movs	r2, #0
 80001c0:	615a      	str	r2, [r3, #20]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001c2:	4b12      	ldr	r3, [pc, #72]	@ (800020c <setupRxCAN+0x54>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	619a      	str	r2, [r3, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001c8:	4b10      	ldr	r3, [pc, #64]	@ (800020c <setupRxCAN+0x54>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	61da      	str	r2, [r3, #28]
    canfilterconfig.FilterIdHigh = 0x0000;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <setupRxCAN+0x54>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 80001d4:	4b0d      	ldr	r3, [pc, #52]	@ (800020c <setupRxCAN+0x54>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	605a      	str	r2, [r3, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <setupRxCAN+0x54>)
 80001dc:	2200      	movs	r2, #0
 80001de:	609a      	str	r2, [r3, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80001e0:	4b0a      	ldr	r3, [pc, #40]	@ (800020c <setupRxCAN+0x54>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	60da      	str	r2, [r3, #12]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <setupRxCAN+0x54>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	611a      	str	r2, [r3, #16]
    canfilterconfig.FilterActivation = ENABLE;
 80001ec:	4b07      	ldr	r3, [pc, #28]	@ (800020c <setupRxCAN+0x54>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	621a      	str	r2, [r3, #32]
    canfilterconfig.SlaveStartFilterBank = 14;
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <setupRxCAN+0x54>)
 80001f4:	220e      	movs	r2, #14
 80001f6:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80001f8:	4904      	ldr	r1, [pc, #16]	@ (800020c <setupRxCAN+0x54>)
 80001fa:	4805      	ldr	r0, [pc, #20]	@ (8000210 <setupRxCAN+0x58>)
 80001fc:	f000 fca1 	bl	8000b42 <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000200:	2102      	movs	r1, #2
 8000202:	4803      	ldr	r0, [pc, #12]	@ (8000210 <setupRxCAN+0x58>)
 8000204:	f000 ff9a 	bl	800113c <HAL_CAN_ActivateNotification>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200000c8 	.word	0x200000c8
 8000210:	20000028 	.word	0x20000028

08000214 <txCAN>:

void txCAN()
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
    TxHeader.DLC = 8;
 800021a:	4b0a      	ldr	r3, [pc, #40]	@ (8000244 <txCAN+0x30>)
 800021c:	2208      	movs	r2, #8
 800021e:	611a      	str	r2, [r3, #16]
    HAL_StatusTypeDef can_result = HAL_CAN_AddTxMessage(&hcan, &TxHeader,
 8000220:	4b09      	ldr	r3, [pc, #36]	@ (8000248 <txCAN+0x34>)
 8000222:	4a0a      	ldr	r2, [pc, #40]	@ (800024c <txCAN+0x38>)
 8000224:	4907      	ldr	r1, [pc, #28]	@ (8000244 <txCAN+0x30>)
 8000226:	480a      	ldr	r0, [pc, #40]	@ (8000250 <txCAN+0x3c>)
 8000228:	f000 fd98 	bl	8000d5c <HAL_CAN_AddTxMessage>
 800022c:	4603      	mov	r3, r0
 800022e:	71fb      	strb	r3, [r7, #7]
            TxData, &TxMailbox);
    if (can_result != HAL_OK)
 8000230:	79fb      	ldrb	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d001      	beq.n	800023a <txCAN+0x26>
    {
        Error_Handler();
 8000236:	f000 f9d7 	bl	80005e8 <Error_Handler>
    }
}
 800023a:	bf00      	nop
 800023c:	3708      	adds	r7, #8
 800023e:	46bd      	mov	sp, r7
 8000240:	bd80      	pop	{r7, pc}
 8000242:	bf00      	nop
 8000244:	200000a4 	.word	0x200000a4
 8000248:	200000c4 	.word	0x200000c4
 800024c:	200000bc 	.word	0x200000bc
 8000250:	20000028 	.word	0x20000028

08000254 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @param  CanHandle: pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
    uint8_t echo_data[8];
    /* Get RX message */
    if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData)
 800025c:	4b0c      	ldr	r3, [pc, #48]	@ (8000290 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800025e:	4a0d      	ldr	r2, [pc, #52]	@ (8000294 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000260:	2100      	movs	r1, #0
 8000262:	6878      	ldr	r0, [r7, #4]
 8000264:	f000 fe49 	bl	8000efa <HAL_CAN_GetRxMessage>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
            != HAL_OK)
    {
        /* Reception Error */
        Error_Handler();
 800026e:	f000 f9bb 	bl	80005e8 <Error_Handler>
    }

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000272:	2104      	movs	r1, #4
 8000274:	4808      	ldr	r0, [pc, #32]	@ (8000298 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000276:	f001 fc53 	bl	8001b20 <HAL_GPIO_TogglePin>
    // Echo received CAN message
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, echo_data, &TxMailbox);
 800027a:	f107 0208 	add.w	r2, r7, #8
 800027e:	4b07      	ldr	r3, [pc, #28]	@ (800029c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000280:	4907      	ldr	r1, [pc, #28]	@ (80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000282:	4808      	ldr	r0, [pc, #32]	@ (80002a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000284:	f000 fd6a 	bl	8000d5c <HAL_CAN_AddTxMessage>

}
 8000288:	bf00      	nop
 800028a:	3710      	adds	r7, #16
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	2000010c 	.word	0x2000010c
 8000294:	200000f0 	.word	0x200000f0
 8000298:	40010c00 	.word	0x40010c00
 800029c:	200000c4 	.word	0x200000c4
 80002a0:	200000a4 	.word	0x200000a4
 80002a4:	20000028 	.word	0x20000028

080002a8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b088      	sub	sp, #32
 80002ac:	af04      	add	r7, sp, #16
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80002ae:	f000 fac7 	bl	8000840 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80002b2:	f000 f8a3 	bl	80003fc <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80002b6:	f000 f94d 	bl	8000554 <MX_GPIO_Init>
    MX_CAN_Init();
 80002ba:	f000 f8df 	bl	800047c <MX_CAN_Init>
    MX_I2C1_Init();
 80002be:	f000 f91b 	bl	80004f8 <MX_I2C1_Init>
    /* USER CODE BEGIN 2 */
    setupTxCAN();
 80002c2:	f7ff ff43 	bl	800014c <setupTxCAN>
    setupRxCAN();
 80002c6:	f7ff ff77 	bl	80001b8 <setupRxCAN>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        txCAN();
 80002ca:	f7ff ffa3 	bl	8000214 <txCAN>
//        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);

        uint8_t read_eeprom = 0; // address in eeprom to write to
 80002ce:	2300      	movs	r3, #0
 80002d0:	73fb      	strb	r3, [r7, #15]
        uint16_t eeprom_address = 321;
 80002d2:	f240 1341 	movw	r3, #321	@ 0x141
 80002d6:	81bb      	strh	r3, [r7, #12]

        uint8_t device_identifier = 0b10100000;
 80002d8:	23a0      	movs	r3, #160	@ 0xa0
 80002da:	72fb      	strb	r3, [r7, #11]
        uint8_t a2_pin = 0;
 80002dc:	2300      	movs	r3, #0
 80002de:	72bb      	strb	r3, [r7, #10]
        uint8_t a1_pin = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	727b      	strb	r3, [r7, #9]

        uint8_t i2c_address = device_identifier | (a2_pin << 3) | (a1_pin << 2)
 80002e4:	7abb      	ldrb	r3, [r7, #10]
 80002e6:	00db      	lsls	r3, r3, #3
 80002e8:	b25a      	sxtb	r2, r3
 80002ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80002ee:	4313      	orrs	r3, r2
 80002f0:	b25a      	sxtb	r2, r3
 80002f2:	7a7b      	ldrb	r3, [r7, #9]
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	b25b      	sxtb	r3, r3
 80002f8:	4313      	orrs	r3, r2
 80002fa:	b25a      	sxtb	r2, r3
                | (eeprom_address >> 8) << 1 | read_eeprom;
 80002fc:	89bb      	ldrh	r3, [r7, #12]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	b25b      	sxtb	r3, r3
 8000306:	4313      	orrs	r3, r2
 8000308:	b25a      	sxtb	r2, r3
 800030a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800030e:	4313      	orrs	r3, r2
 8000310:	b25b      	sxtb	r3, r3
        uint8_t i2c_address = device_identifier | (a2_pin << 3) | (a1_pin << 2)
 8000312:	723b      	strb	r3, [r7, #8]

        uint8_t i2c_send_data[3];
        i2c_send_data[0] = (uint8_t) eeprom_address & 0xff;
 8000314:	89bb      	ldrh	r3, [r7, #12]
 8000316:	b2db      	uxtb	r3, r3
 8000318:	713b      	strb	r3, [r7, #4]
        i2c_send_data[1] = (uint8_t) 0x79;
 800031a:	2379      	movs	r3, #121	@ 0x79
 800031c:	717b      	strb	r3, [r7, #5]
        i2c_send_data[2] = (uint8_t) 0xAA;
 800031e:	23aa      	movs	r3, #170	@ 0xaa
 8000320:	71bb      	strb	r3, [r7, #6]

        while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2c_address,
 8000322:	e007      	b.n	8000334 <main+0x8c>
                &i2c_send_data[0], sizeof(i2c_send_data), 10000) != HAL_OK)
        {
            /* Error_Handler() function is called when Timeout error occurs.
             When Acknowledge failure occurs (Slave don't acknowledge its address)
             Master restarts communication */
            if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000324:	4831      	ldr	r0, [pc, #196]	@ (80003ec <main+0x144>)
 8000326:	f002 f8bf 	bl	80024a8 <HAL_I2C_GetError>
 800032a:	4603      	mov	r3, r0
 800032c:	2b04      	cmp	r3, #4
 800032e:	d001      	beq.n	8000334 <main+0x8c>
            {
                Error_Handler();
 8000330:	f000 f95a 	bl	80005e8 <Error_Handler>
        while (HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) i2c_address,
 8000334:	7a3b      	ldrb	r3, [r7, #8]
 8000336:	b299      	uxth	r1, r3
 8000338:	1d3a      	adds	r2, r7, #4
 800033a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800033e:	9300      	str	r3, [sp, #0]
 8000340:	2303      	movs	r3, #3
 8000342:	482a      	ldr	r0, [pc, #168]	@ (80003ec <main+0x144>)
 8000344:	f001 fd4a 	bl	8001ddc <HAL_I2C_Master_Transmit>
 8000348:	4603      	mov	r3, r0
                &i2c_send_data[0], sizeof(i2c_send_data), 10000) != HAL_OK)
 800034a:	2b00      	cmp	r3, #0
 800034c:	d1ea      	bne.n	8000324 <main+0x7c>
            }
        }

        HAL_Delay(25);
 800034e:	2019      	movs	r0, #25
 8000350:	f000 fad8 	bl	8000904 <HAL_Delay>

        eeprom_address = 322; // address in eeprom to read from
 8000354:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8000358:	81bb      	strh	r3, [r7, #12]
        read_eeprom = 1;
 800035a:	2301      	movs	r3, #1
 800035c:	73fb      	strb	r3, [r7, #15]
        i2c_address = device_identifier | (a2_pin << 3) | (a1_pin << 2)
 800035e:	7abb      	ldrb	r3, [r7, #10]
 8000360:	00db      	lsls	r3, r3, #3
 8000362:	b25a      	sxtb	r2, r3
 8000364:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000368:	4313      	orrs	r3, r2
 800036a:	b25a      	sxtb	r2, r3
 800036c:	7a7b      	ldrb	r3, [r7, #9]
 800036e:	009b      	lsls	r3, r3, #2
 8000370:	b25b      	sxtb	r3, r3
 8000372:	4313      	orrs	r3, r2
 8000374:	b25a      	sxtb	r2, r3
                | (eeprom_address >> 8) << 1 | read_eeprom;
 8000376:	89bb      	ldrh	r3, [r7, #12]
 8000378:	0a1b      	lsrs	r3, r3, #8
 800037a:	b29b      	uxth	r3, r3
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	b25b      	sxtb	r3, r3
 8000380:	4313      	orrs	r3, r2
 8000382:	b25a      	sxtb	r2, r3
 8000384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000388:	4313      	orrs	r3, r2
 800038a:	b25b      	sxtb	r3, r3
        i2c_address = device_identifier | (a2_pin << 3) | (a1_pin << 2)
 800038c:	723b      	strb	r3, [r7, #8]
        uint8_t i2c_address_write = (uint8_t) (i2c_address & 0xfe);
 800038e:	7a3b      	ldrb	r3, [r7, #8]
 8000390:	f023 0301 	bic.w	r3, r3, #1
 8000394:	71fb      	strb	r3, [r7, #7]

        uint8_t i2c_data_buff;
        while (HAL_I2C_Mem_Read(&hi2c1, (uint16_t) i2c_address_write,
 8000396:	e007      	b.n	80003a8 <main+0x100>
                1, 10000) != HAL_OK)
        {
            /* Error_Handler() function is called when Timeout error occurs.
             When Acknowledge failure occurs (Slave don't acknowledge its address)
             Master restarts communication */
            if (HAL_I2C_GetError(&hi2c1) != HAL_I2C_ERROR_AF)
 8000398:	4814      	ldr	r0, [pc, #80]	@ (80003ec <main+0x144>)
 800039a:	f002 f885 	bl	80024a8 <HAL_I2C_GetError>
 800039e:	4603      	mov	r3, r0
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d001      	beq.n	80003a8 <main+0x100>
            {
                Error_Handler();
 80003a4:	f000 f920 	bl	80005e8 <Error_Handler>
        while (HAL_I2C_Mem_Read(&hi2c1, (uint16_t) i2c_address_write,
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	b299      	uxth	r1, r3
 80003ac:	89ba      	ldrh	r2, [r7, #12]
 80003ae:	f242 7310 	movw	r3, #10000	@ 0x2710
 80003b2:	9302      	str	r3, [sp, #8]
 80003b4:	2301      	movs	r3, #1
 80003b6:	9301      	str	r3, [sp, #4]
 80003b8:	1cfb      	adds	r3, r7, #3
 80003ba:	9300      	str	r3, [sp, #0]
 80003bc:	2301      	movs	r3, #1
 80003be:	480b      	ldr	r0, [pc, #44]	@ (80003ec <main+0x144>)
 80003c0:	f001 fe0a 	bl	8001fd8 <HAL_I2C_Mem_Read>
 80003c4:	4603      	mov	r3, r0
                1, 10000) != HAL_OK)
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1e6      	bne.n	8000398 <main+0xf0>
            }
        }

        uint8_t can_data[1];
        can_data[0] = i2c_data_buff;
 80003ca:	78fb      	ldrb	r3, [r7, #3]
 80003cc:	703b      	strb	r3, [r7, #0]
        TxHeader.DLC = 1;
 80003ce:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <main+0x148>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	611a      	str	r2, [r3, #16]
        HAL_CAN_AddTxMessage(&hcan, &TxHeader, can_data, &TxMailbox);
 80003d4:	463a      	mov	r2, r7
 80003d6:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <main+0x14c>)
 80003d8:	4905      	ldr	r1, [pc, #20]	@ (80003f0 <main+0x148>)
 80003da:	4807      	ldr	r0, [pc, #28]	@ (80003f8 <main+0x150>)
 80003dc:	f000 fcbe 	bl	8000d5c <HAL_CAN_AddTxMessage>

        HAL_Delay(500);
 80003e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003e4:	f000 fa8e 	bl	8000904 <HAL_Delay>
    {
 80003e8:	e76f      	b.n	80002ca <main+0x22>
 80003ea:	bf00      	nop
 80003ec:	20000050 	.word	0x20000050
 80003f0:	200000a4 	.word	0x200000a4
 80003f4:	200000c4 	.word	0x200000c4
 80003f8:	20000028 	.word	0x20000028

080003fc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b090      	sub	sp, #64	@ 0x40
 8000400:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000402:	f107 0318 	add.w	r3, r7, #24
 8000406:	2228      	movs	r2, #40	@ 0x28
 8000408:	2100      	movs	r1, #0
 800040a:	4618      	mov	r0, r3
 800040c:	f002 fff6 	bl	80033fc <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]
 800041c:	611a      	str	r2, [r3, #16]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041e:	2302      	movs	r3, #2
 8000420:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000422:	2301      	movs	r3, #1
 8000424:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000426:	2310      	movs	r3, #16
 8000428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800042a:	2302      	movs	r3, #2
 800042c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800042e:	2300      	movs	r3, #0
 8000430:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000432:	2300      	movs	r3, #0
 8000434:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0318 	add.w	r3, r7, #24
 800043a:	4618      	mov	r0, r3
 800043c:	f002 fbe0 	bl	8002c00 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x4e>
    {
        Error_Handler();
 8000446:	f000 f8cf 	bl	80005e8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	607b      	str	r3, [r7, #4]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000456:	2300      	movs	r3, #0
 8000458:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045a:	2300      	movs	r3, #0
 800045c:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2100      	movs	r1, #0
 8000462:	4618      	mov	r0, r3
 8000464:	f002 fe4e 	bl	8003104 <HAL_RCC_ClockConfig>
 8000468:	4603      	mov	r3, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x76>
    {
        Error_Handler();
 800046e:	f000 f8bb 	bl	80005e8 <Error_Handler>
    }
}
 8000472:	bf00      	nop
 8000474:	3740      	adds	r7, #64	@ 0x40
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <MX_CAN_Init>:
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    /* USER CODE END CAN_Init 0 */

    /* USER CODE BEGIN CAN_Init 1 */

    /* USER CODE END CAN_Init 1 */
    hcan.Instance = CAN1;
 8000480:	4b1b      	ldr	r3, [pc, #108]	@ (80004f0 <MX_CAN_Init+0x74>)
 8000482:	4a1c      	ldr	r2, [pc, #112]	@ (80004f4 <MX_CAN_Init+0x78>)
 8000484:	601a      	str	r2, [r3, #0]
    hcan.Init.Prescaler = 1;
 8000486:	4b1a      	ldr	r3, [pc, #104]	@ (80004f0 <MX_CAN_Init+0x74>)
 8000488:	2201      	movs	r2, #1
 800048a:	605a      	str	r2, [r3, #4]
    hcan.Init.Mode = CAN_MODE_NORMAL;
 800048c:	4b18      	ldr	r3, [pc, #96]	@ (80004f0 <MX_CAN_Init+0x74>)
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
    hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000492:	4b17      	ldr	r3, [pc, #92]	@ (80004f0 <MX_CAN_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
    hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000498:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_CAN_Init+0x74>)
 800049a:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 800049e:	611a      	str	r2, [r3, #16]
    hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004a0:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004a2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80004a6:	615a      	str	r2, [r3, #20]
    hcan.Init.TimeTriggeredMode = DISABLE;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	761a      	strb	r2, [r3, #24]
    hcan.Init.AutoBusOff = DISABLE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	765a      	strb	r2, [r3, #25]
    hcan.Init.AutoWakeUp = DISABLE;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	769a      	strb	r2, [r3, #26]
    hcan.Init.AutoRetransmission = ENABLE;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004bc:	2201      	movs	r2, #1
 80004be:	76da      	strb	r2, [r3, #27]
    hcan.Init.ReceiveFifoLocked = DISABLE;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	771a      	strb	r2, [r3, #28]
    hcan.Init.TransmitFifoPriority = DISABLE;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	775a      	strb	r2, [r3, #29]
    if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004cc:	4808      	ldr	r0, [pc, #32]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004ce:	f000 fa3d 	bl	800094c <HAL_CAN_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_CAN_Init+0x60>
    {
        Error_Handler();
 80004d8:	f000 f886 	bl	80005e8 <Error_Handler>
    }
    /* USER CODE BEGIN CAN_Init 2 */

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 80004dc:	4804      	ldr	r0, [pc, #16]	@ (80004f0 <MX_CAN_Init+0x74>)
 80004de:	f000 fbf9 	bl	8000cd4 <HAL_CAN_Start>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <MX_CAN_Init+0x70>
    {
        /* Start Error */
        Error_Handler();
 80004e8:	f000 f87e 	bl	80005e8 <Error_Handler>
    }

    /* USER CODE END CAN_Init 2 */

}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000028 	.word	0x20000028
 80004f4:	40006400 	.word	0x40006400

080004f8 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 80004fc:	4b12      	ldr	r3, [pc, #72]	@ (8000548 <MX_I2C1_Init+0x50>)
 80004fe:	4a13      	ldr	r2, [pc, #76]	@ (800054c <MX_I2C1_Init+0x54>)
 8000500:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000504:	4a12      	ldr	r2, [pc, #72]	@ (8000550 <MX_I2C1_Init+0x58>)
 8000506:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000508:	4b0f      	ldr	r3, [pc, #60]	@ (8000548 <MX_I2C1_Init+0x50>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000514:	4b0c      	ldr	r3, [pc, #48]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000516:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800051a:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <MX_I2C1_Init+0x50>)
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000522:	4b09      	ldr	r3, [pc, #36]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	@ (8000548 <MX_I2C1_Init+0x50>)
 800052a:	2200      	movs	r2, #0
 800052c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052e:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000530:	2200      	movs	r2, #0
 8000532:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	@ (8000548 <MX_I2C1_Init+0x50>)
 8000536:	f001 fb0d 	bl	8001b54 <HAL_I2C_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8000540:	f000 f852 	bl	80005e8 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	20000050 	.word	0x20000050
 800054c:	40005400 	.word	0x40005400
 8000550:	000186a0 	.word	0x000186a0

08000554 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct =
 800055a:	f107 0310 	add.w	r3, r7, #16
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
    { 0 };
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000568:	4b1d      	ldr	r3, [pc, #116]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a1c      	ldr	r2, [pc, #112]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800056e:	f043 0320 	orr.w	r3, r3, #32
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0320 	and.w	r3, r3, #32
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b14      	ldr	r3, [pc, #80]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	60bb      	str	r3, [r7, #8]
 8000596:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000598:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a10      	ldr	r2, [pc, #64]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 800059e:	f043 0304 	orr.w	r3, r3, #4
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b0e      	ldr	r3, [pc, #56]	@ (80005e0 <MX_GPIO_Init+0x8c>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0304 	and.w	r3, r3, #4
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2104      	movs	r1, #4
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_GPIO_Init+0x90>)
 80005b6:	f001 fa9b 	bl	8001af0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB2 */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005ba:	2304      	movs	r3, #4
 80005bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2302      	movs	r3, #2
 80005c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ca:	f107 0310 	add.w	r3, r7, #16
 80005ce:	4619      	mov	r1, r3
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <MX_GPIO_Init+0x90>)
 80005d2:	f001 f909 	bl	80017e8 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010c00 	.word	0x40010c00

080005e8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ec:	b672      	cpsid	i
}
 80005ee:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <Error_Handler+0x8>

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005fa:	4b15      	ldr	r3, [pc, #84]	@ (8000650 <HAL_MspInit+0x5c>)
 80005fc:	699b      	ldr	r3, [r3, #24]
 80005fe:	4a14      	ldr	r2, [pc, #80]	@ (8000650 <HAL_MspInit+0x5c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6193      	str	r3, [r2, #24]
 8000606:	4b12      	ldr	r3, [pc, #72]	@ (8000650 <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x5c>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	4a0e      	ldr	r2, [pc, #56]	@ (8000650 <HAL_MspInit+0x5c>)
 8000618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061c:	61d3      	str	r3, [r2, #28]
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800062a:	4b0a      	ldr	r3, [pc, #40]	@ (8000654 <HAL_MspInit+0x60>)
 800062c:	685b      	ldr	r3, [r3, #4]
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000636:	60fb      	str	r3, [r7, #12]
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800063e:	60fb      	str	r3, [r7, #12]
 8000640:	4a04      	ldr	r2, [pc, #16]	@ (8000654 <HAL_MspInit+0x60>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	bf00      	nop
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	40021000 	.word	0x40021000
 8000654:	40010000 	.word	0x40010000

08000658 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	f107 0310 	add.w	r3, r7, #16
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a20      	ldr	r2, [pc, #128]	@ (80006f4 <HAL_CAN_MspInit+0x9c>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d139      	bne.n	80006ec <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000678:	4b1f      	ldr	r3, [pc, #124]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 800067a:	69db      	ldr	r3, [r3, #28]
 800067c:	4a1e      	ldr	r2, [pc, #120]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 800067e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000682:	61d3      	str	r3, [r2, #28]
 8000684:	4b1c      	ldr	r3, [pc, #112]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 8000686:	69db      	ldr	r3, [r3, #28]
 8000688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b19      	ldr	r3, [pc, #100]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	4a18      	ldr	r2, [pc, #96]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 8000696:	f043 0304 	orr.w	r3, r3, #4
 800069a:	6193      	str	r3, [r2, #24]
 800069c:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <HAL_CAN_MspInit+0xa0>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f003 0304 	and.w	r3, r3, #4
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80006a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80006ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b6:	f107 0310 	add.w	r3, r7, #16
 80006ba:	4619      	mov	r1, r3
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <HAL_CAN_MspInit+0xa4>)
 80006be:	f001 f893 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80006c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c8:	2302      	movs	r3, #2
 80006ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006cc:	2303      	movs	r3, #3
 80006ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	4619      	mov	r1, r3
 80006d6:	4809      	ldr	r0, [pc, #36]	@ (80006fc <HAL_CAN_MspInit+0xa4>)
 80006d8:	f001 f886 	bl	80017e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2100      	movs	r1, #0
 80006e0:	2014      	movs	r0, #20
 80006e2:	f001 f84a 	bl	800177a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80006e6:	2014      	movs	r0, #20
 80006e8:	f001 f863 	bl	80017b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40006400 	.word	0x40006400
 80006f8:	40021000 	.word	0x40021000
 80006fc:	40010800 	.word	0x40010800

08000700 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b088      	sub	sp, #32
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	f107 0310 	add.w	r3, r7, #16
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <HAL_I2C_MspInit+0x70>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d123      	bne.n	8000768 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 8000726:	f043 0308 	orr.w	r3, r3, #8
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0308 	and.w	r3, r3, #8
 8000734:	60fb      	str	r3, [r7, #12]
 8000736:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000738:	23c0      	movs	r3, #192	@ 0xc0
 800073a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	@ (8000778 <HAL_I2C_MspInit+0x78>)
 800074c:	f001 f84c 	bl	80017e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000750:	4b08      	ldr	r3, [pc, #32]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 8000752:	69db      	ldr	r3, [r3, #28]
 8000754:	4a07      	ldr	r2, [pc, #28]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 8000756:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800075a:	61d3      	str	r3, [r2, #28]
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <HAL_I2C_MspInit+0x74>)
 800075e:	69db      	ldr	r3, [r3, #28]
 8000760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000768:	bf00      	nop
 800076a:	3720      	adds	r7, #32
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	40005400 	.word	0x40005400
 8000774:	40021000 	.word	0x40021000
 8000778:	40010c00 	.word	0x40010c00

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <MemManage_Handler+0x4>

08000794 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <BusFault_Handler+0x4>

0800079c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a0:	bf00      	nop
 80007a2:	e7fd      	b.n	80007a0 <UsageFault_Handler+0x4>

080007a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b4:	bf00      	nop
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bc80      	pop	{r7}
 80007ba:	4770      	bx	lr

080007bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bc80      	pop	{r7}
 80007c6:	4770      	bx	lr

080007c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007cc:	f000 f87e 	bl	80008cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80007d8:	4802      	ldr	r0, [pc, #8]	@ (80007e4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80007da:	f000 fcd4 	bl	8001186 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000028 	.word	0x20000028

080007e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007f4:	f7ff fff8 	bl	80007e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007f8:	480b      	ldr	r0, [pc, #44]	@ (8000828 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007fa:	490c      	ldr	r1, [pc, #48]	@ (800082c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007fc:	4a0c      	ldr	r2, [pc, #48]	@ (8000830 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000800:	e002      	b.n	8000808 <LoopCopyDataInit>

08000802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000806:	3304      	adds	r3, #4

08000808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800080a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800080c:	d3f9      	bcc.n	8000802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800080e:	4a09      	ldr	r2, [pc, #36]	@ (8000834 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000810:	4c09      	ldr	r4, [pc, #36]	@ (8000838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000814:	e001      	b.n	800081a <LoopFillZerobss>

08000816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000818:	3204      	adds	r2, #4

0800081a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800081a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800081c:	d3fb      	bcc.n	8000816 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800081e:	f002 fdf5 	bl	800340c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000822:	f7ff fd41 	bl	80002a8 <main>
  bx lr
 8000826:	4770      	bx	lr
  ldr r0, =_sdata
 8000828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800082c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000830:	080034a0 	.word	0x080034a0
  ldr r2, =_sbss
 8000834:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000838:	20000118 	.word	0x20000118

0800083c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800083c:	e7fe      	b.n	800083c <ADC1_2_IRQHandler>
	...

08000840 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000844:	4b08      	ldr	r3, [pc, #32]	@ (8000868 <HAL_Init+0x28>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a07      	ldr	r2, [pc, #28]	@ (8000868 <HAL_Init+0x28>)
 800084a:	f043 0310 	orr.w	r3, r3, #16
 800084e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000850:	2003      	movs	r0, #3
 8000852:	f000 ff87 	bl	8001764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000856:	200f      	movs	r0, #15
 8000858:	f000 f808 	bl	800086c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800085c:	f7ff feca 	bl	80005f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000860:	2300      	movs	r3, #0
}
 8000862:	4618      	mov	r0, r3
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	40022000 	.word	0x40022000

0800086c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000874:	4b12      	ldr	r3, [pc, #72]	@ (80008c0 <HAL_InitTick+0x54>)
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <HAL_InitTick+0x58>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	4619      	mov	r1, r3
 800087e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000882:	fbb3 f3f1 	udiv	r3, r3, r1
 8000886:	fbb2 f3f3 	udiv	r3, r2, r3
 800088a:	4618      	mov	r0, r3
 800088c:	f000 ff9f 	bl	80017ce <HAL_SYSTICK_Config>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000896:	2301      	movs	r3, #1
 8000898:	e00e      	b.n	80008b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2b0f      	cmp	r3, #15
 800089e:	d80a      	bhi.n	80008b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008a0:	2200      	movs	r2, #0
 80008a2:	6879      	ldr	r1, [r7, #4]
 80008a4:	f04f 30ff 	mov.w	r0, #4294967295
 80008a8:	f000 ff67 	bl	800177a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008ac:	4a06      	ldr	r2, [pc, #24]	@ (80008c8 <HAL_InitTick+0x5c>)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008b2:	2300      	movs	r3, #0
 80008b4:	e000      	b.n	80008b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008b6:	2301      	movs	r3, #1
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	20000000 	.word	0x20000000
 80008c4:	20000008 	.word	0x20000008
 80008c8:	20000004 	.word	0x20000004

080008cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008d0:	4b05      	ldr	r3, [pc, #20]	@ (80008e8 <HAL_IncTick+0x1c>)
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	461a      	mov	r2, r3
 80008d6:	4b05      	ldr	r3, [pc, #20]	@ (80008ec <HAL_IncTick+0x20>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4413      	add	r3, r2
 80008dc:	4a03      	ldr	r2, [pc, #12]	@ (80008ec <HAL_IncTick+0x20>)
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr
 80008e8:	20000008 	.word	0x20000008
 80008ec:	20000114 	.word	0x20000114

080008f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  return uwTick;
 80008f4:	4b02      	ldr	r3, [pc, #8]	@ (8000900 <HAL_GetTick+0x10>)
 80008f6:	681b      	ldr	r3, [r3, #0]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	20000114 	.word	0x20000114

08000904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800090c:	f7ff fff0 	bl	80008f0 <HAL_GetTick>
 8000910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800091c:	d005      	beq.n	800092a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <HAL_Delay+0x44>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	461a      	mov	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	4413      	add	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800092a:	bf00      	nop
 800092c:	f7ff ffe0 	bl	80008f0 <HAL_GetTick>
 8000930:	4602      	mov	r2, r0
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	68fa      	ldr	r2, [r7, #12]
 8000938:	429a      	cmp	r2, r3
 800093a:	d8f7      	bhi.n	800092c <HAL_Delay+0x28>
  {
  }
}
 800093c:	bf00      	nop
 800093e:	bf00      	nop
 8000940:	3710      	adds	r7, #16
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000008 	.word	0x20000008

0800094c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d101      	bne.n	800095e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800095a:	2301      	movs	r3, #1
 800095c:	e0ed      	b.n	8000b3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	2b00      	cmp	r3, #0
 8000968:	d102      	bne.n	8000970 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800096a:	6878      	ldr	r0, [r7, #4]
 800096c:	f7ff fe74 	bl	8000658 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f042 0201 	orr.w	r2, r2, #1
 800097e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000980:	f7ff ffb6 	bl	80008f0 <HAL_GetTick>
 8000984:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000986:	e012      	b.n	80009ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000988:	f7ff ffb2 	bl	80008f0 <HAL_GetTick>
 800098c:	4602      	mov	r2, r0
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	1ad3      	subs	r3, r2, r3
 8000992:	2b0a      	cmp	r3, #10
 8000994:	d90b      	bls.n	80009ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800099a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2205      	movs	r2, #5
 80009a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
 80009ac:	e0c5      	b.n	8000b3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0e5      	beq.n	8000988 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f022 0202 	bic.w	r2, r2, #2
 80009ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80009cc:	f7ff ff90 	bl	80008f0 <HAL_GetTick>
 80009d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009d2:	e012      	b.n	80009fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80009d4:	f7ff ff8c 	bl	80008f0 <HAL_GetTick>
 80009d8:	4602      	mov	r2, r0
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	2b0a      	cmp	r3, #10
 80009e0:	d90b      	bls.n	80009fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	2205      	movs	r2, #5
 80009f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	e09f      	b.n	8000b3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	f003 0302 	and.w	r3, r3, #2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d1e5      	bne.n	80009d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	7e1b      	ldrb	r3, [r3, #24]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d108      	bne.n	8000a22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	e007      	b.n	8000a32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	7e5b      	ldrb	r3, [r3, #25]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d108      	bne.n	8000a4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	681a      	ldr	r2, [r3, #0]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	e007      	b.n	8000a5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7e9b      	ldrb	r3, [r3, #26]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d108      	bne.n	8000a76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f042 0220 	orr.w	r2, r2, #32
 8000a72:	601a      	str	r2, [r3, #0]
 8000a74:	e007      	b.n	8000a86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f022 0220 	bic.w	r2, r2, #32
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	7edb      	ldrb	r3, [r3, #27]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d108      	bne.n	8000aa0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f022 0210 	bic.w	r2, r2, #16
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	e007      	b.n	8000ab0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f042 0210 	orr.w	r2, r2, #16
 8000aae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7f1b      	ldrb	r3, [r3, #28]
 8000ab4:	2b01      	cmp	r3, #1
 8000ab6:	d108      	bne.n	8000aca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f042 0208 	orr.w	r2, r2, #8
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	e007      	b.n	8000ada <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f022 0208 	bic.w	r2, r2, #8
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7f5b      	ldrb	r3, [r3, #29]
 8000ade:	2b01      	cmp	r3, #1
 8000ae0:	d108      	bne.n	8000af4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f042 0204 	orr.w	r2, r2, #4
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	e007      	b.n	8000b04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f022 0204 	bic.w	r2, r2, #4
 8000b02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	431a      	orrs	r2, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	ea42 0103 	orr.w	r1, r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	1e5a      	subs	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2201      	movs	r2, #1
 8000b34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000b42:	b480      	push	{r7}
 8000b44:	b087      	sub	sp, #28
 8000b46:	af00      	add	r7, sp, #0
 8000b48:	6078      	str	r0, [r7, #4]
 8000b4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000b5a:	7cfb      	ldrb	r3, [r7, #19]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d003      	beq.n	8000b68 <HAL_CAN_ConfigFilter+0x26>
 8000b60:	7cfb      	ldrb	r3, [r7, #19]
 8000b62:	2b02      	cmp	r3, #2
 8000b64:	f040 80aa 	bne.w	8000cbc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000b6e:	f043 0201 	orr.w	r2, r3, #1
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	695b      	ldr	r3, [r3, #20]
 8000b7c:	f003 031f 	and.w	r3, r3, #31
 8000b80:	2201      	movs	r2, #1
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	69db      	ldr	r3, [r3, #28]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d123      	bne.n	8000bea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	43db      	mvns	r3, r3
 8000bac:	401a      	ands	r2, r3
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000bc4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	3248      	adds	r2, #72	@ 0x48
 8000bca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000bde:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000be0:	6979      	ldr	r1, [r7, #20]
 8000be2:	3348      	adds	r3, #72	@ 0x48
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	440b      	add	r3, r1
 8000be8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d122      	bne.n	8000c38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	431a      	orrs	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c0e:	683a      	ldr	r2, [r7, #0]
 8000c10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000c12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	3248      	adds	r2, #72	@ 0x48
 8000c18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000c2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000c2e:	6979      	ldr	r1, [r7, #20]
 8000c30:	3348      	adds	r3, #72	@ 0x48
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	440b      	add	r3, r1
 8000c36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	401a      	ands	r2, r3
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000c52:	e007      	b.n	8000c64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	431a      	orrs	r2, r3
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	691b      	ldr	r3, [r3, #16]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d109      	bne.n	8000c80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	43db      	mvns	r3, r3
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c7e:	e007      	b.n	8000c90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6a1b      	ldr	r3, [r3, #32]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d107      	bne.n	8000ca8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	431a      	orrs	r2, r3
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000cae:	f023 0201 	bic.w	r2, r3, #1
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	e006      	b.n	8000cca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
  }
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d12e      	bne.n	8000d46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2202      	movs	r2, #2
 8000cec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f022 0201 	bic.w	r2, r2, #1
 8000cfe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000d00:	f7ff fdf6 	bl	80008f0 <HAL_GetTick>
 8000d04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d06:	e012      	b.n	8000d2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d08:	f7ff fdf2 	bl	80008f0 <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b0a      	cmp	r3, #10
 8000d14:	d90b      	bls.n	8000d2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2205      	movs	r2, #5
 8000d26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e012      	b.n	8000d54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0301 	and.w	r3, r3, #1
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d1e5      	bne.n	8000d08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8000d42:	2300      	movs	r3, #0
 8000d44:	e006      	b.n	8000d54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d4a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
  }
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b089      	sub	sp, #36	@ 0x24
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	60f8      	str	r0, [r7, #12]
 8000d64:	60b9      	str	r1, [r7, #8]
 8000d66:	607a      	str	r2, [r7, #4]
 8000d68:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d70:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000d7a:	7ffb      	ldrb	r3, [r7, #31]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d003      	beq.n	8000d88 <HAL_CAN_AddTxMessage+0x2c>
 8000d80:	7ffb      	ldrb	r3, [r7, #31]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	f040 80ad 	bne.w	8000ee2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d10a      	bne.n	8000da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d105      	bne.n	8000da8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f000 8095 	beq.w	8000ed2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	0e1b      	lsrs	r3, r3, #24
 8000dac:	f003 0303 	and.w	r3, r3, #3
 8000db0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000db2:	2201      	movs	r2, #1
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10d      	bne.n	8000de0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000dce:	68f9      	ldr	r1, [r7, #12]
 8000dd0:	6809      	ldr	r1, [r1, #0]
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	3318      	adds	r3, #24
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	440b      	add	r3, r1
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	e00f      	b.n	8000e00 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000dea:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df0:	68f9      	ldr	r1, [r7, #12]
 8000df2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000df4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3318      	adds	r3, #24
 8000dfa:	011b      	lsls	r3, r3, #4
 8000dfc:	440b      	add	r3, r1
 8000dfe:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	6819      	ldr	r1, [r3, #0]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	691a      	ldr	r2, [r3, #16]
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3318      	adds	r3, #24
 8000e0c:	011b      	lsls	r3, r3, #4
 8000e0e:	440b      	add	r3, r1
 8000e10:	3304      	adds	r3, #4
 8000e12:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	7d1b      	ldrb	r3, [r3, #20]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d111      	bne.n	8000e40 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	3318      	adds	r3, #24
 8000e24:	011b      	lsls	r3, r3, #4
 8000e26:	4413      	add	r3, r2
 8000e28:	3304      	adds	r3, #4
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	6811      	ldr	r1, [r2, #0]
 8000e30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	3318      	adds	r3, #24
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	440b      	add	r3, r1
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3307      	adds	r3, #7
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	061a      	lsls	r2, r3, #24
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3306      	adds	r3, #6
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3305      	adds	r3, #5
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	021b      	lsls	r3, r3, #8
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	687a      	ldr	r2, [r7, #4]
 8000e5e:	3204      	adds	r2, #4
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	4610      	mov	r0, r2
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	6811      	ldr	r1, [r2, #0]
 8000e68:	ea43 0200 	orr.w	r2, r3, r0
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	011b      	lsls	r3, r3, #4
 8000e70:	440b      	add	r3, r1
 8000e72:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000e76:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3303      	adds	r3, #3
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	061a      	lsls	r2, r3, #24
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3302      	adds	r3, #2
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	021b      	lsls	r3, r3, #8
 8000e92:	4313      	orrs	r3, r2
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	7812      	ldrb	r2, [r2, #0]
 8000e98:	4610      	mov	r0, r2
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	6811      	ldr	r1, [r2, #0]
 8000e9e:	ea43 0200 	orr.w	r2, r3, r0
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	011b      	lsls	r3, r3, #4
 8000ea6:	440b      	add	r3, r1
 8000ea8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000eac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3318      	adds	r3, #24
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	6811      	ldr	r1, [r2, #0]
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3318      	adds	r3, #24
 8000ec8:	011b      	lsls	r3, r3, #4
 8000eca:	440b      	add	r3, r1
 8000ecc:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e00e      	b.n	8000ef0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e006      	b.n	8000ef0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ee6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
  }
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3724      	adds	r7, #36	@ 0x24
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr

08000efa <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000efa:	b480      	push	{r7}
 8000efc:	b087      	sub	sp, #28
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f0e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000f10:	7dfb      	ldrb	r3, [r7, #23]
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d003      	beq.n	8000f1e <HAL_CAN_GetRxMessage+0x24>
 8000f16:	7dfb      	ldrb	r3, [r7, #23]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	f040 8103 	bne.w	8001124 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d10e      	bne.n	8000f42 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d116      	bne.n	8000f60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e0f7      	b.n	8001132 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	f003 0303 	and.w	r3, r3, #3
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d107      	bne.n	8000f60 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f54:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e0e8      	b.n	8001132 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	331b      	adds	r3, #27
 8000f68:	011b      	lsls	r3, r3, #4
 8000f6a:	4413      	add	r3, r2
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0204 	and.w	r2, r3, #4
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d10c      	bne.n	8000f98 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	331b      	adds	r3, #27
 8000f86:	011b      	lsls	r3, r3, #4
 8000f88:	4413      	add	r3, r2
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0d5b      	lsrs	r3, r3, #21
 8000f8e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	e00b      	b.n	8000fb0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	331b      	adds	r3, #27
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4413      	add	r3, r2
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	08db      	lsrs	r3, r3, #3
 8000fa8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	331b      	adds	r3, #27
 8000fb8:	011b      	lsls	r3, r3, #4
 8000fba:	4413      	add	r3, r2
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0202 	and.w	r2, r3, #2
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	331b      	adds	r3, #27
 8000fce:	011b      	lsls	r3, r3, #4
 8000fd0:	4413      	add	r3, r2
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2208      	movs	r2, #8
 8000fe2:	611a      	str	r2, [r3, #16]
 8000fe4:	e00b      	b.n	8000ffe <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	331b      	adds	r3, #27
 8000fee:	011b      	lsls	r3, r3, #4
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 020f 	and.w	r2, r3, #15
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	331b      	adds	r3, #27
 8001006:	011b      	lsls	r3, r3, #4
 8001008:	4413      	add	r3, r2
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	b2da      	uxtb	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	331b      	adds	r3, #27
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4413      	add	r3, r2
 8001022:	3304      	adds	r3, #4
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	0c1b      	lsrs	r3, r3, #16
 8001028:	b29a      	uxth	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	011b      	lsls	r3, r3, #4
 8001036:	4413      	add	r3, r2
 8001038:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	b2da      	uxtb	r2, r3
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	011b      	lsls	r3, r3, #4
 800104c:	4413      	add	r3, r2
 800104e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	0a1a      	lsrs	r2, r3, #8
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3301      	adds	r3, #1
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	011b      	lsls	r3, r3, #4
 8001066:	4413      	add	r3, r2
 8001068:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	0c1a      	lsrs	r2, r3, #16
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	3302      	adds	r3, #2
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	011b      	lsls	r3, r3, #4
 8001080:	4413      	add	r3, r2
 8001082:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	0e1a      	lsrs	r2, r3, #24
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	3303      	adds	r3, #3
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	011b      	lsls	r3, r3, #4
 800109a:	4413      	add	r3, r2
 800109c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	3304      	adds	r3, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	011b      	lsls	r3, r3, #4
 80010b2:	4413      	add	r3, r2
 80010b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	0a1a      	lsrs	r2, r3, #8
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3305      	adds	r3, #5
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	011b      	lsls	r3, r3, #4
 80010cc:	4413      	add	r3, r2
 80010ce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	0c1a      	lsrs	r2, r3, #16
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	3306      	adds	r3, #6
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	0e1a      	lsrs	r2, r3, #24
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	3307      	adds	r3, #7
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d108      	bne.n	8001110 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f042 0220 	orr.w	r2, r2, #32
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	e007      	b.n	8001120 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	691a      	ldr	r2, [r3, #16]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f042 0220 	orr.w	r2, r2, #32
 800111e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	e006      	b.n	8001132 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001128:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
  }
}
 8001132:	4618      	mov	r0, r3
 8001134:	371c      	adds	r7, #28
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr

0800113c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	f893 3020 	ldrb.w	r3, [r3, #32]
 800114c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d002      	beq.n	800115a <HAL_CAN_ActivateNotification+0x1e>
 8001154:	7bfb      	ldrb	r3, [r7, #15]
 8001156:	2b02      	cmp	r3, #2
 8001158:	d109      	bne.n	800116e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6959      	ldr	r1, [r3, #20]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800116a:	2300      	movs	r3, #0
 800116c:	e006      	b.n	800117c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001172:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
  }
}
 800117c:	4618      	mov	r0, r3
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b08a      	sub	sp, #40	@ 0x28
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800118e:	2300      	movs	r3, #0
 8001190:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	691b      	ldr	r3, [r3, #16]
 80011b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d07c      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d023      	beq.n	800121e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2201      	movs	r2, #1
 80011dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f983 	bl	80014f4 <HAL_CAN_TxMailbox0CompleteCallback>
 80011ee:	e016      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f003 0304 	and.w	r3, r3, #4
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
 8001202:	e00c      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	e002      	b.n	800121e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f986 	bl	800152a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001224:	2b00      	cmp	r3, #0
 8001226:	d024      	beq.n	8001272 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001230:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f962 	bl	8001506 <HAL_CAN_TxMailbox1CompleteCallback>
 8001242:	e016      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800124a:	2b00      	cmp	r3, #0
 800124c:	d004      	beq.n	8001258 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800124e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001250:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001254:	627b      	str	r3, [r7, #36]	@ 0x24
 8001256:	e00c      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800125e:	2b00      	cmp	r3, #0
 8001260:	d004      	beq.n	800126c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
 800126a:	e002      	b.n	8001272 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 f965 	bl	800153c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d024      	beq.n	80012c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001284:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001290:	6878      	ldr	r0, [r7, #4]
 8001292:	f000 f941 	bl	8001518 <HAL_CAN_TxMailbox2CompleteCallback>
 8001296:	e016      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d004      	beq.n	80012ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80012aa:	e00c      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80012be:	e002      	b.n	80012c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 f944 	bl	800154e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80012c6:	6a3b      	ldr	r3, [r7, #32]
 80012c8:	f003 0308 	and.w	r3, r3, #8
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d00c      	beq.n	80012ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	f003 0310 	and.w	r3, r3, #16
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d007      	beq.n	80012ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80012da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2210      	movs	r2, #16
 80012e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80012ea:	6a3b      	ldr	r3, [r7, #32]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00b      	beq.n	800130c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2208      	movs	r2, #8
 8001304:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f000 f92a 	bl	8001560 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800130c:	6a3b      	ldr	r3, [r7, #32]
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	2b00      	cmp	r3, #0
 8001314:	d009      	beq.n	800132a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d002      	beq.n	800132a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7fe ff95 	bl	8000254 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d007      	beq.n	800134e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800133e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001340:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2210      	movs	r2, #16
 800134c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800134e:	6a3b      	ldr	r3, [r7, #32]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	2b00      	cmp	r3, #0
 8001356:	d00b      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	2208      	movs	r2, #8
 8001368:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f000 f90a 	bl	8001584 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	2b00      	cmp	r3, #0
 8001378:	d009      	beq.n	800138e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b00      	cmp	r3, #0
 8001386:	d002      	beq.n	800138e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f8f2 	bl	8001572 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800138e:	6a3b      	ldr	r3, [r7, #32]
 8001390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d00b      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d006      	beq.n	80013b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	2210      	movs	r2, #16
 80013a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f8f3 	bl	8001596 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2208      	movs	r2, #8
 80013ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f8eb 	bl	80015a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07b      	beq.n	80014d4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d072      	beq.n	80014cc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013e6:	6a3b      	ldr	r3, [r7, #32]
 80013e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d008      	beq.n	8001402 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80013fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001402:	6a3b      	ldr	r3, [r7, #32]
 8001404:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001408:	2b00      	cmp	r3, #0
 800140a:	d008      	beq.n	800141e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d003      	beq.n	800141e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800142e:	2b00      	cmp	r3, #0
 8001430:	d003      	beq.n	800143a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001440:	2b00      	cmp	r3, #0
 8001442:	d043      	beq.n	80014cc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800144a:	2b00      	cmp	r3, #0
 800144c:	d03e      	beq.n	80014cc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001454:	2b60      	cmp	r3, #96	@ 0x60
 8001456:	d02b      	beq.n	80014b0 <HAL_CAN_IRQHandler+0x32a>
 8001458:	2b60      	cmp	r3, #96	@ 0x60
 800145a:	d82e      	bhi.n	80014ba <HAL_CAN_IRQHandler+0x334>
 800145c:	2b50      	cmp	r3, #80	@ 0x50
 800145e:	d022      	beq.n	80014a6 <HAL_CAN_IRQHandler+0x320>
 8001460:	2b50      	cmp	r3, #80	@ 0x50
 8001462:	d82a      	bhi.n	80014ba <HAL_CAN_IRQHandler+0x334>
 8001464:	2b40      	cmp	r3, #64	@ 0x40
 8001466:	d019      	beq.n	800149c <HAL_CAN_IRQHandler+0x316>
 8001468:	2b40      	cmp	r3, #64	@ 0x40
 800146a:	d826      	bhi.n	80014ba <HAL_CAN_IRQHandler+0x334>
 800146c:	2b30      	cmp	r3, #48	@ 0x30
 800146e:	d010      	beq.n	8001492 <HAL_CAN_IRQHandler+0x30c>
 8001470:	2b30      	cmp	r3, #48	@ 0x30
 8001472:	d822      	bhi.n	80014ba <HAL_CAN_IRQHandler+0x334>
 8001474:	2b10      	cmp	r3, #16
 8001476:	d002      	beq.n	800147e <HAL_CAN_IRQHandler+0x2f8>
 8001478:	2b20      	cmp	r3, #32
 800147a:	d005      	beq.n	8001488 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800147c:	e01d      	b.n	80014ba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800147e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001480:	f043 0308 	orr.w	r3, r3, #8
 8001484:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001486:	e019      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001490:	e014      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	f043 0320 	orr.w	r3, r3, #32
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800149a:	e00f      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014a4:	e00a      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014ae:	e005      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80014b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80014b8:	e000      	b.n	80014bc <HAL_CAN_IRQHandler+0x336>
            break;
 80014ba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80014ca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2204      	movs	r2, #4
 80014d2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80014d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d008      	beq.n	80014ec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f867 	bl	80015ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80014ec:	bf00      	nop
 80014ee:	3728      	adds	r7, #40	@ 0x28
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr

08001506 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001506:	b480      	push	{r7}
 8001508:	b083      	sub	sp, #12
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	bc80      	pop	{r7}
 8001528:	4770      	bx	lr

0800152a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001532:	bf00      	nop
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800154e:	b480      	push	{r7}
 8001550:	b083      	sub	sp, #12
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr

08001572 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr

08001596 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr

080015ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fe:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	60d3      	str	r3, [r2, #12]
}
 8001604:	bf00      	nop
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4906      	ldr	r1, [pc, #24]	@ (8001664 <__NVIC_EnableIRQ+0x34>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100

08001668 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	6039      	str	r1, [r7, #0]
 8001672:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001674:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001678:	2b00      	cmp	r3, #0
 800167a:	db0a      	blt.n	8001692 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	b2da      	uxtb	r2, r3
 8001680:	490c      	ldr	r1, [pc, #48]	@ (80016b4 <__NVIC_SetPriority+0x4c>)
 8001682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001686:	0112      	lsls	r2, r2, #4
 8001688:	b2d2      	uxtb	r2, r2
 800168a:	440b      	add	r3, r1
 800168c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001690:	e00a      	b.n	80016a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4908      	ldr	r1, [pc, #32]	@ (80016b8 <__NVIC_SetPriority+0x50>)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	3b04      	subs	r3, #4
 80016a0:	0112      	lsls	r2, r2, #4
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	440b      	add	r3, r1
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000e100 	.word	0xe000e100
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b089      	sub	sp, #36	@ 0x24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	f1c3 0307 	rsb	r3, r3, #7
 80016d6:	2b04      	cmp	r3, #4
 80016d8:	bf28      	it	cs
 80016da:	2304      	movcs	r3, #4
 80016dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	3304      	adds	r3, #4
 80016e2:	2b06      	cmp	r3, #6
 80016e4:	d902      	bls.n	80016ec <NVIC_EncodePriority+0x30>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	3b03      	subs	r3, #3
 80016ea:	e000      	b.n	80016ee <NVIC_EncodePriority+0x32>
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43da      	mvns	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	401a      	ands	r2, r3
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001704:	f04f 31ff 	mov.w	r1, #4294967295
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa01 f303 	lsl.w	r3, r1, r3
 800170e:	43d9      	mvns	r1, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001714:	4313      	orrs	r3, r2
         );
}
 8001716:	4618      	mov	r0, r3
 8001718:	3724      	adds	r7, #36	@ 0x24
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr

08001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	3b01      	subs	r3, #1
 800172c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001730:	d301      	bcc.n	8001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001732:	2301      	movs	r3, #1
 8001734:	e00f      	b.n	8001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <SysTick_Config+0x40>)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800173e:	210f      	movs	r1, #15
 8001740:	f04f 30ff 	mov.w	r0, #4294967295
 8001744:	f7ff ff90 	bl	8001668 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001748:	4b05      	ldr	r3, [pc, #20]	@ (8001760 <SysTick_Config+0x40>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800174e:	4b04      	ldr	r3, [pc, #16]	@ (8001760 <SysTick_Config+0x40>)
 8001750:	2207      	movs	r2, #7
 8001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	e000e010 	.word	0xe000e010

08001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f7ff ff2d 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
 8001786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001788:	2300      	movs	r3, #0
 800178a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800178c:	f7ff ff42 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	68b9      	ldr	r1, [r7, #8]
 8001796:	6978      	ldr	r0, [r7, #20]
 8001798:	f7ff ff90 	bl	80016bc <NVIC_EncodePriority>
 800179c:	4602      	mov	r2, r0
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff5f 	bl	8001668 <__NVIC_SetPriority>
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b082      	sub	sp, #8
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff35 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffa2 	bl	8001720 <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b08b      	sub	sp, #44	@ 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e169      	b.n	8001ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017fc:	2201      	movs	r2, #1
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8158 	bne.w	8001aca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a9a      	ldr	r2, [pc, #616]	@ (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d05e      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001824:	4a98      	ldr	r2, [pc, #608]	@ (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d875      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800182a:	4a98      	ldr	r2, [pc, #608]	@ (8001a8c <HAL_GPIO_Init+0x2a4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d058      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001830:	4a96      	ldr	r2, [pc, #600]	@ (8001a8c <HAL_GPIO_Init+0x2a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d86f      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001836:	4a96      	ldr	r2, [pc, #600]	@ (8001a90 <HAL_GPIO_Init+0x2a8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d052      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 800183c:	4a94      	ldr	r2, [pc, #592]	@ (8001a90 <HAL_GPIO_Init+0x2a8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d869      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001842:	4a94      	ldr	r2, [pc, #592]	@ (8001a94 <HAL_GPIO_Init+0x2ac>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d04c      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001848:	4a92      	ldr	r2, [pc, #584]	@ (8001a94 <HAL_GPIO_Init+0x2ac>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d863      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800184e:	4a92      	ldr	r2, [pc, #584]	@ (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d046      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001854:	4a90      	ldr	r2, [pc, #576]	@ (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d85d      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d82a      	bhi.n	80018b4 <HAL_GPIO_Init+0xcc>
 800185e:	2b12      	cmp	r3, #18
 8001860:	d859      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001862:	a201      	add	r2, pc, #4	@ (adr r2, 8001868 <HAL_GPIO_Init+0x80>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018bd 	.word	0x080018bd
 8001870:	080018cf 	.word	0x080018cf
 8001874:	08001911 	.word	0x08001911
 8001878:	08001917 	.word	0x08001917
 800187c:	08001917 	.word	0x08001917
 8001880:	08001917 	.word	0x08001917
 8001884:	08001917 	.word	0x08001917
 8001888:	08001917 	.word	0x08001917
 800188c:	08001917 	.word	0x08001917
 8001890:	08001917 	.word	0x08001917
 8001894:	08001917 	.word	0x08001917
 8001898:	08001917 	.word	0x08001917
 800189c:	08001917 	.word	0x08001917
 80018a0:	08001917 	.word	0x08001917
 80018a4:	08001917 	.word	0x08001917
 80018a8:	08001917 	.word	0x08001917
 80018ac:	080018c5 	.word	0x080018c5
 80018b0:	080018d9 	.word	0x080018d9
 80018b4:	4a79      	ldr	r2, [pc, #484]	@ (8001a9c <HAL_GPIO_Init+0x2b4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ba:	e02c      	b.n	8001916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e029      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	3304      	adds	r3, #4
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e024      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3308      	adds	r3, #8
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e01f      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	330c      	adds	r3, #12
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e01a      	b.n	8001918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ea:	2304      	movs	r3, #4
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e013      	b.n	8001918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	611a      	str	r2, [r3, #16]
          break;
 8001902:	e009      	b.n	8001918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	615a      	str	r2, [r3, #20]
          break;
 800190e:	e003      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x130>
          break;
 8001916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	@ 0xff
 800191c:	d801      	bhi.n	8001922 <HAL_GPIO_Init+0x13a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_Init+0x13e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	@ 0xff
 800192c:	d802      	bhi.n	8001934 <HAL_GPIO_Init+0x14c>
 800192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x152>
 8001934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001936:	3b08      	subs	r3, #8
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	210f      	movs	r1, #15
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80b1 	beq.w	8001aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001968:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa0 <HAL_GPIO_Init+0x2b8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa0 <HAL_GPIO_Init+0x2b8>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b4a      	ldr	r3, [pc, #296]	@ (8001aa0 <HAL_GPIO_Init+0x2b8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001980:	4a48      	ldr	r2, [pc, #288]	@ (8001aa4 <HAL_GPIO_Init+0x2bc>)
 8001982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a40      	ldr	r2, [pc, #256]	@ (8001aa8 <HAL_GPIO_Init+0x2c0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_GPIO_Init+0x1ec>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3f      	ldr	r2, [pc, #252]	@ (8001aac <HAL_GPIO_Init+0x2c4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00d      	beq.n	80019d0 <HAL_GPIO_Init+0x1e8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab0 <HAL_GPIO_Init+0x2c8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x1e4>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3d      	ldr	r2, [pc, #244]	@ (8001ab4 <HAL_GPIO_Init+0x2cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_GPIO_Init+0x1e0>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e6:	492f      	ldr	r1, [pc, #188]	@ (8001aa4 <HAL_GPIO_Init+0x2bc>)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	492c      	ldr	r1, [pc, #176]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4928      	ldr	r1, [pc, #160]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b23      	ldr	r3, [pc, #140]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4922      	ldr	r1, [pc, #136]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a36:	4b20      	ldr	r3, [pc, #128]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	491e      	ldr	r1, [pc, #120]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a50:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4918      	ldr	r1, [pc, #96]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4914      	ldr	r1, [pc, #80]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d021      	beq.n	8001abc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	490e      	ldr	r1, [pc, #56]	@ (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e021      	b.n	8001aca <HAL_GPIO_Init+0x2e2>
 8001a86:	bf00      	nop
 8001a88:	10320000 	.word	0x10320000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10220000 	.word	0x10220000
 8001a94:	10210000 	.word	0x10210000
 8001a98:	10120000 	.word	0x10120000
 8001a9c:	10110000 	.word	0x10110000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4909      	ldr	r1, [pc, #36]	@ (8001aec <HAL_GPIO_Init+0x304>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f47f ae8e 	bne.w	80017fc <HAL_GPIO_Init+0x14>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	372c      	adds	r7, #44	@ 0x2c
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b32:	887a      	ldrh	r2, [r7, #2]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4013      	ands	r3, r2
 8001b38:	041a      	lsls	r2, r3, #16
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	43d9      	mvns	r1, r3
 8001b3e:	887b      	ldrh	r3, [r7, #2]
 8001b40:	400b      	ands	r3, r1
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	611a      	str	r2, [r3, #16]
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bc80      	pop	{r7}
 8001b50:	4770      	bx	lr
	...

08001b54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e12b      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d106      	bne.n	8001b80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7fe fdc0 	bl	8000700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2224      	movs	r2, #36	@ 0x24
 8001b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ba6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001bb8:	f001 fbee 	bl	8003398 <HAL_RCC_GetPCLK1Freq>
 8001bbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a81      	ldr	r2, [pc, #516]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d807      	bhi.n	8001bd8 <HAL_I2C_Init+0x84>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4a80      	ldr	r2, [pc, #512]	@ (8001dcc <HAL_I2C_Init+0x278>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	bf94      	ite	ls
 8001bd0:	2301      	movls	r3, #1
 8001bd2:	2300      	movhi	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	e006      	b.n	8001be6 <HAL_I2C_Init+0x92>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4a7d      	ldr	r2, [pc, #500]	@ (8001dd0 <HAL_I2C_Init+0x27c>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	bf94      	ite	ls
 8001be0:	2301      	movls	r3, #1
 8001be2:	2300      	movhi	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0e7      	b.n	8001dbe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4a78      	ldr	r2, [pc, #480]	@ (8001dd4 <HAL_I2C_Init+0x280>)
 8001bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf6:	0c9b      	lsrs	r3, r3, #18
 8001bf8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	4a6a      	ldr	r2, [pc, #424]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d802      	bhi.n	8001c28 <HAL_I2C_Init+0xd4>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	3301      	adds	r3, #1
 8001c26:	e009      	b.n	8001c3c <HAL_I2C_Init+0xe8>
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a69      	ldr	r2, [pc, #420]	@ (8001dd8 <HAL_I2C_Init+0x284>)
 8001c34:	fba2 2303 	umull	r2, r3, r2, r3
 8001c38:	099b      	lsrs	r3, r3, #6
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	430b      	orrs	r3, r1
 8001c42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001c4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	495c      	ldr	r1, [pc, #368]	@ (8001dc8 <HAL_I2C_Init+0x274>)
 8001c58:	428b      	cmp	r3, r1
 8001c5a:	d819      	bhi.n	8001c90 <HAL_I2C_Init+0x13c>
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	1e59      	subs	r1, r3, #1
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6a:	1c59      	adds	r1, r3, #1
 8001c6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001c70:	400b      	ands	r3, r1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_I2C_Init+0x138>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1e59      	subs	r1, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c84:	3301      	adds	r3, #1
 8001c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c8a:	e051      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	e04f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d111      	bne.n	8001cbc <HAL_I2C_Init+0x168>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	1e58      	subs	r0, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6859      	ldr	r1, [r3, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	440b      	add	r3, r1
 8001ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001caa:	3301      	adds	r3, #1
 8001cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	bf0c      	ite	eq
 8001cb4:	2301      	moveq	r3, #1
 8001cb6:	2300      	movne	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e012      	b.n	8001ce2 <HAL_I2C_Init+0x18e>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	1e58      	subs	r0, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6859      	ldr	r1, [r3, #4]
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	440b      	add	r3, r1
 8001cca:	0099      	lsls	r1, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	bf0c      	ite	eq
 8001cdc:	2301      	moveq	r3, #1
 8001cde:	2300      	movne	r3, #0
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_I2C_Init+0x196>
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e022      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d10e      	bne.n	8001d10 <HAL_I2C_Init+0x1bc>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1e58      	subs	r0, r3, #1
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6859      	ldr	r1, [r3, #4]
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	440b      	add	r3, r1
 8001d00:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d04:	3301      	adds	r3, #1
 8001d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d0e:	e00f      	b.n	8001d30 <HAL_I2C_Init+0x1dc>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1e58      	subs	r0, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6859      	ldr	r1, [r3, #4]
 8001d18:	460b      	mov	r3, r1
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	0099      	lsls	r1, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d2c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d30:	6879      	ldr	r1, [r7, #4]
 8001d32:	6809      	ldr	r1, [r1, #0]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	69da      	ldr	r2, [r3, #28]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	431a      	orrs	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001d5e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6911      	ldr	r1, [r2, #16]
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	68d2      	ldr	r2, [r2, #12]
 8001d6a:	4311      	orrs	r1, r2
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	430b      	orrs	r3, r1
 8001d72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	000186a0 	.word	0x000186a0
 8001dcc:	001e847f 	.word	0x001e847f
 8001dd0:	003d08ff 	.word	0x003d08ff
 8001dd4:	431bde83 	.word	0x431bde83
 8001dd8:	10624dd3 	.word	0x10624dd3

08001ddc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	461a      	mov	r2, r3
 8001de8:	460b      	mov	r3, r1
 8001dea:	817b      	strh	r3, [r7, #10]
 8001dec:	4613      	mov	r3, r2
 8001dee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001df0:	f7fe fd7e 	bl	80008f0 <HAL_GetTick>
 8001df4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b20      	cmp	r3, #32
 8001e00:	f040 80e0 	bne.w	8001fc4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2319      	movs	r3, #25
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4970      	ldr	r1, [pc, #448]	@ (8001fd0 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f000 fcc0 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	e0d3      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2C_Master_Transmit+0x50>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e0cc      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d007      	beq.n	8001e52 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e60:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2221      	movs	r2, #33	@ 0x21
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2210      	movs	r2, #16
 8001e6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	893a      	ldrh	r2, [r7, #8]
 8001e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4a50      	ldr	r2, [pc, #320]	@ (8001fd4 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e92:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e94:	8979      	ldrh	r1, [r7, #10]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	6a3a      	ldr	r2, [r7, #32]
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 fb10 	bl	80024c0 <I2C_MasterRequestWrite>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e08d      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001ec0:	e066      	b.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ec2:	697a      	ldr	r2, [r7, #20]
 8001ec4:	6a39      	ldr	r1, [r7, #32]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 fd7e 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00d      	beq.n	8001eee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d107      	bne.n	8001eea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ee8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef2:	781a      	ldrb	r2, [r3, #0]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	1c5a      	adds	r2, r3, #1
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f16:	3b01      	subs	r3, #1
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b04      	cmp	r3, #4
 8001f2a:	d11b      	bne.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d017      	beq.n	8001f64 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	781a      	ldrb	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	3b01      	subs	r3, #1
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	b29a      	uxth	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f64:	697a      	ldr	r2, [r7, #20]
 8001f66:	6a39      	ldr	r1, [r7, #32]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fd75 	bl	8002a58 <I2C_WaitOnBTFFlagUntilTimeout>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00d      	beq.n	8001f90 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f78:	2b04      	cmp	r3, #4
 8001f7a:	d107      	bne.n	8001f8c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f8a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e01a      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d194      	bne.n	8001ec2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2220      	movs	r2, #32
 8001fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e000      	b.n	8001fc6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001fc4:	2302      	movs	r3, #2
  }
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3718      	adds	r7, #24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	00100002 	.word	0x00100002
 8001fd4:	ffff0000 	.word	0xffff0000

08001fd8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08c      	sub	sp, #48	@ 0x30
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	817b      	strh	r3, [r7, #10]
 8001fea:	460b      	mov	r3, r1
 8001fec:	813b      	strh	r3, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ff6:	f7fe fc7b 	bl	80008f0 <HAL_GetTick>
 8001ffa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b20      	cmp	r3, #32
 8002006:	f040 8244 	bne.w	8002492 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800200a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2319      	movs	r3, #25
 8002010:	2201      	movs	r2, #1
 8002012:	4982      	ldr	r1, [pc, #520]	@ (800221c <HAL_I2C_Mem_Read+0x244>)
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 fbbd 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
 8002022:	e237      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202a:	2b01      	cmp	r3, #1
 800202c:	d101      	bne.n	8002032 <HAL_I2C_Mem_Read+0x5a>
 800202e:	2302      	movs	r3, #2
 8002030:	e230      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d007      	beq.n	8002058 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002066:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2222      	movs	r2, #34	@ 0x22
 800206c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002082:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002088:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800208e:	b29a      	uxth	r2, r3
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4a62      	ldr	r2, [pc, #392]	@ (8002220 <HAL_I2C_Mem_Read+0x248>)
 8002098:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800209a:	88f8      	ldrh	r0, [r7, #6]
 800209c:	893a      	ldrh	r2, [r7, #8]
 800209e:	8979      	ldrh	r1, [r7, #10]
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	9301      	str	r3, [sp, #4]
 80020a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	4603      	mov	r3, r0
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f000 fa8a 	bl	80025c4 <I2C_RequestMemoryRead>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e1ec      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d113      	bne.n	80020ea <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	61fb      	str	r3, [r7, #28]
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	61fb      	str	r3, [r7, #28]
 80020d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020e6:	601a      	str	r2, [r3, #0]
 80020e8:	e1c0      	b.n	800246c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d11e      	bne.n	8002130 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002100:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002102:	b672      	cpsid	i
}
 8002104:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800212a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800212c:	b662      	cpsie	i
}
 800212e:	e035      	b.n	800219c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002134:	2b02      	cmp	r3, #2
 8002136:	d11e      	bne.n	8002176 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002146:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002148:	b672      	cpsid	i
}
 800214a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	617b      	str	r3, [r7, #20]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	699b      	ldr	r3, [r3, #24]
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002170:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002172:	b662      	cpsie	i
}
 8002174:	e012      	b.n	800219c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002184:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002186:	2300      	movs	r3, #0
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800219c:	e166      	b.n	800246c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021a2:	2b03      	cmp	r3, #3
 80021a4:	f200 811f 	bhi.w	80023e6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d123      	bne.n	80021f8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 fc97 	bl	8002ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e167      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021e0:	3b01      	subs	r3, #1
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	3b01      	subs	r3, #1
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80021f6:	e139      	b.n	800246c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d152      	bne.n	80022a6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002206:	2200      	movs	r2, #0
 8002208:	4906      	ldr	r1, [pc, #24]	@ (8002224 <HAL_I2C_Mem_Read+0x24c>)
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fac2 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e13c      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
 800221a:	bf00      	nop
 800221c:	00100002 	.word	0x00100002
 8002220:	ffff0000 	.word	0xffff0000
 8002224:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002228:	b672      	cpsid	i
}
 800222a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800223a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	b2d2      	uxtb	r2, r2
 8002248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224e:	1c5a      	adds	r2, r3, #1
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002264:	b29b      	uxth	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b29a      	uxth	r2, r3
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800226e:	b662      	cpsie	i
}
 8002270:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691a      	ldr	r2, [r3, #16]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	b2d2      	uxtb	r2, r2
 800227e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002284:	1c5a      	adds	r2, r3, #1
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800228e:	3b01      	subs	r3, #1
 8002290:	b29a      	uxth	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29b      	uxth	r3, r3
 800229c:	3b01      	subs	r3, #1
 800229e:	b29a      	uxth	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80022a4:	e0e2      	b.n	800246c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ac:	2200      	movs	r2, #0
 80022ae:	497b      	ldr	r1, [pc, #492]	@ (800249c <HAL_I2C_Mem_Read+0x4c4>)
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 fa6f 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0e9      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022d0:	b672      	cpsid	i
}
 80022d2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	3b01      	subs	r3, #1
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002306:	4b66      	ldr	r3, [pc, #408]	@ (80024a0 <HAL_I2C_Mem_Read+0x4c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	08db      	lsrs	r3, r3, #3
 800230c:	4a65      	ldr	r2, [pc, #404]	@ (80024a4 <HAL_I2C_Mem_Read+0x4cc>)
 800230e:	fba2 2303 	umull	r2, r3, r2, r3
 8002312:	0a1a      	lsrs	r2, r3, #8
 8002314:	4613      	mov	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4413      	add	r3, r2
 800231a:	00da      	lsls	r2, r3, #3
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	3b01      	subs	r3, #1
 8002324:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002326:	6a3b      	ldr	r3, [r7, #32]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d118      	bne.n	800235e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2220      	movs	r2, #32
 8002336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002346:	f043 0220 	orr.w	r2, r3, #32
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800234e:	b662      	cpsie	i
}
 8002350:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e09a      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b04      	cmp	r3, #4
 800236a:	d1d9      	bne.n	8002320 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800237a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	691a      	ldr	r2, [r3, #16]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023ae:	b662      	cpsie	i
}
 80023b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	1c5a      	adds	r2, r3, #1
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80023e4:	e042      	b.n	800246c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 fb7c 	bl	8002ae8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e04c      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	691a      	ldr	r2, [r3, #16]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	b2d2      	uxtb	r2, r2
 8002406:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002416:	3b01      	subs	r3, #1
 8002418:	b29a      	uxth	r2, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002422:	b29b      	uxth	r3, r3
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	f003 0304 	and.w	r3, r3, #4
 8002436:	2b04      	cmp	r3, #4
 8002438:	d118      	bne.n	800246c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691a      	ldr	r2, [r3, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002470:	2b00      	cmp	r3, #0
 8002472:	f47f ae94 	bne.w	800219e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002492:	2302      	movs	r3, #2
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	3728      	adds	r7, #40	@ 0x28
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	00010004 	.word	0x00010004
 80024a0:	20000000 	.word	0x20000000
 80024a4:	14f8b589 	.word	0x14f8b589

080024a8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
	...

080024c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	607a      	str	r2, [r7, #4]
 80024ca:	603b      	str	r3, [r7, #0]
 80024cc:	460b      	mov	r3, r1
 80024ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b08      	cmp	r3, #8
 80024da:	d006      	beq.n	80024ea <I2C_MasterRequestWrite+0x2a>
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d003      	beq.n	80024ea <I2C_MasterRequestWrite+0x2a>
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024e8:	d108      	bne.n	80024fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e00b      	b.n	8002514 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002500:	2b12      	cmp	r3, #18
 8002502:	d107      	bne.n	8002514 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002512:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2200      	movs	r2, #0
 800251c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002520:	68f8      	ldr	r0, [r7, #12]
 8002522:	f000 f937 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00d      	beq.n	8002548 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800253a:	d103      	bne.n	8002544 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002542:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e035      	b.n	80025b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002550:	d108      	bne.n	8002564 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002552:	897b      	ldrh	r3, [r7, #10]
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	e01b      	b.n	800259c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002564:	897b      	ldrh	r3, [r7, #10]
 8002566:	11db      	asrs	r3, r3, #7
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0306 	and.w	r3, r3, #6
 800256e:	b2db      	uxtb	r3, r3
 8002570:	f063 030f 	orn	r3, r3, #15
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	490e      	ldr	r1, [pc, #56]	@ (80025bc <I2C_MasterRequestWrite+0xfc>)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f980 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e010      	b.n	80025b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002592:	897b      	ldrh	r3, [r7, #10]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4907      	ldr	r1, [pc, #28]	@ (80025c0 <I2C_MasterRequestWrite+0x100>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f970 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	00010008 	.word	0x00010008
 80025c0:	00010002 	.word	0x00010002

080025c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80025ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	2200      	movs	r2, #0
 8002606:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 f8c2 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002624:	d103      	bne.n	800262e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800262c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e0aa      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002632:	897b      	ldrh	r3, [r7, #10]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002640:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	6a3a      	ldr	r2, [r7, #32]
 8002646:	4952      	ldr	r1, [pc, #328]	@ (8002790 <I2C_RequestMemoryRead+0x1cc>)
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f000 f91d 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e097      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	699b      	ldr	r3, [r3, #24]
 800266a:	617b      	str	r3, [r7, #20]
 800266c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800266e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002670:	6a39      	ldr	r1, [r7, #32]
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f000 f9a8 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00d      	beq.n	800269a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	2b04      	cmp	r3, #4
 8002684:	d107      	bne.n	8002696 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002694:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e076      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800269a:	88fb      	ldrh	r3, [r7, #6]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d105      	bne.n	80026ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026a0:	893b      	ldrh	r3, [r7, #8]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	611a      	str	r2, [r3, #16]
 80026aa:	e021      	b.n	80026f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80026ac:	893b      	ldrh	r3, [r7, #8]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026bc:	6a39      	ldr	r1, [r7, #32]
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f982 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d107      	bne.n	80026e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e050      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80026e6:	893b      	ldrh	r3, [r7, #8]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026f2:	6a39      	ldr	r1, [r7, #32]
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f967 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00d      	beq.n	800271c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b04      	cmp	r3, #4
 8002706:	d107      	bne.n	8002718 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002716:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e035      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800272a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	2200      	movs	r2, #0
 8002734:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f82b 	bl	8002794 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002752:	d103      	bne.n	800275c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800275a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e013      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	b2db      	uxtb	r3, r3
 8002764:	f043 0301 	orr.w	r3, r3, #1
 8002768:	b2da      	uxtb	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	6a3a      	ldr	r2, [r7, #32]
 8002774:	4906      	ldr	r1, [pc, #24]	@ (8002790 <I2C_RequestMemoryRead+0x1cc>)
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f000 f886 	bl	8002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e000      	b.n	8002788 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	3718      	adds	r7, #24
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}
 8002790:	00010002 	.word	0x00010002

08002794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	603b      	str	r3, [r7, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027a4:	e048      	b.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ac:	d044      	beq.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027ae:	f7fe f89f 	bl	80008f0 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d302      	bcc.n	80027c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d139      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	0c1b      	lsrs	r3, r3, #16
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10d      	bne.n	80027ea <I2C_WaitOnFlagUntilTimeout+0x56>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	43da      	mvns	r2, r3
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	4013      	ands	r3, r2
 80027da:	b29b      	uxth	r3, r3
 80027dc:	2b00      	cmp	r3, #0
 80027de:	bf0c      	ite	eq
 80027e0:	2301      	moveq	r3, #1
 80027e2:	2300      	movne	r3, #0
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	e00c      	b.n	8002804 <I2C_WaitOnFlagUntilTimeout+0x70>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	43da      	mvns	r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	4013      	ands	r3, r2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	bf0c      	ite	eq
 80027fc:	2301      	moveq	r3, #1
 80027fe:	2300      	movne	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	79fb      	ldrb	r3, [r7, #7]
 8002806:	429a      	cmp	r2, r3
 8002808:	d116      	bne.n	8002838 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2200      	movs	r2, #0
 800280e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	f043 0220 	orr.w	r2, r3, #32
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e023      	b.n	8002880 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	0c1b      	lsrs	r3, r3, #16
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10d      	bne.n	800285e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	43da      	mvns	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4013      	ands	r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	bf0c      	ite	eq
 8002854:	2301      	moveq	r3, #1
 8002856:	2300      	movne	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	e00c      	b.n	8002878 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	43da      	mvns	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	4013      	ands	r3, r2
 800286a:	b29b      	uxth	r3, r3
 800286c:	2b00      	cmp	r3, #0
 800286e:	bf0c      	ite	eq
 8002870:	2301      	moveq	r3, #1
 8002872:	2300      	movne	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	79fb      	ldrb	r3, [r7, #7]
 800287a:	429a      	cmp	r2, r3
 800287c:	d093      	beq.n	80027a6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002896:	e071      	b.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028a6:	d123      	bne.n	80028f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028b6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80028c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e067      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f6:	d041      	beq.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028f8:	f7fd fffa 	bl	80008f0 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	d302      	bcc.n	800290e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d136      	bne.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d10c      	bne.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	43da      	mvns	r2, r3
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	4013      	ands	r3, r2
 8002924:	b29b      	uxth	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e00b      	b.n	800294a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	43da      	mvns	r2, r3
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	4013      	ands	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	2b00      	cmp	r3, #0
 8002942:	bf14      	ite	ne
 8002944:	2301      	movne	r3, #1
 8002946:	2300      	moveq	r3, #0
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d016      	beq.n	800297c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e021      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	0c1b      	lsrs	r3, r3, #16
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b01      	cmp	r3, #1
 8002984:	d10c      	bne.n	80029a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	43da      	mvns	r2, r3
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	4013      	ands	r3, r2
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	bf14      	ite	ne
 8002998:	2301      	movne	r3, #1
 800299a:	2300      	moveq	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	e00b      	b.n	80029b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f47f af6d 	bne.w	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d4:	e034      	b.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f8e3 	bl	8002ba2 <I2C_IsAcknowledgeFailed>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e034      	b.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d028      	beq.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7fd ff7f 	bl	80008f0 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d11d      	bne.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0e:	2b80      	cmp	r3, #128	@ 0x80
 8002a10:	d016      	beq.n	8002a40 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2c:	f043 0220 	orr.w	r2, r3, #32
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e007      	b.n	8002a50 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4a:	2b80      	cmp	r3, #128	@ 0x80
 8002a4c:	d1c3      	bne.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a64:	e034      	b.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 f89b 	bl	8002ba2 <I2C_IsAcknowledgeFailed>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e034      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d028      	beq.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a7e:	f7fd ff37 	bl	80008f0 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11d      	bne.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d016      	beq.n	8002ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b04      	cmp	r3, #4
 8002adc:	d1c3      	bne.n	8002a66 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002af4:	e049      	b.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	f003 0310 	and.w	r3, r3, #16
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d119      	bne.n	8002b38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f06f 0210 	mvn.w	r2, #16
 8002b0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e030      	b.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fd feda 	bl	80008f0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11d      	bne.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b58:	2b40      	cmp	r3, #64	@ 0x40
 8002b5a:	d016      	beq.n	8002b8a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2220      	movs	r2, #32
 8002b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b76:	f043 0220 	orr.w	r2, r3, #32
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e007      	b.n	8002b9a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b94:	2b40      	cmp	r3, #64	@ 0x40
 8002b96:	d1ae      	bne.n	8002af6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3710      	adds	r7, #16
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bb8:	d11b      	bne.n	8002bf2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002bc2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	f043 0204 	orr.w	r2, r3, #4
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
	...

08002c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e272      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f000 8087 	beq.w	8002d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c20:	4b92      	ldr	r3, [pc, #584]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 030c 	and.w	r3, r3, #12
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d00c      	beq.n	8002c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 030c 	and.w	r3, r3, #12
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d112      	bne.n	8002c5e <HAL_RCC_OscConfig+0x5e>
 8002c38:	4b8c      	ldr	r3, [pc, #560]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c44:	d10b      	bne.n	8002c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c46:	4b89      	ldr	r3, [pc, #548]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d06c      	beq.n	8002d2c <HAL_RCC_OscConfig+0x12c>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d168      	bne.n	8002d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e24c      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c66:	d106      	bne.n	8002c76 <HAL_RCC_OscConfig+0x76>
 8002c68:	4b80      	ldr	r3, [pc, #512]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a7f      	ldr	r2, [pc, #508]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e02e      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd4>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x98>
 8002c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a7a      	ldr	r2, [pc, #488]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	4b78      	ldr	r3, [pc, #480]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a77      	ldr	r2, [pc, #476]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c94:	6013      	str	r3, [r2, #0]
 8002c96:	e01d      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd4>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ca0:	d10c      	bne.n	8002cbc <HAL_RCC_OscConfig+0xbc>
 8002ca2:	4b72      	ldr	r3, [pc, #456]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a71      	ldr	r2, [pc, #452]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cac:	6013      	str	r3, [r2, #0]
 8002cae:	4b6f      	ldr	r3, [pc, #444]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0xd4>
 8002cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d013      	beq.n	8002d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fd fe08 	bl	80008f0 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce4:	f7fd fe04 	bl	80008f0 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b64      	cmp	r3, #100	@ 0x64
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e200      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0xe4>
 8002d02:	e014      	b.n	8002d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d04:	f7fd fdf4 	bl	80008f0 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d0c:	f7fd fdf0 	bl	80008f0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b64      	cmp	r3, #100	@ 0x64
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e1ec      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d1e:	4b53      	ldr	r3, [pc, #332]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1f0      	bne.n	8002d0c <HAL_RCC_OscConfig+0x10c>
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d063      	beq.n	8002e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 030c 	and.w	r3, r3, #12
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00b      	beq.n	8002d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d46:	4b49      	ldr	r3, [pc, #292]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 030c 	and.w	r3, r3, #12
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d11c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x18c>
 8002d52:	4b46      	ldr	r3, [pc, #280]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d116      	bne.n	8002d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	4b43      	ldr	r3, [pc, #268]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <HAL_RCC_OscConfig+0x176>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e1c0      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d76:	4b3d      	ldr	r3, [pc, #244]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4939      	ldr	r1, [pc, #228]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d8a:	e03a      	b.n	8002e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d020      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d94:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <HAL_RCC_OscConfig+0x270>)
 8002d96:	2201      	movs	r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fd fda9 	bl	80008f0 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da0:	e008      	b.n	8002db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002da2:	f7fd fda5 	bl	80008f0 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d901      	bls.n	8002db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	e1a1      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002db4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d0f0      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	4927      	ldr	r1, [pc, #156]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	600b      	str	r3, [r1, #0]
 8002dd4:	e015      	b.n	8002e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dd6:	4b26      	ldr	r3, [pc, #152]	@ (8002e70 <HAL_RCC_OscConfig+0x270>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fd fd88 	bl	80008f0 <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fd fd84 	bl	80008f0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e180      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002df6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0308 	and.w	r3, r3, #8
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d03a      	beq.n	8002e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d019      	beq.n	8002e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e16:	4b17      	ldr	r3, [pc, #92]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002e18:	2201      	movs	r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7fd fd68 	bl	80008f0 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7fd fd64 	bl	80008f0 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e160      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <HAL_RCC_OscConfig+0x26c>)
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d0f0      	beq.n	8002e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e42:	2001      	movs	r0, #1
 8002e44:	f000 fabc 	bl	80033c0 <RCC_Delay>
 8002e48:	e01c      	b.n	8002e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_RCC_OscConfig+0x274>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e50:	f7fd fd4e 	bl	80008f0 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e56:	e00f      	b.n	8002e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e58:	f7fd fd4a 	bl	80008f0 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d908      	bls.n	8002e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e146      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	42420000 	.word	0x42420000
 8002e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b92      	ldr	r3, [pc, #584]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1e9      	bne.n	8002e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 80a6 	beq.w	8002fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b8b      	ldr	r3, [pc, #556]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002e98:	69db      	ldr	r3, [r3, #28]
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10d      	bne.n	8002ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	4b88      	ldr	r3, [pc, #544]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4a87      	ldr	r2, [pc, #540]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eac:	61d3      	str	r3, [r2, #28]
 8002eae:	4b85      	ldr	r3, [pc, #532]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb6:	60bb      	str	r3, [r7, #8]
 8002eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebe:	4b82      	ldr	r3, [pc, #520]	@ (80030c8 <HAL_RCC_OscConfig+0x4c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d118      	bne.n	8002efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eca:	4b7f      	ldr	r3, [pc, #508]	@ (80030c8 <HAL_RCC_OscConfig+0x4c8>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a7e      	ldr	r2, [pc, #504]	@ (80030c8 <HAL_RCC_OscConfig+0x4c8>)
 8002ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ed6:	f7fd fd0b 	bl	80008f0 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ede:	f7fd fd07 	bl	80008f0 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b64      	cmp	r3, #100	@ 0x64
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e103      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef0:	4b75      	ldr	r3, [pc, #468]	@ (80030c8 <HAL_RCC_OscConfig+0x4c8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x312>
 8002f04:	4b6f      	ldr	r3, [pc, #444]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f06:	6a1b      	ldr	r3, [r3, #32]
 8002f08:	4a6e      	ldr	r2, [pc, #440]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	6213      	str	r3, [r2, #32]
 8002f10:	e02d      	b.n	8002f6e <HAL_RCC_OscConfig+0x36e>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x334>
 8002f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	4a69      	ldr	r2, [pc, #420]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	f023 0301 	bic.w	r3, r3, #1
 8002f24:	6213      	str	r3, [r2, #32]
 8002f26:	4b67      	ldr	r3, [pc, #412]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4a66      	ldr	r2, [pc, #408]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	f023 0304 	bic.w	r3, r3, #4
 8002f30:	6213      	str	r3, [r2, #32]
 8002f32:	e01c      	b.n	8002f6e <HAL_RCC_OscConfig+0x36e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b05      	cmp	r3, #5
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCC_OscConfig+0x356>
 8002f3c:	4b61      	ldr	r3, [pc, #388]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f3e:	6a1b      	ldr	r3, [r3, #32]
 8002f40:	4a60      	ldr	r2, [pc, #384]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f42:	f043 0304 	orr.w	r3, r3, #4
 8002f46:	6213      	str	r3, [r2, #32]
 8002f48:	4b5e      	ldr	r3, [pc, #376]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	6213      	str	r3, [r2, #32]
 8002f54:	e00b      	b.n	8002f6e <HAL_RCC_OscConfig+0x36e>
 8002f56:	4b5b      	ldr	r3, [pc, #364]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	f023 0301 	bic.w	r3, r3, #1
 8002f60:	6213      	str	r3, [r2, #32]
 8002f62:	4b58      	ldr	r3, [pc, #352]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	4a57      	ldr	r2, [pc, #348]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	f023 0304 	bic.w	r3, r3, #4
 8002f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d015      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fd fcbb 	bl	80008f0 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fd fcb7 	bl	80008f0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e0b1      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f94:	4b4b      	ldr	r3, [pc, #300]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d0ee      	beq.n	8002f7e <HAL_RCC_OscConfig+0x37e>
 8002fa0:	e014      	b.n	8002fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa2:	f7fd fca5 	bl	80008f0 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa8:	e00a      	b.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fd fca1 	bl	80008f0 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e09b      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc0:	4b40      	ldr	r3, [pc, #256]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1ee      	bne.n	8002faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d105      	bne.n	8002fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 8087 	beq.w	80030f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fe8:	4b36      	ldr	r3, [pc, #216]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f003 030c 	and.w	r3, r3, #12
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d061      	beq.n	80030b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69db      	ldr	r3, [r3, #28]
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d146      	bne.n	800308a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	4b33      	ldr	r3, [pc, #204]	@ (80030cc <HAL_RCC_OscConfig+0x4cc>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003002:	f7fd fc75 	bl	80008f0 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fd fc71 	bl	80008f0 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e06d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800301c:	4b29      	ldr	r3, [pc, #164]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a1b      	ldr	r3, [r3, #32]
 800302c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003030:	d108      	bne.n	8003044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003032:	4b24      	ldr	r3, [pc, #144]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	4921      	ldr	r1, [pc, #132]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8003040:	4313      	orrs	r3, r2
 8003042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003044:	4b1f      	ldr	r3, [pc, #124]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a19      	ldr	r1, [r3, #32]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003054:	430b      	orrs	r3, r1
 8003056:	491b      	ldr	r1, [pc, #108]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800305c:	4b1b      	ldr	r3, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x4cc>)
 800305e:	2201      	movs	r2, #1
 8003060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003062:	f7fd fc45 	bl	80008f0 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306a:	f7fd fc41 	bl	80008f0 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b02      	cmp	r3, #2
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e03d      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800307c:	4b11      	ldr	r3, [pc, #68]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x46a>
 8003088:	e035      	b.n	80030f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800308a:	4b10      	ldr	r3, [pc, #64]	@ (80030cc <HAL_RCC_OscConfig+0x4cc>)
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003090:	f7fd fc2e 	bl	80008f0 <HAL_GetTick>
 8003094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003096:	e008      	b.n	80030aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003098:	f7fd fc2a 	bl	80008f0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	1ad3      	subs	r3, r2, r3
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e026      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030aa:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f0      	bne.n	8003098 <HAL_RCC_OscConfig+0x498>
 80030b6:	e01e      	b.n	80030f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d107      	bne.n	80030d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e019      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40007000 	.word	0x40007000
 80030cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80030d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003100 <HAL_RCC_OscConfig+0x500>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e000      	b.n	80030f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40021000 	.word	0x40021000

08003104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d0      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003118:	4b6a      	ldr	r3, [pc, #424]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d910      	bls.n	8003148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003126:	4b67      	ldr	r3, [pc, #412]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 0207 	bic.w	r2, r3, #7
 800312e:	4965      	ldr	r1, [pc, #404]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	4313      	orrs	r3, r2
 8003134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b63      	ldr	r3, [pc, #396]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e0b8      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0302 	and.w	r3, r3, #2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d020      	beq.n	8003196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003160:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	4a58      	ldr	r2, [pc, #352]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003166:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800316a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0308 	and.w	r3, r3, #8
 8003174:	2b00      	cmp	r3, #0
 8003176:	d005      	beq.n	8003184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003178:	4b53      	ldr	r3, [pc, #332]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4a52      	ldr	r2, [pc, #328]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800317e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003184:	4b50      	ldr	r3, [pc, #320]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	494d      	ldr	r1, [pc, #308]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003192:	4313      	orrs	r3, r2
 8003194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d040      	beq.n	8003224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d107      	bne.n	80031ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031aa:	4b47      	ldr	r3, [pc, #284]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d115      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e07f      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d107      	bne.n	80031d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031c2:	4b41      	ldr	r3, [pc, #260]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d109      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e073      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d2:	4b3d      	ldr	r3, [pc, #244]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e06b      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031e2:	4b39      	ldr	r3, [pc, #228]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 0203 	bic.w	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4936      	ldr	r1, [pc, #216]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031f4:	f7fd fb7c 	bl	80008f0 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031fa:	e00a      	b.n	8003212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031fc:	f7fd fb78 	bl	80008f0 <HAL_GetTick>
 8003200:	4602      	mov	r2, r0
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800320a:	4293      	cmp	r3, r2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e053      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	4b2d      	ldr	r3, [pc, #180]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 020c 	and.w	r2, r3, #12
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d1eb      	bne.n	80031fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003224:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d210      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4922      	ldr	r1, [pc, #136]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003242:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0307 	and.w	r3, r3, #7
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d001      	beq.n	8003254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e032      	b.n	80032ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d008      	beq.n	8003272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003260:	4b19      	ldr	r3, [pc, #100]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4916      	ldr	r1, [pc, #88]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800326e:	4313      	orrs	r3, r2
 8003270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 0308 	and.w	r3, r3, #8
 800327a:	2b00      	cmp	r3, #0
 800327c:	d009      	beq.n	8003292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800327e:	4b12      	ldr	r3, [pc, #72]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	490e      	ldr	r1, [pc, #56]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800328e:	4313      	orrs	r3, r2
 8003290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003292:	f000 f821 	bl	80032d8 <HAL_RCC_GetSysClockFreq>
 8003296:	4602      	mov	r2, r0
 8003298:	4b0b      	ldr	r3, [pc, #44]	@ (80032c8 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	f003 030f 	and.w	r3, r3, #15
 80032a2:	490a      	ldr	r1, [pc, #40]	@ (80032cc <HAL_RCC_ClockConfig+0x1c8>)
 80032a4:	5ccb      	ldrb	r3, [r1, r3]
 80032a6:	fa22 f303 	lsr.w	r3, r2, r3
 80032aa:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_ClockConfig+0x1cc>)
 80032ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ae:	4b09      	ldr	r3, [pc, #36]	@ (80032d4 <HAL_RCC_ClockConfig+0x1d0>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fada 	bl	800086c <HAL_InitTick>

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3710      	adds	r7, #16
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	40022000 	.word	0x40022000
 80032c8:	40021000 	.word	0x40021000
 80032cc:	0800346c 	.word	0x0800346c
 80032d0:	20000000 	.word	0x20000000
 80032d4:	20000004 	.word	0x20000004

080032d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032de:	2300      	movs	r3, #0
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	2300      	movs	r3, #0
 80032e8:	617b      	str	r3, [r7, #20]
 80032ea:	2300      	movs	r3, #0
 80032ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032f2:	4b1e      	ldr	r3, [pc, #120]	@ (800336c <HAL_RCC_GetSysClockFreq+0x94>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 030c 	and.w	r3, r3, #12
 80032fe:	2b04      	cmp	r3, #4
 8003300:	d002      	beq.n	8003308 <HAL_RCC_GetSysClockFreq+0x30>
 8003302:	2b08      	cmp	r3, #8
 8003304:	d003      	beq.n	800330e <HAL_RCC_GetSysClockFreq+0x36>
 8003306:	e027      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003308:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x98>)
 800330a:	613b      	str	r3, [r7, #16]
      break;
 800330c:	e027      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	0c9b      	lsrs	r3, r3, #18
 8003312:	f003 030f 	and.w	r3, r3, #15
 8003316:	4a17      	ldr	r2, [pc, #92]	@ (8003374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003318:	5cd3      	ldrb	r3, [r2, r3]
 800331a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d010      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003326:	4b11      	ldr	r3, [pc, #68]	@ (800336c <HAL_RCC_GetSysClockFreq+0x94>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	0c5b      	lsrs	r3, r3, #17
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	4a11      	ldr	r2, [pc, #68]	@ (8003378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003332:	5cd3      	ldrb	r3, [r2, r3]
 8003334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a0d      	ldr	r2, [pc, #52]	@ (8003370 <HAL_RCC_GetSysClockFreq+0x98>)
 800333a:	fb03 f202 	mul.w	r2, r3, r2
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	fbb2 f3f3 	udiv	r3, r2, r3
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	e004      	b.n	8003352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a0c      	ldr	r2, [pc, #48]	@ (800337c <HAL_RCC_GetSysClockFreq+0xa4>)
 800334c:	fb02 f303 	mul.w	r3, r2, r3
 8003350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	613b      	str	r3, [r7, #16]
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b09      	ldr	r3, [pc, #36]	@ (8003380 <HAL_RCC_GetSysClockFreq+0xa8>)
 800335a:	613b      	str	r3, [r7, #16]
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	693b      	ldr	r3, [r7, #16]
}
 8003360:	4618      	mov	r0, r3
 8003362:	371c      	adds	r7, #28
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	40021000 	.word	0x40021000
 8003370:	00f42400 	.word	0x00f42400
 8003374:	08003484 	.word	0x08003484
 8003378:	08003494 	.word	0x08003494
 800337c:	003d0900 	.word	0x003d0900
 8003380:	007a1200 	.word	0x007a1200

08003384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003388:	4b02      	ldr	r3, [pc, #8]	@ (8003394 <HAL_RCC_GetHCLKFreq+0x10>)
 800338a:	681b      	ldr	r3, [r3, #0]
}
 800338c:	4618      	mov	r0, r3
 800338e:	46bd      	mov	sp, r7
 8003390:	bc80      	pop	{r7}
 8003392:	4770      	bx	lr
 8003394:	20000000 	.word	0x20000000

08003398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800339c:	f7ff fff2 	bl	8003384 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	0a1b      	lsrs	r3, r3, #8
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	@ (80033bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40021000 	.word	0x40021000
 80033bc:	0800347c 	.word	0x0800347c

080033c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033c8:	4b0a      	ldr	r3, [pc, #40]	@ (80033f4 <RCC_Delay+0x34>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <RCC_Delay+0x38>)
 80033ce:	fba2 2303 	umull	r2, r3, r2, r3
 80033d2:	0a5b      	lsrs	r3, r3, #9
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	fb02 f303 	mul.w	r3, r2, r3
 80033da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033dc:	bf00      	nop
  }
  while (Delay --);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1e5a      	subs	r2, r3, #1
 80033e2:	60fa      	str	r2, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <RCC_Delay+0x1c>
}
 80033e8:	bf00      	nop
 80033ea:	bf00      	nop
 80033ec:	3714      	adds	r7, #20
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	20000000 	.word	0x20000000
 80033f8:	10624dd3 	.word	0x10624dd3

080033fc <memset>:
 80033fc:	4603      	mov	r3, r0
 80033fe:	4402      	add	r2, r0
 8003400:	4293      	cmp	r3, r2
 8003402:	d100      	bne.n	8003406 <memset+0xa>
 8003404:	4770      	bx	lr
 8003406:	f803 1b01 	strb.w	r1, [r3], #1
 800340a:	e7f9      	b.n	8003400 <memset+0x4>

0800340c <__libc_init_array>:
 800340c:	b570      	push	{r4, r5, r6, lr}
 800340e:	2600      	movs	r6, #0
 8003410:	4d0c      	ldr	r5, [pc, #48]	@ (8003444 <__libc_init_array+0x38>)
 8003412:	4c0d      	ldr	r4, [pc, #52]	@ (8003448 <__libc_init_array+0x3c>)
 8003414:	1b64      	subs	r4, r4, r5
 8003416:	10a4      	asrs	r4, r4, #2
 8003418:	42a6      	cmp	r6, r4
 800341a:	d109      	bne.n	8003430 <__libc_init_array+0x24>
 800341c:	f000 f81a 	bl	8003454 <_init>
 8003420:	2600      	movs	r6, #0
 8003422:	4d0a      	ldr	r5, [pc, #40]	@ (800344c <__libc_init_array+0x40>)
 8003424:	4c0a      	ldr	r4, [pc, #40]	@ (8003450 <__libc_init_array+0x44>)
 8003426:	1b64      	subs	r4, r4, r5
 8003428:	10a4      	asrs	r4, r4, #2
 800342a:	42a6      	cmp	r6, r4
 800342c:	d105      	bne.n	800343a <__libc_init_array+0x2e>
 800342e:	bd70      	pop	{r4, r5, r6, pc}
 8003430:	f855 3b04 	ldr.w	r3, [r5], #4
 8003434:	4798      	blx	r3
 8003436:	3601      	adds	r6, #1
 8003438:	e7ee      	b.n	8003418 <__libc_init_array+0xc>
 800343a:	f855 3b04 	ldr.w	r3, [r5], #4
 800343e:	4798      	blx	r3
 8003440:	3601      	adds	r6, #1
 8003442:	e7f2      	b.n	800342a <__libc_init_array+0x1e>
 8003444:	08003498 	.word	0x08003498
 8003448:	08003498 	.word	0x08003498
 800344c:	08003498 	.word	0x08003498
 8003450:	0800349c 	.word	0x0800349c

08003454 <_init>:
 8003454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003456:	bf00      	nop
 8003458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800345a:	bc08      	pop	{r3}
 800345c:	469e      	mov	lr, r3
 800345e:	4770      	bx	lr

08003460 <_fini>:
 8003460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003462:	bf00      	nop
 8003464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003466:	bc08      	pop	{r3}
 8003468:	469e      	mov	lr, r3
 800346a:	4770      	bx	lr
