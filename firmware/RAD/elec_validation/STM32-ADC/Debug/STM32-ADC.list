
STM32-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080030e0  080030e0  000040e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003120  08003120  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003120  08003120  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003124  08003124  00004124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003128  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08003134  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08003134  00005128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f8a  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019b1  00000000  00000000  0000bfbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000535  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016b37  00000000  00000000  0000e5ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008695  00000000  00000000  000250e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083a9d  00000000  00000000  0002d779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1216  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001aec  00000000  00000000  000b125c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  000b2d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030c8 	.word	0x080030c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030c8 	.word	0x080030c8

0800014c <setupTxCAN>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setupTxCAN()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    TxHeader.StdId = 0x321;
 8000150:	4b17      	ldr	r3, [pc, #92]	@ (80001b0 <setupTxCAN+0x64>)
 8000152:	f240 3221 	movw	r2, #801	@ 0x321
 8000156:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = 0x01;
 8000158:	4b15      	ldr	r3, [pc, #84]	@ (80001b0 <setupTxCAN+0x64>)
 800015a:	2201      	movs	r2, #1
 800015c:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 800015e:	4b14      	ldr	r3, [pc, #80]	@ (80001b0 <setupTxCAN+0x64>)
 8000160:	2200      	movs	r2, #0
 8000162:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_EXT;
 8000164:	4b12      	ldr	r3, [pc, #72]	@ (80001b0 <setupTxCAN+0x64>)
 8000166:	2204      	movs	r2, #4
 8000168:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800016a:	4b11      	ldr	r3, [pc, #68]	@ (80001b0 <setupTxCAN+0x64>)
 800016c:	2208      	movs	r2, #8
 800016e:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000170:	4b0f      	ldr	r3, [pc, #60]	@ (80001b0 <setupTxCAN+0x64>)
 8000172:	2200      	movs	r2, #0
 8000174:	751a      	strb	r2, [r3, #20]

    TxData[0] = 0xA0;
 8000176:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <setupTxCAN+0x68>)
 8000178:	22a0      	movs	r2, #160	@ 0xa0
 800017a:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0xA1;
 800017c:	4b0d      	ldr	r3, [pc, #52]	@ (80001b4 <setupTxCAN+0x68>)
 800017e:	22a1      	movs	r2, #161	@ 0xa1
 8000180:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xA2;
 8000182:	4b0c      	ldr	r3, [pc, #48]	@ (80001b4 <setupTxCAN+0x68>)
 8000184:	22a2      	movs	r2, #162	@ 0xa2
 8000186:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xA3;
 8000188:	4b0a      	ldr	r3, [pc, #40]	@ (80001b4 <setupTxCAN+0x68>)
 800018a:	22a3      	movs	r2, #163	@ 0xa3
 800018c:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xA4;
 800018e:	4b09      	ldr	r3, [pc, #36]	@ (80001b4 <setupTxCAN+0x68>)
 8000190:	22a4      	movs	r2, #164	@ 0xa4
 8000192:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xA5;
 8000194:	4b07      	ldr	r3, [pc, #28]	@ (80001b4 <setupTxCAN+0x68>)
 8000196:	22a5      	movs	r2, #165	@ 0xa5
 8000198:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xA6;
 800019a:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <setupTxCAN+0x68>)
 800019c:	22a6      	movs	r2, #166	@ 0xa6
 800019e:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xA7;
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <setupTxCAN+0x68>)
 80001a2:	22a7      	movs	r2, #167	@ 0xa7
 80001a4:	71da      	strb	r2, [r3, #7]
}
 80001a6:	bf00      	nop
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	200000b0 	.word	0x200000b0
 80001b4:	200000c8 	.word	0x200000c8

080001b8 <setupRxCAN>:

void setupRxCAN()
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
    canfilterconfig.FilterBank = 0;
 80001bc:	4b13      	ldr	r3, [pc, #76]	@ (800020c <setupRxCAN+0x54>)
 80001be:	2200      	movs	r2, #0
 80001c0:	615a      	str	r2, [r3, #20]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001c2:	4b12      	ldr	r3, [pc, #72]	@ (800020c <setupRxCAN+0x54>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	619a      	str	r2, [r3, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001c8:	4b10      	ldr	r3, [pc, #64]	@ (800020c <setupRxCAN+0x54>)
 80001ca:	2201      	movs	r2, #1
 80001cc:	61da      	str	r2, [r3, #28]
    canfilterconfig.FilterIdHigh = 0x0000;
 80001ce:	4b0f      	ldr	r3, [pc, #60]	@ (800020c <setupRxCAN+0x54>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
    canfilterconfig.FilterIdLow = 0x0000;
 80001d4:	4b0d      	ldr	r3, [pc, #52]	@ (800020c <setupRxCAN+0x54>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	605a      	str	r2, [r3, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 80001da:	4b0c      	ldr	r3, [pc, #48]	@ (800020c <setupRxCAN+0x54>)
 80001dc:	2200      	movs	r2, #0
 80001de:	609a      	str	r2, [r3, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80001e0:	4b0a      	ldr	r3, [pc, #40]	@ (800020c <setupRxCAN+0x54>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	60da      	str	r2, [r3, #12]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001e6:	4b09      	ldr	r3, [pc, #36]	@ (800020c <setupRxCAN+0x54>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	611a      	str	r2, [r3, #16]
    canfilterconfig.FilterActivation = ENABLE;
 80001ec:	4b07      	ldr	r3, [pc, #28]	@ (800020c <setupRxCAN+0x54>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	621a      	str	r2, [r3, #32]
    canfilterconfig.SlaveStartFilterBank = 14;
 80001f2:	4b06      	ldr	r3, [pc, #24]	@ (800020c <setupRxCAN+0x54>)
 80001f4:	220e      	movs	r2, #14
 80001f6:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 80001f8:	4904      	ldr	r1, [pc, #16]	@ (800020c <setupRxCAN+0x54>)
 80001fa:	4805      	ldr	r0, [pc, #20]	@ (8000210 <setupRxCAN+0x58>)
 80001fc:	f001 f9c5 	bl	800158a <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000200:	2102      	movs	r1, #2
 8000202:	4803      	ldr	r0, [pc, #12]	@ (8000210 <setupRxCAN+0x58>)
 8000204:	f001 fcbe 	bl	8001b84 <HAL_CAN_ActivateNotification>
}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200000d4 	.word	0x200000d4
 8000210:	20000088 	.word	0x20000088

08000214 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * @param  CanHandle: pointer to a CAN_HandleTypeDef structure that contains
 *         the configuration information for the specified CAN.
 * @retval None
 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b082      	sub	sp, #8
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
    /* Get RX message */
    if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData)
 800021c:	4b0c      	ldr	r3, [pc, #48]	@ (8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800021e:	4a0d      	ldr	r2, [pc, #52]	@ (8000254 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000220:	2100      	movs	r1, #0
 8000222:	6878      	ldr	r0, [r7, #4]
 8000224:	f001 fb8d 	bl	8001942 <HAL_CAN_GetRxMessage>
 8000228:	4603      	mov	r3, r0
 800022a:	2b00      	cmp	r3, #0
 800022c:	d001      	beq.n	8000232 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
            != HAL_OK)
    {
        /* Reception Error */
        Error_Handler();
 800022e:	f000 f9d1 	bl	80005d4 <Error_Handler>
    }

    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
 8000232:	2104      	movs	r1, #4
 8000234:	4808      	ldr	r0, [pc, #32]	@ (8000258 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000236:	f002 f997 	bl	8002568 <HAL_GPIO_TogglePin>
    // Echo received CAN message
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, RxData, &TxMailbox);
 800023a:	4b08      	ldr	r3, [pc, #32]	@ (800025c <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 800023c:	4a04      	ldr	r2, [pc, #16]	@ (8000250 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000240:	4808      	ldr	r0, [pc, #32]	@ (8000264 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000242:	f001 faaf 	bl	80017a4 <HAL_CAN_AddTxMessage>
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000118 	.word	0x20000118
 8000254:	200000fc 	.word	0x200000fc
 8000258:	40010c00 	.word	0x40010c00
 800025c:	200000d0 	.word	0x200000d0
 8000260:	200000b0 	.word	0x200000b0
 8000264:	20000088 	.word	0x20000088

08000268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800026c:	f000 fb06 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f840 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f000 f956 	bl	8000524 <MX_GPIO_Init>
  MX_CAN_Init();
 8000278:	f000 f914 	bl	80004a4 <MX_CAN_Init>
  MX_ADC1_Init();
 800027c:	f000 f896 	bl	80003ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8000280:	f000 f8d2 	bl	8000428 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
    setupTxCAN();
 8000284:	f7ff ff62 	bl	800014c <setupTxCAN>
    setupRxCAN();
 8000288:	f7ff ff96 	bl	80001b8 <setupRxCAN>

    HAL_ADCEx_Calibration_Start(&hadc1);
 800028c:	4816      	ldr	r0, [pc, #88]	@ (80002e8 <main+0x80>)
 800028e:	f000 ffd3 	bl	8001238 <HAL_ADCEx_Calibration_Start>
    HAL_ADCEx_Calibration_Start(&hadc2);
 8000292:	4816      	ldr	r0, [pc, #88]	@ (80002ec <main+0x84>)
 8000294:	f000 ffd0 	bl	8001238 <HAL_ADCEx_Calibration_Start>
    while (1)
    {

    	//https://deepbluembedded.com/stm32-adc-read-example-dma-interrupt-polling/

    	HAL_ADC_Start(&hadc1);
 8000298:	4813      	ldr	r0, [pc, #76]	@ (80002e8 <main+0x80>)
 800029a:	f000 fc4d 	bl	8000b38 <HAL_ADC_Start>

    	HAL_ADC_PollForConversion(&hadc1, 1);
 800029e:	2101      	movs	r1, #1
 80002a0:	4811      	ldr	r0, [pc, #68]	@ (80002e8 <main+0x80>)
 80002a2:	f000 fd23 	bl	8000cec <HAL_ADC_PollForConversion>
    	adc_buf[0] = HAL_ADC_GetValue(&hadc1);
 80002a6:	4810      	ldr	r0, [pc, #64]	@ (80002e8 <main+0x80>)
 80002a8:	f000 fe26 	bl	8000ef8 <HAL_ADC_GetValue>
 80002ac:	4603      	mov	r3, r0
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b0f      	ldr	r3, [pc, #60]	@ (80002f0 <main+0x88>)
 80002b2:	801a      	strh	r2, [r3, #0]

    	HAL_ADC_Stop(&hadc1);
 80002b4:	480c      	ldr	r0, [pc, #48]	@ (80002e8 <main+0x80>)
 80002b6:	f000 fced 	bl	8000c94 <HAL_ADC_Stop>

    	HAL_ADC_Start(&hadc2);
 80002ba:	480c      	ldr	r0, [pc, #48]	@ (80002ec <main+0x84>)
 80002bc:	f000 fc3c 	bl	8000b38 <HAL_ADC_Start>

    	HAL_ADC_PollForConversion(&hadc2, 1);
 80002c0:	2101      	movs	r1, #1
 80002c2:	480a      	ldr	r0, [pc, #40]	@ (80002ec <main+0x84>)
 80002c4:	f000 fd12 	bl	8000cec <HAL_ADC_PollForConversion>
    	adc_buf[1] = HAL_ADC_GetValue(&hadc2);
 80002c8:	4808      	ldr	r0, [pc, #32]	@ (80002ec <main+0x84>)
 80002ca:	f000 fe15 	bl	8000ef8 <HAL_ADC_GetValue>
 80002ce:	4603      	mov	r3, r0
 80002d0:	b29a      	uxth	r2, r3
 80002d2:	4b07      	ldr	r3, [pc, #28]	@ (80002f0 <main+0x88>)
 80002d4:	805a      	strh	r2, [r3, #2]


    	HAL_ADC_Stop(&hadc2);
 80002d6:	4805      	ldr	r0, [pc, #20]	@ (80002ec <main+0x84>)
 80002d8:	f000 fcdc 	bl	8000c94 <HAL_ADC_Stop>
//		TxData[5] = 0x00;
//		TxData[6] = 0x00;
//		TxData[7] = gpio_in_buf[1] & 0x08;
//
//		txCAN();
        HAL_Delay(500);
 80002dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002e0:	f000 fb2e 	bl	8000940 <HAL_Delay>
    	HAL_ADC_Start(&hadc1);
 80002e4:	bf00      	nop
 80002e6:	e7d7      	b.n	8000298 <main+0x30>
 80002e8:	20000028 	.word	0x20000028
 80002ec:	20000058 	.word	0x20000058
 80002f0:	20000120 	.word	0x20000120

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b094      	sub	sp, #80	@ 0x50
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002fe:	2228      	movs	r2, #40	@ 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 feb4 	bl	8003070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	2200      	movs	r2, #0
 800030e:	601a      	str	r2, [r3, #0]
 8000310:	605a      	str	r2, [r3, #4]
 8000312:	609a      	str	r2, [r3, #8]
 8000314:	60da      	str	r2, [r3, #12]
 8000316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800032c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800032e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000332:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000334:	2301      	movs	r3, #1
 8000336:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000338:	2302      	movs	r3, #2
 800033a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800033c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000340:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000342:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000348:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800034c:	4618      	mov	r0, r3
 800034e:	f002 f925 	bl	800259c <HAL_RCC_OscConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000358:	f000 f93c 	bl	80005d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800035c:	230f      	movs	r3, #15
 800035e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000360:	2302      	movs	r3, #2
 8000362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000364:	2300      	movs	r3, #0
 8000366:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800036c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800036e:	2300      	movs	r3, #0
 8000370:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000372:	f107 0314 	add.w	r3, r7, #20
 8000376:	2102      	movs	r1, #2
 8000378:	4618      	mov	r0, r3
 800037a:	f002 fb91 	bl	8002aa0 <HAL_RCC_ClockConfig>
 800037e:	4603      	mov	r3, r0
 8000380:	2b00      	cmp	r3, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000384:	f000 f926 	bl	80005d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000388:	2302      	movs	r3, #2
 800038a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800038c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000390:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4618      	mov	r0, r3
 8000396:	f002 fcff 	bl	8002d98 <HAL_RCCEx_PeriphCLKConfig>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80003a0:	f000 f918 	bl	80005d4 <Error_Handler>
  }
}
 80003a4:	bf00      	nop
 80003a6:	3750      	adds	r7, #80	@ 0x50
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bd80      	pop	{r7, pc}

080003ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b084      	sub	sp, #16
 80003b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2200      	movs	r2, #0
 80003b6:	601a      	str	r2, [r3, #0]
 80003b8:	605a      	str	r2, [r3, #4]
 80003ba:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80003bc:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003be:	4a19      	ldr	r2, [pc, #100]	@ (8000424 <MX_ADC1_Init+0x78>)
 80003c0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003c2:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80003c8:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003ce:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003d4:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003d6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003da:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003dc:	4b10      	ldr	r3, [pc, #64]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003de:	2200      	movs	r2, #0
 80003e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80003e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e8:	480d      	ldr	r0, [pc, #52]	@ (8000420 <MX_ADC1_Init+0x74>)
 80003ea:	f000 facd 	bl	8000988 <HAL_ADC_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80003f4:	f000 f8ee 	bl	80005d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003f8:	2302      	movs	r3, #2
 80003fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000400:	2300      	movs	r3, #0
 8000402:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	4619      	mov	r1, r3
 8000408:	4805      	ldr	r0, [pc, #20]	@ (8000420 <MX_ADC1_Init+0x74>)
 800040a:	f000 fd81 	bl	8000f10 <HAL_ADC_ConfigChannel>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000414:	f000 f8de 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	bf00      	nop
 800041a:	3710      	adds	r7, #16
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	40012400 	.word	0x40012400

08000428 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2200      	movs	r2, #0
 8000432:	601a      	str	r2, [r3, #0]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000438:	4b18      	ldr	r3, [pc, #96]	@ (800049c <MX_ADC2_Init+0x74>)
 800043a:	4a19      	ldr	r2, [pc, #100]	@ (80004a0 <MX_ADC2_Init+0x78>)
 800043c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800043e:	4b17      	ldr	r3, [pc, #92]	@ (800049c <MX_ADC2_Init+0x74>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000444:	4b15      	ldr	r3, [pc, #84]	@ (800049c <MX_ADC2_Init+0x74>)
 8000446:	2200      	movs	r2, #0
 8000448:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800044a:	4b14      	ldr	r3, [pc, #80]	@ (800049c <MX_ADC2_Init+0x74>)
 800044c:	2200      	movs	r2, #0
 800044e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000450:	4b12      	ldr	r3, [pc, #72]	@ (800049c <MX_ADC2_Init+0x74>)
 8000452:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000456:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000458:	4b10      	ldr	r3, [pc, #64]	@ (800049c <MX_ADC2_Init+0x74>)
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800045e:	4b0f      	ldr	r3, [pc, #60]	@ (800049c <MX_ADC2_Init+0x74>)
 8000460:	2201      	movs	r2, #1
 8000462:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000464:	480d      	ldr	r0, [pc, #52]	@ (800049c <MX_ADC2_Init+0x74>)
 8000466:	f000 fa8f 	bl	8000988 <HAL_ADC_Init>
 800046a:	4603      	mov	r3, r0
 800046c:	2b00      	cmp	r3, #0
 800046e:	d001      	beq.n	8000474 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000470:	f000 f8b0 	bl	80005d4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000474:	2303      	movs	r3, #3
 8000476:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000478:	2301      	movs	r3, #1
 800047a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800047c:	2300      	movs	r3, #0
 800047e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4619      	mov	r1, r3
 8000484:	4805      	ldr	r0, [pc, #20]	@ (800049c <MX_ADC2_Init+0x74>)
 8000486:	f000 fd43 	bl	8000f10 <HAL_ADC_ConfigChannel>
 800048a:	4603      	mov	r3, r0
 800048c:	2b00      	cmp	r3, #0
 800048e:	d001      	beq.n	8000494 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000490:	f000 f8a0 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000494:	bf00      	nop
 8000496:	3710      	adds	r7, #16
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000058 	.word	0x20000058
 80004a0:	40012800 	.word	0x40012800

080004a4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80004a8:	4b1c      	ldr	r3, [pc, #112]	@ (800051c <MX_CAN_Init+0x78>)
 80004aa:	4a1d      	ldr	r2, [pc, #116]	@ (8000520 <MX_CAN_Init+0x7c>)
 80004ac:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80004ae:	4b1b      	ldr	r3, [pc, #108]	@ (800051c <MX_CAN_Init+0x78>)
 80004b0:	2202      	movs	r2, #2
 80004b2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004b4:	4b19      	ldr	r3, [pc, #100]	@ (800051c <MX_CAN_Init+0x78>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80004ba:	4b18      	ldr	r3, [pc, #96]	@ (800051c <MX_CAN_Init+0x78>)
 80004bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80004c0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80004c2:	4b16      	ldr	r3, [pc, #88]	@ (800051c <MX_CAN_Init+0x78>)
 80004c4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80004c8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80004ca:	4b14      	ldr	r3, [pc, #80]	@ (800051c <MX_CAN_Init+0x78>)
 80004cc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80004d0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004d2:	4b12      	ldr	r3, [pc, #72]	@ (800051c <MX_CAN_Init+0x78>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004d8:	4b10      	ldr	r3, [pc, #64]	@ (800051c <MX_CAN_Init+0x78>)
 80004da:	2200      	movs	r2, #0
 80004dc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <MX_CAN_Init+0x78>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80004e4:	4b0d      	ldr	r3, [pc, #52]	@ (800051c <MX_CAN_Init+0x78>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <MX_CAN_Init+0x78>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	@ (800051c <MX_CAN_Init+0x78>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004f6:	4809      	ldr	r0, [pc, #36]	@ (800051c <MX_CAN_Init+0x78>)
 80004f8:	f000 ff4c 	bl	8001394 <HAL_CAN_Init>
 80004fc:	4603      	mov	r3, r0
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d001      	beq.n	8000506 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000502:	f000 f867 	bl	80005d4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000506:	4805      	ldr	r0, [pc, #20]	@ (800051c <MX_CAN_Init+0x78>)
 8000508:	f001 f908 	bl	800171c <HAL_CAN_Start>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <MX_CAN_Init+0x72>
    {
        /* Start Error */
        Error_Handler();
 8000512:	f000 f85f 	bl	80005d4 <Error_Handler>
    }

  /* USER CODE END CAN_Init 2 */

}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000088 	.word	0x20000088
 8000520:	40006400 	.word	0x40006400

08000524 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b088      	sub	sp, #32
 8000528:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052a:	f107 0310 	add.w	r3, r7, #16
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000538:	4b23      	ldr	r3, [pc, #140]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a22      	ldr	r2, [pc, #136]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 800053e:	f043 0320 	orr.w	r3, r3, #32
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b20      	ldr	r3, [pc, #128]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0320 	and.w	r3, r3, #32
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000550:	4b1d      	ldr	r3, [pc, #116]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 8000552:	699b      	ldr	r3, [r3, #24]
 8000554:	4a1c      	ldr	r2, [pc, #112]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 8000556:	f043 0304 	orr.w	r3, r3, #4
 800055a:	6193      	str	r3, [r2, #24]
 800055c:	4b1a      	ldr	r3, [pc, #104]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 800055e:	699b      	ldr	r3, [r3, #24]
 8000560:	f003 0304 	and.w	r3, r3, #4
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000568:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 800056e:	f043 0308 	orr.w	r3, r3, #8
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <MX_GPIO_Init+0xa4>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0308 	and.w	r3, r3, #8
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2104      	movs	r1, #4
 8000584:	4811      	ldr	r0, [pc, #68]	@ (80005cc <MX_GPIO_Init+0xa8>)
 8000586:	f001 ffd7 	bl	8002538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800058a:	2303      	movs	r3, #3
 800058c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800058e:	2300      	movs	r3, #0
 8000590:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <MX_GPIO_Init+0xac>)
 800059e:	f001 fe47 	bl	8002230 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 80005a2:	2304      	movs	r3, #4
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a6:	2301      	movs	r3, #1
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	4804      	ldr	r0, [pc, #16]	@ (80005cc <MX_GPIO_Init+0xa8>)
 80005ba:	f001 fe39 	bl	8002230 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005be:	bf00      	nop
 80005c0:	3720      	adds	r7, #32
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	40010c00 	.word	0x40010c00
 80005d0:	40010800 	.word	0x40010800

080005d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d8:	b672      	cpsid	i
}
 80005da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80005dc:	bf00      	nop
 80005de:	e7fd      	b.n	80005dc <Error_Handler+0x8>

080005e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <HAL_MspInit+0x5c>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a14      	ldr	r2, [pc, #80]	@ (800063c <HAL_MspInit+0x5c>)
 80005ec:	f043 0301 	orr.w	r3, r3, #1
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b12      	ldr	r3, [pc, #72]	@ (800063c <HAL_MspInit+0x5c>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f003 0301 	and.w	r3, r3, #1
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_MspInit+0x5c>)
 8000600:	69db      	ldr	r3, [r3, #28]
 8000602:	4a0e      	ldr	r2, [pc, #56]	@ (800063c <HAL_MspInit+0x5c>)
 8000604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000608:	61d3      	str	r3, [r2, #28]
 800060a:	4b0c      	ldr	r3, [pc, #48]	@ (800063c <HAL_MspInit+0x5c>)
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000616:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <HAL_MspInit+0x60>)
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	60fb      	str	r3, [r7, #12]
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	4a04      	ldr	r2, [pc, #16]	@ (8000640 <HAL_MspInit+0x60>)
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000632:	bf00      	nop
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	40021000 	.word	0x40021000
 8000640:	40010000 	.word	0x40010000

08000644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08a      	sub	sp, #40	@ 0x28
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064c:	f107 0318 	add.w	r3, r7, #24
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4a28      	ldr	r2, [pc, #160]	@ (8000700 <HAL_ADC_MspInit+0xbc>)
 8000660:	4293      	cmp	r3, r2
 8000662:	d122      	bne.n	80006aa <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a26      	ldr	r2, [pc, #152]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 800066a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b24      	ldr	r3, [pc, #144]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b21      	ldr	r3, [pc, #132]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a20      	ldr	r2, [pc, #128]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1e      	ldr	r3, [pc, #120]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	613b      	str	r3, [r7, #16]
 8000692:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000694:	2304      	movs	r3, #4
 8000696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000698:	2303      	movs	r3, #3
 800069a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 0318 	add.w	r3, r7, #24
 80006a0:	4619      	mov	r1, r3
 80006a2:	4819      	ldr	r0, [pc, #100]	@ (8000708 <HAL_ADC_MspInit+0xc4>)
 80006a4:	f001 fdc4 	bl	8002230 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80006a8:	e026      	b.n	80006f8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a17      	ldr	r2, [pc, #92]	@ (800070c <HAL_ADC_MspInit+0xc8>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d121      	bne.n	80006f8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006b6:	699b      	ldr	r3, [r3, #24]
 80006b8:	4a12      	ldr	r2, [pc, #72]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006be:	6193      	str	r3, [r2, #24]
 80006c0:	4b10      	ldr	r3, [pc, #64]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006c2:	699b      	ldr	r3, [r3, #24]
 80006c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006ce:	699b      	ldr	r3, [r3, #24]
 80006d0:	4a0c      	ldr	r2, [pc, #48]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	6193      	str	r3, [r2, #24]
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <HAL_ADC_MspInit+0xc0>)
 80006da:	699b      	ldr	r3, [r3, #24]
 80006dc:	f003 0304 	and.w	r3, r3, #4
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e4:	2308      	movs	r3, #8
 80006e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e8:	2303      	movs	r3, #3
 80006ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ec:	f107 0318 	add.w	r3, r7, #24
 80006f0:	4619      	mov	r1, r3
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <HAL_ADC_MspInit+0xc4>)
 80006f4:	f001 fd9c 	bl	8002230 <HAL_GPIO_Init>
}
 80006f8:	bf00      	nop
 80006fa:	3728      	adds	r7, #40	@ 0x28
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40012400 	.word	0x40012400
 8000704:	40021000 	.word	0x40021000
 8000708:	40010800 	.word	0x40010800
 800070c:	40012800 	.word	0x40012800

08000710 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b088      	sub	sp, #32
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <HAL_CAN_MspInit+0x9c>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d139      	bne.n	80007a4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000730:	4b1f      	ldr	r3, [pc, #124]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	4a1e      	ldr	r2, [pc, #120]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 8000736:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800073a:	61d3      	str	r3, [r2, #28]
 800073c:	4b1c      	ldr	r3, [pc, #112]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 800073e:	69db      	ldr	r3, [r3, #28]
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	4a18      	ldr	r2, [pc, #96]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 800074e:	f043 0304 	orr.w	r3, r3, #4
 8000752:	6193      	str	r3, [r2, #24]
 8000754:	4b16      	ldr	r3, [pc, #88]	@ (80007b0 <HAL_CAN_MspInit+0xa0>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f003 0304 	and.w	r3, r3, #4
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000760:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f107 0310 	add.w	r3, r7, #16
 8000772:	4619      	mov	r1, r3
 8000774:	480f      	ldr	r0, [pc, #60]	@ (80007b4 <HAL_CAN_MspInit+0xa4>)
 8000776:	f001 fd5b 	bl	8002230 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	4809      	ldr	r0, [pc, #36]	@ (80007b4 <HAL_CAN_MspInit+0xa4>)
 8000790:	f001 fd4e 	bl	8002230 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	2100      	movs	r1, #0
 8000798:	2014      	movs	r0, #20
 800079a:	f001 fd12 	bl	80021c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800079e:	2014      	movs	r0, #20
 80007a0:	f001 fd2b 	bl	80021fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80007a4:	bf00      	nop
 80007a6:	3720      	adds	r7, #32
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	40006400 	.word	0x40006400
 80007b0:	40021000 	.word	0x40021000
 80007b4:	40010800 	.word	0x40010800

080007b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007bc:	bf00      	nop
 80007be:	e7fd      	b.n	80007bc <NMI_Handler+0x4>

080007c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <HardFault_Handler+0x4>

080007c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <MemManage_Handler+0x4>

080007d0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <BusFault_Handler+0x4>

080007d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <UsageFault_Handler+0x4>

080007e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007e4:	bf00      	nop
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr

080007f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f87e 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}

08000810 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000814:	4802      	ldr	r0, [pc, #8]	@ (8000820 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000816:	f001 f9da 	bl	8001bce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000088 	.word	0x20000088

08000824 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000830:	f7ff fff8 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000834:	480b      	ldr	r0, [pc, #44]	@ (8000864 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000836:	490c      	ldr	r1, [pc, #48]	@ (8000868 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000838:	4a0c      	ldr	r2, [pc, #48]	@ (800086c <LoopFillZerobss+0x16>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800083c:	e002      	b.n	8000844 <LoopCopyDataInit>

0800083e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000842:	3304      	adds	r3, #4

08000844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000848:	d3f9      	bcc.n	800083e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800084a:	4a09      	ldr	r2, [pc, #36]	@ (8000870 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800084c:	4c09      	ldr	r4, [pc, #36]	@ (8000874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000850:	e001      	b.n	8000856 <LoopFillZerobss>

08000852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000854:	3204      	adds	r2, #4

08000856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000858:	d3fb      	bcc.n	8000852 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800085a:	f002 fc11 	bl	8003080 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fd03 	bl	8000268 <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	08003128 	.word	0x08003128
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	20000128 	.word	0x20000128

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	@ (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	@ (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f001 fc8d 	bl	80021ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	200f      	movs	r0, #15
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff fea2 	bl	80005e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fca5 	bl	8002216 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f001 fc6d 	bl	80021c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	@ (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	@ (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000008 	.word	0x20000008
 8000928:	20000124 	.word	0x20000124

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	@ (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	20000124 	.word	0x20000124

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fff0 	bl	800092c <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_Delay+0x44>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffe0 	bl	800092c <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3710      	adds	r7, #16
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000008 	.word	0x20000008

08000988 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000990:	2300      	movs	r3, #0
 8000992:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000998:	2300      	movs	r3, #0
 800099a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d101      	bne.n	80009aa <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e0be      	b.n	8000b28 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d109      	bne.n	80009cc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f7ff fe3c 	bl	8000644 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	f000 fbf1 	bl	80011b4 <ADC_ConversionStop_Disable>
 80009d2:	4603      	mov	r3, r0
 80009d4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009da:	f003 0310 	and.w	r3, r3, #16
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8099 	bne.w	8000b16 <HAL_ADC_Init+0x18e>
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f040 8095 	bne.w	8000b16 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80009f4:	f023 0302 	bic.w	r3, r3, #2
 80009f8:	f043 0202 	orr.w	r2, r3, #2
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a08:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	7b1b      	ldrb	r3, [r3, #12]
 8000a0e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000a10:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000a20:	d003      	beq.n	8000a2a <HAL_ADC_Init+0xa2>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d102      	bne.n	8000a30 <HAL_ADC_Init+0xa8>
 8000a2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a2e:	e000      	b.n	8000a32 <HAL_ADC_Init+0xaa>
 8000a30:	2300      	movs	r3, #0
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	7d1b      	ldrb	r3, [r3, #20]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d119      	bne.n	8000a74 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	7b1b      	ldrb	r3, [r3, #12]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	035a      	lsls	r2, r3, #13
 8000a50:	693b      	ldr	r3, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a58:	613b      	str	r3, [r7, #16]
 8000a5a:	e00b      	b.n	8000a74 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a60:	f043 0220 	orr.w	r2, r3, #32
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a6c:	f043 0201 	orr.w	r2, r3, #1
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	430a      	orrs	r2, r1
 8000a86:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	689a      	ldr	r2, [r3, #8]
 8000a8e:	4b28      	ldr	r3, [pc, #160]	@ (8000b30 <HAL_ADC_Init+0x1a8>)
 8000a90:	4013      	ands	r3, r2
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	68b9      	ldr	r1, [r7, #8]
 8000a98:	430b      	orrs	r3, r1
 8000a9a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	689b      	ldr	r3, [r3, #8]
 8000aa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000aa4:	d003      	beq.n	8000aae <HAL_ADC_Init+0x126>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	689b      	ldr	r3, [r3, #8]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d104      	bne.n	8000ab8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	691b      	ldr	r3, [r3, #16]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	051b      	lsls	r3, r3, #20
 8000ab6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abe:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68fa      	ldr	r2, [r7, #12]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	4b18      	ldr	r3, [pc, #96]	@ (8000b34 <HAL_ADC_Init+0x1ac>)
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d10b      	bne.n	8000af4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ae6:	f023 0303 	bic.w	r3, r3, #3
 8000aea:	f043 0201 	orr.w	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000af2:	e018      	b.n	8000b26 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000af8:	f023 0312 	bic.w	r3, r3, #18
 8000afc:	f043 0210 	orr.w	r2, r3, #16
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b08:	f043 0201 	orr.w	r2, r3, #1
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b14:	e007      	b.n	8000b26 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b1a:	f043 0210 	orr.w	r2, r3, #16
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	ffe1f7fd 	.word	0xffe1f7fd
 8000b34:	ff1f0efe 	.word	0xff1f0efe

08000b38 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b40:	2300      	movs	r3, #0
 8000b42:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d101      	bne.n	8000b52 <HAL_ADC_Start+0x1a>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e098      	b.n	8000c84 <HAL_ADC_Start+0x14c>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2201      	movs	r2, #1
 8000b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f000 fad0 	bl	8001100 <ADC_Enable>
 8000b60:	4603      	mov	r3, r0
 8000b62:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000b64:	7bfb      	ldrb	r3, [r7, #15]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f040 8087 	bne.w	8000c7a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000b74:	f023 0301 	bic.w	r3, r3, #1
 8000b78:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a41      	ldr	r2, [pc, #260]	@ (8000c8c <HAL_ADC_Start+0x154>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d105      	bne.n	8000b96 <HAL_ADC_Start+0x5e>
 8000b8a:	4b41      	ldr	r3, [pc, #260]	@ (8000c90 <HAL_ADC_Start+0x158>)
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d115      	bne.n	8000bc2 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b9a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d026      	beq.n	8000bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bb4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000bb8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bc0:	e01d      	b.n	8000bfe <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <HAL_ADC_Start+0x158>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d004      	beq.n	8000be2 <HAL_ADC_Start+0xaa>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a2b      	ldr	r2, [pc, #172]	@ (8000c8c <HAL_ADC_Start+0x154>)
 8000bde:	4293      	cmp	r3, r2
 8000be0:	d10d      	bne.n	8000bfe <HAL_ADC_Start+0xc6>
 8000be2:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <HAL_ADC_Start+0x158>)
 8000be4:	685b      	ldr	r3, [r3, #4]
 8000be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d007      	beq.n	8000bfe <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bf2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000bf6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d006      	beq.n	8000c18 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c0e:	f023 0206 	bic.w	r2, r3, #6
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c16:	e002      	b.n	8000c1e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f06f 0202 	mvn.w	r2, #2
 8000c2e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000c3a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000c3e:	d113      	bne.n	8000c68 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c44:	4a11      	ldr	r2, [pc, #68]	@ (8000c8c <HAL_ADC_Start+0x154>)
 8000c46:	4293      	cmp	r3, r2
 8000c48:	d105      	bne.n	8000c56 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000c4a:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <HAL_ADC_Start+0x158>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d108      	bne.n	8000c68 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	689a      	ldr	r2, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	e00c      	b.n	8000c82 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	e003      	b.n	8000c82 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40012800 	.word	0x40012800
 8000c90:	40012400 	.word	0x40012400

08000c94 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <HAL_ADC_Stop+0x1a>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e01a      	b.n	8000ce4 <HAL_ADC_Stop+0x50>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f000 fa7c 	bl	80011b4 <ADC_ConversionStop_Disable>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d109      	bne.n	8000cda <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cca:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	f043 0201 	orr.w	r2, r3, #1
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000cec:	b590      	push	{r4, r7, lr}
 8000cee:	b087      	sub	sp, #28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8000d02:	f7ff fe13 	bl	800092c <HAL_GetTick>
 8000d06:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00b      	beq.n	8000d2e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1a:	f043 0220 	orr.w	r2, r3, #32
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2200      	movs	r2, #0
 8000d26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e0d3      	b.n	8000ed6 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d131      	bne.n	8000da0 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d42:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d12a      	bne.n	8000da0 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d4a:	e021      	b.n	8000d90 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d52:	d01d      	beq.n	8000d90 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d007      	beq.n	8000d6a <HAL_ADC_PollForConversion+0x7e>
 8000d5a:	f7ff fde7 	bl	800092c <HAL_GetTick>
 8000d5e:	4602      	mov	r2, r0
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	1ad3      	subs	r3, r2, r3
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d212      	bcs.n	8000d90 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f003 0302 	and.w	r3, r3, #2
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10b      	bne.n	8000d90 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d7c:	f043 0204 	orr.w	r2, r3, #4
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	e0a2      	b.n	8000ed6 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0302 	and.w	r3, r3, #2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d0d6      	beq.n	8000d4c <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000d9e:	e070      	b.n	8000e82 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000da0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ee0 <HAL_ADC_PollForConversion+0x1f4>)
 8000da2:	681c      	ldr	r4, [r3, #0]
 8000da4:	2002      	movs	r0, #2
 8000da6:	f002 f8ad 	bl	8002f04 <HAL_RCCEx_GetPeriphCLKFreq>
 8000daa:	4603      	mov	r3, r0
 8000dac:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	6919      	ldr	r1, [r3, #16]
 8000db6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ee4 <HAL_ADC_PollForConversion+0x1f8>)
 8000db8:	400b      	ands	r3, r1
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d118      	bne.n	8000df0 <HAL_ADC_PollForConversion+0x104>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	68d9      	ldr	r1, [r3, #12]
 8000dc4:	4b48      	ldr	r3, [pc, #288]	@ (8000ee8 <HAL_ADC_PollForConversion+0x1fc>)
 8000dc6:	400b      	ands	r3, r1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d111      	bne.n	8000df0 <HAL_ADC_PollForConversion+0x104>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	6919      	ldr	r1, [r3, #16]
 8000dd2:	4b46      	ldr	r3, [pc, #280]	@ (8000eec <HAL_ADC_PollForConversion+0x200>)
 8000dd4:	400b      	ands	r3, r1
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d108      	bne.n	8000dec <HAL_ADC_PollForConversion+0x100>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	68d9      	ldr	r1, [r3, #12]
 8000de0:	4b43      	ldr	r3, [pc, #268]	@ (8000ef0 <HAL_ADC_PollForConversion+0x204>)
 8000de2:	400b      	ands	r3, r1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d101      	bne.n	8000dec <HAL_ADC_PollForConversion+0x100>
 8000de8:	2314      	movs	r3, #20
 8000dea:	e020      	b.n	8000e2e <HAL_ADC_PollForConversion+0x142>
 8000dec:	2329      	movs	r3, #41	@ 0x29
 8000dee:	e01e      	b.n	8000e2e <HAL_ADC_PollForConversion+0x142>
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	6919      	ldr	r1, [r3, #16]
 8000df6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <HAL_ADC_PollForConversion+0x200>)
 8000df8:	400b      	ands	r3, r1
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d106      	bne.n	8000e0c <HAL_ADC_PollForConversion+0x120>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	68d9      	ldr	r1, [r3, #12]
 8000e04:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <HAL_ADC_PollForConversion+0x204>)
 8000e06:	400b      	ands	r3, r1
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d00d      	beq.n	8000e28 <HAL_ADC_PollForConversion+0x13c>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	6919      	ldr	r1, [r3, #16]
 8000e12:	4b38      	ldr	r3, [pc, #224]	@ (8000ef4 <HAL_ADC_PollForConversion+0x208>)
 8000e14:	400b      	ands	r3, r1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d108      	bne.n	8000e2c <HAL_ADC_PollForConversion+0x140>
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	68d9      	ldr	r1, [r3, #12]
 8000e20:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <HAL_ADC_PollForConversion+0x208>)
 8000e22:	400b      	ands	r3, r1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d101      	bne.n	8000e2c <HAL_ADC_PollForConversion+0x140>
 8000e28:	2354      	movs	r3, #84	@ 0x54
 8000e2a:	e000      	b.n	8000e2e <HAL_ADC_PollForConversion+0x142>
 8000e2c:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000e2e:	fb02 f303 	mul.w	r3, r2, r3
 8000e32:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e34:	e021      	b.n	8000e7a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e3c:	d01a      	beq.n	8000e74 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_PollForConversion+0x168>
 8000e44:	f7ff fd72 	bl	800092c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d20f      	bcs.n	8000e74 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d90b      	bls.n	8000e74 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e60:	f043 0204 	orr.w	r2, r3, #4
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e030      	b.n	8000ed6 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d8d9      	bhi.n	8000e36 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f06f 0212 	mvn.w	r2, #18
 8000e8a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e90:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ea2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ea6:	d115      	bne.n	8000ed4 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d111      	bne.n	8000ed4 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ec0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d105      	bne.n	8000ed4 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ecc:	f043 0201 	orr.w	r2, r3, #1
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	371c      	adds	r7, #28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd90      	pop	{r4, r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	24924924 	.word	0x24924924
 8000ee8:	00924924 	.word	0x00924924
 8000eec:	12492492 	.word	0x12492492
 8000ef0:	00492492 	.word	0x00492492
 8000ef4:	00249249 	.word	0x00249249

08000ef8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr

08000f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_ADC_ConfigChannel+0x20>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e0dc      	b.n	80010ea <HAL_ADC_ConfigChannel+0x1da>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b06      	cmp	r3, #6
 8000f3e:	d81c      	bhi.n	8000f7a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b05      	subs	r3, #5
 8000f52:	221f      	movs	r2, #31
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4019      	ands	r1, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b05      	subs	r3, #5
 8000f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f78:	e03c      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b0c      	cmp	r3, #12
 8000f80:	d81c      	bhi.n	8000fbc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	4613      	mov	r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	4413      	add	r3, r2
 8000f92:	3b23      	subs	r3, #35	@ 0x23
 8000f94:	221f      	movs	r2, #31
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	4019      	ands	r1, r3
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	6818      	ldr	r0, [r3, #0]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685a      	ldr	r2, [r3, #4]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	4413      	add	r3, r2
 8000fac:	3b23      	subs	r3, #35	@ 0x23
 8000fae:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000fba:	e01b      	b.n	8000ff4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685a      	ldr	r2, [r3, #4]
 8000fc6:	4613      	mov	r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	3b41      	subs	r3, #65	@ 0x41
 8000fce:	221f      	movs	r2, #31
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	4413      	add	r3, r2
 8000fe6:	3b41      	subs	r3, #65	@ 0x41
 8000fe8:	fa00 f203 	lsl.w	r2, r0, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	430a      	orrs	r2, r1
 8000ff2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b09      	cmp	r3, #9
 8000ffa:	d91c      	bls.n	8001036 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	68d9      	ldr	r1, [r3, #12]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	4613      	mov	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4413      	add	r3, r2
 800100c:	3b1e      	subs	r3, #30
 800100e:	2207      	movs	r2, #7
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	4019      	ands	r1, r3
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	6898      	ldr	r0, [r3, #8]
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4613      	mov	r3, r2
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	4413      	add	r3, r2
 8001026:	3b1e      	subs	r3, #30
 8001028:	fa00 f203 	lsl.w	r2, r0, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	60da      	str	r2, [r3, #12]
 8001034:	e019      	b.n	800106a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	6919      	ldr	r1, [r3, #16]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	2207      	movs	r2, #7
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	4019      	ands	r1, r3
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	6898      	ldr	r0, [r3, #8]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	4613      	mov	r3, r2
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	4413      	add	r3, r2
 800105e:	fa00 f203 	lsl.w	r2, r0, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2b10      	cmp	r3, #16
 8001070:	d003      	beq.n	800107a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001076:	2b11      	cmp	r3, #17
 8001078:	d132      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d125      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d126      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689a      	ldr	r2, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b10      	cmp	r3, #16
 80010a8:	d11a      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010aa:	4b13      	ldr	r3, [pc, #76]	@ (80010f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <HAL_ADC_ConfigChannel+0x1ec>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	0c9a      	lsrs	r2, r3, #18
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c0:	e002      	b.n	80010c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f9      	bne.n	80010c2 <HAL_ADC_ConfigChannel+0x1b2>
 80010ce:	e007      	b.n	80010e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d4:	f043 0220 	orr.w	r2, r3, #32
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr
 80010f4:	40012400 	.word	0x40012400
 80010f8:	20000000 	.word	0x20000000
 80010fc:	431bde83 	.word	0x431bde83

08001100 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	2b01      	cmp	r3, #1
 800111c:	d040      	beq.n	80011a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	689a      	ldr	r2, [r3, #8]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f042 0201 	orr.w	r2, r2, #1
 800112c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <ADC_Enable+0xac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <ADC_Enable+0xb0>)
 8001134:	fba2 2303 	umull	r2, r3, r2, r3
 8001138:	0c9b      	lsrs	r3, r3, #18
 800113a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800113c:	e002      	b.n	8001144 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3b01      	subs	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d1f9      	bne.n	800113e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800114a:	f7ff fbef 	bl	800092c <HAL_GetTick>
 800114e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001150:	e01f      	b.n	8001192 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001152:	f7ff fbeb 	bl	800092c <HAL_GetTick>
 8001156:	4602      	mov	r2, r0
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	1ad3      	subs	r3, r2, r3
 800115c:	2b02      	cmp	r3, #2
 800115e:	d918      	bls.n	8001192 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d011      	beq.n	8001192 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001172:	f043 0210 	orr.w	r2, r3, #16
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800117e:	f043 0201 	orr.w	r2, r3, #1
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e007      	b.n	80011a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 0301 	and.w	r3, r3, #1
 800119c:	2b01      	cmp	r3, #1
 800119e:	d1d8      	bne.n	8001152 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83

080011b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d12e      	bne.n	800122c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f022 0201 	bic.w	r2, r2, #1
 80011dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80011de:	f7ff fba5 	bl	800092c <HAL_GetTick>
 80011e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80011e4:	e01b      	b.n	800121e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80011e6:	f7ff fba1 	bl	800092c <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d914      	bls.n	800121e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d10d      	bne.n	800121e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001206:	f043 0210 	orr.w	r2, r3, #16
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	f043 0201 	orr.w	r2, r3, #1
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e007      	b.n	800122e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d0dc      	beq.n	80011e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001240:	2300      	movs	r3, #0
 8001242:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800124e:	2b01      	cmp	r3, #1
 8001250:	d101      	bne.n	8001256 <HAL_ADCEx_Calibration_Start+0x1e>
 8001252:	2302      	movs	r3, #2
 8001254:	e097      	b.n	8001386 <HAL_ADCEx_Calibration_Start+0x14e>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffa8 	bl	80011b4 <ADC_ConversionStop_Disable>
 8001264:	4603      	mov	r3, r0
 8001266:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff49 	bl	8001100 <ADC_Enable>
 800126e:	4603      	mov	r3, r0
 8001270:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001272:	7dfb      	ldrb	r3, [r7, #23]
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 8081 	bne.w	800137c <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001282:	f023 0302 	bic.w	r3, r3, #2
 8001286:	f043 0202 	orr.w	r2, r3, #2
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800128e:	4b40      	ldr	r3, [pc, #256]	@ (8001390 <HAL_ADCEx_Calibration_Start+0x158>)
 8001290:	681c      	ldr	r4, [r3, #0]
 8001292:	2002      	movs	r0, #2
 8001294:	f001 fe36 	bl	8002f04 <HAL_RCCEx_GetPeriphCLKFreq>
 8001298:	4603      	mov	r3, r0
 800129a:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800129e:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80012a0:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80012a2:	e002      	b.n	80012aa <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1f9      	bne.n	80012a4 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f042 0208 	orr.w	r2, r2, #8
 80012be:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80012c0:	f7ff fb34 	bl	800092c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012c6:	e01b      	b.n	8001300 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80012c8:	f7ff fb30 	bl	800092c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d914      	bls.n	8001300 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0308 	and.w	r3, r3, #8
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d00d      	beq.n	8001300 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e8:	f023 0312 	bic.w	r3, r3, #18
 80012ec:	f043 0210 	orr.w	r2, r3, #16
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e042      	b.n	8001386 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1dc      	bne.n	80012c8 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f042 0204 	orr.w	r2, r2, #4
 800131c:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800131e:	f7ff fb05 	bl	800092c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001324:	e01b      	b.n	800135e <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001326:	f7ff fb01 	bl	800092c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b0a      	cmp	r3, #10
 8001332:	d914      	bls.n	800135e <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00d      	beq.n	800135e <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	f023 0312 	bic.w	r3, r3, #18
 800134a:	f043 0210 	orr.w	r2, r3, #16
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e013      	b.n	8001386 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0304 	and.w	r3, r3, #4
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1dc      	bne.n	8001326 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001370:	f023 0303 	bic.w	r3, r3, #3
 8001374:	f043 0201 	orr.w	r2, r3, #1
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001384:	7dfb      	ldrb	r3, [r7, #23]
}
 8001386:	4618      	mov	r0, r3
 8001388:	371c      	adds	r7, #28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd90      	pop	{r4, r7, pc}
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e0ed      	b.n	8001582 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff f9ac 	bl	8000710 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c8:	f7ff fab0 	bl	800092c <HAL_GetTick>
 80013cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013ce:	e012      	b.n	80013f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013d0:	f7ff faac 	bl	800092c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b0a      	cmp	r3, #10
 80013dc:	d90b      	bls.n	80013f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2205      	movs	r2, #5
 80013ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0c5      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0e5      	beq.n	80013d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0202 	bic.w	r2, r2, #2
 8001412:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001414:	f7ff fa8a 	bl	800092c <HAL_GetTick>
 8001418:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800141a:	e012      	b.n	8001442 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800141c:	f7ff fa86 	bl	800092c <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b0a      	cmp	r3, #10
 8001428:	d90b      	bls.n	8001442 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800142e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	2205      	movs	r2, #5
 800143a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e09f      	b.n	8001582 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1e5      	bne.n	800141c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	e007      	b.n	800147a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7e5b      	ldrb	r3, [r3, #25]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d108      	bne.n	8001494 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e007      	b.n	80014a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80014a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7e9b      	ldrb	r3, [r3, #26]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d108      	bne.n	80014be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f042 0220 	orr.w	r2, r2, #32
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e007      	b.n	80014ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0220 	bic.w	r2, r2, #32
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7edb      	ldrb	r3, [r3, #27]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d108      	bne.n	80014e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	e007      	b.n	80014f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0210 	orr.w	r2, r2, #16
 80014f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b01      	cmp	r3, #1
 80014fe:	d108      	bne.n	8001512 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0208 	orr.w	r2, r2, #8
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	e007      	b.n	8001522 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0208 	bic.w	r2, r2, #8
 8001520:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	7f5b      	ldrb	r3, [r3, #29]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d108      	bne.n	800153c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f042 0204 	orr.w	r2, r2, #4
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	e007      	b.n	800154c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f022 0204 	bic.w	r2, r2, #4
 800154a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	ea42 0103 	orr.w	r1, r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	430a      	orrs	r2, r1
 8001570:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800158a:	b480      	push	{r7}
 800158c:	b087      	sub	sp, #28
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80015a2:	7cfb      	ldrb	r3, [r7, #19]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d003      	beq.n	80015b0 <HAL_CAN_ConfigFilter+0x26>
 80015a8:	7cfb      	ldrb	r3, [r7, #19]
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	f040 80aa 	bne.w	8001704 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f003 031f 	and.w	r3, r3, #31
 80015c8:	2201      	movs	r2, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	43db      	mvns	r3, r3
 80015da:	401a      	ands	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d123      	bne.n	8001632 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43db      	mvns	r3, r3
 80015f4:	401a      	ands	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800160c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3248      	adds	r2, #72	@ 0x48
 8001612:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001626:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	3348      	adds	r3, #72	@ 0x48
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d122      	bne.n	8001680 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	431a      	orrs	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800165a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	3248      	adds	r2, #72	@ 0x48
 8001660:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001674:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001676:	6979      	ldr	r1, [r7, #20]
 8001678:	3348      	adds	r3, #72	@ 0x48
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	440b      	add	r3, r1
 800167e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	699b      	ldr	r3, [r3, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d109      	bne.n	800169c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	43db      	mvns	r3, r3
 8001692:	401a      	ands	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800169a:	e007      	b.n	80016ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	431a      	orrs	r2, r3
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d109      	bne.n	80016c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43db      	mvns	r3, r3
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80016c6:	e007      	b.n	80016d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	431a      	orrs	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d107      	bne.n	80016f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	431a      	orrs	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016f6:	f023 0201 	bic.w	r2, r3, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001700:	2300      	movs	r3, #0
 8001702:	e006      	b.n	8001712 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001708:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
  }
}
 8001712:	4618      	mov	r0, r3
 8001714:	371c      	adds	r7, #28
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3020 	ldrb.w	r3, [r3, #32]
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b01      	cmp	r3, #1
 800172e:	d12e      	bne.n	800178e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2202      	movs	r2, #2
 8001734:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f022 0201 	bic.w	r2, r2, #1
 8001746:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff f8f0 	bl	800092c <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800174e:	e012      	b.n	8001776 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001750:	f7ff f8ec 	bl	800092c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b0a      	cmp	r3, #10
 800175c:	d90b      	bls.n	8001776 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001762:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2205      	movs	r2, #5
 800176e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e012      	b.n	800179c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0301 	and.w	r3, r3, #1
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1e5      	bne.n	8001750 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	e006      	b.n	800179c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001792:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
  }
}
 800179c:	4618      	mov	r0, r3
 800179e:	3710      	adds	r7, #16
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	@ 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
 80017b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d003      	beq.n	80017d0 <HAL_CAN_AddTxMessage+0x2c>
 80017c8:	7ffb      	ldrb	r3, [r7, #31]
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	f040 80ad 	bne.w	800192a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10a      	bne.n	80017f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d105      	bne.n	80017f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 8095 	beq.w	800191a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	0e1b      	lsrs	r3, r3, #24
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017fa:	2201      	movs	r2, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	409a      	lsls	r2, r3
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d10d      	bne.n	8001828 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6809      	ldr	r1, [r1, #0]
 800181a:	431a      	orrs	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3318      	adds	r3, #24
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	440b      	add	r3, r1
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00f      	b.n	8001848 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001832:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800183c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	3318      	adds	r3, #24
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	440b      	add	r3, r1
 8001846:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6819      	ldr	r1, [r3, #0]
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3318      	adds	r3, #24
 8001854:	011b      	lsls	r3, r3, #4
 8001856:	440b      	add	r3, r1
 8001858:	3304      	adds	r3, #4
 800185a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	7d1b      	ldrb	r3, [r3, #20]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d111      	bne.n	8001888 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	3318      	adds	r3, #24
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	4413      	add	r3, r2
 8001870:	3304      	adds	r3, #4
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3318      	adds	r3, #24
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	440b      	add	r3, r1
 8001884:	3304      	adds	r3, #4
 8001886:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3307      	adds	r3, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	061a      	lsls	r2, r3, #24
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3306      	adds	r3, #6
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	041b      	lsls	r3, r3, #16
 8001898:	431a      	orrs	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3305      	adds	r3, #5
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	4313      	orrs	r3, r2
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	3204      	adds	r2, #4
 80018a8:	7812      	ldrb	r2, [r2, #0]
 80018aa:	4610      	mov	r0, r2
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	6811      	ldr	r1, [r2, #0]
 80018b0:	ea43 0200 	orr.w	r2, r3, r0
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	011b      	lsls	r3, r3, #4
 80018b8:	440b      	add	r3, r1
 80018ba:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80018be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3303      	adds	r3, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	061a      	lsls	r2, r3, #24
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3302      	adds	r3, #2
 80018cc:	781b      	ldrb	r3, [r3, #0]
 80018ce:	041b      	lsls	r3, r3, #16
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3301      	adds	r3, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	4313      	orrs	r3, r2
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	7812      	ldrb	r2, [r2, #0]
 80018e0:	4610      	mov	r0, r2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	6811      	ldr	r1, [r2, #0]
 80018e6:	ea43 0200 	orr.w	r2, r3, r0
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	011b      	lsls	r3, r3, #4
 80018ee:	440b      	add	r3, r1
 80018f0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80018f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3318      	adds	r3, #24
 80018fe:	011b      	lsls	r3, r3, #4
 8001900:	4413      	add	r3, r2
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	6811      	ldr	r1, [r2, #0]
 8001908:	f043 0201 	orr.w	r2, r3, #1
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3318      	adds	r3, #24
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	440b      	add	r3, r1
 8001914:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001916:	2300      	movs	r3, #0
 8001918:	e00e      	b.n	8001938 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800191e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e006      	b.n	8001938 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
  }
}
 8001938:	4618      	mov	r0, r3
 800193a:	3724      	adds	r7, #36	@ 0x24
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr

08001942 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001942:	b480      	push	{r7}
 8001944:	b087      	sub	sp, #28
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001956:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d003      	beq.n	8001966 <HAL_CAN_GetRxMessage+0x24>
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	2b02      	cmp	r3, #2
 8001962:	f040 8103 	bne.w	8001b6c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d10e      	bne.n	800198a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d116      	bne.n	80019a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e0f7      	b.n	8001b7a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b00      	cmp	r3, #0
 8001996:	d107      	bne.n	80019a8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e0e8      	b.n	8001b7a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	331b      	adds	r3, #27
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0204 	and.w	r2, r3, #4
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10c      	bne.n	80019e0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	331b      	adds	r3, #27
 80019ce:	011b      	lsls	r3, r3, #4
 80019d0:	4413      	add	r3, r2
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	0d5b      	lsrs	r3, r3, #21
 80019d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e00b      	b.n	80019f8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	331b      	adds	r3, #27
 80019e8:	011b      	lsls	r3, r3, #4
 80019ea:	4413      	add	r3, r2
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	08db      	lsrs	r3, r3, #3
 80019f0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	331b      	adds	r3, #27
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	4413      	add	r3, r2
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0202 	and.w	r2, r3, #2
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	331b      	adds	r3, #27
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0308 	and.w	r3, r3, #8
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2208      	movs	r2, #8
 8001a2a:	611a      	str	r2, [r3, #16]
 8001a2c:	e00b      	b.n	8001a46 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	331b      	adds	r3, #27
 8001a36:	011b      	lsls	r3, r3, #4
 8001a38:	4413      	add	r3, r2
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 020f 	and.w	r2, r3, #15
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	331b      	adds	r3, #27
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0a1b      	lsrs	r3, r3, #8
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	331b      	adds	r3, #27
 8001a66:	011b      	lsls	r3, r3, #4
 8001a68:	4413      	add	r3, r2
 8001a6a:	3304      	adds	r3, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0c1b      	lsrs	r3, r3, #16
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	4413      	add	r3, r2
 8001a80:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	4413      	add	r3, r2
 8001a96:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0a1a      	lsrs	r2, r3, #8
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	4413      	add	r3, r2
 8001ab0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	0c1a      	lsrs	r2, r3, #16
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	3302      	adds	r3, #2
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	4413      	add	r3, r2
 8001aca:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	0e1a      	lsrs	r2, r3, #24
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	3303      	adds	r3, #3
 8001ad6:	b2d2      	uxtb	r2, r2
 8001ad8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	011b      	lsls	r3, r3, #4
 8001ae2:	4413      	add	r3, r2
 8001ae4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	3304      	adds	r3, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	011b      	lsls	r3, r3, #4
 8001afa:	4413      	add	r3, r2
 8001afc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	0a1a      	lsrs	r2, r3, #8
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	3305      	adds	r3, #5
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	011b      	lsls	r3, r3, #4
 8001b14:	4413      	add	r3, r2
 8001b16:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0c1a      	lsrs	r2, r3, #16
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	3306      	adds	r3, #6
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	4413      	add	r3, r2
 8001b30:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	0e1a      	lsrs	r2, r3, #24
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	3307      	adds	r3, #7
 8001b3c:	b2d2      	uxtb	r2, r2
 8001b3e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d108      	bne.n	8001b58 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68da      	ldr	r2, [r3, #12]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f042 0220 	orr.w	r2, r2, #32
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	e007      	b.n	8001b68 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e006      	b.n	8001b7a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
  }
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b94:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d002      	beq.n	8001ba2 <HAL_CAN_ActivateNotification+0x1e>
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d109      	bne.n	8001bb6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6959      	ldr	r1, [r3, #20]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e006      	b.n	8001bc4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
  }
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr

08001bce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b08a      	sub	sp, #40	@ 0x28
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c0a:	6a3b      	ldr	r3, [r7, #32]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d07c      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d023      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2201      	movs	r2, #1
 8001c24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f983 	bl	8001f3c <HAL_CAN_TxMailbox0CompleteCallback>
 8001c36:	e016      	b.n	8001c66 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4a:	e00c      	b.n	8001c66 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5e:	e002      	b.n	8001c66 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f986 	bl	8001f72 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d024      	beq.n	8001cba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f962 	bl	8001f4e <HAL_CAN_TxMailbox1CompleteCallback>
 8001c8a:	e016      	b.n	8001cba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d004      	beq.n	8001ca0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c9e:	e00c      	b.n	8001cba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb2:	e002      	b.n	8001cba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f000 f965 	bl	8001f84 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001cba:	69bb      	ldr	r3, [r7, #24]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d024      	beq.n	8001d0e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ccc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d003      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f000 f941 	bl	8001f60 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cde:	e016      	b.n	8001d0e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d004      	beq.n	8001cf4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cf2:	e00c      	b.n	8001d0e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d004      	beq.n	8001d08 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d06:	e002      	b.n	8001d0e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f944 	bl	8001f96 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d0e:	6a3b      	ldr	r3, [r7, #32]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 0310 	and.w	r3, r3, #16
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d007      	beq.n	8001d32 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2210      	movs	r2, #16
 8001d30:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00b      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f92a 	bl	8001fa8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f7fe fa51 	bl	8000214 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00c      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d007      	beq.n	8001d96 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2210      	movs	r2, #16
 8001d94:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	f003 0320 	and.w	r3, r3, #32
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00b      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d006      	beq.n	8001db8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2208      	movs	r2, #8
 8001db0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f90a 	bl	8001fcc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0303 	and.w	r3, r3, #3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	f000 f8f2 	bl	8001fba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dd6:	6a3b      	ldr	r3, [r7, #32]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00b      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2210      	movs	r2, #16
 8001df0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8f3 	bl	8001fde <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00b      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d006      	beq.n	8001e1a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2208      	movs	r2, #8
 8001e12:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8eb 	bl	8001ff0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e1a:	6a3b      	ldr	r3, [r7, #32]
 8001e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d07b      	beq.n	8001f1c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d072      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e2e:	6a3b      	ldr	r3, [r7, #32]
 8001e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d008      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e4a:	6a3b      	ldr	r3, [r7, #32]
 8001e4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e66:	6a3b      	ldr	r3, [r7, #32]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d008      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	f043 0304 	orr.w	r3, r3, #4
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d043      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d03e      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e9c:	2b60      	cmp	r3, #96	@ 0x60
 8001e9e:	d02b      	beq.n	8001ef8 <HAL_CAN_IRQHandler+0x32a>
 8001ea0:	2b60      	cmp	r3, #96	@ 0x60
 8001ea2:	d82e      	bhi.n	8001f02 <HAL_CAN_IRQHandler+0x334>
 8001ea4:	2b50      	cmp	r3, #80	@ 0x50
 8001ea6:	d022      	beq.n	8001eee <HAL_CAN_IRQHandler+0x320>
 8001ea8:	2b50      	cmp	r3, #80	@ 0x50
 8001eaa:	d82a      	bhi.n	8001f02 <HAL_CAN_IRQHandler+0x334>
 8001eac:	2b40      	cmp	r3, #64	@ 0x40
 8001eae:	d019      	beq.n	8001ee4 <HAL_CAN_IRQHandler+0x316>
 8001eb0:	2b40      	cmp	r3, #64	@ 0x40
 8001eb2:	d826      	bhi.n	8001f02 <HAL_CAN_IRQHandler+0x334>
 8001eb4:	2b30      	cmp	r3, #48	@ 0x30
 8001eb6:	d010      	beq.n	8001eda <HAL_CAN_IRQHandler+0x30c>
 8001eb8:	2b30      	cmp	r3, #48	@ 0x30
 8001eba:	d822      	bhi.n	8001f02 <HAL_CAN_IRQHandler+0x334>
 8001ebc:	2b10      	cmp	r3, #16
 8001ebe:	d002      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x2f8>
 8001ec0:	2b20      	cmp	r3, #32
 8001ec2:	d005      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ec4:	e01d      	b.n	8001f02 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	f043 0308 	orr.w	r3, r3, #8
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ece:	e019      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f043 0310 	orr.w	r3, r3, #16
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed8:	e014      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	f043 0320 	orr.w	r3, r3, #32
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ee2:	e00f      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eec:	e00a      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ef6:	e005      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f00:	e000      	b.n	8001f04 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f02:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699a      	ldr	r2, [r3, #24]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f12:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f867 	bl	8002002 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f34:	bf00      	nop
 8001f36:	3728      	adds	r7, #40	@ 0x28
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr

08001fba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr

08002002 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002086:	2b00      	cmp	r3, #0
 8002088:	db0b      	blt.n	80020a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	f003 021f 	and.w	r2, r3, #31
 8002090:	4906      	ldr	r1, [pc, #24]	@ (80020ac <__NVIC_EnableIRQ+0x34>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	095b      	lsrs	r3, r3, #5
 8002098:	2001      	movs	r0, #1
 800209a:	fa00 f202 	lsl.w	r2, r0, r2
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	e000e100 	.word	0xe000e100

080020b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	6039      	str	r1, [r7, #0]
 80020ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	db0a      	blt.n	80020da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	490c      	ldr	r1, [pc, #48]	@ (80020fc <__NVIC_SetPriority+0x4c>)
 80020ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	b2d2      	uxtb	r2, r2
 80020d2:	440b      	add	r3, r1
 80020d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020d8:	e00a      	b.n	80020f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	b2da      	uxtb	r2, r3
 80020de:	4908      	ldr	r1, [pc, #32]	@ (8002100 <__NVIC_SetPriority+0x50>)
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	3b04      	subs	r3, #4
 80020e8:	0112      	lsls	r2, r2, #4
 80020ea:	b2d2      	uxtb	r2, r2
 80020ec:	440b      	add	r3, r1
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	bf00      	nop
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002104:	b480      	push	{r7}
 8002106:	b089      	sub	sp, #36	@ 0x24
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f1c3 0307 	rsb	r3, r3, #7
 800211e:	2b04      	cmp	r3, #4
 8002120:	bf28      	it	cs
 8002122:	2304      	movcs	r3, #4
 8002124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3304      	adds	r3, #4
 800212a:	2b06      	cmp	r3, #6
 800212c:	d902      	bls.n	8002134 <NVIC_EncodePriority+0x30>
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	3b03      	subs	r3, #3
 8002132:	e000      	b.n	8002136 <NVIC_EncodePriority+0x32>
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 32ff 	mov.w	r2, #4294967295
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	401a      	ands	r2, r3
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	fa01 f303 	lsl.w	r3, r1, r3
 8002156:	43d9      	mvns	r1, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800215c:	4313      	orrs	r3, r2
         );
}
 800215e:	4618      	mov	r0, r3
 8002160:	3724      	adds	r7, #36	@ 0x24
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr

08002168 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002178:	d301      	bcc.n	800217e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800217a:	2301      	movs	r3, #1
 800217c:	e00f      	b.n	800219e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800217e:	4a0a      	ldr	r2, [pc, #40]	@ (80021a8 <SysTick_Config+0x40>)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	3b01      	subs	r3, #1
 8002184:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002186:	210f      	movs	r1, #15
 8002188:	f04f 30ff 	mov.w	r0, #4294967295
 800218c:	f7ff ff90 	bl	80020b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002190:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <SysTick_Config+0x40>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002196:	4b04      	ldr	r3, [pc, #16]	@ (80021a8 <SysTick_Config+0x40>)
 8002198:	2207      	movs	r2, #7
 800219a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	e000e010 	.word	0xe000e010

080021ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff ff2d 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 80021ba:	bf00      	nop
 80021bc:	3708      	adds	r7, #8
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021d4:	f7ff ff42 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	68b9      	ldr	r1, [r7, #8]
 80021de:	6978      	ldr	r0, [r7, #20]
 80021e0:	f7ff ff90 	bl	8002104 <NVIC_EncodePriority>
 80021e4:	4602      	mov	r2, r0
 80021e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ea:	4611      	mov	r1, r2
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ff5f 	bl	80020b0 <__NVIC_SetPriority>
}
 80021f2:	bf00      	nop
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff ff35 	bl	8002078 <__NVIC_EnableIRQ>
}
 800220e:	bf00      	nop
 8002210:	3708      	adds	r7, #8
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b082      	sub	sp, #8
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff ffa2 	bl	8002168 <SysTick_Config>
 8002224:	4603      	mov	r3, r0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002230:	b480      	push	{r7}
 8002232:	b08b      	sub	sp, #44	@ 0x2c
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800223e:	2300      	movs	r3, #0
 8002240:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002242:	e169      	b.n	8002518 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002244:	2201      	movs	r2, #1
 8002246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	429a      	cmp	r2, r3
 800225e:	f040 8158 	bne.w	8002512 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	4a9a      	ldr	r2, [pc, #616]	@ (80024d0 <HAL_GPIO_Init+0x2a0>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d05e      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 800226c:	4a98      	ldr	r2, [pc, #608]	@ (80024d0 <HAL_GPIO_Init+0x2a0>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d875      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 8002272:	4a98      	ldr	r2, [pc, #608]	@ (80024d4 <HAL_GPIO_Init+0x2a4>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d058      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002278:	4a96      	ldr	r2, [pc, #600]	@ (80024d4 <HAL_GPIO_Init+0x2a4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d86f      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 800227e:	4a96      	ldr	r2, [pc, #600]	@ (80024d8 <HAL_GPIO_Init+0x2a8>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d052      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002284:	4a94      	ldr	r2, [pc, #592]	@ (80024d8 <HAL_GPIO_Init+0x2a8>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d869      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 800228a:	4a94      	ldr	r2, [pc, #592]	@ (80024dc <HAL_GPIO_Init+0x2ac>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d04c      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 8002290:	4a92      	ldr	r2, [pc, #584]	@ (80024dc <HAL_GPIO_Init+0x2ac>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d863      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 8002296:	4a92      	ldr	r2, [pc, #584]	@ (80024e0 <HAL_GPIO_Init+0x2b0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d046      	beq.n	800232a <HAL_GPIO_Init+0xfa>
 800229c:	4a90      	ldr	r2, [pc, #576]	@ (80024e0 <HAL_GPIO_Init+0x2b0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d85d      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d82a      	bhi.n	80022fc <HAL_GPIO_Init+0xcc>
 80022a6:	2b12      	cmp	r3, #18
 80022a8:	d859      	bhi.n	800235e <HAL_GPIO_Init+0x12e>
 80022aa:	a201      	add	r2, pc, #4	@ (adr r2, 80022b0 <HAL_GPIO_Init+0x80>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	0800232b 	.word	0x0800232b
 80022b4:	08002305 	.word	0x08002305
 80022b8:	08002317 	.word	0x08002317
 80022bc:	08002359 	.word	0x08002359
 80022c0:	0800235f 	.word	0x0800235f
 80022c4:	0800235f 	.word	0x0800235f
 80022c8:	0800235f 	.word	0x0800235f
 80022cc:	0800235f 	.word	0x0800235f
 80022d0:	0800235f 	.word	0x0800235f
 80022d4:	0800235f 	.word	0x0800235f
 80022d8:	0800235f 	.word	0x0800235f
 80022dc:	0800235f 	.word	0x0800235f
 80022e0:	0800235f 	.word	0x0800235f
 80022e4:	0800235f 	.word	0x0800235f
 80022e8:	0800235f 	.word	0x0800235f
 80022ec:	0800235f 	.word	0x0800235f
 80022f0:	0800235f 	.word	0x0800235f
 80022f4:	0800230d 	.word	0x0800230d
 80022f8:	08002321 	.word	0x08002321
 80022fc:	4a79      	ldr	r2, [pc, #484]	@ (80024e4 <HAL_GPIO_Init+0x2b4>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002302:	e02c      	b.n	800235e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	623b      	str	r3, [r7, #32]
          break;
 800230a:	e029      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	3304      	adds	r3, #4
 8002312:	623b      	str	r3, [r7, #32]
          break;
 8002314:	e024      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	3308      	adds	r3, #8
 800231c:	623b      	str	r3, [r7, #32]
          break;
 800231e:	e01f      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	330c      	adds	r3, #12
 8002326:	623b      	str	r3, [r7, #32]
          break;
 8002328:	e01a      	b.n	8002360 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d102      	bne.n	8002338 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002332:	2304      	movs	r3, #4
 8002334:	623b      	str	r3, [r7, #32]
          break;
 8002336:	e013      	b.n	8002360 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d105      	bne.n	800234c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002340:	2308      	movs	r3, #8
 8002342:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	611a      	str	r2, [r3, #16]
          break;
 800234a:	e009      	b.n	8002360 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800234c:	2308      	movs	r3, #8
 800234e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	615a      	str	r2, [r3, #20]
          break;
 8002356:	e003      	b.n	8002360 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002358:	2300      	movs	r3, #0
 800235a:	623b      	str	r3, [r7, #32]
          break;
 800235c:	e000      	b.n	8002360 <HAL_GPIO_Init+0x130>
          break;
 800235e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	2bff      	cmp	r3, #255	@ 0xff
 8002364:	d801      	bhi.n	800236a <HAL_GPIO_Init+0x13a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	e001      	b.n	800236e <HAL_GPIO_Init+0x13e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3304      	adds	r3, #4
 800236e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	@ 0xff
 8002374:	d802      	bhi.n	800237c <HAL_GPIO_Init+0x14c>
 8002376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	e002      	b.n	8002382 <HAL_GPIO_Init+0x152>
 800237c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237e:	3b08      	subs	r3, #8
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	210f      	movs	r1, #15
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	fa01 f303 	lsl.w	r3, r1, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	401a      	ands	r2, r3
 8002394:	6a39      	ldr	r1, [r7, #32]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fa01 f303 	lsl.w	r3, r1, r3
 800239c:	431a      	orrs	r2, r3
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80b1 	beq.w	8002512 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023b0:	4b4d      	ldr	r3, [pc, #308]	@ (80024e8 <HAL_GPIO_Init+0x2b8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a4c      	ldr	r2, [pc, #304]	@ (80024e8 <HAL_GPIO_Init+0x2b8>)
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	6193      	str	r3, [r2, #24]
 80023bc:	4b4a      	ldr	r3, [pc, #296]	@ (80024e8 <HAL_GPIO_Init+0x2b8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c8:	4a48      	ldr	r2, [pc, #288]	@ (80024ec <HAL_GPIO_Init+0x2bc>)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023cc:	089b      	lsrs	r3, r3, #2
 80023ce:	3302      	adds	r3, #2
 80023d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	f003 0303 	and.w	r3, r3, #3
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	220f      	movs	r2, #15
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a40      	ldr	r2, [pc, #256]	@ (80024f0 <HAL_GPIO_Init+0x2c0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d013      	beq.n	800241c <HAL_GPIO_Init+0x1ec>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a3f      	ldr	r2, [pc, #252]	@ (80024f4 <HAL_GPIO_Init+0x2c4>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d00d      	beq.n	8002418 <HAL_GPIO_Init+0x1e8>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a3e      	ldr	r2, [pc, #248]	@ (80024f8 <HAL_GPIO_Init+0x2c8>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d007      	beq.n	8002414 <HAL_GPIO_Init+0x1e4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3d      	ldr	r2, [pc, #244]	@ (80024fc <HAL_GPIO_Init+0x2cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d101      	bne.n	8002410 <HAL_GPIO_Init+0x1e0>
 800240c:	2303      	movs	r3, #3
 800240e:	e006      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002410:	2304      	movs	r3, #4
 8002412:	e004      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002414:	2302      	movs	r3, #2
 8002416:	e002      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_GPIO_Init+0x1ee>
 800241c:	2300      	movs	r3, #0
 800241e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002420:	f002 0203 	and.w	r2, r2, #3
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	4093      	lsls	r3, r2
 8002428:	68fa      	ldr	r2, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800242e:	492f      	ldr	r1, [pc, #188]	@ (80024ec <HAL_GPIO_Init+0x2bc>)
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	089b      	lsrs	r3, r3, #2
 8002434:	3302      	adds	r3, #2
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002448:	4b2d      	ldr	r3, [pc, #180]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800244a:	689a      	ldr	r2, [r3, #8]
 800244c:	492c      	ldr	r1, [pc, #176]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	608b      	str	r3, [r1, #8]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002456:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4928      	ldr	r1, [pc, #160]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002470:	4b23      	ldr	r3, [pc, #140]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002472:	68da      	ldr	r2, [r3, #12]
 8002474:	4922      	ldr	r1, [pc, #136]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	60cb      	str	r3, [r1, #12]
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002480:	68da      	ldr	r2, [r3, #12]
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	43db      	mvns	r3, r3
 8002486:	491e      	ldr	r1, [pc, #120]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 8002488:	4013      	ands	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d006      	beq.n	80024a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002498:	4b19      	ldr	r3, [pc, #100]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	4918      	ldr	r1, [pc, #96]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024a6:	4b16      	ldr	r3, [pc, #88]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	4914      	ldr	r1, [pc, #80]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d021      	beq.n	8002504 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	490e      	ldr	r1, [pc, #56]	@ (8002500 <HAL_GPIO_Init+0x2d0>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	600b      	str	r3, [r1, #0]
 80024cc:	e021      	b.n	8002512 <HAL_GPIO_Init+0x2e2>
 80024ce:	bf00      	nop
 80024d0:	10320000 	.word	0x10320000
 80024d4:	10310000 	.word	0x10310000
 80024d8:	10220000 	.word	0x10220000
 80024dc:	10210000 	.word	0x10210000
 80024e0:	10120000 	.word	0x10120000
 80024e4:	10110000 	.word	0x10110000
 80024e8:	40021000 	.word	0x40021000
 80024ec:	40010000 	.word	0x40010000
 80024f0:	40010800 	.word	0x40010800
 80024f4:	40010c00 	.word	0x40010c00
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40011400 	.word	0x40011400
 8002500:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <HAL_GPIO_Init+0x304>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	43db      	mvns	r3, r3
 800250c:	4909      	ldr	r1, [pc, #36]	@ (8002534 <HAL_GPIO_Init+0x304>)
 800250e:	4013      	ands	r3, r2
 8002510:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	3301      	adds	r3, #1
 8002516:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	fa22 f303 	lsr.w	r3, r2, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	f47f ae8e 	bne.w	8002244 <HAL_GPIO_Init+0x14>
  }
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	372c      	adds	r7, #44	@ 0x2c
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr
 8002534:	40010400 	.word	0x40010400

08002538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	460b      	mov	r3, r1
 8002542:	807b      	strh	r3, [r7, #2]
 8002544:	4613      	mov	r3, r2
 8002546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002548:	787b      	ldrb	r3, [r7, #1]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800254e:	887a      	ldrh	r2, [r7, #2]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002554:	e003      	b.n	800255e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002556:	887b      	ldrh	r3, [r7, #2]
 8002558:	041a      	lsls	r2, r3, #16
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
}
 800255e:	bf00      	nop
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800257a:	887a      	ldrh	r2, [r7, #2]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4013      	ands	r3, r2
 8002580:	041a      	lsls	r2, r3, #16
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	43d9      	mvns	r1, r3
 8002586:	887b      	ldrh	r3, [r7, #2]
 8002588:	400b      	ands	r3, r1
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	611a      	str	r2, [r3, #16]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bc80      	pop	{r7}
 8002598:	4770      	bx	lr
	...

0800259c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e272      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 8087 	beq.w	80026ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025bc:	4b92      	ldr	r3, [pc, #584]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f003 030c 	and.w	r3, r3, #12
 80025c4:	2b04      	cmp	r3, #4
 80025c6:	d00c      	beq.n	80025e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025c8:	4b8f      	ldr	r3, [pc, #572]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f003 030c 	and.w	r3, r3, #12
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d112      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
 80025d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025e0:	d10b      	bne.n	80025fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e2:	4b89      	ldr	r3, [pc, #548]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d06c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x12c>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d168      	bne.n	80026c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e24c      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002602:	d106      	bne.n	8002612 <HAL_RCC_OscConfig+0x76>
 8002604:	4b80      	ldr	r3, [pc, #512]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7f      	ldr	r2, [pc, #508]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	e02e      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_RCC_OscConfig+0x98>
 800261a:	4b7b      	ldr	r3, [pc, #492]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7a      	ldr	r2, [pc, #488]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002620:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	4b78      	ldr	r3, [pc, #480]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a77      	ldr	r2, [pc, #476]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800262c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	e01d      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0xbc>
 800263e:	4b72      	ldr	r3, [pc, #456]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a71      	ldr	r2, [pc, #452]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002644:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6e      	ldr	r2, [pc, #440]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e00b      	b.n	8002670 <HAL_RCC_OscConfig+0xd4>
 8002658:	4b6b      	ldr	r3, [pc, #428]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6a      	ldr	r2, [pc, #424]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800265e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	4b68      	ldr	r3, [pc, #416]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a67      	ldr	r2, [pc, #412]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800266e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d013      	beq.n	80026a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe f958 	bl	800092c <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe f954 	bl	800092c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e200      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002692:	4b5d      	ldr	r3, [pc, #372]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d0f0      	beq.n	8002680 <HAL_RCC_OscConfig+0xe4>
 800269e:	e014      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe f944 	bl	800092c <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe f940 	bl	800092c <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e1ec      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ba:	4b53      	ldr	r3, [pc, #332]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d1f0      	bne.n	80026a8 <HAL_RCC_OscConfig+0x10c>
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d063      	beq.n	800279e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80026e2:	4b49      	ldr	r3, [pc, #292]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b08      	cmp	r3, #8
 80026ec:	d11c      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
 80026ee:	4b46      	ldr	r3, [pc, #280]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b43      	ldr	r3, [pc, #268]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d005      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d001      	beq.n	8002712 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1c0      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002712:	4b3d      	ldr	r3, [pc, #244]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	695b      	ldr	r3, [r3, #20]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4939      	ldr	r1, [pc, #228]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e03a      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d020      	beq.n	8002772 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b36      	ldr	r3, [pc, #216]	@ (800280c <HAL_RCC_OscConfig+0x270>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe f8f9 	bl	800092c <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273e:	f7fe f8f5 	bl	800092c <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e1a1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002750:	4b2d      	ldr	r3, [pc, #180]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d0f0      	beq.n	800273e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275c:	4b2a      	ldr	r3, [pc, #168]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	695b      	ldr	r3, [r3, #20]
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	4927      	ldr	r1, [pc, #156]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 800276c:	4313      	orrs	r3, r2
 800276e:	600b      	str	r3, [r1, #0]
 8002770:	e015      	b.n	800279e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002772:	4b26      	ldr	r3, [pc, #152]	@ (800280c <HAL_RCC_OscConfig+0x270>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002778:	f7fe f8d8 	bl	800092c <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002780:	f7fe f8d4 	bl	800092c <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e180      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d03a      	beq.n	8002820 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d019      	beq.n	80027e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b2:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <HAL_RCC_OscConfig+0x274>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b8:	f7fe f8b8 	bl	800092c <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027be:	e008      	b.n	80027d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c0:	f7fe f8b4 	bl	800092c <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e160      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f0      	beq.n	80027c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80027de:	2001      	movs	r0, #1
 80027e0:	f000 fabc 	bl	8002d5c <RCC_Delay>
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002810 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe f89e 	bl	800092c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f2:	e00f      	b.n	8002814 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe f89a 	bl	800092c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d908      	bls.n	8002814 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e146      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	42420000 	.word	0x42420000
 8002810:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b92      	ldr	r3, [pc, #584]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e9      	bne.n	80027f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	f000 80a6 	beq.w	800297a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002832:	4b8b      	ldr	r3, [pc, #556]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10d      	bne.n	800285a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800283e:	4b88      	ldr	r3, [pc, #544]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a87      	ldr	r2, [pc, #540]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b85      	ldr	r3, [pc, #532]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002856:	2301      	movs	r3, #1
 8002858:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800285a:	4b82      	ldr	r3, [pc, #520]	@ (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002862:	2b00      	cmp	r3, #0
 8002864:	d118      	bne.n	8002898 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002866:	4b7f      	ldr	r3, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a7e      	ldr	r2, [pc, #504]	@ (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800286c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002872:	f7fe f85b 	bl	800092c <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287a:	f7fe f857 	bl	800092c <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b64      	cmp	r3, #100	@ 0x64
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e103      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288c:	4b75      	ldr	r3, [pc, #468]	@ (8002a64 <HAL_RCC_OscConfig+0x4c8>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2b01      	cmp	r3, #1
 800289e:	d106      	bne.n	80028ae <HAL_RCC_OscConfig+0x312>
 80028a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e02d      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCC_OscConfig+0x334>
 80028b6:	4b6a      	ldr	r3, [pc, #424]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	4a69      	ldr	r2, [pc, #420]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	6213      	str	r3, [r2, #32]
 80028c2:	4b67      	ldr	r3, [pc, #412]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	4a66      	ldr	r2, [pc, #408]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028c8:	f023 0304 	bic.w	r3, r3, #4
 80028cc:	6213      	str	r3, [r2, #32]
 80028ce:	e01c      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b05      	cmp	r3, #5
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x356>
 80028d8:	4b61      	ldr	r3, [pc, #388]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4a60      	ldr	r2, [pc, #384]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028de:	f043 0304 	orr.w	r3, r3, #4
 80028e2:	6213      	str	r3, [r2, #32]
 80028e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6213      	str	r3, [r2, #32]
 80028f0:	e00b      	b.n	800290a <HAL_RCC_OscConfig+0x36e>
 80028f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	4a5a      	ldr	r2, [pc, #360]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6213      	str	r3, [r2, #32]
 80028fe:	4b58      	ldr	r3, [pc, #352]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	4a57      	ldr	r2, [pc, #348]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d015      	beq.n	800293e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe f80b 	bl	800092c <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002918:	e00a      	b.n	8002930 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800291a:	f7fe f807 	bl	800092c <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002928:	4293      	cmp	r3, r2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e0b1      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002930:	4b4b      	ldr	r3, [pc, #300]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ee      	beq.n	800291a <HAL_RCC_OscConfig+0x37e>
 800293c:	e014      	b.n	8002968 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293e:	f7fd fff5 	bl	800092c <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002944:	e00a      	b.n	800295c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002946:	f7fd fff1 	bl	800092c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002954:	4293      	cmp	r3, r2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e09b      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800295c:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1ee      	bne.n	8002946 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002968:	7dfb      	ldrb	r3, [r7, #23]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d105      	bne.n	800297a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800296e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002970:	69db      	ldr	r3, [r3, #28]
 8002972:	4a3b      	ldr	r2, [pc, #236]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002978:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 8087 	beq.w	8002a92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002984:	4b36      	ldr	r3, [pc, #216]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d061      	beq.n	8002a54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d146      	bne.n	8002a26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002998:	4b33      	ldr	r3, [pc, #204]	@ (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299e:	f7fd ffc5 	bl	800092c <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a4:	e008      	b.n	80029b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a6:	f7fd ffc1 	bl	800092c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d901      	bls.n	80029b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029b4:	2303      	movs	r3, #3
 80029b6:	e06d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b8:	4b29      	ldr	r3, [pc, #164]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f0      	bne.n	80029a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029cc:	d108      	bne.n	80029e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029ce:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4921      	ldr	r1, [pc, #132]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a19      	ldr	r1, [r3, #32]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f0:	430b      	orrs	r3, r1
 80029f2:	491b      	ldr	r1, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fd ff95 	bl	800092c <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fd ff91 	bl	800092c <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e03d      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x46a>
 8002a24:	e035      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	@ (8002a68 <HAL_RCC_OscConfig+0x4cc>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fd ff7e 	bl	800092c <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fd ff7a 	bl	800092c <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e026      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	@ (8002a60 <HAL_RCC_OscConfig+0x4c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x498>
 8002a52:	e01e      	b.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69db      	ldr	r3, [r3, #28]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e019      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a9c <HAL_RCC_OscConfig+0x500>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a1b      	ldr	r3, [r3, #32]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d001      	beq.n	8002a92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000

08002aa0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e0d0      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0307 	and.w	r3, r3, #7
 8002abc:	683a      	ldr	r2, [r7, #0]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d910      	bls.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac2:	4b67      	ldr	r3, [pc, #412]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 0207 	bic.w	r2, r3, #7
 8002aca:	4965      	ldr	r1, [pc, #404]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad2:	4b63      	ldr	r3, [pc, #396]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	683a      	ldr	r2, [r7, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d001      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0b8      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d020      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0304 	and.w	r3, r3, #4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002afc:	4b59      	ldr	r3, [pc, #356]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	4a58      	ldr	r2, [pc, #352]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d005      	beq.n	8002b20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b14:	4b53      	ldr	r3, [pc, #332]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	4a52      	ldr	r2, [pc, #328]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b20:	4b50      	ldr	r3, [pc, #320]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	494d      	ldr	r1, [pc, #308]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d040      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b46:	4b47      	ldr	r3, [pc, #284]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d115      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e07f      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d107      	bne.n	8002b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b5e:	4b41      	ldr	r3, [pc, #260]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d109      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e073      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06b      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b7e:	4b39      	ldr	r3, [pc, #228]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f023 0203 	bic.w	r2, r3, #3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	4936      	ldr	r1, [pc, #216]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b90:	f7fd fecc 	bl	800092c <HAL_GetTick>
 8002b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b98:	f7fd fec8 	bl	800092c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e053      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bae:	4b2d      	ldr	r3, [pc, #180]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f003 020c 	and.w	r2, r3, #12
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d1eb      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bc0:	4b27      	ldr	r3, [pc, #156]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 0307 	and.w	r3, r3, #7
 8002bc8:	683a      	ldr	r2, [r7, #0]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d210      	bcs.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bce:	4b24      	ldr	r3, [pc, #144]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 0207 	bic.w	r2, r3, #7
 8002bd6:	4922      	ldr	r1, [pc, #136]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCC_ClockConfig+0x1c0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e032      	b.n	8002c56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bfc:	4b19      	ldr	r3, [pc, #100]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	4916      	ldr	r1, [pc, #88]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c1a:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	490e      	ldr	r1, [pc, #56]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c2e:	f000 f821 	bl	8002c74 <HAL_RCC_GetSysClockFreq>
 8002c32:	4602      	mov	r2, r0
 8002c34:	4b0b      	ldr	r3, [pc, #44]	@ (8002c64 <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	091b      	lsrs	r3, r3, #4
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	490a      	ldr	r1, [pc, #40]	@ (8002c68 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	5ccb      	ldrb	r3, [r1, r3]
 8002c42:	fa22 f303 	lsr.w	r3, r2, r3
 8002c46:	4a09      	ldr	r2, [pc, #36]	@ (8002c6c <HAL_RCC_ClockConfig+0x1cc>)
 8002c48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c4a:	4b09      	ldr	r3, [pc, #36]	@ (8002c70 <HAL_RCC_ClockConfig+0x1d0>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fd fe2a 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40022000 	.word	0x40022000
 8002c64:	40021000 	.word	0x40021000
 8002c68:	080030e0 	.word	0x080030e0
 8002c6c:	20000000 	.word	0x20000000
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	2300      	movs	r3, #0
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
 8002c86:	2300      	movs	r3, #0
 8002c88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x30>
 8002c9e:	2b08      	cmp	r3, #8
 8002ca0:	d003      	beq.n	8002caa <HAL_RCC_GetSysClockFreq+0x36>
 8002ca2:	e027      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca6:	613b      	str	r3, [r7, #16]
      break;
 8002ca8:	e027      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	0c9b      	lsrs	r3, r3, #18
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	4a17      	ldr	r2, [pc, #92]	@ (8002d10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cb4:	5cd3      	ldrb	r3, [r2, r3]
 8002cb6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d010      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cc2:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0c5b      	lsrs	r3, r3, #17
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	4a11      	ldr	r2, [pc, #68]	@ (8002d14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cce:	5cd3      	ldrb	r3, [r2, r3]
 8002cd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <HAL_RCC_GetSysClockFreq+0x98>)
 8002cd6:	fb03 f202 	mul.w	r2, r3, r2
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
 8002ce2:	e004      	b.n	8002cee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ce8:	fb02 f303 	mul.w	r3, r2, r3
 8002cec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	613b      	str	r3, [r7, #16]
      break;
 8002cf2:	e002      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0xa8>)
 8002cf6:	613b      	str	r3, [r7, #16]
      break;
 8002cf8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cfa:	693b      	ldr	r3, [r7, #16]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	371c      	adds	r7, #28
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bc80      	pop	{r7}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	00f42400 	.word	0x00f42400
 8002d10:	080030f8 	.word	0x080030f8
 8002d14:	08003108 	.word	0x08003108
 8002d18:	003d0900 	.word	0x003d0900
 8002d1c:	007a1200 	.word	0x007a1200

08002d20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d24:	4b02      	ldr	r3, [pc, #8]	@ (8002d30 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d26:	681b      	ldr	r3, [r3, #0]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	20000000 	.word	0x20000000

08002d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d38:	f7ff fff2 	bl	8002d20 <HAL_RCC_GetHCLKFreq>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	0adb      	lsrs	r3, r3, #11
 8002d44:	f003 0307 	and.w	r3, r3, #7
 8002d48:	4903      	ldr	r1, [pc, #12]	@ (8002d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d4a:	5ccb      	ldrb	r3, [r1, r3]
 8002d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40021000 	.word	0x40021000
 8002d58:	080030f0 	.word	0x080030f0

08002d5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d64:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <RCC_Delay+0x34>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a0a      	ldr	r2, [pc, #40]	@ (8002d94 <RCC_Delay+0x38>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0a5b      	lsrs	r3, r3, #9
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	fb02 f303 	mul.w	r3, r2, r3
 8002d76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d78:	bf00      	nop
  }
  while (Delay --);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	60fa      	str	r2, [r7, #12]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1f9      	bne.n	8002d78 <RCC_Delay+0x1c>
}
 8002d84:	bf00      	nop
 8002d86:	bf00      	nop
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	20000000 	.word	0x20000000
 8002d94:	10624dd3 	.word	0x10624dd3

08002d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	2300      	movs	r3, #0
 8002da6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d07d      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002db4:	2300      	movs	r3, #0
 8002db6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002db8:	4b4f      	ldr	r3, [pc, #316]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dba:	69db      	ldr	r3, [r3, #28]
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10d      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dce:	61d3      	str	r3, [r2, #28]
 8002dd0:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b46      	ldr	r3, [pc, #280]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d118      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dec:	4b43      	ldr	r3, [pc, #268]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a42      	ldr	r2, [pc, #264]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df8:	f7fd fd98 	bl	800092c <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	e008      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7fd fd94 	bl	800092c <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e06d      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b3a      	ldr	r3, [pc, #232]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1e:	4b36      	ldr	r3, [pc, #216]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e20:	6a1b      	ldr	r3, [r3, #32]
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d02e      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d027      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e46:	4b2e      	ldr	r3, [pc, #184]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e52:	4a29      	ldr	r2, [pc, #164]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d014      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e62:	f7fd fd63 	bl	800092c <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd fd5f 	bl	800092c <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e036      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0ee      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	4917      	ldr	r1, [pc, #92]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d105      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea4:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eae:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d008      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	490b      	ldr	r1, [pc, #44]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0310 	and.w	r3, r3, #16
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d008      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002eda:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	4904      	ldr	r1, [pc, #16]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	40007000 	.word	0x40007000
 8002f00:	42420440 	.word	0x42420440

08002f04 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	60fb      	str	r3, [r7, #12]
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b10      	cmp	r3, #16
 8002f24:	d00a      	beq.n	8002f3c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b10      	cmp	r3, #16
 8002f2a:	f200 8089 	bhi.w	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d045      	beq.n	8002fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d074      	beq.n	8003024 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f3a:	e081      	b.n	8003040 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8002f3c:	4b45      	ldr	r3, [pc, #276]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f42:	4b44      	ldr	r3, [pc, #272]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d07a      	beq.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	0c9b      	lsrs	r3, r3, #18
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	4a40      	ldr	r2, [pc, #256]	@ (8003058 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f58:	5cd3      	ldrb	r3, [r2, r3]
 8002f5a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d015      	beq.n	8002f92 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f66:	4b3b      	ldr	r3, [pc, #236]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0c5b      	lsrs	r3, r3, #17
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	4a3a      	ldr	r2, [pc, #232]	@ (800305c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d00d      	beq.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002f80:	4a37      	ldr	r2, [pc, #220]	@ (8003060 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	61fb      	str	r3, [r7, #28]
 8002f90:	e004      	b.n	8002f9c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	4a33      	ldr	r2, [pc, #204]	@ (8003064 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fa8:	d102      	bne.n	8002fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	61bb      	str	r3, [r7, #24]
      break;
 8002fae:	e049      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8003068 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
      break;
 8002fbe:	e041      	b.n	8003044 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 8002fc0:	4b24      	ldr	r3, [pc, #144]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fd0:	d108      	bne.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002fdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002fe0:	61bb      	str	r3, [r7, #24]
 8002fe2:	e01e      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fee:	d109      	bne.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ff0:	4b18      	ldr	r3, [pc, #96]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002ffc:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003000:	61bb      	str	r3, [r7, #24]
 8003002:	e00e      	b.n	8003022 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800300a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800300e:	d11b      	bne.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003010:	4b10      	ldr	r3, [pc, #64]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 800301c:	4b13      	ldr	r3, [pc, #76]	@ (800306c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800301e:	61bb      	str	r3, [r7, #24]
      break;
 8003020:	e012      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8003022:	e011      	b.n	8003048 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003024:	f7ff fe86 	bl	8002d34 <HAL_RCC_GetPCLK2Freq>
 8003028:	4602      	mov	r2, r0
 800302a:	4b0a      	ldr	r3, [pc, #40]	@ (8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	0b9b      	lsrs	r3, r3, #14
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	3301      	adds	r3, #1
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	fbb2 f3f3 	udiv	r3, r2, r3
 800303c:	61bb      	str	r3, [r7, #24]
      break;
 800303e:	e004      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8003040:	bf00      	nop
 8003042:	e002      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8003044:	bf00      	nop
 8003046:	e000      	b.n	800304a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8003048:	bf00      	nop
    }
  }
  return (frequency);
 800304a:	69bb      	ldr	r3, [r7, #24]
}
 800304c:	4618      	mov	r0, r3
 800304e:	3720      	adds	r7, #32
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40021000 	.word	0x40021000
 8003058:	0800310c 	.word	0x0800310c
 800305c:	0800311c 	.word	0x0800311c
 8003060:	00f42400 	.word	0x00f42400
 8003064:	003d0900 	.word	0x003d0900
 8003068:	aaaaaaab 	.word	0xaaaaaaab
 800306c:	0001e848 	.word	0x0001e848

08003070 <memset>:
 8003070:	4603      	mov	r3, r0
 8003072:	4402      	add	r2, r0
 8003074:	4293      	cmp	r3, r2
 8003076:	d100      	bne.n	800307a <memset+0xa>
 8003078:	4770      	bx	lr
 800307a:	f803 1b01 	strb.w	r1, [r3], #1
 800307e:	e7f9      	b.n	8003074 <memset+0x4>

08003080 <__libc_init_array>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	2600      	movs	r6, #0
 8003084:	4d0c      	ldr	r5, [pc, #48]	@ (80030b8 <__libc_init_array+0x38>)
 8003086:	4c0d      	ldr	r4, [pc, #52]	@ (80030bc <__libc_init_array+0x3c>)
 8003088:	1b64      	subs	r4, r4, r5
 800308a:	10a4      	asrs	r4, r4, #2
 800308c:	42a6      	cmp	r6, r4
 800308e:	d109      	bne.n	80030a4 <__libc_init_array+0x24>
 8003090:	f000 f81a 	bl	80030c8 <_init>
 8003094:	2600      	movs	r6, #0
 8003096:	4d0a      	ldr	r5, [pc, #40]	@ (80030c0 <__libc_init_array+0x40>)
 8003098:	4c0a      	ldr	r4, [pc, #40]	@ (80030c4 <__libc_init_array+0x44>)
 800309a:	1b64      	subs	r4, r4, r5
 800309c:	10a4      	asrs	r4, r4, #2
 800309e:	42a6      	cmp	r6, r4
 80030a0:	d105      	bne.n	80030ae <__libc_init_array+0x2e>
 80030a2:	bd70      	pop	{r4, r5, r6, pc}
 80030a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a8:	4798      	blx	r3
 80030aa:	3601      	adds	r6, #1
 80030ac:	e7ee      	b.n	800308c <__libc_init_array+0xc>
 80030ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b2:	4798      	blx	r3
 80030b4:	3601      	adds	r6, #1
 80030b6:	e7f2      	b.n	800309e <__libc_init_array+0x1e>
 80030b8:	08003120 	.word	0x08003120
 80030bc:	08003120 	.word	0x08003120
 80030c0:	08003120 	.word	0x08003120
 80030c4:	08003124 	.word	0x08003124

080030c8 <_init>:
 80030c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ca:	bf00      	nop
 80030cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ce:	bc08      	pop	{r3}
 80030d0:	469e      	mov	lr, r3
 80030d2:	4770      	bx	lr

080030d4 <_fini>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr
