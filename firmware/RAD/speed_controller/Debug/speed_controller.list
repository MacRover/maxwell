
speed_controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c40  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d4c  08002d4c  00003d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d70  08002d70  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002d70  08002d70  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d70  08002d70  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d70  08002d70  00003d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002d74  08002d74  00003d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08002d78  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000010  08002d88  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08002d88  00004128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d94  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001697  00000000  00000000  0000adcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  0000c468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000574  00000000  00000000  0000cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163e4  00000000  00000000  0000d12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ced  00000000  00000000  00023510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008061a  00000000  00000000  0002b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab817  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cf0  00000000  00000000  000ab85c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000ad54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d34 	.word	0x08002d34

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002d34 	.word	0x08002d34

0800014c <setupTxCAN>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setupTxCAN()
{
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    TxHeader.StdId = 0x321;
 8000150:	4b18      	ldr	r3, [pc, #96]	@ (80001b4 <setupTxCAN+0x68>)
 8000152:	f240 3221 	movw	r2, #801	@ 0x321
 8000156:	601a      	str	r2, [r3, #0]
    TxHeader.ExtId = can_id;
 8000158:	4b17      	ldr	r3, [pc, #92]	@ (80001b8 <setupTxCAN+0x6c>)
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	461a      	mov	r2, r3
 800015e:	4b15      	ldr	r3, [pc, #84]	@ (80001b4 <setupTxCAN+0x68>)
 8000160:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 8000162:	4b14      	ldr	r3, [pc, #80]	@ (80001b4 <setupTxCAN+0x68>)
 8000164:	2200      	movs	r2, #0
 8000166:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_EXT;
 8000168:	4b12      	ldr	r3, [pc, #72]	@ (80001b4 <setupTxCAN+0x68>)
 800016a:	2204      	movs	r2, #4
 800016c:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 8;
 800016e:	4b11      	ldr	r3, [pc, #68]	@ (80001b4 <setupTxCAN+0x68>)
 8000170:	2208      	movs	r2, #8
 8000172:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000174:	4b0f      	ldr	r3, [pc, #60]	@ (80001b4 <setupTxCAN+0x68>)
 8000176:	2200      	movs	r2, #0
 8000178:	751a      	strb	r2, [r3, #20]

    TxData[0] = 0xA0;
 800017a:	4b10      	ldr	r3, [pc, #64]	@ (80001bc <setupTxCAN+0x70>)
 800017c:	22a0      	movs	r2, #160	@ 0xa0
 800017e:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0xA1;
 8000180:	4b0e      	ldr	r3, [pc, #56]	@ (80001bc <setupTxCAN+0x70>)
 8000182:	22a1      	movs	r2, #161	@ 0xa1
 8000184:	705a      	strb	r2, [r3, #1]
    TxData[2] = 0xA2;
 8000186:	4b0d      	ldr	r3, [pc, #52]	@ (80001bc <setupTxCAN+0x70>)
 8000188:	22a2      	movs	r2, #162	@ 0xa2
 800018a:	709a      	strb	r2, [r3, #2]
    TxData[3] = 0xA3;
 800018c:	4b0b      	ldr	r3, [pc, #44]	@ (80001bc <setupTxCAN+0x70>)
 800018e:	22a3      	movs	r2, #163	@ 0xa3
 8000190:	70da      	strb	r2, [r3, #3]
    TxData[4] = 0xA4;
 8000192:	4b0a      	ldr	r3, [pc, #40]	@ (80001bc <setupTxCAN+0x70>)
 8000194:	22a4      	movs	r2, #164	@ 0xa4
 8000196:	711a      	strb	r2, [r3, #4]
    TxData[5] = 0xA5;
 8000198:	4b08      	ldr	r3, [pc, #32]	@ (80001bc <setupTxCAN+0x70>)
 800019a:	22a5      	movs	r2, #165	@ 0xa5
 800019c:	715a      	strb	r2, [r3, #5]
    TxData[6] = 0xA6;
 800019e:	4b07      	ldr	r3, [pc, #28]	@ (80001bc <setupTxCAN+0x70>)
 80001a0:	22a6      	movs	r2, #166	@ 0xa6
 80001a2:	719a      	strb	r2, [r3, #6]
    TxData[7] = 0xA9;
 80001a4:	4b05      	ldr	r3, [pc, #20]	@ (80001bc <setupTxCAN+0x70>)
 80001a6:	22a9      	movs	r2, #169	@ 0xa9
 80001a8:	71da      	strb	r2, [r3, #7]
}
 80001aa:	bf00      	nop
 80001ac:	46bd      	mov	sp, r7
 80001ae:	bc80      	pop	{r7}
 80001b0:	4770      	bx	lr
 80001b2:	bf00      	nop
 80001b4:	200000ac 	.word	0x200000ac
 80001b8:	20000001 	.word	0x20000001
 80001bc:	200000c4 	.word	0x200000c4

080001c0 <setupRxCAN>:

void setupRxCAN()
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
    canfilterconfig.FilterBank = 0;
 80001c4:	4b16      	ldr	r3, [pc, #88]	@ (8000220 <setupRxCAN+0x60>)
 80001c6:	2200      	movs	r2, #0
 80001c8:	615a      	str	r2, [r3, #20]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80001ca:	4b15      	ldr	r3, [pc, #84]	@ (8000220 <setupRxCAN+0x60>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	619a      	str	r2, [r3, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80001d0:	4b13      	ldr	r3, [pc, #76]	@ (8000220 <setupRxCAN+0x60>)
 80001d2:	2201      	movs	r2, #1
 80001d4:	61da      	str	r2, [r3, #28]
    canfilterconfig.FilterIdHigh = 0x0000;
 80001d6:	4b12      	ldr	r3, [pc, #72]	@ (8000220 <setupRxCAN+0x60>)
 80001d8:	2200      	movs	r2, #0
 80001da:	601a      	str	r2, [r3, #0]
    canfilterconfig.FilterIdLow = ((can_id) << 8 | 0x0054) << 3;
 80001dc:	4b11      	ldr	r3, [pc, #68]	@ (8000224 <setupRxCAN+0x64>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	02db      	lsls	r3, r3, #11
 80001e2:	f443 7328 	orr.w	r3, r3, #672	@ 0x2a0
 80001e6:	461a      	mov	r2, r3
 80001e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000220 <setupRxCAN+0x60>)
 80001ea:	605a      	str	r2, [r3, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0000;
 80001ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000220 <setupRxCAN+0x60>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	609a      	str	r2, [r3, #8]
    canfilterconfig.FilterMaskIdLow = (0x07FE) << 3;
 80001f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000220 <setupRxCAN+0x60>)
 80001f4:	f643 72f0 	movw	r2, #16368	@ 0x3ff0
 80001f8:	60da      	str	r2, [r3, #12]
    canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80001fa:	4b09      	ldr	r3, [pc, #36]	@ (8000220 <setupRxCAN+0x60>)
 80001fc:	2200      	movs	r2, #0
 80001fe:	611a      	str	r2, [r3, #16]
    canfilterconfig.FilterActivation = ENABLE;
 8000200:	4b07      	ldr	r3, [pc, #28]	@ (8000220 <setupRxCAN+0x60>)
 8000202:	2201      	movs	r2, #1
 8000204:	621a      	str	r2, [r3, #32]
    canfilterconfig.SlaveStartFilterBank = 14;
 8000206:	4b06      	ldr	r3, [pc, #24]	@ (8000220 <setupRxCAN+0x60>)
 8000208:	220e      	movs	r2, #14
 800020a:	625a      	str	r2, [r3, #36]	@ 0x24

    HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 800020c:	4904      	ldr	r1, [pc, #16]	@ (8000220 <setupRxCAN+0x60>)
 800020e:	4806      	ldr	r0, [pc, #24]	@ (8000228 <setupRxCAN+0x68>)
 8000210:	f000 fe67 	bl	8000ee2 <HAL_CAN_ConfigFilter>
    HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING); //enable interrupts
 8000214:	2102      	movs	r1, #2
 8000216:	4804      	ldr	r0, [pc, #16]	@ (8000228 <setupRxCAN+0x68>)
 8000218:	f001 f960 	bl	80014dc <HAL_CAN_ActivateNotification>
}
 800021c:	bf00      	nop
 800021e:	bd80      	pop	{r7, pc}
 8000220:	200000d0 	.word	0x200000d0
 8000224:	20000001 	.word	0x20000001
 8000228:	2000002c 	.word	0x2000002c

0800022c <HAL_CAN_RxFifo0MsgPendingCallback>:
        Error_Handler();
    }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
    /* Get RX message */
    if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData)
 8000234:	4b1e      	ldr	r3, [pc, #120]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000236:	4a1f      	ldr	r2, [pc, #124]	@ (80002b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000238:	2100      	movs	r1, #0
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	f001 f82d 	bl	800129a <HAL_CAN_GetRxMessage>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
            != HAL_OK)
    {
        /* Reception Error */
        Error_Handler();
 8000246:	f000 fb83 	bl	8000950 <Error_Handler>
    }

    timer = 0;
 800024a:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x8c>)
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]

//    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
    // Echo received CAN message

    //RxData[7] = RxData[7] + 1;
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, RxData, &TxMailbox);
 8000250:	4b1a      	ldr	r3, [pc, #104]	@ (80002bc <HAL_CAN_RxFifo0MsgPendingCallback+0x90>)
 8000252:	4a17      	ldr	r2, [pc, #92]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000254:	491a      	ldr	r1, [pc, #104]	@ (80002c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x94>)
 8000256:	481b      	ldr	r0, [pc, #108]	@ (80002c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x98>)
 8000258:	f000 ff50 	bl	80010fc <HAL_CAN_AddTxMessage>

    if ((RxHeader.ExtId & 0xFF) == 0x54)
 800025c:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 800025e:	685b      	ldr	r3, [r3, #4]
 8000260:	b2db      	uxtb	r3, r3
 8000262:	2b54      	cmp	r3, #84	@ 0x54
 8000264:	d10d      	bne.n	8000282 <HAL_CAN_RxFifo0MsgPendingCallback+0x56>
    {
    	//counter clockwise

    	if (RxData[7] != 0)
 8000266:	4b12      	ldr	r3, [pc, #72]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000268:	79db      	ldrb	r3, [r3, #7]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d005      	beq.n	800027a <HAL_CAN_RxFifo0MsgPendingCallback+0x4e>
    	{
    		speed = 0 + RxData[7];
 800026e:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000270:	79db      	ldrb	r3, [r3, #7]
 8000272:	461a      	mov	r2, r3
 8000274:	4b14      	ldr	r3, [pc, #80]	@ (80002c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8000276:	601a      	str	r2, [r3, #0]
    	else
    	{
    		speed = 0;
    	}
    }
}
 8000278:	e015      	b.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    		speed = 0;
 800027a:	4b13      	ldr	r3, [pc, #76]	@ (80002c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
}
 8000280:	e011      	b.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    else if ((RxHeader.ExtId & 0xFF) == 0x55)
 8000282:	4b0c      	ldr	r3, [pc, #48]	@ (80002b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 8000284:	685b      	ldr	r3, [r3, #4]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b55      	cmp	r3, #85	@ 0x55
 800028a:	d10c      	bne.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    	if (RxData[7] != 0)
 800028c:	4b08      	ldr	r3, [pc, #32]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800028e:	79db      	ldrb	r3, [r3, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d005      	beq.n	80002a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
    		speed = 0 - RxData[7];
 8000294:	4b06      	ldr	r3, [pc, #24]	@ (80002b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 8000296:	79db      	ldrb	r3, [r3, #7]
 8000298:	425b      	negs	r3, r3
 800029a:	4a0b      	ldr	r2, [pc, #44]	@ (80002c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 800029c:	6013      	str	r3, [r2, #0]
}
 800029e:	e002      	b.n	80002a6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    		speed = 0;
 80002a0:	4b09      	ldr	r3, [pc, #36]	@ (80002c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
}
 80002a6:	bf00      	nop
 80002a8:	3708      	adds	r7, #8
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000114 	.word	0x20000114
 80002b4:	200000f8 	.word	0x200000f8
 80002b8:	20000120 	.word	0x20000120
 80002bc:	200000cc 	.word	0x200000cc
 80002c0:	200000ac 	.word	0x200000ac
 80002c4:	2000002c 	.word	0x2000002c
 80002c8:	2000011c 	.word	0x2000011c

080002cc <getUs>:


uint32_t getUs(void)
{
 80002cc:	b5b0      	push	{r4, r5, r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0

    uint32_t usTicks = HAL_RCC_GetSysClockFreq() / 1000000;
 80002d2:	f002 f9b5 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a10      	ldr	r2, [pc, #64]	@ (800031c <getUs+0x50>)
 80002da:	fba2 2303 	umull	r2, r3, r2, r3
 80002de:	0c9b      	lsrs	r3, r3, #18
 80002e0:	607b      	str	r3, [r7, #4]

    register uint32_t ms, cycle_cnt;
    do
    {
        ms = HAL_GetTick();
 80002e2:	f000 fcd5 	bl	8000c90 <HAL_GetTick>
 80002e6:	4604      	mov	r4, r0
        cycle_cnt = SysTick->VAL;
 80002e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000320 <getUs+0x54>)
 80002ea:	689d      	ldr	r5, [r3, #8]
    } while (ms != HAL_GetTick());
 80002ec:	f000 fcd0 	bl	8000c90 <HAL_GetTick>
 80002f0:	4603      	mov	r3, r0
 80002f2:	429c      	cmp	r4, r3
 80002f4:	d1f5      	bne.n	80002e2 <getUs+0x16>
    return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks;
 80002f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002fa:	fb03 f204 	mul.w	r2, r3, r4
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000304:	fb01 f303 	mul.w	r3, r1, r3
 8000308:	1b59      	subs	r1, r3, r5
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000310:	4413      	add	r3, r2
}
 8000312:	4618      	mov	r0, r3
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bdb0      	pop	{r4, r5, r7, pc}
 800031a:	bf00      	nop
 800031c:	431bde83 	.word	0x431bde83
 8000320:	e000e010 	.word	0xe000e010

08000324 <delayUs>:

void delayUs(uint16_t micros)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	4603      	mov	r3, r0
 800032c:	80fb      	strh	r3, [r7, #6]
    uint32_t start = getUs();
 800032e:	f7ff ffcd 	bl	80002cc <getUs>
 8000332:	60f8      	str	r0, [r7, #12]
    while (getUs() - start < (uint32_t) micros)
 8000334:	e000      	b.n	8000338 <delayUs+0x14>
    {
        asm("nop");
 8000336:	bf00      	nop
    while (getUs() - start < (uint32_t) micros)
 8000338:	f7ff ffc8 	bl	80002cc <getUs>
 800033c:	4602      	mov	r2, r0
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	1ad2      	subs	r2, r2, r3
 8000342:	88fb      	ldrh	r3, [r7, #6]
 8000344:	429a      	cmp	r2, r3
 8000346:	d3f6      	bcc.n	8000336 <delayUs+0x12>
    }
}
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	3710      	adds	r7, #16
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
	...

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b088      	sub	sp, #32
 8000358:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800035a:	f000 fc41 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035e:	f000 f983 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000362:	f000 fa3d 	bl	80007e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000366:	f000 fa05 	bl	8000774 <MX_SPI1_Init>
  MX_CAN_Init();
 800036a:	f000 f9c3 	bl	80006f4 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor driver chip enable
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000374:	48b4      	ldr	r0, [pc, #720]	@ (8000648 <main+0x2f4>)
 8000376:	f001 fdae 	bl	8001ed6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // disable stand alone mode
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000380:	48b1      	ldr	r0, [pc, #708]	@ (8000648 <main+0x2f4>)
 8000382:	f001 fda8 	bl	8001ed6 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // CS
 8000386:	2201      	movs	r2, #1
 8000388:	2110      	movs	r1, #16
 800038a:	48af      	ldr	r0, [pc, #700]	@ (8000648 <main+0x2f4>)
 800038c:	f001 fda3 	bl	8001ed6 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); // set DIR
 8000390:	2200      	movs	r2, #0
 8000392:	2110      	movs	r1, #16
 8000394:	48ad      	ldr	r0, [pc, #692]	@ (800064c <main+0x2f8>)
 8000396:	f001 fd9e 	bl	8001ed6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); // STEP
 800039a:	2200      	movs	r2, #0
 800039c:	2108      	movs	r1, #8
 800039e:	48ab      	ldr	r0, [pc, #684]	@ (800064c <main+0x2f8>)
 80003a0:	f001 fd99 	bl	8001ed6 <HAL_GPIO_WritePin>

    uint32_t SPImsg = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	613b      	str	r3, [r7, #16]
    // 101 SMARTEN (0b101 << 17)
    // 100 CHOPCONF (0b100 << 17)
    // 00X DRVCTRL (0b00 << 18)

    /* DRVCONF */
    SPImsg = 0;
 80003a8:	2300      	movs	r3, #0
 80003aa:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b111 << 17); // DRVCONF
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	f443 2360 	orr.w	r3, r3, #917504	@ 0xe0000
 80003b2:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 16); // TST: test mode
    SPImsg |= (0b11110 << 11); // SLP: Slope control
 80003b4:	693b      	ldr	r3, [r7, #16]
 80003b6:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 80003ba:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 10); // DIS_S2G: Short to ground protection
    SPImsg |= (0b00 << 8); // TS2G: Short detection delay
    SPImsg |= (0b0 << 7); // SDOFF: step/dir interface
    SPImsg |= (0b0 << 6); // VSENSE: full-scale sense resistor voltage setting
    SPImsg |= (0b11 << 4); // RDSEL: read out select
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80003c2:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 3); // OTSENS: overtemp shutdown setting
    SPImsg |= (0b1 << 2); // SHRTSENS: short to ground sensitivity
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b1 << 1); // EN_PFD: passive fast delay setting
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	f043 0302 	orr.w	r3, r3, #2
 80003d2:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b1 << 0); // EN_S2VS: Short to VS protection
 80003d4:	693b      	ldr	r3, [r7, #16]
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	613b      	str	r3, [r7, #16]

    SPImsg_bytes[2] = (uint8_t) (SPImsg & 0xFF);
 80003dc:	693b      	ldr	r3, [r7, #16]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	71bb      	strb	r3, [r7, #6]
    SPImsg_bytes[1] = (uint8_t) ((SPImsg & 0xFF00) >> 8);
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	0a1b      	lsrs	r3, r3, #8
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	717b      	strb	r3, [r7, #5]
    SPImsg_bytes[0] = (uint8_t) ((SPImsg & 0xFF0000) >> 16);
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	0c1b      	lsrs	r3, r3, #16
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	713b      	strb	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2110      	movs	r1, #16
 80003f6:	4894      	ldr	r0, [pc, #592]	@ (8000648 <main+0x2f4>)
 80003f8:	f001 fd6d 	bl	8001ed6 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi1, SPImsg_bytes, SPIread_bytes, 3,
 80003fc:	463a      	mov	r2, r7
 80003fe:	1d39      	adds	r1, r7, #4
 8000400:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000404:	9300      	str	r3, [sp, #0]
 8000406:	2303      	movs	r3, #3
 8000408:	4891      	ldr	r0, [pc, #580]	@ (8000650 <main+0x2fc>)
 800040a:	f002 fa11 	bl	8002830 <HAL_SPI_TransmitReceive>
 800040e:	4603      	mov	r3, r0
 8000410:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2110      	movs	r1, #16
 8000416:	488c      	ldr	r0, [pc, #560]	@ (8000648 <main+0x2f4>)
 8000418:	f001 fd5d 	bl	8001ed6 <HAL_GPIO_WritePin>

    /* SGCSCONF */
    SPImsg = 0;
 800041c:	2300      	movs	r3, #0
 800041e:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b110 << 17); // SGCSCONF
 8000420:	693b      	ldr	r3, [r7, #16]
 8000422:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 8000426:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 16); // SFILT: stall guard filter
    SPImsg |= (0b0000010 << 8); // SGT: stall guard threshold
 8000428:	693b      	ldr	r3, [r7, #16]
 800042a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800042e:	613b      	str	r3, [r7, #16]
    SPImsg |= (10 << 0); // CS: current scale
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	f043 030a 	orr.w	r3, r3, #10
 8000436:	613b      	str	r3, [r7, #16]

    SPImsg_bytes[2] = (uint8_t) (SPImsg & 0xFF);
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	b2db      	uxtb	r3, r3
 800043c:	71bb      	strb	r3, [r7, #6]
    SPImsg_bytes[1] = (uint8_t) ((SPImsg & 0xFF00) >> 8);
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	0a1b      	lsrs	r3, r3, #8
 8000442:	b2db      	uxtb	r3, r3
 8000444:	717b      	strb	r3, [r7, #5]
    SPImsg_bytes[0] = (uint8_t) ((SPImsg & 0xFF0000) >> 16);
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	0c1b      	lsrs	r3, r3, #16
 800044a:	b2db      	uxtb	r3, r3
 800044c:	713b      	strb	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800044e:	2200      	movs	r2, #0
 8000450:	2110      	movs	r1, #16
 8000452:	487d      	ldr	r0, [pc, #500]	@ (8000648 <main+0x2f4>)
 8000454:	f001 fd3f 	bl	8001ed6 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi1, SPImsg_bytes, SPIread_bytes, 3,
 8000458:	463a      	mov	r2, r7
 800045a:	1d39      	adds	r1, r7, #4
 800045c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2303      	movs	r3, #3
 8000464:	487a      	ldr	r0, [pc, #488]	@ (8000650 <main+0x2fc>)
 8000466:	f002 f9e3 	bl	8002830 <HAL_SPI_TransmitReceive>
 800046a:	4603      	mov	r3, r0
 800046c:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800046e:	2201      	movs	r2, #1
 8000470:	2110      	movs	r1, #16
 8000472:	4875      	ldr	r0, [pc, #468]	@ (8000648 <main+0x2f4>)
 8000474:	f001 fd2f 	bl	8001ed6 <HAL_GPIO_WritePin>

    /* SMARTEN */
    SPImsg = 0;
 8000478:	2300      	movs	r3, #0
 800047a:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b101 << 17); // SMARTEN
 800047c:	693b      	ldr	r3, [r7, #16]
 800047e:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000482:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b00 << 13); // SEDN: current dec. speed
    SPImsg |= (0b0000 << 8); // SEMAX: upper cool step threshold offset
    SPImsg |= (0b00 << 5); // SEUP: current increment size
    SPImsg |= (0b0000 << 0); // SEMIN: cool step lower threshold

    SPImsg_bytes[2] = (uint8_t) (SPImsg & 0xFF);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	71bb      	strb	r3, [r7, #6]
    SPImsg_bytes[1] = (uint8_t) ((SPImsg & 0xFF00) >> 8);
 800048a:	693b      	ldr	r3, [r7, #16]
 800048c:	0a1b      	lsrs	r3, r3, #8
 800048e:	b2db      	uxtb	r3, r3
 8000490:	717b      	strb	r3, [r7, #5]
    SPImsg_bytes[0] = (uint8_t) ((SPImsg & 0xFF0000) >> 16);
 8000492:	693b      	ldr	r3, [r7, #16]
 8000494:	0c1b      	lsrs	r3, r3, #16
 8000496:	b2db      	uxtb	r3, r3
 8000498:	713b      	strb	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2110      	movs	r1, #16
 800049e:	486a      	ldr	r0, [pc, #424]	@ (8000648 <main+0x2f4>)
 80004a0:	f001 fd19 	bl	8001ed6 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi1, SPImsg_bytes, SPIread_bytes, 3,
 80004a4:	463a      	mov	r2, r7
 80004a6:	1d39      	adds	r1, r7, #4
 80004a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ac:	9300      	str	r3, [sp, #0]
 80004ae:	2303      	movs	r3, #3
 80004b0:	4867      	ldr	r0, [pc, #412]	@ (8000650 <main+0x2fc>)
 80004b2:	f002 f9bd 	bl	8002830 <HAL_SPI_TransmitReceive>
 80004b6:	4603      	mov	r3, r0
 80004b8:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	4862      	ldr	r0, [pc, #392]	@ (8000648 <main+0x2f4>)
 80004c0:	f001 fd09 	bl	8001ed6 <HAL_GPIO_WritePin>

    /* CHOPCONF */
    SPImsg = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b100 << 17); // CHOPCONF
 80004c8:	693b      	ldr	r3, [r7, #16]
 80004ca:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80004ce:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b10 << 15); // TBL: blanking time
 80004d0:	693b      	ldr	r3, [r7, #16]
 80004d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80004d6:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 14); // CHM: chopper mode
    SPImsg |= (0b0 << 13); // RNDTF: Random TOFF time
    SPImsg |= (0b00 << 11); // HDEC: hysteresis decay or fast decay mode
    SPImsg |= (0b0100 << 7); // HEND: hysteresis end value
 80004d8:	693b      	ldr	r3, [r7, #16]
 80004da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004de:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b110 << 4); // HSTRT: hysteresis start value
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80004e6:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0100 << 0); // TOFF: mosfet off time
 80004e8:	693b      	ldr	r3, [r7, #16]
 80004ea:	f043 0304 	orr.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]

    SPImsg_bytes[2] = (uint8_t) (SPImsg & 0xFF);
 80004f0:	693b      	ldr	r3, [r7, #16]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	71bb      	strb	r3, [r7, #6]
    SPImsg_bytes[1] = (uint8_t) ((SPImsg & 0xFF00) >> 8);
 80004f6:	693b      	ldr	r3, [r7, #16]
 80004f8:	0a1b      	lsrs	r3, r3, #8
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	717b      	strb	r3, [r7, #5]
    SPImsg_bytes[0] = (uint8_t) ((SPImsg & 0xFF0000) >> 16);
 80004fe:	693b      	ldr	r3, [r7, #16]
 8000500:	0c1b      	lsrs	r3, r3, #16
 8000502:	b2db      	uxtb	r3, r3
 8000504:	713b      	strb	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2110      	movs	r1, #16
 800050a:	484f      	ldr	r0, [pc, #316]	@ (8000648 <main+0x2f4>)
 800050c:	f001 fce3 	bl	8001ed6 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi1, SPImsg_bytes, SPIread_bytes, 3,
 8000510:	463a      	mov	r2, r7
 8000512:	1d39      	adds	r1, r7, #4
 8000514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000518:	9300      	str	r3, [sp, #0]
 800051a:	2303      	movs	r3, #3
 800051c:	484c      	ldr	r0, [pc, #304]	@ (8000650 <main+0x2fc>)
 800051e:	f002 f987 	bl	8002830 <HAL_SPI_TransmitReceive>
 8000522:	4603      	mov	r3, r0
 8000524:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000526:	2201      	movs	r2, #1
 8000528:	2110      	movs	r1, #16
 800052a:	4847      	ldr	r0, [pc, #284]	@ (8000648 <main+0x2f4>)
 800052c:	f001 fcd3 	bl	8001ed6 <HAL_GPIO_WritePin>

    /* DRVCTRL */
    SPImsg = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b00 << 18); // DRVCTRL
    SPImsg |= (0b1 << 9); // INTPOL: step interpolation
 8000534:	693b      	ldr	r3, [r7, #16]
 8000536:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800053a:	613b      	str	r3, [r7, #16]
    SPImsg |= (0b0 << 8); // DEDGE: Double edge step pulses
    SPImsg |= (0b0111 << 0); // MRES: Microsteps per fullstep
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	f043 0307 	orr.w	r3, r3, #7
 8000542:	613b      	str	r3, [r7, #16]

    SPImsg_bytes[2] = (uint8_t) (SPImsg & 0xFF);
 8000544:	693b      	ldr	r3, [r7, #16]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	71bb      	strb	r3, [r7, #6]
    SPImsg_bytes[1] = (uint8_t) ((SPImsg & 0xFF00) >> 8);
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	0a1b      	lsrs	r3, r3, #8
 800054e:	b2db      	uxtb	r3, r3
 8000550:	717b      	strb	r3, [r7, #5]
    SPImsg_bytes[0] = (uint8_t) ((SPImsg & 0xFF0000) >> 16);
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	b2db      	uxtb	r3, r3
 8000558:	713b      	strb	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	483a      	ldr	r0, [pc, #232]	@ (8000648 <main+0x2f4>)
 8000560:	f001 fcb9 	bl	8001ed6 <HAL_GPIO_WritePin>
    spi_status = HAL_SPI_TransmitReceive(&hspi1, SPImsg_bytes, SPIread_bytes, 3,
 8000564:	463a      	mov	r2, r7
 8000566:	1d39      	adds	r1, r7, #4
 8000568:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2303      	movs	r3, #3
 8000570:	4837      	ldr	r0, [pc, #220]	@ (8000650 <main+0x2fc>)
 8000572:	f002 f95d 	bl	8002830 <HAL_SPI_TransmitReceive>
 8000576:	4603      	mov	r3, r0
 8000578:	73fb      	strb	r3, [r7, #15]
            1000);
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800057a:	2201      	movs	r2, #1
 800057c:	2110      	movs	r1, #16
 800057e:	4832      	ldr	r0, [pc, #200]	@ (8000648 <main+0x2f4>)
 8000580:	f001 fca9 	bl	8001ed6 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

    HAL_Delay(2000);
 8000584:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000588:	f000 fb8c 	bl	8000ca4 <HAL_Delay>

    setupTxCAN();
 800058c:	f7ff fdde 	bl	800014c <setupTxCAN>
    setupRxCAN();
 8000590:	f7ff fe16 	bl	80001c0 <setupRxCAN>

    uint32_t prev = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	617b      	str	r3, [r7, #20]
    uint32_t delay;

    //LOCK THE MOTOR WITH THIS SETTING:
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor driver chip enable
 8000598:	2200      	movs	r2, #0
 800059a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800059e:	482a      	ldr	r0, [pc, #168]	@ (8000648 <main+0x2f4>)
 80005a0:	f001 fc99 	bl	8001ed6 <HAL_GPIO_WritePin>


	while (1) {
		timer += HAL_GetTick() - prev;
 80005a4:	f000 fb74 	bl	8000c90 <HAL_GetTick>
 80005a8:	4602      	mov	r2, r0
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	1ad2      	subs	r2, r2, r3
 80005ae:	4b29      	ldr	r3, [pc, #164]	@ (8000654 <main+0x300>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4413      	add	r3, r2
 80005b4:	4a27      	ldr	r2, [pc, #156]	@ (8000654 <main+0x300>)
 80005b6:	6013      	str	r3, [r2, #0]
		prev = HAL_GetTick();
 80005b8:	f000 fb6a 	bl	8000c90 <HAL_GetTick>
 80005bc:	6178      	str	r0, [r7, #20]

		if (speed == 0 || timer > 500)
 80005be:	4b26      	ldr	r3, [pc, #152]	@ (8000658 <main+0x304>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d004      	beq.n	80005d0 <main+0x27c>
 80005c6:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <main+0x300>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005ce:	d903      	bls.n	80005d8 <main+0x284>
		{
		    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET); // Motor driver chip disable so we can free spin it

//			txCAN();

			HAL_Delay(10);
 80005d0:	200a      	movs	r0, #10
 80005d2:	f000 fb67 	bl	8000ca4 <HAL_Delay>
 80005d6:	e036      	b.n	8000646 <main+0x2f2>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2);
		}
		else if (speed > 0)
 80005d8:	4b1f      	ldr	r3, [pc, #124]	@ (8000658 <main+0x304>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	dd18      	ble.n	8000612 <main+0x2be>
		{
#ifndef LS_INVERT_DIR
			if (ls_state == PRESSED) continue;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <main+0x308>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d02d      	beq.n	8000644 <main+0x2f0>
#endif
		    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor driver chip enable

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	2110      	movs	r1, #16
 80005ec:	4817      	ldr	r0, [pc, #92]	@ (800064c <main+0x2f8>)
 80005ee:	f001 fc72 	bl	8001ed6 <HAL_GPIO_WritePin>

			delay = 100000/speed; //arbitrary speed calculation
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <main+0x304>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <main+0x30c>)
 80005f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80005fc:	60bb      	str	r3, [r7, #8]

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // STEP
 80005fe:	2108      	movs	r1, #8
 8000600:	4812      	ldr	r0, [pc, #72]	@ (800064c <main+0x2f8>)
 8000602:	f001 fc80 	bl	8001f06 <HAL_GPIO_TogglePin>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2); //LED


			delayUs(delay);
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	b29b      	uxth	r3, r3
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff fe8a 	bl	8000324 <delayUs>
 8000610:	e7c8      	b.n	80005a4 <main+0x250>

		}
		else if (speed < 0)
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <main+0x304>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	dac4      	bge.n	80005a4 <main+0x250>
#ifdef LS_INVERT_DIR
			if (ls_state == PRESSED) continue;
#endif
		    //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET); // Motor driver chip enable

			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2110      	movs	r1, #16
 800061e:	480b      	ldr	r0, [pc, #44]	@ (800064c <main+0x2f8>)
 8000620:	f001 fc59 	bl	8001ed6 <HAL_GPIO_WritePin>

			delay = 100000/ (-1*speed);
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <main+0x304>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a0e      	ldr	r2, [pc, #56]	@ (8000664 <main+0x310>)
 800062a:	fb92 f3f3 	sdiv	r3, r2, r3
 800062e:	60bb      	str	r3, [r7, #8]

			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // STEP
 8000630:	2108      	movs	r1, #8
 8000632:	4806      	ldr	r0, [pc, #24]	@ (800064c <main+0x2f8>)
 8000634:	f001 fc67 	bl	8001f06 <HAL_GPIO_TogglePin>
//			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_2); //LED

			delayUs(delay);
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	b29b      	uxth	r3, r3
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff fe71 	bl	8000324 <delayUs>
 8000642:	e7af      	b.n	80005a4 <main+0x250>
			if (ls_state == PRESSED) continue;
 8000644:	bf00      	nop
		timer += HAL_GetTick() - prev;
 8000646:	e7ad      	b.n	80005a4 <main+0x250>
 8000648:	40010800 	.word	0x40010800
 800064c:	40010c00 	.word	0x40010c00
 8000650:	20000054 	.word	0x20000054
 8000654:	20000120 	.word	0x20000120
 8000658:	2000011c 	.word	0x2000011c
 800065c:	20000000 	.word	0x20000000
 8000660:	000186a0 	.word	0x000186a0
 8000664:	fffe7960 	.word	0xfffe7960

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b090      	sub	sp, #64	@ 0x40
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0318 	add.w	r3, r7, #24
 8000672:	2228      	movs	r2, #40	@ 0x28
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f002 fb30 	bl	8002cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800068a:	2301      	movs	r3, #1
 800068c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000692:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000698:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069e:	2302      	movs	r3, #2
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006a8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f001 fc58 	bl	8001f68 <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80006be:	f000 f947 	bl	8000950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2302      	movs	r3, #2
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fec5 	bl	800246c <HAL_RCC_ClockConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006e8:	f000 f932 	bl	8000950 <Error_Handler>
  }
}
 80006ec:	bf00      	nop
 80006ee:	3740      	adds	r7, #64	@ 0x40
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}

080006f4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006f8:	4b1c      	ldr	r3, [pc, #112]	@ (800076c <MX_CAN_Init+0x78>)
 80006fa:	4a1d      	ldr	r2, [pc, #116]	@ (8000770 <MX_CAN_Init+0x7c>)
 80006fc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80006fe:	4b1b      	ldr	r3, [pc, #108]	@ (800076c <MX_CAN_Init+0x78>)
 8000700:	2204      	movs	r2, #4
 8000702:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000704:	4b19      	ldr	r3, [pc, #100]	@ (800076c <MX_CAN_Init+0x78>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800070a:	4b18      	ldr	r3, [pc, #96]	@ (800076c <MX_CAN_Init+0x78>)
 800070c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000710:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000712:	4b16      	ldr	r3, [pc, #88]	@ (800076c <MX_CAN_Init+0x78>)
 8000714:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000718:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800071a:	4b14      	ldr	r3, [pc, #80]	@ (800076c <MX_CAN_Init+0x78>)
 800071c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000720:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <MX_CAN_Init+0x78>)
 8000724:	2200      	movs	r2, #0
 8000726:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000728:	4b10      	ldr	r3, [pc, #64]	@ (800076c <MX_CAN_Init+0x78>)
 800072a:	2200      	movs	r2, #0
 800072c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <MX_CAN_Init+0x78>)
 8000730:	2200      	movs	r2, #0
 8000732:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000734:	4b0d      	ldr	r3, [pc, #52]	@ (800076c <MX_CAN_Init+0x78>)
 8000736:	2201      	movs	r2, #1
 8000738:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <MX_CAN_Init+0x78>)
 800073c:	2200      	movs	r2, #0
 800073e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000740:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <MX_CAN_Init+0x78>)
 8000742:	2200      	movs	r2, #0
 8000744:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000746:	4809      	ldr	r0, [pc, #36]	@ (800076c <MX_CAN_Init+0x78>)
 8000748:	f000 fad0 	bl	8000cec <HAL_CAN_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000752:	f000 f8fd 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000756:	4805      	ldr	r0, [pc, #20]	@ (800076c <MX_CAN_Init+0x78>)
 8000758:	f000 fc8c 	bl	8001074 <HAL_CAN_Start>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_CAN_Init+0x72>
      {
          /* Start Error */
          Error_Handler();
 8000762:	f000 f8f5 	bl	8000950 <Error_Handler>
      }
  /* USER CODE END CAN_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	2000002c 	.word	0x2000002c
 8000770:	40006400 	.word	0x40006400

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <MX_SPI1_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007a8:	2220      	movs	r2, #32
 80007aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <MX_SPI1_Init+0x64>)
 80007c6:	f001 ffaf 	bl	8002728 <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f8be 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000054 	.word	0x20000054
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f4:	4b38      	ldr	r3, [pc, #224]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 80007f6:	699b      	ldr	r3, [r3, #24]
 80007f8:	4a37      	ldr	r2, [pc, #220]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 80007fa:	f043 0320 	orr.w	r3, r3, #32
 80007fe:	6193      	str	r3, [r2, #24]
 8000800:	4b35      	ldr	r3, [pc, #212]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080c:	4b32      	ldr	r3, [pc, #200]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a31      	ldr	r2, [pc, #196]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 8000812:	f043 0304 	orr.w	r3, r3, #4
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b2f      	ldr	r3, [pc, #188]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0304 	and.w	r3, r3, #4
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000824:	4b2c      	ldr	r3, [pc, #176]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a2b      	ldr	r2, [pc, #172]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 800082a:	f043 0308 	orr.w	r3, r3, #8
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b29      	ldr	r3, [pc, #164]	@ (80008d8 <MX_GPIO_Init+0xf8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0308 	and.w	r3, r3, #8
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LS_1_Pin|DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f248 4111 	movw	r1, #33809	@ 0x8411
 8000842:	4826      	ldr	r0, [pc, #152]	@ (80008dc <MX_GPIO_Init+0xfc>)
 8000844:	f001 fb47 	bl	8001ed6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|DRIVER_STEP_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8000848:	2200      	movs	r2, #0
 800084a:	211c      	movs	r1, #28
 800084c:	4824      	ldr	r0, [pc, #144]	@ (80008e0 <MX_GPIO_Init+0x100>)
 800084e:	f001 fb42 	bl	8001ed6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LS_1_Pin DRIVER_CS_Pin DRIVER_ENN_Pin DRIVER_ST_ALONE_Pin */
  GPIO_InitStruct.Pin = LS_1_Pin|DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin;
 8000852:	f248 4311 	movw	r3, #33809	@ 0x8411
 8000856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2302      	movs	r3, #2
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0310 	add.w	r3, r7, #16
 8000868:	4619      	mov	r1, r3
 800086a:	481c      	ldr	r0, [pc, #112]	@ (80008dc <MX_GPIO_Init+0xfc>)
 800086c:	f001 f998 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LS_2_Pin */
  GPIO_InitStruct.Pin = LS_2_Pin;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000874:	4b1b      	ldr	r3, [pc, #108]	@ (80008e4 <MX_GPIO_Init+0x104>)
 8000876:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000878:	2301      	movs	r3, #1
 800087a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LS_2_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0310 	add.w	r3, r7, #16
 8000880:	4619      	mov	r1, r3
 8000882:	4816      	ldr	r0, [pc, #88]	@ (80008dc <MX_GPIO_Init+0xfc>)
 8000884:	f001 f98c 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin DRIVER_STEP_Pin DRIVER_DIR_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|DRIVER_STEP_Pin|DRIVER_DIR_Pin;
 8000888:	231c      	movs	r3, #28
 800088a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2302      	movs	r3, #2
 8000896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	4619      	mov	r1, r3
 800089e:	4810      	ldr	r0, [pc, #64]	@ (80008e0 <MX_GPIO_Init+0x100>)
 80008a0:	f001 f97e 	bl	8001ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRIVER_SG_TEST_Pin */
  GPIO_InitStruct.Pin = DRIVER_SG_TEST_Pin;
 80008a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVER_SG_TEST_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	4808      	ldr	r0, [pc, #32]	@ (80008dc <MX_GPIO_Init+0xfc>)
 80008ba:	f001 f971 	bl	8001ba0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2101      	movs	r1, #1
 80008c2:	2007      	movs	r0, #7
 80008c4:	f001 f935 	bl	8001b32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008c8:	2007      	movs	r0, #7
 80008ca:	f001 f94e 	bl	8001b6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40010800 	.word	0x40010800
 80008e0:	40010c00 	.word	0x40010c00
 80008e4:	10310000 	.word	0x10310000

080008e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == LS_2_Pin)
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	d120      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x52>
	{
		if (HAL_GPIO_ReadPin(LS_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET)
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	4619      	mov	r1, r3
 80008fc:	4811      	ldr	r0, [pc, #68]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x5c>)
 80008fe:	f001 fad3 	bl	8001ea8 <HAL_GPIO_ReadPin>
 8000902:	4603      	mov	r3, r0
 8000904:	2b01      	cmp	r3, #1
 8000906:	d108      	bne.n	800091a <HAL_GPIO_EXTI_Callback+0x32>
		{
			ls_state = PRESSED;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x60>)
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 800090e:	2201      	movs	r2, #1
 8000910:	2104      	movs	r1, #4
 8000912:	480e      	ldr	r0, [pc, #56]	@ (800094c <HAL_GPIO_EXTI_Callback+0x64>)
 8000914:	f001 fadf 	bl	8001ed6 <HAL_GPIO_WritePin>
		{
			ls_state = RELEASED;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
		}
	}
}
 8000918:	e00f      	b.n	800093a <HAL_GPIO_EXTI_Callback+0x52>
		else if (HAL_GPIO_ReadPin(LS_2_GPIO_Port, GPIO_Pin) == GPIO_PIN_RESET)
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	4619      	mov	r1, r3
 800091e:	4809      	ldr	r0, [pc, #36]	@ (8000944 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000920:	f001 fac2 	bl	8001ea8 <HAL_GPIO_ReadPin>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d107      	bne.n	800093a <HAL_GPIO_EXTI_Callback+0x52>
			ls_state = RELEASED;
 800092a:	4b07      	ldr	r3, [pc, #28]	@ (8000948 <HAL_GPIO_EXTI_Callback+0x60>)
 800092c:	2201      	movs	r2, #1
 800092e:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	2104      	movs	r1, #4
 8000934:	4805      	ldr	r0, [pc, #20]	@ (800094c <HAL_GPIO_EXTI_Callback+0x64>)
 8000936:	f001 face 	bl	8001ed6 <HAL_GPIO_WritePin>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010800 	.word	0x40010800
 8000948:	20000000 	.word	0x20000000
 800094c:	40010c00 	.word	0x40010c00

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000956:	b672      	cpsid	i
}
 8000958:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

    uint32_t CAN_ERR = HAL_CAN_GetError(&hcan);
 800095a:	4803      	ldr	r0, [pc, #12]	@ (8000968 <Error_Handler+0x18>)
 800095c:	f001 f806 	bl	800196c <HAL_CAN_GetError>
 8000960:	6078      	str	r0, [r7, #4]

  while (1)
 8000962:	bf00      	nop
 8000964:	e7fd      	b.n	8000962 <Error_Handler+0x12>
 8000966:	bf00      	nop
 8000968:	2000002c 	.word	0x2000002c

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_MspInit+0x5c>)
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <HAL_MspInit+0x5c>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6193      	str	r3, [r2, #24]
 800097e:	4b12      	ldr	r3, [pc, #72]	@ (80009c8 <HAL_MspInit+0x5c>)
 8000980:	699b      	ldr	r3, [r3, #24]
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0f      	ldr	r3, [pc, #60]	@ (80009c8 <HAL_MspInit+0x5c>)
 800098c:	69db      	ldr	r3, [r3, #28]
 800098e:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <HAL_MspInit+0x5c>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000994:	61d3      	str	r3, [r2, #28]
 8000996:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <HAL_MspInit+0x5c>)
 8000998:	69db      	ldr	r3, [r3, #28]
 800099a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009a2:	4b0a      	ldr	r3, [pc, #40]	@ (80009cc <HAL_MspInit+0x60>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	4a04      	ldr	r2, [pc, #16]	@ (80009cc <HAL_MspInit+0x60>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bc80      	pop	{r7}
 80009c6:	4770      	bx	lr
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40010000 	.word	0x40010000

080009d0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b088      	sub	sp, #32
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0310 	add.w	r3, r7, #16
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a20      	ldr	r2, [pc, #128]	@ (8000a6c <HAL_CAN_MspInit+0x9c>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d139      	bne.n	8000a64 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009f2:	69db      	ldr	r3, [r3, #28]
 80009f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009fa:	61d3      	str	r3, [r2, #28]
 80009fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 80009fe:	69db      	ldr	r3, [r3, #28]
 8000a00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a08:	4b19      	ldr	r3, [pc, #100]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a18      	ldr	r2, [pc, #96]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a0e:	f043 0304 	orr.w	r3, r3, #4
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b16      	ldr	r3, [pc, #88]	@ (8000a70 <HAL_CAN_MspInit+0xa0>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a20:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a24:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0310 	add.w	r3, r7, #16
 8000a32:	4619      	mov	r1, r3
 8000a34:	480f      	ldr	r0, [pc, #60]	@ (8000a74 <HAL_CAN_MspInit+0xa4>)
 8000a36:	f001 f8b3 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <HAL_CAN_MspInit+0xa4>)
 8000a50:	f001 f8a6 	bl	8001ba0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2014      	movs	r0, #20
 8000a5a:	f001 f86a 	bl	8001b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000a5e:	2014      	movs	r0, #20
 8000a60:	f001 f883 	bl	8001b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40006400 	.word	0x40006400
 8000a70:	40021000 	.word	0x40021000
 8000a74:	40010800 	.word	0x40010800

08000a78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
 8000a8a:	609a      	str	r2, [r3, #8]
 8000a8c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a1b      	ldr	r2, [pc, #108]	@ (8000b00 <HAL_SPI_MspInit+0x88>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d12f      	bne.n	8000af8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a98:	4b1a      	ldr	r3, [pc, #104]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	4a19      	ldr	r2, [pc, #100]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000a9e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000aa2:	6193      	str	r3, [r2, #24]
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab0:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	4a13      	ldr	r2, [pc, #76]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000ab6:	f043 0304 	orr.w	r3, r3, #4
 8000aba:	6193      	str	r3, [r2, #24]
 8000abc:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <HAL_SPI_MspInit+0x8c>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	f003 0304 	and.w	r3, r3, #4
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SPI1_SCK_Pin|DRIVER_SPI1_MOSI_Pin;
 8000ac8:	23a0      	movs	r3, #160	@ 0xa0
 8000aca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000adc:	f001 f860 	bl	8001ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_SPI1_MISO_Pin;
 8000ae0:	2340      	movs	r3, #64	@ 0x40
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DRIVER_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <HAL_SPI_MspInit+0x90>)
 8000af4:	f001 f854 	bl	8001ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40013000 	.word	0x40013000
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010800 	.word	0x40010800

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bc80      	pop	{r7}
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 f886 	bl	8000c6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f001 f9e5 	bl	8001f38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
	...

08000b74 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b78:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000b7a:	f000 fcd4 	bl	8001526 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	2000002c 	.word	0x2000002c

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff fff8 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	@ (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	@ (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	@ (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	@ (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f002 f895 	bl	8002cec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fbc7 	bl	8000354 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bd0:	08002d78 	.word	0x08002d78
  ldr r2, =_sbss
 8000bd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd8:	20000128 	.word	0x20000128

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	@ (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 ff93 	bl	8001b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f000 f808 	bl	8000c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff feb6 	bl	800096c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c14:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_InitTick+0x54>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x58>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 ffab 	bl	8001b86 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
 8000c38:	e00e      	b.n	8000c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b0f      	cmp	r3, #15
 8000c3e:	d80a      	bhi.n	8000c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c40:	2200      	movs	r2, #0
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	f04f 30ff 	mov.w	r0, #4294967295
 8000c48:	f000 ff73 	bl	8001b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c4c:	4a06      	ldr	r2, [pc, #24]	@ (8000c68 <HAL_InitTick+0x5c>)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c52:	2300      	movs	r3, #0
 8000c54:	e000      	b.n	8000c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000004 	.word	0x20000004
 8000c64:	2000000c 	.word	0x2000000c
 8000c68:	20000008 	.word	0x20000008

08000c6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c70:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <HAL_IncTick+0x1c>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	461a      	mov	r2, r3
 8000c76:	4b05      	ldr	r3, [pc, #20]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	4a03      	ldr	r2, [pc, #12]	@ (8000c8c <HAL_IncTick+0x20>)
 8000c7e:	6013      	str	r3, [r2, #0]
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	2000000c 	.word	0x2000000c
 8000c8c:	20000124 	.word	0x20000124

08000c90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return uwTick;
 8000c94:	4b02      	ldr	r3, [pc, #8]	@ (8000ca0 <HAL_GetTick+0x10>)
 8000c96:	681b      	ldr	r3, [r3, #0]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	20000124 	.word	0x20000124

08000ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cac:	f7ff fff0 	bl	8000c90 <HAL_GetTick>
 8000cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cbc:	d005      	beq.n	8000cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <HAL_Delay+0x44>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cca:	bf00      	nop
 8000ccc:	f7ff ffe0 	bl	8000c90 <HAL_GetTick>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d8f7      	bhi.n	8000ccc <HAL_Delay+0x28>
  {
  }
}
 8000cdc:	bf00      	nop
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000000c 	.word	0x2000000c

08000cec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e0ed      	b.n	8000eda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d102      	bne.n	8000d10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d0a:	6878      	ldr	r0, [r7, #4]
 8000d0c:	f7ff fe60 	bl	80009d0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f042 0201 	orr.w	r2, r2, #1
 8000d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d20:	f7ff ffb6 	bl	8000c90 <HAL_GetTick>
 8000d24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d26:	e012      	b.n	8000d4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d28:	f7ff ffb2 	bl	8000c90 <HAL_GetTick>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	2b0a      	cmp	r3, #10
 8000d34:	d90b      	bls.n	8000d4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2205      	movs	r2, #5
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e0c5      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d0e5      	beq.n	8000d28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f022 0202 	bic.w	r2, r2, #2
 8000d6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d6c:	f7ff ff90 	bl	8000c90 <HAL_GetTick>
 8000d70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d72:	e012      	b.n	8000d9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d74:	f7ff ff8c 	bl	8000c90 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d90b      	bls.n	8000d9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2205      	movs	r2, #5
 8000d92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e09f      	b.n	8000eda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0302 	and.w	r3, r3, #2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1e5      	bne.n	8000d74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	7e1b      	ldrb	r3, [r3, #24]
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d108      	bne.n	8000dc2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	e007      	b.n	8000dd2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d108      	bne.n	8000dec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	7e9b      	ldrb	r3, [r3, #26]
 8000e00:	2b01      	cmp	r3, #1
 8000e02:	d108      	bne.n	8000e16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f042 0220 	orr.w	r2, r2, #32
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	e007      	b.n	8000e26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	681a      	ldr	r2, [r3, #0]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f022 0220 	bic.w	r2, r2, #32
 8000e24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	7edb      	ldrb	r3, [r3, #27]
 8000e2a:	2b01      	cmp	r3, #1
 8000e2c:	d108      	bne.n	8000e40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0210 	bic.w	r2, r2, #16
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	e007      	b.n	8000e50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0210 	orr.w	r2, r2, #16
 8000e4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d108      	bne.n	8000e6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0208 	orr.w	r2, r2, #8
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	e007      	b.n	8000e7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f022 0208 	bic.w	r2, r2, #8
 8000e78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7f5b      	ldrb	r3, [r3, #29]
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d108      	bne.n	8000e94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f042 0204 	orr.w	r2, r2, #4
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	e007      	b.n	8000ea4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0204 	bic.w	r2, r2, #4
 8000ea2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	689a      	ldr	r2, [r3, #8]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	695b      	ldr	r3, [r3, #20]
 8000eb8:	ea42 0103 	orr.w	r1, r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	1e5a      	subs	r2, r3, #1
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	b087      	sub	sp, #28
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
 8000eea:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ef8:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000efa:	7cfb      	ldrb	r3, [r7, #19]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d003      	beq.n	8000f08 <HAL_CAN_ConfigFilter+0x26>
 8000f00:	7cfb      	ldrb	r3, [r7, #19]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	f040 80aa 	bne.w	800105c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000f0e:	f043 0201 	orr.w	r2, r3, #1
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	695b      	ldr	r3, [r3, #20]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	2201      	movs	r2, #1
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	69db      	ldr	r3, [r3, #28]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d123      	bne.n	8000f8a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	401a      	ands	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f64:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3248      	adds	r2, #72	@ 0x48
 8000f6a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f7e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f80:	6979      	ldr	r1, [r7, #20]
 8000f82:	3348      	adds	r3, #72	@ 0x48
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	440b      	add	r3, r1
 8000f88:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	69db      	ldr	r3, [r3, #28]
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d122      	bne.n	8000fd8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3248      	adds	r2, #72	@ 0x48
 8000fb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fce:	6979      	ldr	r1, [r7, #20]
 8000fd0:	3348      	adds	r3, #72	@ 0x48
 8000fd2:	00db      	lsls	r3, r3, #3
 8000fd4:	440b      	add	r3, r1
 8000fd6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d109      	bne.n	8000ff4 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000ff2:	e007      	b.n	8001004 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800101e:	e007      	b.n	8001030 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	431a      	orrs	r2, r3
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	6a1b      	ldr	r3, [r3, #32]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d107      	bne.n	8001048 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	431a      	orrs	r2, r3
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800104e:	f023 0201 	bic.w	r2, r3, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	e006      	b.n	800106a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001060:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
  }
}
 800106a:	4618      	mov	r0, r3
 800106c:	371c      	adds	r7, #28
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001082:	b2db      	uxtb	r3, r3
 8001084:	2b01      	cmp	r3, #1
 8001086:	d12e      	bne.n	80010e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2202      	movs	r2, #2
 800108c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f022 0201 	bic.w	r2, r2, #1
 800109e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010a0:	f7ff fdf6 	bl	8000c90 <HAL_GetTick>
 80010a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010a6:	e012      	b.n	80010ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010a8:	f7ff fdf2 	bl	8000c90 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b0a      	cmp	r3, #10
 80010b4:	d90b      	bls.n	80010ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ba:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2205      	movs	r2, #5
 80010c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e012      	b.n	80010f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d1e5      	bne.n	80010a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e006      	b.n	80010f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ea:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
  }
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b089      	sub	sp, #36	@ 0x24
 8001100:	af00      	add	r7, sp, #0
 8001102:	60f8      	str	r0, [r7, #12]
 8001104:	60b9      	str	r1, [r7, #8]
 8001106:	607a      	str	r2, [r7, #4]
 8001108:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001110:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800111a:	7ffb      	ldrb	r3, [r7, #31]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d003      	beq.n	8001128 <HAL_CAN_AddTxMessage+0x2c>
 8001120:	7ffb      	ldrb	r3, [r7, #31]
 8001122:	2b02      	cmp	r3, #2
 8001124:	f040 80ad 	bne.w	8001282 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10a      	bne.n	8001148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001142:	2b00      	cmp	r3, #0
 8001144:	f000 8095 	beq.w	8001272 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	0e1b      	lsrs	r3, r3, #24
 800114c:	f003 0303 	and.w	r3, r3, #3
 8001150:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001152:	2201      	movs	r2, #1
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10d      	bne.n	8001180 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	6809      	ldr	r1, [r1, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	3318      	adds	r3, #24
 8001178:	011b      	lsls	r3, r3, #4
 800117a:	440b      	add	r3, r1
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	e00f      	b.n	80011a0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800118a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001190:	68f9      	ldr	r1, [r7, #12]
 8001192:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001194:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3318      	adds	r3, #24
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6819      	ldr	r1, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	691a      	ldr	r2, [r3, #16]
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3318      	adds	r3, #24
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	440b      	add	r3, r1
 80011b0:	3304      	adds	r3, #4
 80011b2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	7d1b      	ldrb	r3, [r3, #20]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d111      	bne.n	80011e0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3318      	adds	r3, #24
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	3304      	adds	r3, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	6811      	ldr	r1, [r2, #0]
 80011d0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3318      	adds	r3, #24
 80011d8:	011b      	lsls	r3, r3, #4
 80011da:	440b      	add	r3, r1
 80011dc:	3304      	adds	r3, #4
 80011de:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3307      	adds	r3, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	061a      	lsls	r2, r3, #24
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3306      	adds	r3, #6
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	041b      	lsls	r3, r3, #16
 80011f0:	431a      	orrs	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	3305      	adds	r3, #5
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	021b      	lsls	r3, r3, #8
 80011fa:	4313      	orrs	r3, r2
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	3204      	adds	r2, #4
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4610      	mov	r0, r2
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	6811      	ldr	r1, [r2, #0]
 8001208:	ea43 0200 	orr.w	r2, r3, r0
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	011b      	lsls	r3, r3, #4
 8001210:	440b      	add	r3, r1
 8001212:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001216:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3303      	adds	r3, #3
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	061a      	lsls	r2, r3, #24
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	3302      	adds	r3, #2
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	041b      	lsls	r3, r3, #16
 8001228:	431a      	orrs	r2, r3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3301      	adds	r3, #1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	4313      	orrs	r3, r2
 8001234:	687a      	ldr	r2, [r7, #4]
 8001236:	7812      	ldrb	r2, [r2, #0]
 8001238:	4610      	mov	r0, r2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	6811      	ldr	r1, [r2, #0]
 800123e:	ea43 0200 	orr.w	r2, r3, r0
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	440b      	add	r3, r1
 8001248:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800124c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	3318      	adds	r3, #24
 8001256:	011b      	lsls	r3, r3, #4
 8001258:	4413      	add	r3, r2
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	6811      	ldr	r1, [r2, #0]
 8001260:	f043 0201 	orr.w	r2, r3, #1
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	3318      	adds	r3, #24
 8001268:	011b      	lsls	r3, r3, #4
 800126a:	440b      	add	r3, r1
 800126c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	e00e      	b.n	8001290 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001276:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e006      	b.n	8001290 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001286:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
  }
}
 8001290:	4618      	mov	r0, r3
 8001292:	3724      	adds	r7, #36	@ 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr

0800129a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800129a:	b480      	push	{r7}
 800129c:	b087      	sub	sp, #28
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80012b0:	7dfb      	ldrb	r3, [r7, #23]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d003      	beq.n	80012be <HAL_CAN_GetRxMessage+0x24>
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	f040 8103 	bne.w	80014c4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10e      	bne.n	80012e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	68db      	ldr	r3, [r3, #12]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e0f7      	b.n	80014d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	691b      	ldr	r3, [r3, #16]
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e0e8      	b.n	80014d2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	331b      	adds	r3, #27
 8001308:	011b      	lsls	r3, r3, #4
 800130a:	4413      	add	r3, r2
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0204 	and.w	r2, r3, #4
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	331b      	adds	r3, #27
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0d5b      	lsrs	r3, r3, #21
 800132e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	e00b      	b.n	8001350 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	331b      	adds	r3, #27
 8001340:	011b      	lsls	r3, r3, #4
 8001342:	4413      	add	r3, r2
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	08db      	lsrs	r3, r3, #3
 8001348:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	331b      	adds	r3, #27
 8001358:	011b      	lsls	r3, r3, #4
 800135a:	4413      	add	r3, r2
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0202 	and.w	r2, r3, #2
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681a      	ldr	r2, [r3, #0]
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	331b      	adds	r3, #27
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	4413      	add	r3, r2
 8001372:	3304      	adds	r3, #4
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2208      	movs	r2, #8
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	e00b      	b.n	800139e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	331b      	adds	r3, #27
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 020f 	and.w	r2, r3, #15
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	331b      	adds	r3, #27
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	3304      	adds	r3, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	0a1b      	lsrs	r3, r3, #8
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	331b      	adds	r3, #27
 80013be:	011b      	lsls	r3, r3, #4
 80013c0:	4413      	add	r3, r2
 80013c2:	3304      	adds	r3, #4
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	0c1b      	lsrs	r3, r3, #16
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	011b      	lsls	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	011b      	lsls	r3, r3, #4
 80013ec:	4413      	add	r3, r2
 80013ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	0a1a      	lsrs	r2, r3, #8
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	3301      	adds	r3, #1
 80013fa:	b2d2      	uxtb	r2, r2
 80013fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	4413      	add	r3, r2
 8001408:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0c1a      	lsrs	r2, r3, #16
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	3302      	adds	r3, #2
 8001414:	b2d2      	uxtb	r2, r2
 8001416:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	0e1a      	lsrs	r2, r3, #24
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3303      	adds	r3, #3
 800142e:	b2d2      	uxtb	r2, r2
 8001430:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	4413      	add	r3, r2
 800143c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	3304      	adds	r3, #4
 8001446:	b2d2      	uxtb	r2, r2
 8001448:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4413      	add	r3, r2
 8001454:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	0a1a      	lsrs	r2, r3, #8
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	3305      	adds	r3, #5
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	011b      	lsls	r3, r3, #4
 800146c:	4413      	add	r3, r2
 800146e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0c1a      	lsrs	r2, r3, #16
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	3306      	adds	r3, #6
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	0e1a      	lsrs	r2, r3, #24
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3307      	adds	r3, #7
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d108      	bne.n	80014b0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	68da      	ldr	r2, [r3, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f042 0220 	orr.w	r2, r2, #32
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	e007      	b.n	80014c0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	691a      	ldr	r2, [r3, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 0220 	orr.w	r2, r2, #32
 80014be:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	e006      	b.n	80014d2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
  }
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	371c      	adds	r7, #28
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80014dc:	b480      	push	{r7}
 80014de:	b085      	sub	sp, #20
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d002      	beq.n	80014fa <HAL_CAN_ActivateNotification+0x1e>
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d109      	bne.n	800150e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6959      	ldr	r1, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	430a      	orrs	r2, r1
 8001508:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e006      	b.n	800151c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b08a      	sub	sp, #40	@ 0x28
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	695b      	ldr	r3, [r3, #20]
 8001538:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d07c      	beq.n	8001666 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d023      	beq.n	80015be <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2201      	movs	r2, #1
 800157c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 f983 	bl	8001894 <HAL_CAN_TxMailbox0CompleteCallback>
 800158e:	e016      	b.n	80015be <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	f003 0304 	and.w	r3, r3, #4
 8001596:	2b00      	cmp	r3, #0
 8001598:	d004      	beq.n	80015a4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80015a2:	e00c      	b.n	80015be <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	f003 0308 	and.w	r3, r3, #8
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d004      	beq.n	80015b8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015b6:	e002      	b.n	80015be <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f986 	bl	80018ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d024      	beq.n	8001612 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80015d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f962 	bl	80018a6 <HAL_CAN_TxMailbox1CompleteCallback>
 80015e2:	e016      	b.n	8001612 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80015ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	e00c      	b.n	8001612 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d004      	beq.n	800160c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
 800160a:	e002      	b.n	8001612 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f000 f965 	bl	80018dc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d024      	beq.n	8001666 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001624:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d003      	beq.n	8001638 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f941 	bl	80018b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001636:	e016      	b.n	8001666 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d004      	beq.n	800164c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	e00c      	b.n	8001666 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d004      	beq.n	8001660 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
 800165e:	e002      	b.n	8001666 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 f944 	bl	80018ee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	2b00      	cmp	r3, #0
 800166e:	d00c      	beq.n	800168a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001680:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2210      	movs	r2, #16
 8001688:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800168a:	6a3b      	ldr	r3, [r7, #32]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d00b      	beq.n	80016ac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0308 	and.w	r3, r3, #8
 800169a:	2b00      	cmp	r3, #0
 800169c:	d006      	beq.n	80016ac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2208      	movs	r2, #8
 80016a4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f92a 	bl	8001900 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d009      	beq.n	80016ca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0303 	and.w	r3, r3, #3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7fe fdb1 	bl	800022c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80016ca:	6a3b      	ldr	r3, [r7, #32]
 80016cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d00c      	beq.n	80016ee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f003 0310 	and.w	r3, r3, #16
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d007      	beq.n	80016ee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016e4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2210      	movs	r2, #16
 80016ec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	f003 0320 	and.w	r3, r3, #32
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00b      	beq.n	8001710 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d006      	beq.n	8001710 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2208      	movs	r2, #8
 8001708:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f90a 	bl	8001924 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001710:	6a3b      	ldr	r3, [r7, #32]
 8001712:	f003 0310 	and.w	r3, r3, #16
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 f8f2 	bl	8001912 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800172e:	6a3b      	ldr	r3, [r7, #32]
 8001730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d00b      	beq.n	8001750 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0310 	and.w	r3, r3, #16
 800173e:	2b00      	cmp	r3, #0
 8001740:	d006      	beq.n	8001750 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2210      	movs	r2, #16
 8001748:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f8f3 	bl	8001936 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00b      	beq.n	8001772 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d006      	beq.n	8001772 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2208      	movs	r2, #8
 800176a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8eb 	bl	8001948 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d07b      	beq.n	8001874 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	2b00      	cmp	r3, #0
 8001784:	d072      	beq.n	800186c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800178c:	2b00      	cmp	r3, #0
 800178e:	d008      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800179a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017be:	6a3b      	ldr	r3, [r7, #32]
 80017c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d003      	beq.n	80017da <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	f043 0304 	orr.w	r3, r3, #4
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d043      	beq.n	800186c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d03e      	beq.n	800186c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017f4:	2b60      	cmp	r3, #96	@ 0x60
 80017f6:	d02b      	beq.n	8001850 <HAL_CAN_IRQHandler+0x32a>
 80017f8:	2b60      	cmp	r3, #96	@ 0x60
 80017fa:	d82e      	bhi.n	800185a <HAL_CAN_IRQHandler+0x334>
 80017fc:	2b50      	cmp	r3, #80	@ 0x50
 80017fe:	d022      	beq.n	8001846 <HAL_CAN_IRQHandler+0x320>
 8001800:	2b50      	cmp	r3, #80	@ 0x50
 8001802:	d82a      	bhi.n	800185a <HAL_CAN_IRQHandler+0x334>
 8001804:	2b40      	cmp	r3, #64	@ 0x40
 8001806:	d019      	beq.n	800183c <HAL_CAN_IRQHandler+0x316>
 8001808:	2b40      	cmp	r3, #64	@ 0x40
 800180a:	d826      	bhi.n	800185a <HAL_CAN_IRQHandler+0x334>
 800180c:	2b30      	cmp	r3, #48	@ 0x30
 800180e:	d010      	beq.n	8001832 <HAL_CAN_IRQHandler+0x30c>
 8001810:	2b30      	cmp	r3, #48	@ 0x30
 8001812:	d822      	bhi.n	800185a <HAL_CAN_IRQHandler+0x334>
 8001814:	2b10      	cmp	r3, #16
 8001816:	d002      	beq.n	800181e <HAL_CAN_IRQHandler+0x2f8>
 8001818:	2b20      	cmp	r3, #32
 800181a:	d005      	beq.n	8001828 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800181c:	e01d      	b.n	800185a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800181e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001826:	e019      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	f043 0310 	orr.w	r3, r3, #16
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001830:	e014      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001834:	f043 0320 	orr.w	r3, r3, #32
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800183a:	e00f      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001844:	e00a      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800184e:	e005      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001856:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001858:	e000      	b.n	800185c <HAL_CAN_IRQHandler+0x336>
            break;
 800185a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	699a      	ldr	r2, [r3, #24]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800186a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2204      	movs	r2, #4
 8001872:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800187e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f867 	bl	800195a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800188c:	bf00      	nop
 800188e:	3728      	adds	r7, #40	@ 0x28
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bc80      	pop	{r7}
 80018c8:	4770      	bx	lr

080018ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80018e4:	bf00      	nop
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	bc80      	pop	{r7}
 8001934:	4770      	bx	lr

08001936 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr

0800195a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001978:	4618      	mov	r0, r3
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
	...

08001984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199a:	68ba      	ldr	r2, [r7, #8]
 800199c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a0:	4013      	ands	r3, r2
 80019a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019b6:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <__NVIC_SetPriorityGrouping+0x44>)
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	60d3      	str	r3, [r2, #12]
}
 80019bc:	bf00      	nop
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bc80      	pop	{r7}
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d0:	4b04      	ldr	r3, [pc, #16]	@ (80019e4 <__NVIC_GetPriorityGrouping+0x18>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	f003 0307 	and.w	r3, r3, #7
}
 80019da:	4618      	mov	r0, r3
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000ed00 	.word	0xe000ed00

080019e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db0b      	blt.n	8001a12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	f003 021f 	and.w	r2, r3, #31
 8001a00:	4906      	ldr	r1, [pc, #24]	@ (8001a1c <__NVIC_EnableIRQ+0x34>)
 8001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a06:	095b      	lsrs	r3, r3, #5
 8001a08:	2001      	movs	r0, #1
 8001a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	e000e100 	.word	0xe000e100

08001a20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	db0a      	blt.n	8001a4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	b2da      	uxtb	r2, r3
 8001a38:	490c      	ldr	r1, [pc, #48]	@ (8001a6c <__NVIC_SetPriority+0x4c>)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	0112      	lsls	r2, r2, #4
 8001a40:	b2d2      	uxtb	r2, r2
 8001a42:	440b      	add	r3, r1
 8001a44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a48:	e00a      	b.n	8001a60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	b2da      	uxtb	r2, r3
 8001a4e:	4908      	ldr	r1, [pc, #32]	@ (8001a70 <__NVIC_SetPriority+0x50>)
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	3b04      	subs	r3, #4
 8001a58:	0112      	lsls	r2, r2, #4
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	440b      	add	r3, r1
 8001a5e:	761a      	strb	r2, [r3, #24]
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bc80      	pop	{r7}
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	e000e100 	.word	0xe000e100
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b089      	sub	sp, #36	@ 0x24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f1c3 0307 	rsb	r3, r3, #7
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf28      	it	cs
 8001a92:	2304      	movcs	r3, #4
 8001a94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d902      	bls.n	8001aa4 <NVIC_EncodePriority+0x30>
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3b03      	subs	r3, #3
 8001aa2:	e000      	b.n	8001aa6 <NVIC_EncodePriority+0x32>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8001aac:	69bb      	ldr	r3, [r7, #24]
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac6:	43d9      	mvns	r1, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001acc:	4313      	orrs	r3, r2
         );
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3724      	adds	r7, #36	@ 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ae8:	d301      	bcc.n	8001aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aea:	2301      	movs	r3, #1
 8001aec:	e00f      	b.n	8001b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aee:	4a0a      	ldr	r2, [pc, #40]	@ (8001b18 <SysTick_Config+0x40>)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001af6:	210f      	movs	r1, #15
 8001af8:	f04f 30ff 	mov.w	r0, #4294967295
 8001afc:	f7ff ff90 	bl	8001a20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SysTick_Config+0x40>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b06:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <SysTick_Config+0x40>)
 8001b08:	2207      	movs	r2, #7
 8001b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	e000e010 	.word	0xe000e010

08001b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff ff2d 	bl	8001984 <__NVIC_SetPriorityGrouping>
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b44:	f7ff ff42 	bl	80019cc <__NVIC_GetPriorityGrouping>
 8001b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	6978      	ldr	r0, [r7, #20]
 8001b50:	f7ff ff90 	bl	8001a74 <NVIC_EncodePriority>
 8001b54:	4602      	mov	r2, r0
 8001b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b5a:	4611      	mov	r1, r2
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff5f 	bl	8001a20 <__NVIC_SetPriority>
}
 8001b62:	bf00      	nop
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ff35 	bl	80019e8 <__NVIC_EnableIRQ>
}
 8001b7e:	bf00      	nop
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b082      	sub	sp, #8
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff ffa2 	bl	8001ad8 <SysTick_Config>
 8001b94:	4603      	mov	r3, r0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
	...

08001ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b08b      	sub	sp, #44	@ 0x2c
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bb2:	e169      	b.n	8001e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8158 	bne.w	8001e82 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	4a9a      	ldr	r2, [pc, #616]	@ (8001e40 <HAL_GPIO_Init+0x2a0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d05e      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a98      	ldr	r2, [pc, #608]	@ (8001e40 <HAL_GPIO_Init+0x2a0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d875      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001be2:	4a98      	ldr	r2, [pc, #608]	@ (8001e44 <HAL_GPIO_Init+0x2a4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d058      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001be8:	4a96      	ldr	r2, [pc, #600]	@ (8001e44 <HAL_GPIO_Init+0x2a4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d86f      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001bee:	4a96      	ldr	r2, [pc, #600]	@ (8001e48 <HAL_GPIO_Init+0x2a8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d052      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001bf4:	4a94      	ldr	r2, [pc, #592]	@ (8001e48 <HAL_GPIO_Init+0x2a8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d869      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001bfa:	4a94      	ldr	r2, [pc, #592]	@ (8001e4c <HAL_GPIO_Init+0x2ac>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d04c      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001c00:	4a92      	ldr	r2, [pc, #584]	@ (8001e4c <HAL_GPIO_Init+0x2ac>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d863      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c06:	4a92      	ldr	r2, [pc, #584]	@ (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d046      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
 8001c0c:	4a90      	ldr	r2, [pc, #576]	@ (8001e50 <HAL_GPIO_Init+0x2b0>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d85d      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c12:	2b12      	cmp	r3, #18
 8001c14:	d82a      	bhi.n	8001c6c <HAL_GPIO_Init+0xcc>
 8001c16:	2b12      	cmp	r3, #18
 8001c18:	d859      	bhi.n	8001cce <HAL_GPIO_Init+0x12e>
 8001c1a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c20 <HAL_GPIO_Init+0x80>)
 8001c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c20:	08001c9b 	.word	0x08001c9b
 8001c24:	08001c75 	.word	0x08001c75
 8001c28:	08001c87 	.word	0x08001c87
 8001c2c:	08001cc9 	.word	0x08001cc9
 8001c30:	08001ccf 	.word	0x08001ccf
 8001c34:	08001ccf 	.word	0x08001ccf
 8001c38:	08001ccf 	.word	0x08001ccf
 8001c3c:	08001ccf 	.word	0x08001ccf
 8001c40:	08001ccf 	.word	0x08001ccf
 8001c44:	08001ccf 	.word	0x08001ccf
 8001c48:	08001ccf 	.word	0x08001ccf
 8001c4c:	08001ccf 	.word	0x08001ccf
 8001c50:	08001ccf 	.word	0x08001ccf
 8001c54:	08001ccf 	.word	0x08001ccf
 8001c58:	08001ccf 	.word	0x08001ccf
 8001c5c:	08001ccf 	.word	0x08001ccf
 8001c60:	08001ccf 	.word	0x08001ccf
 8001c64:	08001c7d 	.word	0x08001c7d
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	4a79      	ldr	r2, [pc, #484]	@ (8001e54 <HAL_GPIO_Init+0x2b4>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d013      	beq.n	8001c9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c72:	e02c      	b.n	8001cce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	623b      	str	r3, [r7, #32]
          break;
 8001c7a:	e029      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	3304      	adds	r3, #4
 8001c82:	623b      	str	r3, [r7, #32]
          break;
 8001c84:	e024      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	3308      	adds	r3, #8
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e01f      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	330c      	adds	r3, #12
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e01a      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d102      	bne.n	8001ca8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ca2:	2304      	movs	r3, #4
 8001ca4:	623b      	str	r3, [r7, #32]
          break;
 8001ca6:	e013      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d105      	bne.n	8001cbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	611a      	str	r2, [r3, #16]
          break;
 8001cba:	e009      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	69fa      	ldr	r2, [r7, #28]
 8001cc4:	615a      	str	r2, [r3, #20]
          break;
 8001cc6:	e003      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	623b      	str	r3, [r7, #32]
          break;
 8001ccc:	e000      	b.n	8001cd0 <HAL_GPIO_Init+0x130>
          break;
 8001cce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2bff      	cmp	r3, #255	@ 0xff
 8001cd4:	d801      	bhi.n	8001cda <HAL_GPIO_Init+0x13a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	e001      	b.n	8001cde <HAL_GPIO_Init+0x13e>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2bff      	cmp	r3, #255	@ 0xff
 8001ce4:	d802      	bhi.n	8001cec <HAL_GPIO_Init+0x14c>
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	e002      	b.n	8001cf2 <HAL_GPIO_Init+0x152>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	3b08      	subs	r3, #8
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	210f      	movs	r1, #15
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	43db      	mvns	r3, r3
 8001d02:	401a      	ands	r2, r3
 8001d04:	6a39      	ldr	r1, [r7, #32]
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	431a      	orrs	r2, r3
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 80b1 	beq.w	8001e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d20:	4b4d      	ldr	r3, [pc, #308]	@ (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6193      	str	r3, [r2, #24]
 8001d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e58 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d38:	4a48      	ldr	r2, [pc, #288]	@ (8001e5c <HAL_GPIO_Init+0x2bc>)
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	089b      	lsrs	r3, r3, #2
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d44:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	220f      	movs	r2, #15
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a40      	ldr	r2, [pc, #256]	@ (8001e60 <HAL_GPIO_Init+0x2c0>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_GPIO_Init+0x1ec>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3f      	ldr	r2, [pc, #252]	@ (8001e64 <HAL_GPIO_Init+0x2c4>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d00d      	beq.n	8001d88 <HAL_GPIO_Init+0x1e8>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8001e68 <HAL_GPIO_Init+0x2c8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d007      	beq.n	8001d84 <HAL_GPIO_Init+0x1e4>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3d      	ldr	r2, [pc, #244]	@ (8001e6c <HAL_GPIO_Init+0x2cc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d101      	bne.n	8001d80 <HAL_GPIO_Init+0x1e0>
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e006      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e004      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d84:	2302      	movs	r3, #2
 8001d86:	e002      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e000      	b.n	8001d8e <HAL_GPIO_Init+0x1ee>
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d90:	f002 0203 	and.w	r2, r2, #3
 8001d94:	0092      	lsls	r2, r2, #2
 8001d96:	4093      	lsls	r3, r2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d9e:	492f      	ldr	r1, [pc, #188]	@ (8001e5c <HAL_GPIO_Init+0x2bc>)
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db8:	4b2d      	ldr	r3, [pc, #180]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	492c      	ldr	r1, [pc, #176]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dc6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	689a      	ldr	r2, [r3, #8]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	4928      	ldr	r1, [pc, #160]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de0:	4b23      	ldr	r3, [pc, #140]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	4922      	ldr	r1, [pc, #136]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	60cb      	str	r3, [r1, #12]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dee:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	491e      	ldr	r1, [pc, #120]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d006      	beq.n	8001e16 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4918      	ldr	r1, [pc, #96]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]
 8001e14:	e006      	b.n	8001e24 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e16:	4b16      	ldr	r3, [pc, #88]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e18:	685a      	ldr	r2, [r3, #4]
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4914      	ldr	r1, [pc, #80]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d021      	beq.n	8001e74 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e30:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	490e      	ldr	r1, [pc, #56]	@ (8001e70 <HAL_GPIO_Init+0x2d0>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	600b      	str	r3, [r1, #0]
 8001e3c:	e021      	b.n	8001e82 <HAL_GPIO_Init+0x2e2>
 8001e3e:	bf00      	nop
 8001e40:	10320000 	.word	0x10320000
 8001e44:	10310000 	.word	0x10310000
 8001e48:	10220000 	.word	0x10220000
 8001e4c:	10210000 	.word	0x10210000
 8001e50:	10120000 	.word	0x10120000
 8001e54:	10110000 	.word	0x10110000
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010000 	.word	0x40010000
 8001e60:	40010800 	.word	0x40010800
 8001e64:	40010c00 	.word	0x40010c00
 8001e68:	40011000 	.word	0x40011000
 8001e6c:	40011400 	.word	0x40011400
 8001e70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	4909      	ldr	r1, [pc, #36]	@ (8001ea4 <HAL_GPIO_Init+0x304>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	3301      	adds	r3, #1
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f47f ae8e 	bne.w	8001bb4 <HAL_GPIO_Init+0x14>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	372c      	adds	r7, #44	@ 0x2c
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bc80      	pop	{r7}
 8001ea2:	4770      	bx	lr
 8001ea4:	40010400 	.word	0x40010400

08001ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	887b      	ldrh	r3, [r7, #2]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e001      	b.n	8001eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	807b      	strh	r3, [r7, #2]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee6:	787b      	ldrb	r3, [r7, #1]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eec:	887a      	ldrh	r2, [r7, #2]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ef2:	e003      	b.n	8001efc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ef4:	887b      	ldrh	r3, [r7, #2]
 8001ef6:	041a      	lsls	r2, r3, #16
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	611a      	str	r2, [r3, #16]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bc80      	pop	{r7}
 8001f04:	4770      	bx	lr

08001f06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b085      	sub	sp, #20
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
 8001f0e:	460b      	mov	r3, r1
 8001f10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f18:	887a      	ldrh	r2, [r7, #2]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	041a      	lsls	r2, r3, #16
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	43d9      	mvns	r1, r3
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	400b      	ands	r3, r1
 8001f28:	431a      	orrs	r2, r3
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	611a      	str	r2, [r3, #16]
}
 8001f2e:	bf00      	nop
 8001f30:	3714      	adds	r7, #20
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	695a      	ldr	r2, [r3, #20]
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d006      	beq.n	8001f5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe fcc6 	bl	80008e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40010400 	.word	0x40010400

08001f68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e272      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f88:	4b92      	ldr	r3, [pc, #584]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b04      	cmp	r3, #4
 8001f92:	d00c      	beq.n	8001fae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f94:	4b8f      	ldr	r3, [pc, #572]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 030c 	and.w	r3, r3, #12
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d112      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fac:	d10b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fae:	4b89      	ldr	r3, [pc, #548]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d06c      	beq.n	8002094 <HAL_RCC_OscConfig+0x12c>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d168      	bne.n	8002094 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e24c      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fce:	d106      	bne.n	8001fde <HAL_RCC_OscConfig+0x76>
 8001fd0:	4b80      	ldr	r3, [pc, #512]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7f      	ldr	r2, [pc, #508]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	e02e      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10c      	bne.n	8002000 <HAL_RCC_OscConfig+0x98>
 8001fe6:	4b7b      	ldr	r3, [pc, #492]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7a      	ldr	r2, [pc, #488]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	4b78      	ldr	r3, [pc, #480]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a77      	ldr	r2, [pc, #476]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e01d      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002008:	d10c      	bne.n	8002024 <HAL_RCC_OscConfig+0xbc>
 800200a:	4b72      	ldr	r3, [pc, #456]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a71      	ldr	r2, [pc, #452]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002014:	6013      	str	r3, [r2, #0]
 8002016:	4b6f      	ldr	r3, [pc, #444]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a6e      	ldr	r2, [pc, #440]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002020:	6013      	str	r3, [r2, #0]
 8002022:	e00b      	b.n	800203c <HAL_RCC_OscConfig+0xd4>
 8002024:	4b6b      	ldr	r3, [pc, #428]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a6a      	ldr	r2, [pc, #424]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800202a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800202e:	6013      	str	r3, [r2, #0]
 8002030:	4b68      	ldr	r3, [pc, #416]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a67      	ldr	r2, [pc, #412]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800203a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d013      	beq.n	800206c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7fe fe24 	bl	8000c90 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800204c:	f7fe fe20 	bl	8000c90 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	@ 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e200      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205e:	4b5d      	ldr	r3, [pc, #372]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0f0      	beq.n	800204c <HAL_RCC_OscConfig+0xe4>
 800206a:	e014      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206c:	f7fe fe10 	bl	8000c90 <HAL_GetTick>
 8002070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002072:	e008      	b.n	8002086 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002074:	f7fe fe0c 	bl	8000c90 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b64      	cmp	r3, #100	@ 0x64
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e1ec      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002086:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x10c>
 8002092:	e000      	b.n	8002096 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0302 	and.w	r3, r3, #2
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d063      	beq.n	800216a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a2:	4b4c      	ldr	r3, [pc, #304]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00b      	beq.n	80020c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020ae:	4b49      	ldr	r3, [pc, #292]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d11c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
 80020ba:	4b46      	ldr	r3, [pc, #280]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d116      	bne.n	80020f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c6:	4b43      	ldr	r3, [pc, #268]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d001      	beq.n	80020de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e1c0      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020de:	4b3d      	ldr	r3, [pc, #244]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	00db      	lsls	r3, r3, #3
 80020ec:	4939      	ldr	r1, [pc, #228]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f2:	e03a      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d020      	beq.n	800213e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fc:	4b36      	ldr	r3, [pc, #216]	@ (80021d8 <HAL_RCC_OscConfig+0x270>)
 80020fe:	2201      	movs	r2, #1
 8002100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fdc5 	bl	8000c90 <HAL_GetTick>
 8002106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002108:	e008      	b.n	800211c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210a:	f7fe fdc1 	bl	8000c90 <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d901      	bls.n	800211c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e1a1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	4b2d      	ldr	r3, [pc, #180]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f0      	beq.n	800210a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002128:	4b2a      	ldr	r3, [pc, #168]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	695b      	ldr	r3, [r3, #20]
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4927      	ldr	r1, [pc, #156]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002138:	4313      	orrs	r3, r2
 800213a:	600b      	str	r3, [r1, #0]
 800213c:	e015      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <HAL_RCC_OscConfig+0x270>)
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe fda4 	bl	8000c90 <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800214c:	f7fe fda0 	bl	8000c90 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e180      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215e:	4b1d      	ldr	r3, [pc, #116]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d03a      	beq.n	80021ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d019      	beq.n	80021b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217e:	4b17      	ldr	r3, [pc, #92]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002184:	f7fe fd84 	bl	8000c90 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800218c:	f7fe fd80 	bl	8000c90 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e160      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219e:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021aa:	2001      	movs	r0, #1
 80021ac:	f000 fa9e 	bl	80026ec <RCC_Delay>
 80021b0:	e01c      	b.n	80021ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b2:	4b0a      	ldr	r3, [pc, #40]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe fd6a 	bl	8000c90 <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021be:	e00f      	b.n	80021e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c0:	f7fe fd66 	bl	8000c90 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d908      	bls.n	80021e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e146      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	42420000 	.word	0x42420000
 80021dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e0:	4b92      	ldr	r3, [pc, #584]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e9      	bne.n	80021c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a6 	beq.w	8002346 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021fe:	4b8b      	ldr	r3, [pc, #556]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10d      	bne.n	8002226 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220a:	4b88      	ldr	r3, [pc, #544]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	4a87      	ldr	r2, [pc, #540]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002210:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002214:	61d3      	str	r3, [r2, #28]
 8002216:	4b85      	ldr	r3, [pc, #532]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221e:	60bb      	str	r3, [r7, #8]
 8002220:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002222:	2301      	movs	r3, #1
 8002224:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002226:	4b82      	ldr	r3, [pc, #520]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002232:	4b7f      	ldr	r3, [pc, #508]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7e      	ldr	r2, [pc, #504]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 8002238:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800223c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800223e:	f7fe fd27 	bl	8000c90 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002246:	f7fe fd23 	bl	8000c90 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b64      	cmp	r3, #100	@ 0x64
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e103      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002258:	4b75      	ldr	r3, [pc, #468]	@ (8002430 <HAL_RCC_OscConfig+0x4c8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0f0      	beq.n	8002246 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d106      	bne.n	800227a <HAL_RCC_OscConfig+0x312>
 800226c:	4b6f      	ldr	r3, [pc, #444]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a6e      	ldr	r2, [pc, #440]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002272:	f043 0301 	orr.w	r3, r3, #1
 8002276:	6213      	str	r3, [r2, #32]
 8002278:	e02d      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10c      	bne.n	800229c <HAL_RCC_OscConfig+0x334>
 8002282:	4b6a      	ldr	r3, [pc, #424]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a69      	ldr	r2, [pc, #420]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6213      	str	r3, [r2, #32]
 800228e:	4b67      	ldr	r3, [pc, #412]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002290:	6a1b      	ldr	r3, [r3, #32]
 8002292:	4a66      	ldr	r2, [pc, #408]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002294:	f023 0304 	bic.w	r3, r3, #4
 8002298:	6213      	str	r3, [r2, #32]
 800229a:	e01c      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b05      	cmp	r3, #5
 80022a2:	d10c      	bne.n	80022be <HAL_RCC_OscConfig+0x356>
 80022a4:	4b61      	ldr	r3, [pc, #388]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	4a60      	ldr	r2, [pc, #384]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	f043 0304 	orr.w	r3, r3, #4
 80022ae:	6213      	str	r3, [r2, #32]
 80022b0:	4b5e      	ldr	r3, [pc, #376]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b2:	6a1b      	ldr	r3, [r3, #32]
 80022b4:	4a5d      	ldr	r2, [pc, #372]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6213      	str	r3, [r2, #32]
 80022bc:	e00b      	b.n	80022d6 <HAL_RCC_OscConfig+0x36e>
 80022be:	4b5b      	ldr	r3, [pc, #364]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4a5a      	ldr	r2, [pc, #360]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	6213      	str	r3, [r2, #32]
 80022ca:	4b58      	ldr	r3, [pc, #352]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	4a57      	ldr	r2, [pc, #348]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022d0:	f023 0304 	bic.w	r3, r3, #4
 80022d4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d015      	beq.n	800230a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022de:	f7fe fcd7 	bl	8000c90 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e4:	e00a      	b.n	80022fc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7fe fcd3 	bl	8000c90 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e0b1      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022fc:	4b4b      	ldr	r3, [pc, #300]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0ee      	beq.n	80022e6 <HAL_RCC_OscConfig+0x37e>
 8002308:	e014      	b.n	8002334 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230a:	f7fe fcc1 	bl	8000c90 <HAL_GetTick>
 800230e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002310:	e00a      	b.n	8002328 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002312:	f7fe fcbd 	bl	8000c90 <HAL_GetTick>
 8002316:	4602      	mov	r2, r0
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002320:	4293      	cmp	r3, r2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e09b      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002328:	4b40      	ldr	r3, [pc, #256]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d1ee      	bne.n	8002312 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002334:	7dfb      	ldrb	r3, [r7, #23]
 8002336:	2b01      	cmp	r3, #1
 8002338:	d105      	bne.n	8002346 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233a:	4b3c      	ldr	r3, [pc, #240]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a3b      	ldr	r2, [pc, #236]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002350:	4b36      	ldr	r3, [pc, #216]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b08      	cmp	r3, #8
 800235a:	d061      	beq.n	8002420 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	2b02      	cmp	r3, #2
 8002362:	d146      	bne.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b33      	ldr	r3, [pc, #204]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 8002366:	2200      	movs	r2, #0
 8002368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236a:	f7fe fc91 	bl	8000c90 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002370:	e008      	b.n	8002384 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002372:	f7fe fc8d 	bl	8000c90 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b02      	cmp	r3, #2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e06d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002384:	4b29      	ldr	r3, [pc, #164]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1f0      	bne.n	8002372 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002398:	d108      	bne.n	80023ac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239a:	4b24      	ldr	r3, [pc, #144]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	4921      	ldr	r1, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b1f      	ldr	r3, [pc, #124]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a19      	ldr	r1, [r3, #32]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	430b      	orrs	r3, r1
 80023be:	491b      	ldr	r1, [pc, #108]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2201      	movs	r2, #1
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7fe fc61 	bl	8000c90 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7fe fc5d 	bl	8000c90 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e03d      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e4:	4b11      	ldr	r3, [pc, #68]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x46a>
 80023f0:	e035      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f2:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <HAL_RCC_OscConfig+0x4cc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f8:	f7fe fc4a 	bl	8000c90 <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7fe fc46 	bl	8000c90 <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e026      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002412:	4b06      	ldr	r3, [pc, #24]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d1f0      	bne.n	8002400 <HAL_RCC_OscConfig+0x498>
 800241e:	e01e      	b.n	800245e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69db      	ldr	r3, [r3, #28]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d107      	bne.n	8002438 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e019      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
 800242c:	40021000 	.word	0x40021000
 8002430:	40007000 	.word	0x40007000
 8002434:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002438:	4b0b      	ldr	r3, [pc, #44]	@ (8002468 <HAL_RCC_OscConfig+0x500>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	429a      	cmp	r2, r3
 800244a:	d106      	bne.n	800245a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002456:	429a      	cmp	r2, r3
 8002458:	d001      	beq.n	800245e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e000      	b.n	8002460 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7fe fb98 	bl	8000c90 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7fe fb94 	bl	8000c90 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	@ (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	@ (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	@ (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	@ (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	@ (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe faf6 	bl	8000c0c <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08002d4c 	.word	0x08002d4c
 8002638:	20000004 	.word	0x20000004
 800263c:	20000008 	.word	0x20000008

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x36>
 800266e:	e027      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002672:	613b      	str	r3, [r7, #16]
      break;
 8002674:	e027      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a17      	ldr	r2, [pc, #92]	@ (80026dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	4a11      	ldr	r2, [pc, #68]	@ (80026e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	@ (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	fb03 f202 	mul.w	r2, r3, r2
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e004      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0xa8>)
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	693b      	ldr	r3, [r7, #16]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	00f42400 	.word	0x00f42400
 80026dc:	08002d5c 	.word	0x08002d5c
 80026e0:	08002d6c 	.word	0x08002d6c
 80026e4:	003d0900 	.word	0x003d0900
 80026e8:	007a1200 	.word	0x007a1200

080026ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <RCC_Delay+0x34>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <RCC_Delay+0x38>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a5b      	lsrs	r3, r3, #9
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002708:	bf00      	nop
  }
  while (Delay --);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1e5a      	subs	r2, r3, #1
 800270e:	60fa      	str	r2, [r7, #12]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1f9      	bne.n	8002708 <RCC_Delay+0x1c>
}
 8002714:	bf00      	nop
 8002716:	bf00      	nop
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	bc80      	pop	{r7}
 800271e:	4770      	bx	lr
 8002720:	20000004 	.word	0x20000004
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e076      	b.n	8002828 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d108      	bne.n	8002754 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800274a:	d009      	beq.n	8002760 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	61da      	str	r2, [r3, #28]
 8002752:	e005      	b.n	8002760 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2200      	movs	r2, #0
 8002758:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d106      	bne.n	8002780 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7fe f97c 	bl	8000a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2202      	movs	r2, #2
 8002784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002796:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80027a8:	431a      	orrs	r2, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b2:	431a      	orrs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027d0:	431a      	orrs	r2, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a1b      	ldr	r3, [r3, #32]
 80027e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027e4:	ea42 0103 	orr.w	r1, r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	699b      	ldr	r3, [r3, #24]
 80027fc:	0c1a      	lsrs	r2, r3, #16
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f002 0204 	and.w	r2, r2, #4
 8002806:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002816:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800283e:	2301      	movs	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x26>
 8002852:	2302      	movs	r3, #2
 8002854:	e198      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x358>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800285e:	f7fe fa17 	bl	8000c90 <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002878:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800287c:	2b01      	cmp	r3, #1
 800287e:	d00f      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x70>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002886:	d107      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x68>
 8002890:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002894:	2b04      	cmp	r3, #4
 8002896:	d003      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800289e:	e16d      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x82>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x82>
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80028b8:	e160      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800290e:	2b40      	cmp	r3, #64	@ 0x40
 8002910:	d007      	beq.n	8002922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800292a:	d17c      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_TransmitReceive+0x10a>
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d16a      	bne.n	8002a10 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	1c9a      	adds	r2, r3, #2
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295e:	e057      	b.n	8002a10 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d11b      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d113      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	1c9a      	adds	r2, r3, #2
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d119      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x1b8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d014      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	b292      	uxth	r2, r2
 80029ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029e4:	2301      	movs	r3, #1
 80029e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029e8:	f7fe f952 	bl	8000c90 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d80b      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x1e0>
 80029f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d007      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002a0e:	e0b5      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1a2      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x130>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d19d      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x130>
 8002a24:	e080      	b.n	8002b28 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d002      	beq.n	8002a34 <HAL_SPI_TransmitReceive+0x204>
 8002a2e:	8b7b      	ldrh	r3, [r7, #26]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d16f      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	330c      	adds	r3, #12
 8002a3e:	7812      	ldrb	r2, [r2, #0]
 8002a40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	1c5a      	adds	r2, r3, #1
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a5a:	e05b      	b.n	8002b14 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d11c      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x274>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d017      	beq.n	8002aa4 <HAL_SPI_TransmitReceive+0x274>
 8002a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d114      	bne.n	8002aa4 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	330c      	adds	r3, #12
 8002a84:	7812      	ldrb	r2, [r2, #0]
 8002a86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d119      	bne.n	8002ae6 <HAL_SPI_TransmitReceive+0x2b6>
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d014      	beq.n	8002ae6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac6:	b2d2      	uxtb	r2, r2
 8002ac8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	1c5a      	adds	r2, r3, #1
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ae6:	f7fe f8d3 	bl	8000c90 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d803      	bhi.n	8002afe <HAL_SPI_TransmitReceive+0x2ce>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002afc:	d102      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x2d4>
 8002afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d107      	bne.n	8002b14 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002b12:	e033      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d19e      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x22c>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d199      	bne.n	8002a5c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8b7 	bl	8002ca0 <SPI_EndRxTxTransaction>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002b44:	e01a      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	617b      	str	r3, [r7, #20]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b72:	e003      	b.n	8002b7c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002b84:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3730      	adds	r7, #48	@ 0x30
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002ba0:	f7fe f876 	bl	8000c90 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	4413      	add	r3, r2
 8002bae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bb0:	f7fe f86e 	bl	8000c90 <HAL_GetTick>
 8002bb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bb6:	4b39      	ldr	r3, [pc, #228]	@ (8002c9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	015b      	lsls	r3, r3, #5
 8002bbc:	0d1b      	lsrs	r3, r3, #20
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bc6:	e054      	b.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d050      	beq.n	8002c72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002bd0:	f7fe f85e 	bl	8000c90 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	69fa      	ldr	r2, [r7, #28]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d902      	bls.n	8002be6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d13d      	bne.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002bf4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bfe:	d111      	bne.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c08:	d004      	beq.n	8002c14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c12:	d107      	bne.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c2c:	d10f      	bne.n	8002c4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c3c:	601a      	str	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e017      	b.n	8002c92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	bf0c      	ite	eq
 8002c82:	2301      	moveq	r3, #1
 8002c84:	2300      	movne	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	461a      	mov	r2, r3
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d19b      	bne.n	8002bc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2180      	movs	r1, #128	@ 0x80
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff ff6a 	bl	8002b90 <SPI_WaitFlagStateUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d007      	beq.n	8002cd2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	f043 0220 	orr.w	r2, r3, #32
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e000      	b.n	8002cd4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <memset>:
 8002cdc:	4603      	mov	r3, r0
 8002cde:	4402      	add	r2, r0
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d100      	bne.n	8002ce6 <memset+0xa>
 8002ce4:	4770      	bx	lr
 8002ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8002cea:	e7f9      	b.n	8002ce0 <memset+0x4>

08002cec <__libc_init_array>:
 8002cec:	b570      	push	{r4, r5, r6, lr}
 8002cee:	2600      	movs	r6, #0
 8002cf0:	4d0c      	ldr	r5, [pc, #48]	@ (8002d24 <__libc_init_array+0x38>)
 8002cf2:	4c0d      	ldr	r4, [pc, #52]	@ (8002d28 <__libc_init_array+0x3c>)
 8002cf4:	1b64      	subs	r4, r4, r5
 8002cf6:	10a4      	asrs	r4, r4, #2
 8002cf8:	42a6      	cmp	r6, r4
 8002cfa:	d109      	bne.n	8002d10 <__libc_init_array+0x24>
 8002cfc:	f000 f81a 	bl	8002d34 <_init>
 8002d00:	2600      	movs	r6, #0
 8002d02:	4d0a      	ldr	r5, [pc, #40]	@ (8002d2c <__libc_init_array+0x40>)
 8002d04:	4c0a      	ldr	r4, [pc, #40]	@ (8002d30 <__libc_init_array+0x44>)
 8002d06:	1b64      	subs	r4, r4, r5
 8002d08:	10a4      	asrs	r4, r4, #2
 8002d0a:	42a6      	cmp	r6, r4
 8002d0c:	d105      	bne.n	8002d1a <__libc_init_array+0x2e>
 8002d0e:	bd70      	pop	{r4, r5, r6, pc}
 8002d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d14:	4798      	blx	r3
 8002d16:	3601      	adds	r6, #1
 8002d18:	e7ee      	b.n	8002cf8 <__libc_init_array+0xc>
 8002d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d1e:	4798      	blx	r3
 8002d20:	3601      	adds	r6, #1
 8002d22:	e7f2      	b.n	8002d0a <__libc_init_array+0x1e>
 8002d24:	08002d70 	.word	0x08002d70
 8002d28:	08002d70 	.word	0x08002d70
 8002d2c:	08002d70 	.word	0x08002d70
 8002d30:	08002d74 	.word	0x08002d74

08002d34 <_init>:
 8002d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d36:	bf00      	nop
 8002d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3a:	bc08      	pop	{r3}
 8002d3c:	469e      	mov	lr, r3
 8002d3e:	4770      	bx	lr

08002d40 <_fini>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr
