
STM32-RAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002534  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08002640  08002640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027c4  080027c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027c4  080027c4  000127c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027c8  080027c8  000127c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  080027d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080027d8  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009714  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001e65  00000000  00000000  0002978c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a98  00000000  00000000  0002b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081a  00000000  00000000  0002c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a92  00000000  00000000  0002c8aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e10d  00000000  00000000  0004433c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000860e9  00000000  00000000  00052449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002ab4  00000000  00000000  000d8534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000dafe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002628 	.word	0x08002628

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002628 	.word	0x08002628

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    /* Get RX message */
    if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData)
 8000154:	4b10      	ldr	r3, [pc, #64]	; (8000198 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000156:	4a11      	ldr	r2, [pc, #68]	; (800019c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 8000158:	2100      	movs	r1, #0
 800015a:	6878      	ldr	r0, [r7, #4]
 800015c:	f000 fa9e 	bl	800069c <HAL_CAN_GetRxMessage>
 8000160:	4603      	mov	r3, r0
 8000162:	2b00      	cmp	r3, #0
 8000164:	d001      	beq.n	800016a <HAL_CAN_RxFifo0MsgPendingCallback+0x1e>
            != HAL_OK)
    {
        /* Reception Error */
        Error_Handler();
 8000166:	f000 f8dc 	bl	8000322 <Error_Handler>
 800016a:	4b0c      	ldr	r3, [pc, #48]	; (800019c <HAL_CAN_RxFifo0MsgPendingCallback+0x50>)
 800016c:	685b      	ldr	r3, [r3, #4]
    }


    static CAN_MESSAGE rec;
    memcpy(&(rec.header), &(RxHeader.ExtId), sizeof(RxHeader.ExtId));
 800016e:	4a0c      	ldr	r2, [pc, #48]	; (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000170:	6013      	str	r3, [r2, #0]
    memcpy(rec.data, RxData, 8*sizeof(uint8_t));
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000174:	4a08      	ldr	r2, [pc, #32]	; (8000198 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8000176:	3304      	adds	r3, #4
 8000178:	e892 0003 	ldmia.w	r2, {r0, r1}
 800017c:	e883 0003 	stmia.w	r3, {r0, r1}

    if(callback)
 8000180:	4b08      	ldr	r3, [pc, #32]	; (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d003      	beq.n	8000190 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>
    {
    	(*callback)(&rec);
 8000188:	4b06      	ldr	r3, [pc, #24]	; (80001a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 800018e:	4798      	blx	r3
    }
}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}
 8000198:	20000044 	.word	0x20000044
 800019c:	20000028 	.word	0x20000028
 80001a0:	20000078 	.word	0x20000078
 80001a4:	2000004c 	.word	0x2000004c

080001a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80001a8:	b580      	push	{r7, lr}
 80001aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ac:	4b12      	ldr	r3, [pc, #72]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ae:	4a13      	ldr	r2, [pc, #76]	; (80001fc <MX_I2C1_Init+0x54>)
 80001b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001b2:	4b11      	ldr	r3, [pc, #68]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001b4:	4a12      	ldr	r2, [pc, #72]	; (8000200 <MX_I2C1_Init+0x58>)
 80001b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001b8:	4b0f      	ldr	r3, [pc, #60]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001be:	4b0e      	ldr	r3, [pc, #56]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80001c4:	4b0c      	ldr	r3, [pc, #48]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80001ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80001cc:	4b0a      	ldr	r3, [pc, #40]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80001d2:	4b09      	ldr	r3, [pc, #36]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80001d8:	4b07      	ldr	r3, [pc, #28]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001da:	2200      	movs	r2, #0
 80001dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80001de:	4b06      	ldr	r3, [pc, #24]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <MX_I2C1_Init+0x50>)
 80001e6:	f001 f921 	bl	800142c <HAL_I2C_Init>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80001f0:	f000 f897 	bl	8000322 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	20000084 	.word	0x20000084
 80001fc:	40005400 	.word	0x40005400
 8000200:	000186a0 	.word	0x000186a0

08000204 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b088      	sub	sp, #32
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800020c:	f107 0310 	add.w	r3, r7, #16
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a15      	ldr	r2, [pc, #84]	; (8000274 <HAL_I2C_MspInit+0x70>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d123      	bne.n	800026c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000224:	4b14      	ldr	r3, [pc, #80]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000226:	699b      	ldr	r3, [r3, #24]
 8000228:	4a13      	ldr	r2, [pc, #76]	; (8000278 <HAL_I2C_MspInit+0x74>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6193      	str	r3, [r2, #24]
 8000230:	4b11      	ldr	r3, [pc, #68]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000232:	699b      	ldr	r3, [r3, #24]
 8000234:	f003 0308 	and.w	r3, r3, #8
 8000238:	60fb      	str	r3, [r7, #12]
 800023a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800023c:	23c0      	movs	r3, #192	; 0xc0
 800023e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000240:	2312      	movs	r3, #18
 8000242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000244:	2303      	movs	r3, #3
 8000246:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000248:	f107 0310 	add.w	r3, r7, #16
 800024c:	4619      	mov	r1, r3
 800024e:	480b      	ldr	r0, [pc, #44]	; (800027c <HAL_I2C_MspInit+0x78>)
 8000250:	f000 fe7e 	bl	8000f50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000254:	4b08      	ldr	r3, [pc, #32]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000256:	69db      	ldr	r3, [r3, #28]
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_I2C_MspInit+0x74>)
 800025a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800025e:	61d3      	str	r3, [r2, #28]
 8000260:	4b05      	ldr	r3, [pc, #20]	; (8000278 <HAL_I2C_MspInit+0x74>)
 8000262:	69db      	ldr	r3, [r3, #28]
 8000264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000268:	60bb      	str	r3, [r7, #8]
 800026a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800026c:	bf00      	nop
 800026e:	3720      	adds	r7, #32
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}
 8000274:	40005400 	.word	0x40005400
 8000278:	40021000 	.word	0x40021000
 800027c:	40010c00 	.word	0x40010c00

08000280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000284:	f000 f9a8 	bl	80005d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000288:	f000 f805 	bl	8000296 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_CAN_Init();
  MX_I2C1_Init();
 800028c:	f7ff ff8c 	bl	80001a8 <MX_I2C1_Init>
  //MX_SPI1_Init();
  MX_SPI2_Init();
 8000290:	f000 f856 	bl	8000340 <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000294:	e7fe      	b.n	8000294 <main+0x14>

08000296 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000296:	b580      	push	{r7, lr}
 8000298:	b090      	sub	sp, #64	; 0x40
 800029a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	2228      	movs	r2, #40	; 0x28
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f002 f993 	bl	80025d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002b8:	2301      	movs	r3, #1
 80002ba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002c0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80002c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80002da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fa67 	bl	80017b4 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80002ec:	f000 f819 	bl	8000322 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f001 fdc0 	bl	8001e90 <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000316:	f000 f804 	bl	8000322 <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	; 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}

08000322 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000326:	b672      	cpsid	i
}
 8000328:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800032a:	e7fe      	b.n	800032a <Error_Handler+0x8>

0800032c <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
 8000334:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	bc80      	pop	{r7}
 800033e:	4770      	bx	lr

08000340 <MX_SPI2_Init>:
  /* USER CODE END SPI1_Init 2 */

}
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000344:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000346:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <MX_SPI2_Init+0x68>)
 8000348:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800034a:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_SPI2_Init+0x64>)
 800034c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000350:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000352:	4b14      	ldr	r3, [pc, #80]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000354:	2200      	movs	r2, #0
 8000356:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000358:	4b12      	ldr	r3, [pc, #72]	; (80003a4 <MX_SPI2_Init+0x64>)
 800035a:	2200      	movs	r2, #0
 800035c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800035e:	4b11      	ldr	r3, [pc, #68]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000360:	2200      	movs	r2, #0
 8000362:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000364:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000366:	2200      	movs	r2, #0
 8000368:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_SPI2_Init+0x64>)
 800036c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000370:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000372:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000374:	2200      	movs	r2, #0
 8000376:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000378:	4b0a      	ldr	r3, [pc, #40]	; (80003a4 <MX_SPI2_Init+0x64>)
 800037a:	2200      	movs	r2, #0
 800037c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000380:	2200      	movs	r2, #0
 8000382:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000384:	4b07      	ldr	r3, [pc, #28]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000386:	2200      	movs	r2, #0
 8000388:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800038a:	4b06      	ldr	r3, [pc, #24]	; (80003a4 <MX_SPI2_Init+0x64>)
 800038c:	220a      	movs	r2, #10
 800038e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_SPI2_Init+0x64>)
 8000392:	f001 ff9f 	bl	80022d4 <HAL_SPI_Init>
 8000396:	4603      	mov	r3, r0
 8000398:	2b00      	cmp	r3, #0
 800039a:	d001      	beq.n	80003a0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800039c:	f7ff ffc1 	bl	8000322 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	200000d8 	.word	0x200000d8
 80003a8:	40003800 	.word	0x40003800

080003ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b08a      	sub	sp, #40	; 0x28
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003b4:	f107 0318 	add.w	r3, r7, #24
 80003b8:	2200      	movs	r2, #0
 80003ba:	601a      	str	r2, [r3, #0]
 80003bc:	605a      	str	r2, [r3, #4]
 80003be:	609a      	str	r2, [r3, #8]
 80003c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	4a37      	ldr	r2, [pc, #220]	; (80004a4 <HAL_SPI_MspInit+0xf8>)
 80003c8:	4293      	cmp	r3, r2
 80003ca:	d130      	bne.n	800042e <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80003cc:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	4a35      	ldr	r2, [pc, #212]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003d6:	6193      	str	r3, [r2, #24]
 80003d8:	4b33      	ldr	r3, [pc, #204]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003e0:	617b      	str	r3, [r7, #20]
 80003e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e4:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4a2f      	ldr	r2, [pc, #188]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003ea:	f043 0304 	orr.w	r3, r3, #4
 80003ee:	6193      	str	r3, [r2, #24]
 80003f0:	4b2d      	ldr	r3, [pc, #180]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 80003f2:	699b      	ldr	r3, [r3, #24]
 80003f4:	f003 0304 	and.w	r3, r3, #4
 80003f8:	613b      	str	r3, [r7, #16]
 80003fa:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SCK_Pin|DRIVER_MOSI_Pin;
 80003fc:	23a0      	movs	r3, #160	; 0xa0
 80003fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000400:	2302      	movs	r3, #2
 8000402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000404:	2303      	movs	r3, #3
 8000406:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	4619      	mov	r1, r3
 800040e:	4827      	ldr	r0, [pc, #156]	; (80004ac <HAL_SPI_MspInit+0x100>)
 8000410:	f000 fd9e 	bl	8000f50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_MISO_Pin;
 8000414:	2340      	movs	r3, #64	; 0x40
 8000416:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000418:	2300      	movs	r3, #0
 800041a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041c:	2300      	movs	r3, #0
 800041e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DRIVER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000420:	f107 0318 	add.w	r3, r7, #24
 8000424:	4619      	mov	r1, r3
 8000426:	4821      	ldr	r0, [pc, #132]	; (80004ac <HAL_SPI_MspInit+0x100>)
 8000428:	f000 fd92 	bl	8000f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800042c:	e036      	b.n	800049c <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <HAL_SPI_MspInit+0x104>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d131      	bne.n	800049c <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 800043a:	69db      	ldr	r3, [r3, #28]
 800043c:	4a1a      	ldr	r2, [pc, #104]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000442:	61d3      	str	r3, [r2, #28]
 8000444:	4b18      	ldr	r3, [pc, #96]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 8000446:	69db      	ldr	r3, [r3, #28]
 8000448:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000450:	4b15      	ldr	r3, [pc, #84]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a14      	ldr	r2, [pc, #80]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 8000456:	f043 0308 	orr.w	r3, r3, #8
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b12      	ldr	r3, [pc, #72]	; (80004a8 <HAL_SPI_MspInit+0xfc>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0308 	and.w	r3, r3, #8
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000468:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800046c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000472:	2303      	movs	r3, #3
 8000474:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	4619      	mov	r1, r3
 800047c:	480d      	ldr	r0, [pc, #52]	; (80004b4 <HAL_SPI_MspInit+0x108>)
 800047e:	f000 fd67 	bl	8000f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000490:	f107 0318 	add.w	r3, r7, #24
 8000494:	4619      	mov	r1, r3
 8000496:	4807      	ldr	r0, [pc, #28]	; (80004b4 <HAL_SPI_MspInit+0x108>)
 8000498:	f000 fd5a 	bl	8000f50 <HAL_GPIO_Init>
}
 800049c:	bf00      	nop
 800049e:	3728      	adds	r7, #40	; 0x28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40013000 	.word	0x40013000
 80004a8:	40021000 	.word	0x40021000
 80004ac:	40010800 	.word	0x40010800
 80004b0:	40003800 	.word	0x40003800
 80004b4:	40010c00 	.word	0x40010c00

080004b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b085      	sub	sp, #20
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <HAL_MspInit+0x5c>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <HAL_MspInit+0x5c>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004ee:	4b0a      	ldr	r3, [pc, #40]	; (8000518 <HAL_MspInit+0x60>)
 80004f0:	685b      	ldr	r3, [r3, #4]
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
 80004f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004fa:	60fb      	str	r3, [r7, #12]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000502:	60fb      	str	r3, [r7, #12]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <HAL_MspInit+0x60>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	40010000 	.word	0x40010000

0800051c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000520:	e7fe      	b.n	8000520 <NMI_Handler+0x4>

08000522 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000526:	e7fe      	b.n	8000526 <HardFault_Handler+0x4>

08000528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800052c:	e7fe      	b.n	800052c <MemManage_Handler+0x4>

0800052e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <BusFault_Handler+0x4>

08000534 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <UsageFault_Handler+0x4>

0800053a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	bc80      	pop	{r7}
 8000544:	4770      	bx	lr

08000546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000562:	f000 f87f 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
	...

0800056c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000572:	f000 f9c1 	bl	80008f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000050 	.word	0x20000050

08000580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800058c:	f7ff fff8 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000592:	490c      	ldr	r1, [pc, #48]	; (80005c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000594:	4a0c      	ldr	r2, [pc, #48]	; (80005c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a09      	ldr	r2, [pc, #36]	; (80005cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a8:	4c09      	ldr	r4, [pc, #36]	; (80005d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b6:	f002 f813 	bl	80025e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fe61 	bl	8000280 <main>
  bx lr
 80005be:	4770      	bx	lr
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c8:	080027cc 	.word	0x080027cc
  ldr r2, =_sbss
 80005cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005d0:	20000134 	.word	0x20000134

080005d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC1_2_IRQHandler>
	...

080005d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x28>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x28>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 fc59 	bl	8000ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	200f      	movs	r0, #15
 80005f0:	f000 f808 	bl	8000604 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f7ff ff60 	bl	80004b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40022000 	.word	0x40022000

08000604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x54>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_InitTick+0x58>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	4619      	mov	r1, r3
 8000616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800061a:	fbb3 f3f1 	udiv	r3, r3, r1
 800061e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fc88 	bl	8000f38 <HAL_SYSTICK_Config>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062e:	2301      	movs	r3, #1
 8000630:	e00e      	b.n	8000650 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	2b0f      	cmp	r3, #15
 8000636:	d80a      	bhi.n	800064e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000638:	2200      	movs	r2, #0
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	f04f 30ff 	mov.w	r0, #4294967295
 8000640:	f000 fc4e 	bl	8000ee0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000644:	4a06      	ldr	r2, [pc, #24]	; (8000660 <HAL_InitTick+0x5c>)
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800064a:	2300      	movs	r3, #0
 800064c:	e000      	b.n	8000650 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064e:	2301      	movs	r3, #1
}
 8000650:	4618      	mov	r0, r3
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000000 	.word	0x20000000
 800065c:	20000008 	.word	0x20000008
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x1c>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b05      	ldr	r3, [pc, #20]	; (8000684 <HAL_IncTick+0x20>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a03      	ldr	r2, [pc, #12]	; (8000684 <HAL_IncTick+0x20>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	20000008 	.word	0x20000008
 8000684:	20000130 	.word	0x20000130

08000688 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  return uwTick;
 800068c:	4b02      	ldr	r3, [pc, #8]	; (8000698 <HAL_GetTick+0x10>)
 800068e:	681b      	ldr	r3, [r3, #0]
}
 8000690:	4618      	mov	r0, r3
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000130 	.word	0x20000130

0800069c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80006b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d007      	beq.n	80006c8 <HAL_CAN_GetRxMessage+0x2c>
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d004      	beq.n	80006c8 <HAL_CAN_GetRxMessage+0x2c>
 80006be:	f240 51ce 	movw	r1, #1486	; 0x5ce
 80006c2:	488c      	ldr	r0, [pc, #560]	; (80008f4 <HAL_CAN_GetRxMessage+0x258>)
 80006c4:	f7ff fe32 	bl	800032c <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 80006c8:	7dfb      	ldrb	r3, [r7, #23]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d003      	beq.n	80006d6 <HAL_CAN_GetRxMessage+0x3a>
 80006ce:	7dfb      	ldrb	r3, [r7, #23]
 80006d0:	2b02      	cmp	r3, #2
 80006d2:	f040 8103 	bne.w	80008dc <HAL_CAN_GetRxMessage+0x240>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10e      	bne.n	80006fa <HAL_CAN_GetRxMessage+0x5e>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68db      	ldr	r3, [r3, #12]
 80006e2:	f003 0303 	and.w	r3, r3, #3
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d116      	bne.n	8000718 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
 80006f8:	e0f7      	b.n	80008ea <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f003 0303 	and.w	r3, r3, #3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d107      	bne.n	8000718 <HAL_CAN_GetRxMessage+0x7c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800070c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000714:	2301      	movs	r3, #1
 8000716:	e0e8      	b.n	80008ea <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	331b      	adds	r3, #27
 8000720:	011b      	lsls	r3, r3, #4
 8000722:	4413      	add	r3, r2
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f003 0204 	and.w	r2, r3, #4
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d10c      	bne.n	8000750 <HAL_CAN_GetRxMessage+0xb4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	331b      	adds	r3, #27
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	4413      	add	r3, r2
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	0d5b      	lsrs	r3, r3, #21
 8000746:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	e00b      	b.n	8000768 <HAL_CAN_GetRxMessage+0xcc>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	331b      	adds	r3, #27
 8000758:	011b      	lsls	r3, r3, #4
 800075a:	4413      	add	r3, r2
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	08db      	lsrs	r3, r3, #3
 8000760:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	331b      	adds	r3, #27
 8000770:	011b      	lsls	r3, r3, #4
 8000772:	4413      	add	r3, r2
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f003 0202 	and.w	r2, r3, #2
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	331b      	adds	r3, #27
 8000786:	011b      	lsls	r3, r3, #4
 8000788:	4413      	add	r3, r2
 800078a:	3304      	adds	r3, #4
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f003 0308 	and.w	r3, r3, #8
 8000792:	2b00      	cmp	r3, #0
 8000794:	d003      	beq.n	800079e <HAL_CAN_GetRxMessage+0x102>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2208      	movs	r2, #8
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	e00b      	b.n	80007b6 <HAL_CAN_GetRxMessage+0x11a>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	331b      	adds	r3, #27
 80007a6:	011b      	lsls	r3, r3, #4
 80007a8:	4413      	add	r3, r2
 80007aa:	3304      	adds	r3, #4
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 020f 	and.w	r2, r3, #15
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	331b      	adds	r3, #27
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4413      	add	r3, r2
 80007c2:	3304      	adds	r3, #4
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	0a1b      	lsrs	r3, r3, #8
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	331b      	adds	r3, #27
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	4413      	add	r3, r2
 80007da:	3304      	adds	r3, #4
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	0c1b      	lsrs	r3, r3, #16
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	4413      	add	r3, r2
 80007f0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	011b      	lsls	r3, r3, #4
 8000804:	4413      	add	r3, r2
 8000806:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	0a1a      	lsrs	r2, r3, #8
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	3301      	adds	r3, #1
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681a      	ldr	r2, [r3, #0]
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	011b      	lsls	r3, r3, #4
 800081e:	4413      	add	r3, r2
 8000820:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	0c1a      	lsrs	r2, r3, #16
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	3302      	adds	r3, #2
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	011b      	lsls	r3, r3, #4
 8000838:	4413      	add	r3, r2
 800083a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	0e1a      	lsrs	r2, r3, #24
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	3303      	adds	r3, #3
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	68bb      	ldr	r3, [r7, #8]
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	4413      	add	r3, r2
 8000854:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	b2d2      	uxtb	r2, r2
 8000860:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	681a      	ldr	r2, [r3, #0]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	011b      	lsls	r3, r3, #4
 800086a:	4413      	add	r3, r2
 800086c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	0a1a      	lsrs	r2, r3, #8
 8000874:	683b      	ldr	r3, [r7, #0]
 8000876:	3305      	adds	r3, #5
 8000878:	b2d2      	uxtb	r2, r2
 800087a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	011b      	lsls	r3, r3, #4
 8000884:	4413      	add	r3, r2
 8000886:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	0c1a      	lsrs	r2, r3, #16
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	3306      	adds	r3, #6
 8000892:	b2d2      	uxtb	r2, r2
 8000894:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	011b      	lsls	r3, r3, #4
 800089e:	4413      	add	r3, r2
 80008a0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	0e1a      	lsrs	r2, r3, #24
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	3307      	adds	r3, #7
 80008ac:	b2d2      	uxtb	r2, r2
 80008ae:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d108      	bne.n	80008c8 <HAL_CAN_GetRxMessage+0x22c>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	68da      	ldr	r2, [r3, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f042 0220 	orr.w	r2, r2, #32
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	e007      	b.n	80008d8 <HAL_CAN_GetRxMessage+0x23c>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	691a      	ldr	r2, [r3, #16]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f042 0220 	orr.w	r2, r2, #32
 80008d6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80008d8:	2300      	movs	r3, #0
 80008da:	e006      	b.n	80008ea <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80008e8:	2301      	movs	r3, #1
  }
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	08002640 	.word	0x08002640

080008f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	691b      	ldr	r3, [r3, #16]
 800092a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	2b00      	cmp	r3, #0
 800093c:	d07c      	beq.n	8000a38 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800093e:	69bb      	ldr	r3, [r7, #24]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d023      	beq.n	8000990 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2201      	movs	r2, #1
 800094e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	2b00      	cmp	r3, #0
 8000958:	d003      	beq.n	8000962 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f983 	bl	8000c66 <HAL_CAN_TxMailbox0CompleteCallback>
 8000960:	e016      	b.n	8000990 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	2b00      	cmp	r3, #0
 800096a:	d004      	beq.n	8000976 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800096c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800096e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000972:	627b      	str	r3, [r7, #36]	; 0x24
 8000974:	e00c      	b.n	8000990 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000976:	69bb      	ldr	r3, [r7, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	2b00      	cmp	r3, #0
 800097e:	d004      	beq.n	800098a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
 8000988:	e002      	b.n	8000990 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800098a:	6878      	ldr	r0, [r7, #4]
 800098c:	f000 f986 	bl	8000c9c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000996:	2b00      	cmp	r3, #0
 8000998:	d024      	beq.n	80009e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80009a4:	69bb      	ldr	r3, [r7, #24]
 80009a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d003      	beq.n	80009b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f000 f962 	bl	8000c78 <HAL_CAN_TxMailbox1CompleteCallback>
 80009b4:	e016      	b.n	80009e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d004      	beq.n	80009ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80009c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
 80009c8:	e00c      	b.n	80009e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80009ca:	69bb      	ldr	r3, [r7, #24]
 80009cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d004      	beq.n	80009de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
 80009dc:	e002      	b.n	80009e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80009de:	6878      	ldr	r0, [r7, #4]
 80009e0:	f000 f965 	bl	8000cae <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80009e4:	69bb      	ldr	r3, [r7, #24]
 80009e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d024      	beq.n	8000a38 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d003      	beq.n	8000a0a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000a02:	6878      	ldr	r0, [r7, #4]
 8000a04:	f000 f941 	bl	8000c8a <HAL_CAN_TxMailbox2CompleteCallback>
 8000a08:	e016      	b.n	8000a38 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000a0a:	69bb      	ldr	r3, [r7, #24]
 8000a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a1c:	e00c      	b.n	8000a38 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d004      	beq.n	8000a32 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000a30:	e002      	b.n	8000a38 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000a32:	6878      	ldr	r0, [r7, #4]
 8000a34:	f000 f944 	bl	8000cc0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	f003 0308 	and.w	r3, r3, #8
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00c      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	f003 0310 	and.w	r3, r3, #16
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d007      	beq.n	8000a5c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2210      	movs	r2, #16
 8000a5a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000a5c:	6a3b      	ldr	r3, [r7, #32]
 8000a5e:	f003 0304 	and.w	r3, r3, #4
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00b      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	f003 0308 	and.w	r3, r3, #8
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2208      	movs	r2, #8
 8000a76:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 f92a 	bl	8000cd2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	f003 0302 	and.w	r3, r3, #2
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d009      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	f003 0303 	and.w	r3, r3, #3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d002      	beq.n	8000a9c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fb58 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00c      	beq.n	8000ac0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	f003 0310 	and.w	r3, r3, #16
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d007      	beq.n	8000ac0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	2210      	movs	r2, #16
 8000abe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000ac0:	6a3b      	ldr	r3, [r7, #32]
 8000ac2:	f003 0320 	and.w	r3, r3, #32
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d00b      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000aca:	693b      	ldr	r3, [r7, #16]
 8000acc:	f003 0308 	and.w	r3, r3, #8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d006      	beq.n	8000ae2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	2208      	movs	r2, #8
 8000ada:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f90a 	bl	8000cf6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ae2:	6a3b      	ldr	r3, [r7, #32]
 8000ae4:	f003 0310 	and.w	r3, r3, #16
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d009      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	f003 0303 	and.w	r3, r3, #3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d002      	beq.n	8000b00 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000afa:	6878      	ldr	r0, [r7, #4]
 8000afc:	f000 f8f2 	bl	8000ce4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000b00:	6a3b      	ldr	r3, [r7, #32]
 8000b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d00b      	beq.n	8000b22 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000b0a:	69fb      	ldr	r3, [r7, #28]
 8000b0c:	f003 0310 	and.w	r3, r3, #16
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d006      	beq.n	8000b22 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	2210      	movs	r2, #16
 8000b1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f000 f8f3 	bl	8000d08 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000b22:	6a3b      	ldr	r3, [r7, #32]
 8000b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d00b      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f003 0308 	and.w	r3, r3, #8
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d006      	beq.n	8000b44 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	2208      	movs	r2, #8
 8000b3c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f8eb 	bl	8000d1a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000b44:	6a3b      	ldr	r3, [r7, #32]
 8000b46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d07b      	beq.n	8000c46 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	f003 0304 	and.w	r3, r3, #4
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d072      	beq.n	8000c3e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b58:	6a3b      	ldr	r3, [r7, #32]
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d008      	beq.n	8000b74 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d003      	beq.n	8000b74 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b6e:	f043 0301 	orr.w	r3, r3, #1
 8000b72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b74:	6a3b      	ldr	r3, [r7, #32]
 8000b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d008      	beq.n	8000b90 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d003      	beq.n	8000b90 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8000b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b8a:	f043 0302 	orr.w	r3, r3, #2
 8000b8e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000b90:	6a3b      	ldr	r3, [r7, #32]
 8000b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba6:	f043 0304 	orr.w	r3, r3, #4
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bac:	6a3b      	ldr	r3, [r7, #32]
 8000bae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d043      	beq.n	8000c3e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d03e      	beq.n	8000c3e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8000bc6:	2b60      	cmp	r3, #96	; 0x60
 8000bc8:	d02b      	beq.n	8000c22 <HAL_CAN_IRQHandler+0x32a>
 8000bca:	2b60      	cmp	r3, #96	; 0x60
 8000bcc:	d82e      	bhi.n	8000c2c <HAL_CAN_IRQHandler+0x334>
 8000bce:	2b50      	cmp	r3, #80	; 0x50
 8000bd0:	d022      	beq.n	8000c18 <HAL_CAN_IRQHandler+0x320>
 8000bd2:	2b50      	cmp	r3, #80	; 0x50
 8000bd4:	d82a      	bhi.n	8000c2c <HAL_CAN_IRQHandler+0x334>
 8000bd6:	2b40      	cmp	r3, #64	; 0x40
 8000bd8:	d019      	beq.n	8000c0e <HAL_CAN_IRQHandler+0x316>
 8000bda:	2b40      	cmp	r3, #64	; 0x40
 8000bdc:	d826      	bhi.n	8000c2c <HAL_CAN_IRQHandler+0x334>
 8000bde:	2b30      	cmp	r3, #48	; 0x30
 8000be0:	d010      	beq.n	8000c04 <HAL_CAN_IRQHandler+0x30c>
 8000be2:	2b30      	cmp	r3, #48	; 0x30
 8000be4:	d822      	bhi.n	8000c2c <HAL_CAN_IRQHandler+0x334>
 8000be6:	2b10      	cmp	r3, #16
 8000be8:	d002      	beq.n	8000bf0 <HAL_CAN_IRQHandler+0x2f8>
 8000bea:	2b20      	cmp	r3, #32
 8000bec:	d005      	beq.n	8000bfa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8000bee:	e01d      	b.n	8000c2c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000bf8:	e019      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8000bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfc:	f043 0310 	orr.w	r3, r3, #16
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c02:	e014      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	f043 0320 	orr.w	r3, r3, #32
 8000c0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c0c:	e00f      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8000c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c16:	e00a      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8000c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c20:	e005      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8000c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8000c2a:	e000      	b.n	8000c2e <HAL_CAN_IRQHandler+0x336>
            break;
 8000c2c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	699a      	ldr	r2, [r3, #24]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000c3c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2204      	movs	r2, #4
 8000c44:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d008      	beq.n	8000c5e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	431a      	orrs	r2, r3
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f000 f867 	bl	8000d2c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8000c5e:	bf00      	nop
 8000c60:	3728      	adds	r7, #40	; 0x28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr

08000c8a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b083      	sub	sp, #12
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr

08000cae <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bc80      	pop	{r7}
 8000cbe:	4770      	bx	lr

08000cc0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr

08000d08 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bc80      	pop	{r7}
 8000d3c:	4770      	bx	lr
	...

08000d40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d50:	4b0c      	ldr	r3, [pc, #48]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d72:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <__NVIC_SetPriorityGrouping+0x44>)
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	60d3      	str	r3, [r2, #12]
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bc80      	pop	{r7}
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d8e:	68db      	ldr	r3, [r3, #12]
 8000d90:	0a1b      	lsrs	r3, r3, #8
 8000d92:	f003 0307 	and.w	r3, r3, #7
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	db0a      	blt.n	8000dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	b2da      	uxtb	r2, r3
 8000dbc:	490c      	ldr	r1, [pc, #48]	; (8000df0 <__NVIC_SetPriority+0x4c>)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	0112      	lsls	r2, r2, #4
 8000dc4:	b2d2      	uxtb	r2, r2
 8000dc6:	440b      	add	r3, r1
 8000dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dcc:	e00a      	b.n	8000de4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2da      	uxtb	r2, r3
 8000dd2:	4908      	ldr	r1, [pc, #32]	; (8000df4 <__NVIC_SetPriority+0x50>)
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	f003 030f 	and.w	r3, r3, #15
 8000dda:	3b04      	subs	r3, #4
 8000ddc:	0112      	lsls	r2, r2, #4
 8000dde:	b2d2      	uxtb	r2, r2
 8000de0:	440b      	add	r3, r1
 8000de2:	761a      	strb	r2, [r3, #24]
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bc80      	pop	{r7}
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f003 0307 	and.w	r3, r3, #7
 8000e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	f1c3 0307 	rsb	r3, r3, #7
 8000e12:	2b04      	cmp	r3, #4
 8000e14:	bf28      	it	cs
 8000e16:	2304      	movcs	r3, #4
 8000e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1a:	69fb      	ldr	r3, [r7, #28]
 8000e1c:	3304      	adds	r3, #4
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	d902      	bls.n	8000e28 <NVIC_EncodePriority+0x30>
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3b03      	subs	r3, #3
 8000e26:	e000      	b.n	8000e2a <NVIC_EncodePriority+0x32>
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	401a      	ands	r2, r3
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e40:	f04f 31ff 	mov.w	r1, #4294967295
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	43d9      	mvns	r1, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e50:	4313      	orrs	r3, r2
         );
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3724      	adds	r7, #36	; 0x24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e6c:	d301      	bcc.n	8000e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e00f      	b.n	8000e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e72:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <SysTick_Config+0x40>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e7a:	210f      	movs	r1, #15
 8000e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e80:	f7ff ff90 	bl	8000da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e84:	4b05      	ldr	r3, [pc, #20]	; (8000e9c <SysTick_Config+0x40>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e8a:	4b04      	ldr	r3, [pc, #16]	; (8000e9c <SysTick_Config+0x40>)
 8000e8c:	2207      	movs	r2, #7
 8000e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	e000e010 	.word	0xe000e010

08000ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b07      	cmp	r3, #7
 8000eac:	d00f      	beq.n	8000ece <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2b06      	cmp	r3, #6
 8000eb2:	d00c      	beq.n	8000ece <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b05      	cmp	r3, #5
 8000eb8:	d009      	beq.n	8000ece <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d006      	beq.n	8000ece <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d003      	beq.n	8000ece <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ec6:	2191      	movs	r1, #145	; 0x91
 8000ec8:	4804      	ldr	r0, [pc, #16]	; (8000edc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000eca:	f7ff fa2f 	bl	800032c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff36 	bl	8000d40 <__NVIC_SetPriorityGrouping>
}
 8000ed4:	bf00      	nop
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	08002678 	.word	0x08002678

08000ee0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
 8000eec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2b0f      	cmp	r3, #15
 8000ef6:	d903      	bls.n	8000f00 <HAL_NVIC_SetPriority+0x20>
 8000ef8:	21a9      	movs	r1, #169	; 0xa9
 8000efa:	480e      	ldr	r0, [pc, #56]	; (8000f34 <HAL_NVIC_SetPriority+0x54>)
 8000efc:	f7ff fa16 	bl	800032c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	2b0f      	cmp	r3, #15
 8000f04:	d903      	bls.n	8000f0e <HAL_NVIC_SetPriority+0x2e>
 8000f06:	21aa      	movs	r1, #170	; 0xaa
 8000f08:	480a      	ldr	r0, [pc, #40]	; (8000f34 <HAL_NVIC_SetPriority+0x54>)
 8000f0a:	f7ff fa0f 	bl	800032c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0e:	f7ff ff3b 	bl	8000d88 <__NVIC_GetPriorityGrouping>
 8000f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ff6d 	bl	8000df8 <NVIC_EncodePriority>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff3c 	bl	8000da4 <__NVIC_SetPriority>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	08002678 	.word	0x08002678

08000f38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff8b 	bl	8000e5c <SysTick_Config>
 8000f46:	4603      	mov	r3, r0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a96      	ldr	r2, [pc, #600]	; (80011c0 <HAL_GPIO_Init+0x270>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d013      	beq.n	8000f92 <HAL_GPIO_Init+0x42>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a95      	ldr	r2, [pc, #596]	; (80011c4 <HAL_GPIO_Init+0x274>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d00f      	beq.n	8000f92 <HAL_GPIO_Init+0x42>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a94      	ldr	r2, [pc, #592]	; (80011c8 <HAL_GPIO_Init+0x278>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00b      	beq.n	8000f92 <HAL_GPIO_Init+0x42>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a93      	ldr	r2, [pc, #588]	; (80011cc <HAL_GPIO_Init+0x27c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x42>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a92      	ldr	r2, [pc, #584]	; (80011d0 <HAL_GPIO_Init+0x280>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x42>
 8000f8a:	21bd      	movs	r1, #189	; 0xbd
 8000f8c:	4891      	ldr	r0, [pc, #580]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8000f8e:	f7ff f9cd 	bl	800032c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x58>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	0c1b      	lsrs	r3, r3, #16
 8000fa2:	041b      	lsls	r3, r3, #16
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x60>
 8000fa8:	21be      	movs	r1, #190	; 0xbe
 8000faa:	488a      	ldr	r0, [pc, #552]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8000fac:	f7ff f9be 	bl	800032c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	f000 821c 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	f000 8217 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	f000 8212 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	f000 820d 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	2b12      	cmp	r3, #18
 8000fde:	f000 8208 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a7c      	ldr	r2, [pc, #496]	; (80011d8 <HAL_GPIO_Init+0x288>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	f000 8202 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a7a      	ldr	r2, [pc, #488]	; (80011dc <HAL_GPIO_Init+0x28c>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	f000 81fc 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	4a78      	ldr	r2, [pc, #480]	; (80011e0 <HAL_GPIO_Init+0x290>)
 8001000:	4293      	cmp	r3, r2
 8001002:	f000 81f6 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a76      	ldr	r2, [pc, #472]	; (80011e4 <HAL_GPIO_Init+0x294>)
 800100c:	4293      	cmp	r3, r2
 800100e:	f000 81f0 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a74      	ldr	r2, [pc, #464]	; (80011e8 <HAL_GPIO_Init+0x298>)
 8001018:	4293      	cmp	r3, r2
 800101a:	f000 81ea 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4a72      	ldr	r2, [pc, #456]	; (80011ec <HAL_GPIO_Init+0x29c>)
 8001024:	4293      	cmp	r3, r2
 8001026:	f000 81e4 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b03      	cmp	r3, #3
 8001030:	f000 81df 	beq.w	80013f2 <HAL_GPIO_Init+0x4a2>
 8001034:	21bf      	movs	r1, #191	; 0xbf
 8001036:	4867      	ldr	r0, [pc, #412]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8001038:	f7ff f978 	bl	800032c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103c:	e1d9      	b.n	80013f2 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103e:	2201      	movs	r2, #1
 8001040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	4013      	ands	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	429a      	cmp	r2, r3
 8001058:	f040 81c8 	bne.w	80013ec <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_GPIO_Init+0x270>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d013      	beq.n	800108c <HAL_GPIO_Init+0x13c>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a57      	ldr	r2, [pc, #348]	; (80011c4 <HAL_GPIO_Init+0x274>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d00f      	beq.n	800108c <HAL_GPIO_Init+0x13c>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a56      	ldr	r2, [pc, #344]	; (80011c8 <HAL_GPIO_Init+0x278>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d00b      	beq.n	800108c <HAL_GPIO_Init+0x13c>
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a55      	ldr	r2, [pc, #340]	; (80011cc <HAL_GPIO_Init+0x27c>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d007      	beq.n	800108c <HAL_GPIO_Init+0x13c>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4a54      	ldr	r2, [pc, #336]	; (80011d0 <HAL_GPIO_Init+0x280>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d003      	beq.n	800108c <HAL_GPIO_Init+0x13c>
 8001084:	21cd      	movs	r1, #205	; 0xcd
 8001086:	4853      	ldr	r0, [pc, #332]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8001088:	f7ff f950 	bl	800032c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	4a56      	ldr	r2, [pc, #344]	; (80011ec <HAL_GPIO_Init+0x29c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	f000 80c1 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
 8001098:	4a54      	ldr	r2, [pc, #336]	; (80011ec <HAL_GPIO_Init+0x29c>)
 800109a:	4293      	cmp	r3, r2
 800109c:	f200 80e7 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010a0:	4a4f      	ldr	r2, [pc, #316]	; (80011e0 <HAL_GPIO_Init+0x290>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	f000 80b9 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
 80010a8:	4a4d      	ldr	r2, [pc, #308]	; (80011e0 <HAL_GPIO_Init+0x290>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f200 80df 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010b0:	4a4d      	ldr	r2, [pc, #308]	; (80011e8 <HAL_GPIO_Init+0x298>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	f000 80b1 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
 80010b8:	4a4b      	ldr	r2, [pc, #300]	; (80011e8 <HAL_GPIO_Init+0x298>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	f200 80d7 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010c0:	4a46      	ldr	r2, [pc, #280]	; (80011dc <HAL_GPIO_Init+0x28c>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	f000 80a9 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
 80010c8:	4a44      	ldr	r2, [pc, #272]	; (80011dc <HAL_GPIO_Init+0x28c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	f200 80cf 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010d0:	4a44      	ldr	r2, [pc, #272]	; (80011e4 <HAL_GPIO_Init+0x294>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	f000 80a1 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
 80010d8:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <HAL_GPIO_Init+0x294>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	f200 80c7 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010e0:	2b12      	cmp	r3, #18
 80010e2:	d82b      	bhi.n	800113c <HAL_GPIO_Init+0x1ec>
 80010e4:	2b12      	cmp	r3, #18
 80010e6:	f200 80c2 	bhi.w	800126e <HAL_GPIO_Init+0x31e>
 80010ea:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <HAL_GPIO_Init+0x1a0>)
 80010ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f0:	0800121b 	.word	0x0800121b
 80010f4:	08001145 	.word	0x08001145
 80010f8:	08001197 	.word	0x08001197
 80010fc:	08001269 	.word	0x08001269
 8001100:	0800126f 	.word	0x0800126f
 8001104:	0800126f 	.word	0x0800126f
 8001108:	0800126f 	.word	0x0800126f
 800110c:	0800126f 	.word	0x0800126f
 8001110:	0800126f 	.word	0x0800126f
 8001114:	0800126f 	.word	0x0800126f
 8001118:	0800126f 	.word	0x0800126f
 800111c:	0800126f 	.word	0x0800126f
 8001120:	0800126f 	.word	0x0800126f
 8001124:	0800126f 	.word	0x0800126f
 8001128:	0800126f 	.word	0x0800126f
 800112c:	0800126f 	.word	0x0800126f
 8001130:	0800126f 	.word	0x0800126f
 8001134:	0800116d 	.word	0x0800116d
 8001138:	080011f1 	.word	0x080011f1
 800113c:	4a26      	ldr	r2, [pc, #152]	; (80011d8 <HAL_GPIO_Init+0x288>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d06b      	beq.n	800121a <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001142:	e094      	b.n	800126e <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d00b      	beq.n	8001164 <HAL_GPIO_Init+0x214>
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d007      	beq.n	8001164 <HAL_GPIO_Init+0x214>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	2b03      	cmp	r3, #3
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x214>
 800115c:	21d5      	movs	r1, #213	; 0xd5
 800115e:	481d      	ldr	r0, [pc, #116]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8001160:	f7ff f8e4 	bl	800032c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	623b      	str	r3, [r7, #32]
          break;
 800116a:	e081      	b.n	8001270 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d00b      	beq.n	800118c <HAL_GPIO_Init+0x23c>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	68db      	ldr	r3, [r3, #12]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d007      	beq.n	800118c <HAL_GPIO_Init+0x23c>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	2b03      	cmp	r3, #3
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x23c>
 8001184:	21dc      	movs	r1, #220	; 0xdc
 8001186:	4813      	ldr	r0, [pc, #76]	; (80011d4 <HAL_GPIO_Init+0x284>)
 8001188:	f7ff f8d0 	bl	800032c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	3304      	adds	r3, #4
 8001192:	623b      	str	r3, [r7, #32]
          break;
 8001194:	e06c      	b.n	8001270 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	2b02      	cmp	r3, #2
 800119c:	d00b      	beq.n	80011b6 <HAL_GPIO_Init+0x266>
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d007      	beq.n	80011b6 <HAL_GPIO_Init+0x266>
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68db      	ldr	r3, [r3, #12]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x266>
 80011ae:	21e3      	movs	r1, #227	; 0xe3
 80011b0:	4808      	ldr	r0, [pc, #32]	; (80011d4 <HAL_GPIO_Init+0x284>)
 80011b2:	f7ff f8bb 	bl	800032c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e057      	b.n	8001270 <HAL_GPIO_Init+0x320>
 80011c0:	40010800 	.word	0x40010800
 80011c4:	40010c00 	.word	0x40010c00
 80011c8:	40011000 	.word	0x40011000
 80011cc:	40011400 	.word	0x40011400
 80011d0:	40011800 	.word	0x40011800
 80011d4:	080026b4 	.word	0x080026b4
 80011d8:	10110000 	.word	0x10110000
 80011dc:	10210000 	.word	0x10210000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10120000 	.word	0x10120000
 80011e8:	10220000 	.word	0x10220000
 80011ec:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d00b      	beq.n	8001210 <HAL_GPIO_Init+0x2c0>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d007      	beq.n	8001210 <HAL_GPIO_Init+0x2c0>
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	2b03      	cmp	r3, #3
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2c0>
 8001208:	21ea      	movs	r1, #234	; 0xea
 800120a:	4880      	ldr	r0, [pc, #512]	; (800140c <HAL_GPIO_Init+0x4bc>)
 800120c:	f7ff f88e 	bl	800032c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	330c      	adds	r3, #12
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e02a      	b.n	8001270 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d00b      	beq.n	800123a <HAL_GPIO_Init+0x2ea>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d007      	beq.n	800123a <HAL_GPIO_Init+0x2ea>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	2b02      	cmp	r3, #2
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2ea>
 8001232:	21f7      	movs	r1, #247	; 0xf7
 8001234:	4875      	ldr	r0, [pc, #468]	; (800140c <HAL_GPIO_Init+0x4bc>)
 8001236:	f7ff f879 	bl	800032c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001242:	2304      	movs	r3, #4
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e013      	b.n	8001270 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	611a      	str	r2, [r3, #16]
          break;
 800125a:	e009      	b.n	8001270 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800125c:	2308      	movs	r3, #8
 800125e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69fa      	ldr	r2, [r7, #28]
 8001264:	615a      	str	r2, [r3, #20]
          break;
 8001266:	e003      	b.n	8001270 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001268:	2300      	movs	r3, #0
 800126a:	623b      	str	r3, [r7, #32]
          break;
 800126c:	e000      	b.n	8001270 <HAL_GPIO_Init+0x320>
          break;
 800126e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2bff      	cmp	r3, #255	; 0xff
 8001274:	d801      	bhi.n	800127a <HAL_GPIO_Init+0x32a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e001      	b.n	800127e <HAL_GPIO_Init+0x32e>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3304      	adds	r3, #4
 800127e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2bff      	cmp	r3, #255	; 0xff
 8001284:	d802      	bhi.n	800128c <HAL_GPIO_Init+0x33c>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	e002      	b.n	8001292 <HAL_GPIO_Init+0x342>
 800128c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128e:	3b08      	subs	r3, #8
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	210f      	movs	r1, #15
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	6a39      	ldr	r1, [r7, #32]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	431a      	orrs	r2, r3
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8096 	beq.w	80013ec <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_GPIO_Init+0x4c0>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_GPIO_Init+0x4c0>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_GPIO_Init+0x4c0>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d8:	4a4e      	ldr	r2, [pc, #312]	; (8001414 <HAL_GPIO_Init+0x4c4>)
 80012da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012dc:	089b      	lsrs	r3, r3, #2
 80012de:	3302      	adds	r3, #2
 80012e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	220f      	movs	r2, #15
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	43db      	mvns	r3, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4013      	ands	r3, r2
 80012fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a46      	ldr	r2, [pc, #280]	; (8001418 <HAL_GPIO_Init+0x4c8>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d013      	beq.n	800132c <HAL_GPIO_Init+0x3dc>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a45      	ldr	r2, [pc, #276]	; (800141c <HAL_GPIO_Init+0x4cc>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_GPIO_Init+0x3d8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a44      	ldr	r2, [pc, #272]	; (8001420 <HAL_GPIO_Init+0x4d0>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d007      	beq.n	8001324 <HAL_GPIO_Init+0x3d4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a43      	ldr	r2, [pc, #268]	; (8001424 <HAL_GPIO_Init+0x4d4>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d101      	bne.n	8001320 <HAL_GPIO_Init+0x3d0>
 800131c:	2303      	movs	r3, #3
 800131e:	e006      	b.n	800132e <HAL_GPIO_Init+0x3de>
 8001320:	2304      	movs	r3, #4
 8001322:	e004      	b.n	800132e <HAL_GPIO_Init+0x3de>
 8001324:	2302      	movs	r3, #2
 8001326:	e002      	b.n	800132e <HAL_GPIO_Init+0x3de>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <HAL_GPIO_Init+0x3de>
 800132c:	2300      	movs	r3, #0
 800132e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001330:	f002 0203 	and.w	r2, r2, #3
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	4093      	lsls	r3, r2
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	4313      	orrs	r3, r2
 800133c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800133e:	4935      	ldr	r1, [pc, #212]	; (8001414 <HAL_GPIO_Init+0x4c4>)
 8001340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	3302      	adds	r3, #2
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d006      	beq.n	8001366 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001358:	4b33      	ldr	r3, [pc, #204]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	4932      	ldr	r1, [pc, #200]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	4313      	orrs	r3, r2
 8001362:	608b      	str	r3, [r1, #8]
 8001364:	e006      	b.n	8001374 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001366:	4b30      	ldr	r3, [pc, #192]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001368:	689a      	ldr	r2, [r3, #8]
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	43db      	mvns	r3, r3
 800136e:	492e      	ldr	r1, [pc, #184]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001370:	4013      	ands	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d006      	beq.n	800138e <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001380:	4b29      	ldr	r3, [pc, #164]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	4928      	ldr	r1, [pc, #160]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	60cb      	str	r3, [r1, #12]
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800138e:	4b26      	ldr	r3, [pc, #152]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001390:	68da      	ldr	r2, [r3, #12]
 8001392:	69bb      	ldr	r3, [r7, #24]
 8001394:	43db      	mvns	r3, r3
 8001396:	4924      	ldr	r1, [pc, #144]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 8001398:	4013      	ands	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d006      	beq.n	80013b6 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013a8:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	491e      	ldr	r1, [pc, #120]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
 80013b4:	e006      	b.n	80013c4 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	43db      	mvns	r3, r3
 80013be:	491a      	ldr	r1, [pc, #104]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d006      	beq.n	80013de <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4914      	ldr	r1, [pc, #80]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	4313      	orrs	r3, r2
 80013da:	600b      	str	r3, [r1, #0]
 80013dc:	e006      	b.n	80013ec <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013de:	4b12      	ldr	r3, [pc, #72]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	4910      	ldr	r1, [pc, #64]	; (8001428 <HAL_GPIO_Init+0x4d8>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ee:	3301      	adds	r3, #1
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f8:	fa22 f303 	lsr.w	r3, r2, r3
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f47f ae1e 	bne.w	800103e <HAL_GPIO_Init+0xee>
  }
}
 8001402:	bf00      	nop
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	080026b4 	.word	0x080026b4
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	40010400 	.word	0x40010400

0800142c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e1b6      	b.n	80017ac <HAL_I2C_Init+0x380>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a9c      	ldr	r2, [pc, #624]	; (80016b4 <HAL_I2C_Init+0x288>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d009      	beq.n	800145c <HAL_I2C_Init+0x30>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a9a      	ldr	r2, [pc, #616]	; (80016b8 <HAL_I2C_Init+0x28c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d004      	beq.n	800145c <HAL_I2C_Init+0x30>
 8001452:	f240 11db 	movw	r1, #475	; 0x1db
 8001456:	4899      	ldr	r0, [pc, #612]	; (80016bc <HAL_I2C_Init+0x290>)
 8001458:	f7fe ff68 	bl	800032c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d004      	beq.n	800146e <HAL_I2C_Init+0x42>
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4a95      	ldr	r2, [pc, #596]	; (80016c0 <HAL_I2C_Init+0x294>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d904      	bls.n	8001478 <HAL_I2C_Init+0x4c>
 800146e:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001472:	4892      	ldr	r0, [pc, #584]	; (80016bc <HAL_I2C_Init+0x290>)
 8001474:	f7fe ff5a 	bl	800032c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d009      	beq.n	8001494 <HAL_I2C_Init+0x68>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001488:	d004      	beq.n	8001494 <HAL_I2C_Init+0x68>
 800148a:	f240 11dd 	movw	r1, #477	; 0x1dd
 800148e:	488b      	ldr	r0, [pc, #556]	; (80016bc <HAL_I2C_Init+0x290>)
 8001490:	f7fe ff4c 	bl	800032c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800149c:	f023 0303 	bic.w	r3, r3, #3
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_I2C_Init+0x82>
 80014a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80014a8:	4884      	ldr	r0, [pc, #528]	; (80016bc <HAL_I2C_Init+0x290>)
 80014aa:	f7fe ff3f 	bl	800032c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b6:	d009      	beq.n	80014cc <HAL_I2C_Init+0xa0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	691b      	ldr	r3, [r3, #16]
 80014bc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80014c0:	d004      	beq.n	80014cc <HAL_I2C_Init+0xa0>
 80014c2:	f240 11df 	movw	r1, #479	; 0x1df
 80014c6:	487d      	ldr	r0, [pc, #500]	; (80016bc <HAL_I2C_Init+0x290>)
 80014c8:	f7fe ff30 	bl	800032c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d008      	beq.n	80014e6 <HAL_I2C_Init+0xba>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	695b      	ldr	r3, [r3, #20]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d004      	beq.n	80014e6 <HAL_I2C_Init+0xba>
 80014dc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80014e0:	4876      	ldr	r0, [pc, #472]	; (80016bc <HAL_I2C_Init+0x290>)
 80014e2:	f7fe ff23 	bl	800032c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d004      	beq.n	80014fc <HAL_I2C_Init+0xd0>
 80014f2:	f240 11e1 	movw	r1, #481	; 0x1e1
 80014f6:	4871      	ldr	r0, [pc, #452]	; (80016bc <HAL_I2C_Init+0x290>)
 80014f8:	f7fe ff18 	bl	800032c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_I2C_Init+0xea>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b40      	cmp	r3, #64	; 0x40
 800150a:	d004      	beq.n	8001516 <HAL_I2C_Init+0xea>
 800150c:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001510:	486a      	ldr	r0, [pc, #424]	; (80016bc <HAL_I2C_Init+0x290>)
 8001512:	f7fe ff0b 	bl	800032c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_I2C_Init+0x104>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	2b80      	cmp	r3, #128	; 0x80
 8001524:	d004      	beq.n	8001530 <HAL_I2C_Init+0x104>
 8001526:	f240 11e3 	movw	r1, #483	; 0x1e3
 800152a:	4864      	ldr	r0, [pc, #400]	; (80016bc <HAL_I2C_Init+0x290>)
 800152c:	f7fe fefe 	bl	800032c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d106      	bne.n	800154a <HAL_I2C_Init+0x11e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7fe fe5d 	bl	8000204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 0201 	bic.w	r2, r2, #1
 8001560:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001570:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001580:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001582:	f000 fe75 	bl	8002270 <HAL_RCC_GetPCLK1Freq>
 8001586:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	4a4d      	ldr	r2, [pc, #308]	; (80016c4 <HAL_I2C_Init+0x298>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d807      	bhi.n	80015a2 <HAL_I2C_Init+0x176>
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4a4c      	ldr	r2, [pc, #304]	; (80016c8 <HAL_I2C_Init+0x29c>)
 8001596:	4293      	cmp	r3, r2
 8001598:	bf94      	ite	ls
 800159a:	2301      	movls	r3, #1
 800159c:	2300      	movhi	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	e006      	b.n	80015b0 <HAL_I2C_Init+0x184>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4a49      	ldr	r2, [pc, #292]	; (80016cc <HAL_I2C_Init+0x2a0>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	bf94      	ite	ls
 80015aa:	2301      	movls	r3, #1
 80015ac:	2300      	movhi	r3, #0
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <HAL_I2C_Init+0x18c>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0f9      	b.n	80017ac <HAL_I2C_Init+0x380>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <HAL_I2C_Init+0x2a4>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	0c9b      	lsrs	r3, r3, #18
 80015c2:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	430a      	orrs	r2, r1
 80015d6:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	4a37      	ldr	r2, [pc, #220]	; (80016c4 <HAL_I2C_Init+0x298>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d802      	bhi.n	80015f2 <HAL_I2C_Init+0x1c6>
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	3301      	adds	r3, #1
 80015f0:	e009      	b.n	8001606 <HAL_I2C_Init+0x1da>
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <HAL_I2C_Init+0x2a8>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	099b      	lsrs	r3, r3, #6
 8001604:	3301      	adds	r3, #1
 8001606:	687a      	ldr	r2, [r7, #4]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	430b      	orrs	r3, r1
 800160c:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	69db      	ldr	r3, [r3, #28]
 8001614:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001618:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	4928      	ldr	r1, [pc, #160]	; (80016c4 <HAL_I2C_Init+0x298>)
 8001622:	428b      	cmp	r3, r1
 8001624:	d819      	bhi.n	800165a <HAL_I2C_Init+0x22e>
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	1e59      	subs	r1, r3, #1
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fbb1 f3f3 	udiv	r3, r1, r3
 8001634:	1c59      	adds	r1, r3, #1
 8001636:	f640 73fc 	movw	r3, #4092	; 0xffc
 800163a:	400b      	ands	r3, r1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00a      	beq.n	8001656 <HAL_I2C_Init+0x22a>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	1e59      	subs	r1, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fbb1 f3f3 	udiv	r3, r1, r3
 800164e:	3301      	adds	r3, #1
 8001650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001654:	e063      	b.n	800171e <HAL_I2C_Init+0x2f2>
 8001656:	2304      	movs	r3, #4
 8001658:	e061      	b.n	800171e <HAL_I2C_Init+0x2f2>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d111      	bne.n	8001686 <HAL_I2C_Init+0x25a>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1e58      	subs	r0, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	460b      	mov	r3, r1
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	440b      	add	r3, r1
 8001670:	fbb0 f3f3 	udiv	r3, r0, r3
 8001674:	3301      	adds	r3, #1
 8001676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800167a:	2b00      	cmp	r3, #0
 800167c:	bf0c      	ite	eq
 800167e:	2301      	moveq	r3, #1
 8001680:	2300      	movne	r3, #0
 8001682:	b2db      	uxtb	r3, r3
 8001684:	e012      	b.n	80016ac <HAL_I2C_Init+0x280>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	1e58      	subs	r0, r3, #1
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6859      	ldr	r1, [r3, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	0099      	lsls	r1, r3, #2
 8001696:	440b      	add	r3, r1
 8001698:	fbb0 f3f3 	udiv	r3, r0, r3
 800169c:	3301      	adds	r3, #1
 800169e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bf0c      	ite	eq
 80016a6:	2301      	moveq	r3, #1
 80016a8:	2300      	movne	r3, #0
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_I2C_Init+0x2ac>
 80016b0:	2301      	movs	r3, #1
 80016b2:	e034      	b.n	800171e <HAL_I2C_Init+0x2f2>
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40005800 	.word	0x40005800
 80016bc:	080026f0 	.word	0x080026f0
 80016c0:	00061a80 	.word	0x00061a80
 80016c4:	000186a0 	.word	0x000186a0
 80016c8:	001e847f 	.word	0x001e847f
 80016cc:	003d08ff 	.word	0x003d08ff
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	10624dd3 	.word	0x10624dd3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d10e      	bne.n	80016fe <HAL_I2C_Init+0x2d2>
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	1e58      	subs	r0, r3, #1
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	440b      	add	r3, r1
 80016ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f2:	3301      	adds	r3, #1
 80016f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fc:	e00f      	b.n	800171e <HAL_I2C_Init+0x2f2>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	1e58      	subs	r0, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6859      	ldr	r1, [r3, #4]
 8001706:	460b      	mov	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	0099      	lsls	r1, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	fbb0 f3f3 	udiv	r3, r0, r3
 8001714:	3301      	adds	r3, #1
 8001716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	6809      	ldr	r1, [r1, #0]
 8001722:	4313      	orrs	r3, r2
 8001724:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	6911      	ldr	r1, [r2, #16]
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	68d2      	ldr	r2, [r2, #12]
 8001758:	4311      	orrs	r1, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	430b      	orrs	r3, r1
 8001760:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	695a      	ldr	r2, [r3, #20]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2220      	movs	r2, #32
 8001798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017aa:	2300      	movs	r3, #0
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e35a      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d01c      	beq.n	8001808 <HAL_RCC_OscConfig+0x54>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d116      	bne.n	8001808 <HAL_RCC_OscConfig+0x54>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d110      	bne.n	8001808 <HAL_RCC_OscConfig+0x54>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d10a      	bne.n	8001808 <HAL_RCC_OscConfig+0x54>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0304 	and.w	r3, r3, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d104      	bne.n	8001808 <HAL_RCC_OscConfig+0x54>
 80017fe:	f240 1165 	movw	r1, #357	; 0x165
 8001802:	488f      	ldr	r0, [pc, #572]	; (8001a40 <HAL_RCC_OscConfig+0x28c>)
 8001804:	f7fe fd92 	bl	800032c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 809a 	beq.w	800194a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00e      	beq.n	800183c <HAL_RCC_OscConfig+0x88>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001826:	d009      	beq.n	800183c <HAL_RCC_OscConfig+0x88>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001830:	d004      	beq.n	800183c <HAL_RCC_OscConfig+0x88>
 8001832:	f240 116b 	movw	r1, #363	; 0x16b
 8001836:	4882      	ldr	r0, [pc, #520]	; (8001a40 <HAL_RCC_OscConfig+0x28c>)
 8001838:	f7fe fd78 	bl	800032c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800183c:	4b81      	ldr	r3, [pc, #516]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 030c 	and.w	r3, r3, #12
 8001844:	2b04      	cmp	r3, #4
 8001846:	d00c      	beq.n	8001862 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001848:	4b7e      	ldr	r3, [pc, #504]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 030c 	and.w	r3, r3, #12
 8001850:	2b08      	cmp	r3, #8
 8001852:	d112      	bne.n	800187a <HAL_RCC_OscConfig+0xc6>
 8001854:	4b7b      	ldr	r3, [pc, #492]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d10b      	bne.n	800187a <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001862:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d06c      	beq.n	8001948 <HAL_RCC_OscConfig+0x194>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d168      	bne.n	8001948 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e300      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001882:	d106      	bne.n	8001892 <HAL_RCC_OscConfig+0xde>
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800188a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	e02e      	b.n	80018f0 <HAL_RCC_OscConfig+0x13c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d10c      	bne.n	80018b4 <HAL_RCC_OscConfig+0x100>
 800189a:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a69      	ldr	r2, [pc, #420]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a66      	ldr	r2, [pc, #408]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0x13c>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x124>
 80018be:	4b61      	ldr	r3, [pc, #388]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a60      	ldr	r2, [pc, #384]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b5e      	ldr	r3, [pc, #376]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a5d      	ldr	r2, [pc, #372]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0x13c>
 80018d8:	4b5a      	ldr	r3, [pc, #360]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a59      	ldr	r2, [pc, #356]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b57      	ldr	r3, [pc, #348]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a56      	ldr	r2, [pc, #344]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f8:	f7fe fec6 	bl	8000688 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001900:	f7fe fec2 	bl	8000688 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e2b4      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b4c      	ldr	r3, [pc, #304]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0x14c>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7fe feb2 	bl	8000688 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001928:	f7fe feae 	bl	8000688 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e2a0      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b42      	ldr	r3, [pc, #264]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x174>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	f000 8080 	beq.w	8001a58 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d008      	beq.n	8001972 <HAL_RCC_OscConfig+0x1be>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691b      	ldr	r3, [r3, #16]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d004      	beq.n	8001972 <HAL_RCC_OscConfig+0x1be>
 8001968:	f240 119f 	movw	r1, #415	; 0x19f
 800196c:	4834      	ldr	r0, [pc, #208]	; (8001a40 <HAL_RCC_OscConfig+0x28c>)
 800196e:	f7fe fcdd 	bl	800032c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	2b1f      	cmp	r3, #31
 8001978:	d904      	bls.n	8001984 <HAL_RCC_OscConfig+0x1d0>
 800197a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800197e:	4830      	ldr	r0, [pc, #192]	; (8001a40 <HAL_RCC_OscConfig+0x28c>)
 8001980:	f7fe fcd4 	bl	800032c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001984:	4b2f      	ldr	r3, [pc, #188]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 030c 	and.w	r3, r3, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	d00b      	beq.n	80019a8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d11c      	bne.n	80019d6 <HAL_RCC_OscConfig+0x222>
 800199c:	4b29      	ldr	r3, [pc, #164]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d116      	bne.n	80019d6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019a8:	4b26      	ldr	r3, [pc, #152]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_OscConfig+0x20c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e25d      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	491d      	ldr	r1, [pc, #116]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d4:	e040      	b.n	8001a58 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d020      	beq.n	8001a20 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <HAL_RCC_OscConfig+0x294>)
 80019e0:	2201      	movs	r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e4:	f7fe fe50 	bl	8000688 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ec:	f7fe fe4c 	bl	8000688 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e23e      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019fe:	4b11      	ldr	r3, [pc, #68]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	490a      	ldr	r1, [pc, #40]	; (8001a44 <HAL_RCC_OscConfig+0x290>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
 8001a1e:	e01b      	b.n	8001a58 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a20:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_RCC_OscConfig+0x294>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a26:	f7fe fe2f 	bl	8000688 <HAL_GetTick>
 8001a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2c:	e00e      	b.n	8001a4c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2e:	f7fe fe2b 	bl	8000688 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d907      	bls.n	8001a4c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e21d      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
 8001a40:	08002728 	.word	0x08002728
 8001a44:	40021000 	.word	0x40021000
 8001a48:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4c:	4b7d      	ldr	r3, [pc, #500]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d1ea      	bne.n	8001a2e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d040      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2ca>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d004      	beq.n	8001a7e <HAL_RCC_OscConfig+0x2ca>
 8001a74:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8001a78:	4873      	ldr	r0, [pc, #460]	; (8001c48 <HAL_RCC_OscConfig+0x494>)
 8001a7a:	f7fe fc57 	bl	800032c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d019      	beq.n	8001aba <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a86:	4b71      	ldr	r3, [pc, #452]	; (8001c4c <HAL_RCC_OscConfig+0x498>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a8c:	f7fe fdfc 	bl	8000688 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7fe fdf8 	bl	8000688 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1ea      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	4b67      	ldr	r3, [pc, #412]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ab2:	2001      	movs	r0, #1
 8001ab4:	f000 fbf0 	bl	8002298 <RCC_Delay>
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b64      	ldr	r3, [pc, #400]	; (8001c4c <HAL_RCC_OscConfig+0x498>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ac0:	f7fe fde2 	bl	8000688 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7fe fdde 	bl	8000688 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1d0      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ada:	4b5a      	ldr	r3, [pc, #360]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80bf 	beq.w	8001c72 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00c      	beq.n	8001b1a <HAL_RCC_OscConfig+0x366>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d008      	beq.n	8001b1a <HAL_RCC_OscConfig+0x366>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	2b05      	cmp	r3, #5
 8001b0e:	d004      	beq.n	8001b1a <HAL_RCC_OscConfig+0x366>
 8001b10:	f240 210f 	movw	r1, #527	; 0x20f
 8001b14:	484c      	ldr	r0, [pc, #304]	; (8001c48 <HAL_RCC_OscConfig+0x494>)
 8001b16:	f7fe fc09 	bl	800032c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b1a:	4b4a      	ldr	r3, [pc, #296]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10d      	bne.n	8001b42 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b26:	4b47      	ldr	r3, [pc, #284]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	4a46      	ldr	r2, [pc, #280]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b30:	61d3      	str	r3, [r2, #28]
 8001b32:	4b44      	ldr	r3, [pc, #272]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b34:	69db      	ldr	r3, [r3, #28]
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b42:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x49c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d118      	bne.n	8001b80 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4e:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_RCC_OscConfig+0x49c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a3f      	ldr	r2, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x49c>)
 8001b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b5a:	f7fe fd95 	bl	8000688 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b62:	f7fe fd91 	bl	8000688 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b64      	cmp	r3, #100	; 0x64
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e183      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x49c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x3e2>
 8001b88:	4b2e      	ldr	r3, [pc, #184]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e02d      	b.n	8001bf2 <HAL_RCC_OscConfig+0x43e>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x404>
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a28      	ldr	r2, [pc, #160]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b26      	ldr	r3, [pc, #152]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a25      	ldr	r2, [pc, #148]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01c      	b.n	8001bf2 <HAL_RCC_OscConfig+0x43e>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x426>
 8001bc0:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a1c      	ldr	r2, [pc, #112]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x43e>
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7fe fd45 	bl	8000688 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe fd41 	bl	8000688 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e131      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c18:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_RCC_OscConfig+0x490>)
 8001c1a:	6a1b      	ldr	r3, [r3, #32]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d0ee      	beq.n	8001c02 <HAL_RCC_OscConfig+0x44e>
 8001c24:	e01c      	b.n	8001c60 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c26:	f7fe fd2f 	bl	8000688 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2c:	e012      	b.n	8001c54 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2e:	f7fe fd2b 	bl	8000688 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d909      	bls.n	8001c54 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e11b      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
 8001c44:	40021000 	.word	0x40021000
 8001c48:	08002728 	.word	0x08002728
 8001c4c:	42420480 	.word	0x42420480
 8001c50:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c54:	4b8b      	ldr	r3, [pc, #556]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1e6      	bne.n	8001c2e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c66:	4b87      	ldr	r3, [pc, #540]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	4a86      	ldr	r2, [pc, #536]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c70:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69db      	ldr	r3, [r3, #28]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d00c      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4e0>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69db      	ldr	r3, [r3, #28]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d008      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4e0>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d004      	beq.n	8001c94 <HAL_RCC_OscConfig+0x4e0>
 8001c8a:	f240 21ad 	movw	r1, #685	; 0x2ad
 8001c8e:	487e      	ldr	r0, [pc, #504]	; (8001e88 <HAL_RCC_OscConfig+0x6d4>)
 8001c90:	f7fe fb4c 	bl	800032c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80ee 	beq.w	8001e7a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c9e:	4b79      	ldr	r3, [pc, #484]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	f000 80ce 	beq.w	8001e48 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69db      	ldr	r3, [r3, #28]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f040 80b2 	bne.w	8001e1a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x51e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d004      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x51e>
 8001cc8:	f240 21b6 	movw	r1, #694	; 0x2b6
 8001ccc:	486e      	ldr	r0, [pc, #440]	; (8001e88 <HAL_RCC_OscConfig+0x6d4>)
 8001cce:	f7fe fb2d 	bl	800032c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d04a      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ce2:	d045      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cec:	d040      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001cf6:	d03b      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d00:	d036      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001d0a:	d031      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001d14:	d02c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001d1e:	d027      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d28:	d022      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d2e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001d32:	d01d      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001d3c:	d018      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001d46:	d013      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001d50:	d00e      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001d64:	d004      	beq.n	8001d70 <HAL_RCC_OscConfig+0x5bc>
 8001d66:	f240 21b7 	movw	r1, #695	; 0x2b7
 8001d6a:	4847      	ldr	r0, [pc, #284]	; (8001e88 <HAL_RCC_OscConfig+0x6d4>)
 8001d6c:	f7fe fade 	bl	800032c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d70:	4b46      	ldr	r3, [pc, #280]	; (8001e8c <HAL_RCC_OscConfig+0x6d8>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7fe fc87 	bl	8000688 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7fe fc83 	bl	8000688 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e075      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d90:	4b3c      	ldr	r3, [pc, #240]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a1b      	ldr	r3, [r3, #32]
 8001da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d009      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x60e>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001db6:	d004      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x60e>
 8001db8:	f240 21cd 	movw	r1, #717	; 0x2cd
 8001dbc:	4832      	ldr	r0, [pc, #200]	; (8001e88 <HAL_RCC_OscConfig+0x6d4>)
 8001dbe:	f7fe fab5 	bl	800032c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dc2:	4b30      	ldr	r3, [pc, #192]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	492d      	ldr	r1, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd4:	4b2b      	ldr	r3, [pc, #172]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a19      	ldr	r1, [r3, #32]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	430b      	orrs	r3, r1
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dec:	4b27      	ldr	r3, [pc, #156]	; (8001e8c <HAL_RCC_OscConfig+0x6d8>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fc49 	bl	8000688 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7fe fc45 	bl	8000688 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e037      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x646>
 8001e18:	e02f      	b.n	8001e7a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <HAL_RCC_OscConfig+0x6d8>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e20:	f7fe fc32 	bl	8000688 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe fc2e 	bl	8000688 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e020      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x674>
 8001e46:	e018      	b.n	8001e7a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d101      	bne.n	8001e54 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e013      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_RCC_OscConfig+0x6d0>)
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e000      	b.n	8001e7c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8001e7a:	2300      	movs	r3, #0
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3718      	adds	r7, #24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40021000 	.word	0x40021000
 8001e88:	08002728 	.word	0x08002728
 8001e8c:	42420060 	.word	0x42420060

08001e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e176      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d116      	bne.n	8001ede <HAL_RCC_ClockConfig+0x4e>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d110      	bne.n	8001ede <HAL_RCC_ClockConfig+0x4e>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <HAL_RCC_ClockConfig+0x4e>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0308 	and.w	r3, r3, #8
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <HAL_RCC_ClockConfig+0x4e>
 8001ed4:	f240 3136 	movw	r1, #822	; 0x336
 8001ed8:	4874      	ldr	r0, [pc, #464]	; (80020ac <HAL_RCC_ClockConfig+0x21c>)
 8001eda:	f7fe fa27 	bl	800032c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00a      	beq.n	8001efa <HAL_RCC_ClockConfig+0x6a>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d007      	beq.n	8001efa <HAL_RCC_ClockConfig+0x6a>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d004      	beq.n	8001efa <HAL_RCC_ClockConfig+0x6a>
 8001ef0:	f240 3137 	movw	r1, #823	; 0x337
 8001ef4:	486d      	ldr	r0, [pc, #436]	; (80020ac <HAL_RCC_ClockConfig+0x21c>)
 8001ef6:	f7fe fa19 	bl	800032c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efa:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0307 	and.w	r3, r3, #7
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d910      	bls.n	8001f2a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f08:	4b69      	ldr	r3, [pc, #420]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f023 0207 	bic.w	r2, r3, #7
 8001f10:	4967      	ldr	r1, [pc, #412]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f18:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d001      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e133      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d049      	beq.n	8001fca <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f42:	4b5c      	ldr	r3, [pc, #368]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	4a5b      	ldr	r2, [pc, #364]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001f48:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a55      	ldr	r2, [pc, #340]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001f60:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f64:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d024      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	2b80      	cmp	r3, #128	; 0x80
 8001f74:	d020      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2b90      	cmp	r3, #144	; 0x90
 8001f7c:	d01c      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2ba0      	cmp	r3, #160	; 0xa0
 8001f84:	d018      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2bb0      	cmp	r3, #176	; 0xb0
 8001f8c:	d014      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2bc0      	cmp	r3, #192	; 0xc0
 8001f94:	d010      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	2bd0      	cmp	r3, #208	; 0xd0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2be0      	cmp	r3, #224	; 0xe0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2bf0      	cmp	r3, #240	; 0xf0
 8001fac:	d004      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x128>
 8001fae:	f240 315d 	movw	r1, #861	; 0x35d
 8001fb2:	483e      	ldr	r0, [pc, #248]	; (80020ac <HAL_RCC_ClockConfig+0x21c>)
 8001fb4:	f7fe f9ba 	bl	800032c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb8:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	493b      	ldr	r1, [pc, #236]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d051      	beq.n	800207a <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00c      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x168>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d008      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x168>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d004      	beq.n	8001ff8 <HAL_RCC_ClockConfig+0x168>
 8001fee:	f44f 7159 	mov.w	r1, #868	; 0x364
 8001ff2:	482e      	ldr	r0, [pc, #184]	; (80020ac <HAL_RCC_ClockConfig+0x21c>)
 8001ff4:	f7fe f99a 	bl	800032c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002000:	4b2c      	ldr	r3, [pc, #176]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d115      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0c0      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b02      	cmp	r3, #2
 8002016:	d107      	bne.n	8002028 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	4b26      	ldr	r3, [pc, #152]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d109      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b4      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	4b22      	ldr	r3, [pc, #136]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0ac      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002038:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 0203 	bic.w	r2, r3, #3
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	491b      	ldr	r1, [pc, #108]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 8002046:	4313      	orrs	r3, r2
 8002048:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800204a:	f7fe fb1d 	bl	8000688 <HAL_GetTick>
 800204e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002050:	e00a      	b.n	8002068 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002052:	f7fe fb19 	bl	8000688 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002060:	4293      	cmp	r3, r2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e094      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x224>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 020c 	and.w	r2, r3, #12
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	429a      	cmp	r2, r3
 8002078:	d1eb      	bne.n	8002052 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d217      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002088:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_ClockConfig+0x220>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d008      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e073      	b.n	8002192 <HAL_RCC_ClockConfig+0x302>
 80020aa:	bf00      	nop
 80020ac:	08002728 	.word	0x08002728
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d025      	beq.n	8002110 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d018      	beq.n	80020fe <HAL_RCC_ClockConfig+0x26e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d4:	d013      	beq.n	80020fe <HAL_RCC_ClockConfig+0x26e>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80020de:	d00e      	beq.n	80020fe <HAL_RCC_ClockConfig+0x26e>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x26e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80020f2:	d004      	beq.n	80020fe <HAL_RCC_ClockConfig+0x26e>
 80020f4:	f240 31a2 	movw	r1, #930	; 0x3a2
 80020f8:	4828      	ldr	r0, [pc, #160]	; (800219c <HAL_RCC_ClockConfig+0x30c>)
 80020fa:	f7fe f917 	bl	800032c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fe:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_ClockConfig+0x310>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	4925      	ldr	r1, [pc, #148]	; (80021a0 <HAL_RCC_ClockConfig+0x310>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d026      	beq.n	800216a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d018      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2c6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212c:	d013      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2c6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002136:	d00e      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2c6>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2c6>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800214a:	d004      	beq.n	8002156 <HAL_RCC_ClockConfig+0x2c6>
 800214c:	f240 31a9 	movw	r1, #937	; 0x3a9
 8002150:	4812      	ldr	r0, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x30c>)
 8002152:	f7fe f8eb 	bl	800032c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_RCC_ClockConfig+0x310>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	490e      	ldr	r1, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x310>)
 8002166:	4313      	orrs	r3, r2
 8002168:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800216a:	f000 f821 	bl	80021b0 <HAL_RCC_GetSysClockFreq>
 800216e:	4602      	mov	r2, r0
 8002170:	4b0b      	ldr	r3, [pc, #44]	; (80021a0 <HAL_RCC_ClockConfig+0x310>)
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	091b      	lsrs	r3, r3, #4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	490a      	ldr	r1, [pc, #40]	; (80021a4 <HAL_RCC_ClockConfig+0x314>)
 800217c:	5ccb      	ldrb	r3, [r1, r3]
 800217e:	fa22 f303 	lsr.w	r3, r2, r3
 8002182:	4a09      	ldr	r2, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x318>)
 8002184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_ClockConfig+0x31c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fa3a 	bl	8000604 <HAL_InitTick>

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	08002728 	.word	0x08002728
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08002798 	.word	0x08002798
 80021a8:	20000000 	.word	0x20000000
 80021ac:	20000004 	.word	0x20000004

080021b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b087      	sub	sp, #28
 80021b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	2300      	movs	r3, #0
 80021bc:	60bb      	str	r3, [r7, #8]
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ca:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d002      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x30>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d003      	beq.n	80021e6 <HAL_RCC_GetSysClockFreq+0x36>
 80021de:	e027      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 80021e2:	613b      	str	r3, [r7, #16]
      break;
 80021e4:	e027      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	0c9b      	lsrs	r3, r3, #18
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	4a17      	ldr	r2, [pc, #92]	; (800224c <HAL_RCC_GetSysClockFreq+0x9c>)
 80021f0:	5cd3      	ldrb	r3, [r2, r3]
 80021f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d010      	beq.n	8002220 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021fe:	4b11      	ldr	r3, [pc, #68]	; (8002244 <HAL_RCC_GetSysClockFreq+0x94>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	0c5b      	lsrs	r3, r3, #17
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_RCC_GetSysClockFreq+0xa0>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <HAL_RCC_GetSysClockFreq+0x98>)
 8002212:	fb03 f202 	mul.w	r2, r3, r2
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	fbb2 f3f3 	udiv	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	e004      	b.n	800222a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	4a0c      	ldr	r2, [pc, #48]	; (8002254 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002224:	fb02 f303 	mul.w	r3, r2, r3
 8002228:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	613b      	str	r3, [r7, #16]
      break;
 800222e:	e002      	b.n	8002236 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002230:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002232:	613b      	str	r3, [r7, #16]
      break;
 8002234:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002236:	693b      	ldr	r3, [r7, #16]
}
 8002238:	4618      	mov	r0, r3
 800223a:	371c      	adds	r7, #28
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	00f42400 	.word	0x00f42400
 800224c:	080027b0 	.word	0x080027b0
 8002250:	080027c0 	.word	0x080027c0
 8002254:	003d0900 	.word	0x003d0900
 8002258:	007a1200 	.word	0x007a1200

0800225c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002260:	4b02      	ldr	r3, [pc, #8]	; (800226c <HAL_RCC_GetHCLKFreq+0x10>)
 8002262:	681b      	ldr	r3, [r3, #0]
}
 8002264:	4618      	mov	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	20000000 	.word	0x20000000

08002270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002274:	f7ff fff2 	bl	800225c <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	0a1b      	lsrs	r3, r3, #8
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	080027a8 	.word	0x080027a8

08002298 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <RCC_Delay+0x34>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <RCC_Delay+0x38>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0a5b      	lsrs	r3, r3, #9
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022b4:	bf00      	nop
  }
  while (Delay --);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1e5a      	subs	r2, r3, #1
 80022ba:	60fa      	str	r2, [r7, #12]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f9      	bne.n	80022b4 <RCC_Delay+0x1c>
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr
 80022cc:	20000000 	.word	0x20000000
 80022d0:	10624dd3 	.word	0x10624dd3

080022d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d101      	bne.n	80022e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e16d      	b.n	80025c2 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6b      	ldr	r2, [pc, #428]	; (8002498 <HAL_SPI_Init+0x1c4>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d009      	beq.n	8002304 <HAL_SPI_Init+0x30>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a69      	ldr	r2, [pc, #420]	; (800249c <HAL_SPI_Init+0x1c8>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d004      	beq.n	8002304 <HAL_SPI_Init+0x30>
 80022fa:	f44f 71ab 	mov.w	r1, #342	; 0x156
 80022fe:	4868      	ldr	r0, [pc, #416]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 8002300:	f7fe f814 	bl	800032c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d009      	beq.n	8002320 <HAL_SPI_Init+0x4c>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002314:	d004      	beq.n	8002320 <HAL_SPI_Init+0x4c>
 8002316:	f240 1157 	movw	r1, #343	; 0x157
 800231a:	4861      	ldr	r0, [pc, #388]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 800231c:	f7fe f806 	bl	800032c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <HAL_SPI_Init+0x72>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002330:	d009      	beq.n	8002346 <HAL_SPI_Init+0x72>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233a:	d004      	beq.n	8002346 <HAL_SPI_Init+0x72>
 800233c:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8002340:	4857      	ldr	r0, [pc, #348]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 8002342:	f7fd fff3 	bl	800032c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800234e:	d008      	beq.n	8002362 <HAL_SPI_Init+0x8e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d004      	beq.n	8002362 <HAL_SPI_Init+0x8e>
 8002358:	f240 1159 	movw	r1, #345	; 0x159
 800235c:	4850      	ldr	r0, [pc, #320]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 800235e:	f7fd ffe5 	bl	800032c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800236a:	d00d      	beq.n	8002388 <HAL_SPI_Init+0xb4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <HAL_SPI_Init+0xb4>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800237c:	d004      	beq.n	8002388 <HAL_SPI_Init+0xb4>
 800237e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8002382:	4847      	ldr	r0, [pc, #284]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 8002384:	f7fd ffd2 	bl	800032c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	69db      	ldr	r3, [r3, #28]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	69db      	ldr	r3, [r3, #28]
 8002394:	2b08      	cmp	r3, #8
 8002396:	d01c      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b10      	cmp	r3, #16
 800239e:	d018      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	2b18      	cmp	r3, #24
 80023a6:	d014      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b20      	cmp	r3, #32
 80023ae:	d010      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b28      	cmp	r3, #40	; 0x28
 80023b6:	d00c      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b30      	cmp	r3, #48	; 0x30
 80023be:	d008      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b38      	cmp	r3, #56	; 0x38
 80023c6:	d004      	beq.n	80023d2 <HAL_SPI_Init+0xfe>
 80023c8:	f240 115b 	movw	r1, #347	; 0x15b
 80023cc:	4834      	ldr	r0, [pc, #208]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 80023ce:	f7fd ffad 	bl	800032c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d008      	beq.n	80023ec <HAL_SPI_Init+0x118>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d004      	beq.n	80023ec <HAL_SPI_Init+0x118>
 80023e2:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80023e6:	482e      	ldr	r0, [pc, #184]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 80023e8:	f7fd ffa0 	bl	800032c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_SPI_Init+0x12a>
 80023f4:	f240 115f 	movw	r1, #351	; 0x15f
 80023f8:	4829      	ldr	r0, [pc, #164]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 80023fa:	f7fd ff97 	bl	800032c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002402:	2b00      	cmp	r3, #0
 8002404:	d14e      	bne.n	80024a4 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_SPI_Init+0x14c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b02      	cmp	r3, #2
 8002414:	d004      	beq.n	8002420 <HAL_SPI_Init+0x14c>
 8002416:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800241a:	4821      	ldr	r0, [pc, #132]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 800241c:	f7fd ff86 	bl	800032c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <HAL_SPI_Init+0x166>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	695b      	ldr	r3, [r3, #20]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d004      	beq.n	800243a <HAL_SPI_Init+0x166>
 8002430:	f240 1163 	movw	r1, #355	; 0x163
 8002434:	481a      	ldr	r0, [pc, #104]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 8002436:	f7fd ff79 	bl	800032c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002442:	d125      	bne.n	8002490 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d056      	beq.n	80024fa <HAL_SPI_Init+0x226>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	2b08      	cmp	r3, #8
 8002452:	d052      	beq.n	80024fa <HAL_SPI_Init+0x226>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	2b10      	cmp	r3, #16
 800245a:	d04e      	beq.n	80024fa <HAL_SPI_Init+0x226>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	2b18      	cmp	r3, #24
 8002462:	d04a      	beq.n	80024fa <HAL_SPI_Init+0x226>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	69db      	ldr	r3, [r3, #28]
 8002468:	2b20      	cmp	r3, #32
 800246a:	d046      	beq.n	80024fa <HAL_SPI_Init+0x226>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	2b28      	cmp	r3, #40	; 0x28
 8002472:	d042      	beq.n	80024fa <HAL_SPI_Init+0x226>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b30      	cmp	r3, #48	; 0x30
 800247a:	d03e      	beq.n	80024fa <HAL_SPI_Init+0x226>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	2b38      	cmp	r3, #56	; 0x38
 8002482:	d03a      	beq.n	80024fa <HAL_SPI_Init+0x226>
 8002484:	f240 1167 	movw	r1, #359	; 0x167
 8002488:	4805      	ldr	r0, [pc, #20]	; (80024a0 <HAL_SPI_Init+0x1cc>)
 800248a:	f7fd ff4f 	bl	800032c <assert_failed>
 800248e:	e034      	b.n	80024fa <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
 8002496:	e030      	b.n	80024fa <HAL_SPI_Init+0x226>
 8002498:	40013000 	.word	0x40013000
 800249c:	40003800 	.word	0x40003800
 80024a0:	08002760 	.word	0x08002760
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d01c      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b10      	cmp	r3, #16
 80024ba:	d018      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b18      	cmp	r3, #24
 80024c2:	d014      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	2b20      	cmp	r3, #32
 80024ca:	d010      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	2b28      	cmp	r3, #40	; 0x28
 80024d2:	d00c      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b30      	cmp	r3, #48	; 0x30
 80024da:	d008      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	2b38      	cmp	r3, #56	; 0x38
 80024e2:	d004      	beq.n	80024ee <HAL_SPI_Init+0x21a>
 80024e4:	f240 1171 	movw	r1, #369	; 0x171
 80024e8:	4838      	ldr	r0, [pc, #224]	; (80025cc <HAL_SPI_Init+0x2f8>)
 80024ea:	f7fd ff1f 	bl	800032c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d106      	bne.n	800251a <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2200      	movs	r2, #0
 8002510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7fd ff49 	bl	80003ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2202      	movs	r2, #2
 800251e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002530:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	f003 0301 	and.w	r3, r3, #1
 8002560:	431a      	orrs	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	ea42 0103 	orr.w	r1, r2, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002586:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	430a      	orrs	r2, r1
 8002590:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	0c1a      	lsrs	r2, r3, #16
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f002 0204 	and.w	r2, r2, #4
 80025a0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	69da      	ldr	r2, [r3, #28]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025b0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2201      	movs	r2, #1
 80025bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	08002760 	.word	0x08002760

080025d0 <memset>:
 80025d0:	4603      	mov	r3, r0
 80025d2:	4402      	add	r2, r0
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d100      	bne.n	80025da <memset+0xa>
 80025d8:	4770      	bx	lr
 80025da:	f803 1b01 	strb.w	r1, [r3], #1
 80025de:	e7f9      	b.n	80025d4 <memset+0x4>

080025e0 <__libc_init_array>:
 80025e0:	b570      	push	{r4, r5, r6, lr}
 80025e2:	2600      	movs	r6, #0
 80025e4:	4d0c      	ldr	r5, [pc, #48]	; (8002618 <__libc_init_array+0x38>)
 80025e6:	4c0d      	ldr	r4, [pc, #52]	; (800261c <__libc_init_array+0x3c>)
 80025e8:	1b64      	subs	r4, r4, r5
 80025ea:	10a4      	asrs	r4, r4, #2
 80025ec:	42a6      	cmp	r6, r4
 80025ee:	d109      	bne.n	8002604 <__libc_init_array+0x24>
 80025f0:	f000 f81a 	bl	8002628 <_init>
 80025f4:	2600      	movs	r6, #0
 80025f6:	4d0a      	ldr	r5, [pc, #40]	; (8002620 <__libc_init_array+0x40>)
 80025f8:	4c0a      	ldr	r4, [pc, #40]	; (8002624 <__libc_init_array+0x44>)
 80025fa:	1b64      	subs	r4, r4, r5
 80025fc:	10a4      	asrs	r4, r4, #2
 80025fe:	42a6      	cmp	r6, r4
 8002600:	d105      	bne.n	800260e <__libc_init_array+0x2e>
 8002602:	bd70      	pop	{r4, r5, r6, pc}
 8002604:	f855 3b04 	ldr.w	r3, [r5], #4
 8002608:	4798      	blx	r3
 800260a:	3601      	adds	r6, #1
 800260c:	e7ee      	b.n	80025ec <__libc_init_array+0xc>
 800260e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002612:	4798      	blx	r3
 8002614:	3601      	adds	r6, #1
 8002616:	e7f2      	b.n	80025fe <__libc_init_array+0x1e>
 8002618:	080027c4 	.word	0x080027c4
 800261c:	080027c4 	.word	0x080027c4
 8002620:	080027c4 	.word	0x080027c4
 8002624:	080027c8 	.word	0x080027c8

08002628 <_init>:
 8002628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800262a:	bf00      	nop
 800262c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800262e:	bc08      	pop	{r3}
 8002630:	469e      	mov	lr, r3
 8002632:	4770      	bx	lr

08002634 <_fini>:
 8002634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002636:	bf00      	nop
 8002638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800263a:	bc08      	pop	{r3}
 800263c:	469e      	mov	lr, r3
 800263e:	4770      	bx	lr
