
RAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fc8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  080080d8  080080d8  000090d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800837c  0800837c  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000000  0800837c  0800837c  0000a05c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800837c  0800837c  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800837c  0800837c  0000937c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008380  08008380  00009380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08008384  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000498  20000060  080083e0  0000a060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004f8  080083e0  0000a4f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000160c3  00000000  00000000  0000a085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cb3  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  00023e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f4b  00000000  00000000  000251d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a3ba  00000000  00000000  0002611b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eeef  00000000  00000000  000404d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009479c  00000000  00000000  0005f3c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f3b60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  000f3ba4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f9074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080080c0 	.word	0x080080c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080080c0 	.word	0x080080c0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	@ 0x28
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000a52:	f107 0310 	add.w	r3, r7, #16
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
 8000a62:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a6e:	4b23      	ldr	r3, [pc, #140]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a70:	4a23      	ldr	r2, [pc, #140]	@ (8000b00 <MX_ADC1_Init+0xb4>)
 8000a72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a88:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a94:	4b19      	ldr	r3, [pc, #100]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a9a:	4818      	ldr	r0, [pc, #96]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000a9c:	f001 fab2 	bl	8002004 <HAL_ADC_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 8000aa6:	f000 fbfd 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_ADC1_Init+0xb8>)
 8000aac:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000aba:	2300      	movs	r3, #0
 8000abc:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000abe:	f107 0310 	add.w	r3, r7, #16
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480d      	ldr	r0, [pc, #52]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000ac6:	f001 fecb 	bl	8002860 <HAL_ADC_AnalogWDGConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000ad0:	f000 fbe8 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	@ (8000afc <MX_ADC1_Init+0xb0>)
 8000ae6:	f001 fcf7 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 fbd8 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	3728      	adds	r7, #40	@ 0x28
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	2000007c 	.word	0x2000007c
 8000b00:	40012400 	.word	0x40012400
 8000b04:	00800200 	.word	0x00800200

08000b08 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08a      	sub	sp, #40	@ 0x28
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000b0e:	f107 0310 	add.w	r3, r7, #16
 8000b12:	2200      	movs	r2, #0
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	605a      	str	r2, [r3, #4]
 8000b18:	609a      	str	r2, [r3, #8]
 8000b1a:	60da      	str	r2, [r3, #12]
 8000b1c:	611a      	str	r2, [r3, #16]
 8000b1e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000b2a:	4b23      	ldr	r3, [pc, #140]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b2c:	4a23      	ldr	r2, [pc, #140]	@ (8000bbc <MX_ADC2_Init+0xb4>)
 8000b2e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b30:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b36:	4b20      	ldr	r3, [pc, #128]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b44:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000b48:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000b50:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b56:	4818      	ldr	r0, [pc, #96]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b58:	f001 fa54 	bl	8002004 <HAL_ADC_Init>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d001      	beq.n	8000b66 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8000b62:	f000 fb9f 	bl	80012a4 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <MX_ADC2_Init+0xb8>)
 8000b68:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8000b72:	2303      	movs	r3, #3
 8000b74:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 8000b7a:	f107 0310 	add.w	r3, r7, #16
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480d      	ldr	r0, [pc, #52]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000b82:	f001 fe6d 	bl	8002860 <HAL_ADC_AnalogWDGConfig>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000b8c:	f000 fb8a 	bl	80012a4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b90:	2303      	movs	r3, #3
 8000b92:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b94:	2301      	movs	r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b9c:	1d3b      	adds	r3, r7, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4805      	ldr	r0, [pc, #20]	@ (8000bb8 <MX_ADC2_Init+0xb0>)
 8000ba2:	f001 fc99 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8000bac:	f000 fb7a 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000bb0:	bf00      	nop
 8000bb2:	3728      	adds	r7, #40	@ 0x28
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	200000ac 	.word	0x200000ac
 8000bbc:	40012800 	.word	0x40012800
 8000bc0:	00800200 	.word	0x00800200

08000bc4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08a      	sub	sp, #40	@ 0x28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bcc:	f107 0318 	add.w	r3, r7, #24
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a30      	ldr	r2, [pc, #192]	@ (8000ca0 <HAL_ADC_MspInit+0xdc>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d12a      	bne.n	8000c3a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000be4:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a2e      	ldr	r2, [pc, #184]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfc:	4b29      	ldr	r3, [pc, #164]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c02:	f043 0304 	orr.w	r3, r3, #4
 8000c06:	6193      	str	r3, [r2, #24]
 8000c08:	4b26      	ldr	r3, [pc, #152]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	613b      	str	r3, [r7, #16]
 8000c12:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FSR_1_Pin;
 8000c14:	2304      	movs	r3, #4
 8000c16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c18:	2303      	movs	r3, #3
 8000c1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_1_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4821      	ldr	r0, [pc, #132]	@ (8000ca8 <HAL_ADC_MspInit+0xe4>)
 8000c24:	f003 f966 	bl	8003ef4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	2012      	movs	r0, #18
 8000c2e:	f002 fdf7 	bl	8003820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c32:	2012      	movs	r0, #18
 8000c34:	f002 fe20 	bl	8003878 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000c38:	e02e      	b.n	8000c98 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a1b      	ldr	r2, [pc, #108]	@ (8000cac <HAL_ADC_MspInit+0xe8>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d129      	bne.n	8000c98 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a16      	ldr	r2, [pc, #88]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4e:	6193      	str	r3, [r2, #24]
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c58:	60fb      	str	r3, [r7, #12]
 8000c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	6193      	str	r3, [r2, #24]
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_ADC_MspInit+0xe0>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FSR_2_Pin;
 8000c74:	2308      	movs	r3, #8
 8000c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_2_GPIO_Port, &GPIO_InitStruct);
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	4619      	mov	r1, r3
 8000c82:	4809      	ldr	r0, [pc, #36]	@ (8000ca8 <HAL_ADC_MspInit+0xe4>)
 8000c84:	f003 f936 	bl	8003ef4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f002 fdc7 	bl	8003820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000c92:	2012      	movs	r0, #18
 8000c94:	f002 fdf0 	bl	8003878 <HAL_NVIC_EnableIRQ>
}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	@ 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40012400 	.word	0x40012400
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	40012800 	.word	0x40012800

08000cb0 <MX_AS5048A_1_Init>:
#include "spi.h"

AS5048A_HandleTypeDef as5048a_1;

void MX_AS5048A_1_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
    as5048a_1.Init.CS_GPIO_Port = ENCODER_CS_GPIO_Port;
 8000cb4:	4b09      	ldr	r3, [pc, #36]	@ (8000cdc <MX_AS5048A_1_Init+0x2c>)
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <MX_AS5048A_1_Init+0x30>)
 8000cb8:	605a      	str	r2, [r3, #4]
    as5048a_1.Init.CS_Pin = ENCODER_CS_Pin;
 8000cba:	4b08      	ldr	r3, [pc, #32]	@ (8000cdc <MX_AS5048A_1_Init+0x2c>)
 8000cbc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000cc0:	811a      	strh	r2, [r3, #8]
    as5048a_1.Init.SPI_HandlerInstance = &hspi2;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <MX_AS5048A_1_Init+0x2c>)
 8000cc4:	4a07      	ldr	r2, [pc, #28]	@ (8000ce4 <MX_AS5048A_1_Init+0x34>)
 8000cc6:	601a      	str	r2, [r3, #0]

    if (AS5048A_Init(&as5048a_1) != AS5048A_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <MX_AS5048A_1_Init+0x2c>)
 8000cca:	f000 fed0 	bl	8001a6e <AS5048A_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_AS5048A_1_Init+0x28>
    {
        Error_Handler();
 8000cd4:	f000 fae6 	bl	80012a4 <Error_Handler>
    }
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000e0 	.word	0x200000e0
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	20000250 	.word	0x20000250

08000ce8 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000cee:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <MX_CAN_Init+0x7c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 8000cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000cf8:	4b19      	ldr	r3, [pc, #100]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000d04:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d08:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d0c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d10:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000d14:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d16:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d3a:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d3c:	f001 fee2 	bl	8002b04 <HAL_CAN_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d46:	f000 faad 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

    if (HAL_CAN_Start(&hcan) != HAL_OK)
 8000d4a:	4805      	ldr	r0, [pc, #20]	@ (8000d60 <MX_CAN_Init+0x78>)
 8000d4c:	f002 f8f2 	bl	8002f34 <HAL_CAN_Start>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_CAN_Init+0x72>
    {
        /* Start Error */
        Error_Handler();
 8000d56:	f000 faa5 	bl	80012a4 <Error_Handler>
    }

  /* USER CODE END CAN_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	20000100 	.word	0x20000100
 8000d64:	40006400 	.word	0x40006400

08000d68 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b088      	sub	sp, #32
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0310 	add.w	r3, r7, #16
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a20      	ldr	r2, [pc, #128]	@ (8000e04 <HAL_CAN_MspInit+0x9c>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d139      	bne.n	8000dfc <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d8a:	69db      	ldr	r3, [r3, #28]
 8000d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d92:	61d3      	str	r3, [r2, #28]
 8000d94:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b19      	ldr	r3, [pc, #100]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a18      	ldr	r2, [pc, #96]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b16      	ldr	r3, [pc, #88]	@ (8000e08 <HAL_CAN_MspInit+0xa0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000db8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc6:	f107 0310 	add.w	r3, r7, #16
 8000dca:	4619      	mov	r1, r3
 8000dcc:	480f      	ldr	r0, [pc, #60]	@ (8000e0c <HAL_CAN_MspInit+0xa4>)
 8000dce:	f003 f891 	bl	8003ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <HAL_CAN_MspInit+0xa4>)
 8000de8:	f003 f884 	bl	8003ef4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2102      	movs	r1, #2
 8000df0:	2014      	movs	r0, #20
 8000df2:	f002 fd15 	bl	8003820 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000df6:	2014      	movs	r0, #20
 8000df8:	f002 fd3e 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40006400 	.word	0x40006400
 8000e08:	40021000 	.word	0x40021000
 8000e0c:	40010800 	.word	0x40010800

08000e10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e16:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <MX_DMA_Init+0x38>)
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000e48 <MX_DMA_Init+0x38>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6153      	str	r3, [r2, #20]
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <MX_DMA_Init+0x38>)
 8000e24:	695b      	ldr	r3, [r3, #20]
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e2e:	2200      	movs	r2, #0
 8000e30:	2100      	movs	r1, #0
 8000e32:	2011      	movs	r0, #17
 8000e34:	f002 fcf4 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e38:	2011      	movs	r0, #17
 8000e3a:	f002 fd1d 	bl	8003878 <HAL_NVIC_EnableIRQ>

}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40021000 	.word	0x40021000

08000e4c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a52      	ldr	r2, [pc, #328]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e66:	f043 0310 	orr.w	r3, r3, #16
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b50      	ldr	r3, [pc, #320]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0310 	and.w	r3, r3, #16
 8000e74:	60fb      	str	r3, [r7, #12]
 8000e76:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e78:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e7e:	f043 0320 	orr.w	r3, r3, #32
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b4a      	ldr	r3, [pc, #296]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0320 	and.w	r3, r3, #32
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e90:	4b47      	ldr	r3, [pc, #284]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a46      	ldr	r2, [pc, #280]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e96:	f043 0304 	orr.w	r3, r3, #4
 8000e9a:	6193      	str	r3, [r2, #24]
 8000e9c:	4b44      	ldr	r3, [pc, #272]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	f003 0304 	and.w	r3, r3, #4
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea8:	4b41      	ldr	r3, [pc, #260]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	4a40      	ldr	r2, [pc, #256]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000eae:	f043 0308 	orr.w	r3, r3, #8
 8000eb2:	6193      	str	r3, [r2, #24]
 8000eb4:	4b3e      	ldr	r3, [pc, #248]	@ (8000fb0 <MX_GPIO_Init+0x164>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	603b      	str	r3, [r7, #0]
 8000ebe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f248 4110 	movw	r1, #33808	@ 0x8410
 8000ec6:	483b      	ldr	r0, [pc, #236]	@ (8000fb4 <MX_GPIO_Init+0x168>)
 8000ec8:	f003 fa82 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f241 0114 	movw	r1, #4116	@ 0x1014
 8000ed2:	4839      	ldr	r0, [pc, #228]	@ (8000fb8 <MX_GPIO_Init+0x16c>)
 8000ed4:	f003 fa7c 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ed8:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000edc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee2:	f107 0310 	add.w	r3, r7, #16
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4834      	ldr	r0, [pc, #208]	@ (8000fbc <MX_GPIO_Init+0x170>)
 8000eea:	f003 f803 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LS_1_Pin|LS_2_Pin;
 8000eee:	2303      	movs	r3, #3
 8000ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ef2:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <MX_GPIO_Init+0x174>)
 8000ef4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	482c      	ldr	r0, [pc, #176]	@ (8000fb4 <MX_GPIO_Init+0x168>)
 8000f02:	f002 fff7 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin;
 8000f06:	f248 4310 	movw	r3, #33808	@ 0x8410
 8000f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4825      	ldr	r0, [pc, #148]	@ (8000fb4 <MX_GPIO_Init+0x168>)
 8000f20:	f002 ffe8 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000f24:	f640 7323 	movw	r3, #3875	@ 0xf23
 8000f28:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	4619      	mov	r1, r3
 8000f34:	4820      	ldr	r0, [pc, #128]	@ (8000fb8 <MX_GPIO_Init+0x16c>)
 8000f36:	f002 ffdd 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin;
 8000f3a:	f241 0314 	movw	r3, #4116	@ 0x1014
 8000f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f40:	2301      	movs	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4619      	mov	r1, r3
 8000f52:	4819      	ldr	r0, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0x16c>)
 8000f54:	f002 ffce 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	f107 0310 	add.w	r3, r7, #16
 8000f66:	4619      	mov	r1, r3
 8000f68:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <MX_GPIO_Init+0x168>)
 8000f6a:	f002 ffc3 	bl	8003ef4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVER_SG_TEST_Pin;
 8000f6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVER_SG_TEST_GPIO_Port, &GPIO_InitStruct);
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	4619      	mov	r1, r3
 8000f82:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <MX_GPIO_Init+0x168>)
 8000f84:	f002 ffb6 	bl	8003ef4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	2006      	movs	r0, #6
 8000f8e:	f002 fc47 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f92:	2006      	movs	r0, #6
 8000f94:	f002 fc70 	bl	8003878 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	2007      	movs	r0, #7
 8000f9e:	f002 fc3f 	bl	8003820 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000fa2:	2007      	movs	r0, #7
 8000fa4:	f002 fc68 	bl	8003878 <HAL_NVIC_EnableIRQ>

}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	10310000 	.word	0x10310000

08000fc4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fca:	4a13      	ldr	r2, [pc, #76]	@ (8001018 <MX_I2C1_Init+0x54>)
 8000fcc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <MX_I2C1_Init+0x58>)
 8000fd2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fe2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fe6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_I2C1_Init+0x50>)
 8001002:	f003 fa33 	bl	800446c <HAL_I2C_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800100c:	f000 f94a 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000128 	.word	0x20000128
 8001018:	40005400 	.word	0x40005400
 800101c:	000186a0 	.word	0x000186a0

08001020 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b088      	sub	sp, #32
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a15      	ldr	r2, [pc, #84]	@ (8001090 <HAL_I2C_MspInit+0x70>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d123      	bne.n	8001088 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001040:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 8001042:	699b      	ldr	r3, [r3, #24]
 8001044:	4a13      	ldr	r2, [pc, #76]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 8001046:	f043 0308 	orr.w	r3, r3, #8
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f003 0308 	and.w	r3, r3, #8
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001058:	23c0      	movs	r3, #192	@ 0xc0
 800105a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001060:	2303      	movs	r3, #3
 8001062:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	4619      	mov	r1, r3
 800106a:	480b      	ldr	r0, [pc, #44]	@ (8001098 <HAL_I2C_MspInit+0x78>)
 800106c:	f002 ff42 	bl	8003ef4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001070:	4b08      	ldr	r3, [pc, #32]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	4a07      	ldr	r2, [pc, #28]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 8001076:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800107a:	61d3      	str	r3, [r2, #28]
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_I2C_MspInit+0x74>)
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	40010c00 	.word	0x40010c00
 800109c:	00000000 	.word	0x00000000

080010a0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80010a6:	f000 ff27 	bl	8001ef8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80010aa:	f000 f891 	bl	80011d0 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80010ae:	f7ff fecd 	bl	8000e4c <MX_GPIO_Init>
    MX_DMA_Init();
 80010b2:	f7ff fead 	bl	8000e10 <MX_DMA_Init>
    MX_CAN_Init();
 80010b6:	f7ff fe17 	bl	8000ce8 <MX_CAN_Init>
    MX_I2C1_Init();
 80010ba:	f7ff ff83 	bl	8000fc4 <MX_I2C1_Init>
    MX_SPI1_Init();
 80010be:	f000 f92d 	bl	800131c <MX_SPI1_Init>
    MX_SPI2_Init();
 80010c2:	f000 f961 	bl	8001388 <MX_SPI2_Init>
    MX_ADC1_Init();
 80010c6:	f7ff fcc1 	bl	8000a4c <MX_ADC1_Init>
    MX_ADC2_Init();
 80010ca:	f7ff fd1d 	bl	8000b08 <MX_ADC2_Init>
    MX_TIM2_Init();
 80010ce:	f000 fae1 	bl	8001694 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    MX_TMC_2590_1_Init();
 80010d2:	f000 fbe7 	bl	80018a4 <MX_TMC_2590_1_Init>
    MX_AS5048A_1_Init();
 80010d6:	f7ff fdeb 	bl	8000cb0 <MX_AS5048A_1_Init>
    MX_PID_1_Init();
 80010da:	f000 f8f3 	bl	80012c4 <MX_PID_1_Init>

    TxHeader.ExtId = 0x01;
 80010de:	4b34      	ldr	r3, [pc, #208]	@ (80011b0 <main+0x110>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80010e4:	4b32      	ldr	r3, [pc, #200]	@ (80011b0 <main+0x110>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_EXT;
 80010ea:	4b31      	ldr	r3, [pc, #196]	@ (80011b0 <main+0x110>)
 80010ec:	2204      	movs	r2, #4
 80010ee:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = 2;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	@ (80011b0 <main+0x110>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	611a      	str	r2, [r3, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	@ (80011b0 <main+0x110>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	751a      	strb	r2, [r3, #20]
    TxData[0] = 0x00;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <main+0x114>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
    TxData[1] = 0x00;
 8001102:	4b2c      	ldr	r3, [pc, #176]	@ (80011b4 <main+0x114>)
 8001104:	2200      	movs	r2, #0
 8001106:	705a      	strb	r2, [r3, #1]

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
//    TMC_2590_DeInit(&tmc_2590_1);
    // flush out undefined angle value
    AS5048A_ReadAngle(&as5048a_1);
 8001108:	482b      	ldr	r0, [pc, #172]	@ (80011b8 <main+0x118>)
 800110a:	f000 fce3 	bl	8001ad4 <AS5048A_ReadAngle>
    AS5048A_ReadAngle(&as5048a_1);
 800110e:	482a      	ldr	r0, [pc, #168]	@ (80011b8 <main+0x118>)
 8001110:	f000 fce0 	bl	8001ad4 <AS5048A_ReadAngle>
    AS5048A_ReadAngle(&as5048a_1);
 8001114:	4828      	ldr	r0, [pc, #160]	@ (80011b8 <main+0x118>)
 8001116:	f000 fcdd 	bl	8001ad4 <AS5048A_ReadAngle>

    PID_ChangeSetPoint(&pid_1, 185.0);
 800111a:	a323      	add	r3, pc, #140	@ (adr r3, 80011a8 <main+0x108>)
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	4826      	ldr	r0, [pc, #152]	@ (80011bc <main+0x11c>)
 8001122:	f000 fec5 	bl	8001eb0 <PID_ChangeSetPoint>
    PID_Update(&pid_1);
 8001126:	4825      	ldr	r0, [pc, #148]	@ (80011bc <main+0x11c>)
 8001128:	f000 fdfa 	bl	8001d20 <PID_Update>

    uint32_t i = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	607b      	str	r3, [r7, #4]
    while (1)
    {
//        while (TMC_2590_MoveSteps(&tmc_2590_1, (int16_t) pid_1.output)
//                != TMC_2590_OK)
//            ;
        TMC_2590_MoveSteps(&tmc_2590_1, (int16_t) pid_1.output);
 8001130:	4b22      	ldr	r3, [pc, #136]	@ (80011bc <main+0x11c>)
 8001132:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fc5f 	bl	80009fc <__aeabi_d2iz>
 800113e:	4603      	mov	r3, r0
 8001140:	b21b      	sxth	r3, r3
 8001142:	4619      	mov	r1, r3
 8001144:	481e      	ldr	r0, [pc, #120]	@ (80011c0 <main+0x120>)
 8001146:	f006 fc0b 	bl	8007960 <TMC_2590_MoveSteps>
        while (AS5048A_ReadAngle(&as5048a_1) != AS5048A_OK)
 800114a:	bf00      	nop
 800114c:	481a      	ldr	r0, [pc, #104]	@ (80011b8 <main+0x118>)
 800114e:	f000 fcc1 	bl	8001ad4 <AS5048A_ReadAngle>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1f9      	bne.n	800114c <main+0xac>
            ;
        PID_Update(&pid_1);
 8001158:	4818      	ldr	r0, [pc, #96]	@ (80011bc <main+0x11c>)
 800115a:	f000 fde1 	bl	8001d20 <PID_Update>

        if (i % 1000 == 0)
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	4b18      	ldr	r3, [pc, #96]	@ (80011c4 <main+0x124>)
 8001162:	fba3 1302 	umull	r1, r3, r3, r2
 8001166:	099b      	lsrs	r3, r3, #6
 8001168:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800116c:	fb01 f303 	mul.w	r3, r1, r3
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b00      	cmp	r3, #0
 8001174:	d112      	bne.n	800119c <main+0xfc>
        {
            TxData[0] = as5048a_1.Angle & 0xff;
 8001176:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <main+0x118>)
 8001178:	89db      	ldrh	r3, [r3, #14]
 800117a:	b29b      	uxth	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <main+0x114>)
 8001180:	701a      	strb	r2, [r3, #0]
            TxData[1] = (as5048a_1.Angle & 0xff00) >> 8;
 8001182:	4b0d      	ldr	r3, [pc, #52]	@ (80011b8 <main+0x118>)
 8001184:	89db      	ldrh	r3, [r3, #14]
 8001186:	b29b      	uxth	r3, r3
 8001188:	121b      	asrs	r3, r3, #8
 800118a:	b2da      	uxtb	r2, r3
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <main+0x114>)
 800118e:	705a      	strb	r2, [r3, #1]
            HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8001190:	4b0d      	ldr	r3, [pc, #52]	@ (80011c8 <main+0x128>)
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <main+0x114>)
 8001194:	4906      	ldr	r1, [pc, #24]	@ (80011b0 <main+0x110>)
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <main+0x12c>)
 8001198:	f001 ff10 	bl	8002fbc <HAL_CAN_AddTxMessage>
        }

        i++;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3301      	adds	r3, #1
 80011a0:	607b      	str	r3, [r7, #4]
        TMC_2590_MoveSteps(&tmc_2590_1, (int16_t) pid_1.output);
 80011a2:	e7c5      	b.n	8001130 <main+0x90>
 80011a4:	f3af 8000 	nop.w
 80011a8:	00000000 	.word	0x00000000
 80011ac:	40672000 	.word	0x40672000
 80011b0:	2000017c 	.word	0x2000017c
 80011b4:	20000194 	.word	0x20000194
 80011b8:	200000e0 	.word	0x200000e0
 80011bc:	200001a0 	.word	0x200001a0
 80011c0:	20000338 	.word	0x20000338
 80011c4:	10624dd3 	.word	0x10624dd3
 80011c8:	2000019c 	.word	0x2000019c
 80011cc:	20000100 	.word	0x20000100

080011d0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b094      	sub	sp, #80	@ 0x50
 80011d4:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	2228      	movs	r2, #40	@ 0x28
 80011dc:	2100      	movs	r1, #0
 80011de:	4618      	mov	r0, r3
 80011e0:	f006 ff2a 	bl	8008038 <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001200:	2301      	movs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800120a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800120e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	2301      	movs	r3, #1
 8001212:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001214:	2302      	movs	r3, #2
 8001216:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001218:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800121c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800121e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001222:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001224:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001228:	4618      	mov	r0, r3
 800122a:	f003 fae1 	bl	80047f0 <HAL_RCC_OscConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0x68>
    {
        Error_Handler();
 8001234:	f000 f836 	bl	80012a4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001238:	230f      	movs	r3, #15
 800123a:	617b      	str	r3, [r7, #20]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800123c:	2302      	movs	r3, #2
 800123e:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001248:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f003 fe39 	bl	8004ecc <HAL_RCC_ClockConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8001260:	f000 f820 	bl	80012a4 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001264:	2302      	movs	r3, #2
 8001266:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800126c:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4618      	mov	r0, r3
 8001272:	f004 f84d 	bl	8005310 <HAL_RCCEx_PeriphCLKConfig>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 800127c:	f000 f812 	bl	80012a4 <Error_Handler>
    }
}
 8001280:	bf00      	nop
 8001282:	3750      	adds	r7, #80	@ 0x50
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    TMC_2590_TIM_PWM_PulseFinishedCallback(&tmc_2590_1, htim);
 8001290:	6879      	ldr	r1, [r7, #4]
 8001292:	4803      	ldr	r0, [pc, #12]	@ (80012a0 <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8001294:	f006 fbf1 	bl	8007a7a <TMC_2590_TIM_PWM_PulseFinishedCallback>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	20000338 	.word	0x20000338

080012a4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <Error_Handler+0x8>

080012b0 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <MX_PID_1_Init>:
#include "as5048a.h"

PID_HandleTypeDef pid_1;

void MX_PID_1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
    // todo convert the angle into a double
    pid_1.Init.feedback = &(as5048a_1.Angle_double);
 80012c8:	4b10      	ldr	r3, [pc, #64]	@ (800130c <MX_PID_1_Init+0x48>)
 80012ca:	4a11      	ldr	r2, [pc, #68]	@ (8001310 <MX_PID_1_Init+0x4c>)
 80012cc:	601a      	str	r2, [r3, #0]
    pid_1.Init.kp = 1;
 80012ce:	490f      	ldr	r1, [pc, #60]	@ (800130c <MX_PID_1_Init+0x48>)
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001314 <MX_PID_1_Init+0x50>)
 80012d6:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid_1.Init.ki = 0;
 80012da:	490c      	ldr	r1, [pc, #48]	@ (800130c <MX_PID_1_Init+0x48>)
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid_1.Init.kd = 0;
 80012e8:	4908      	ldr	r1, [pc, #32]	@ (800130c <MX_PID_1_Init+0x48>)
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
    pid_1.Init.max_output_abs = 1000;
 80012f6:	4905      	ldr	r1, [pc, #20]	@ (800130c <MX_PID_1_Init+0x48>)
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_PID_1_Init+0x54>)
 80012fe:	e9c1 2308 	strd	r2, r3, [r1, #32]

    PID_Init(&pid_1);
 8001302:	4802      	ldr	r0, [pc, #8]	@ (800130c <MX_PID_1_Init+0x48>)
 8001304:	f000 fcea 	bl	8001cdc <PID_Init>

//    if (PID_Init(&pid_1) != PID_OK)
//    {
//        Error_Handler();
//    }
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}
 800130c:	200001a0 	.word	0x200001a0
 8001310:	200000f0 	.word	0x200000f0
 8001314:	3ff00000 	.word	0x3ff00000
 8001318:	408f4000 	.word	0x408f4000

0800131c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001320:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001322:	4a18      	ldr	r2, [pc, #96]	@ (8001384 <MX_SPI1_Init+0x68>)
 8001324:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001326:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001328:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800132c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001330:	2200      	movs	r2, #0
 8001332:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800133a:	4b11      	ldr	r3, [pc, #68]	@ (8001380 <MX_SPI1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001340:	4b0f      	ldr	r3, [pc, #60]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001346:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001348:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800134c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800134e:	4b0c      	ldr	r3, [pc, #48]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001350:	2220      	movs	r2, #32
 8001352:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001356:	2200      	movs	r2, #0
 8001358:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_SPI1_Init+0x64>)
 800135c:	2200      	movs	r2, #0
 800135e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001360:	4b07      	ldr	r3, [pc, #28]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001362:	2200      	movs	r2, #0
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_SPI1_Init+0x64>)
 8001368:	220a      	movs	r2, #10
 800136a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800136c:	4804      	ldr	r0, [pc, #16]	@ (8001380 <MX_SPI1_Init+0x64>)
 800136e:	f004 f8d9 	bl	8005524 <HAL_SPI_Init>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001378:	f7ff ff94 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200001f8 	.word	0x200001f8
 8001384:	40013000 	.word	0x40013000

08001388 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_SPI2_Init+0x64>)
 800138e:	4a18      	ldr	r2, [pc, #96]	@ (80013f0 <MX_SPI2_Init+0x68>)
 8001390:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001392:	4b16      	ldr	r3, [pc, #88]	@ (80013ec <MX_SPI2_Init+0x64>)
 8001394:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001398:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_SPI2_Init+0x64>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a6:	4b11      	ldr	r3, [pc, #68]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80013ac:	4b0f      	ldr	r3, [pc, #60]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013b8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80013ba:	4b0c      	ldr	r3, [pc, #48]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013bc:	2220      	movs	r2, #32
 80013be:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013c0:	4b0a      	ldr	r3, [pc, #40]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013d4:	220a      	movs	r2, #10
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80013d8:	4804      	ldr	r0, [pc, #16]	@ (80013ec <MX_SPI2_Init+0x64>)
 80013da:	f004 f8a3 	bl	8005524 <HAL_SPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80013e4:	f7ff ff5e 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013e8:	bf00      	nop
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000250 	.word	0x20000250
 80013f0:	40003800 	.word	0x40003800

080013f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b08a      	sub	sp, #40	@ 0x28
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fc:	f107 0318 	add.w	r3, r7, #24
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a37      	ldr	r2, [pc, #220]	@ (80014ec <HAL_SPI_MspInit+0xf8>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d130      	bne.n	8001476 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001414:	4b36      	ldr	r3, [pc, #216]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	4a35      	ldr	r2, [pc, #212]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800141a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800141e:	6193      	str	r3, [r2, #24]
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001422:	699b      	ldr	r3, [r3, #24]
 8001424:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800142e:	699b      	ldr	r3, [r3, #24]
 8001430:	4a2f      	ldr	r2, [pc, #188]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6193      	str	r3, [r2, #24]
 8001438:	4b2d      	ldr	r3, [pc, #180]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	f003 0304 	and.w	r3, r3, #4
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SCK_Pin|DRIVER_MOSI_Pin;
 8001444:	23a0      	movs	r3, #160	@ 0xa0
 8001446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2303      	movs	r3, #3
 800144e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001450:	f107 0318 	add.w	r3, r7, #24
 8001454:	4619      	mov	r1, r3
 8001456:	4827      	ldr	r0, [pc, #156]	@ (80014f4 <HAL_SPI_MspInit+0x100>)
 8001458:	f002 fd4c 	bl	8003ef4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_MISO_Pin;
 800145c:	2340      	movs	r3, #64	@ 0x40
 800145e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DRIVER_MISO_GPIO_Port, &GPIO_InitStruct);
 8001468:	f107 0318 	add.w	r3, r7, #24
 800146c:	4619      	mov	r1, r3
 800146e:	4821      	ldr	r0, [pc, #132]	@ (80014f4 <HAL_SPI_MspInit+0x100>)
 8001470:	f002 fd40 	bl	8003ef4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001474:	e036      	b.n	80014e4 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <HAL_SPI_MspInit+0x104>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d131      	bne.n	80014e4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001482:	69db      	ldr	r3, [r3, #28]
 8001484:	4a1a      	ldr	r2, [pc, #104]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 8001486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800148a:	61d3      	str	r3, [r2, #28]
 800148c:	4b18      	ldr	r3, [pc, #96]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001498:	4b15      	ldr	r3, [pc, #84]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	4a14      	ldr	r2, [pc, #80]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <HAL_SPI_MspInit+0xfc>)
 80014a6:	699b      	ldr	r3, [r3, #24]
 80014a8:	f003 0308 	and.w	r3, r3, #8
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_SCK_Pin|ENCODER_MOSI_Pin;
 80014b0:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80014b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0318 	add.w	r3, r7, #24
 80014c2:	4619      	mov	r1, r3
 80014c4:	480d      	ldr	r0, [pc, #52]	@ (80014fc <HAL_SPI_MspInit+0x108>)
 80014c6:	f002 fd15 	bl	8003ef4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_MISO_Pin;
 80014ca:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d0:	2300      	movs	r3, #0
 80014d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_MISO_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 0318 	add.w	r3, r7, #24
 80014dc:	4619      	mov	r1, r3
 80014de:	4807      	ldr	r0, [pc, #28]	@ (80014fc <HAL_SPI_MspInit+0x108>)
 80014e0:	f002 fd08 	bl	8003ef4 <HAL_GPIO_Init>
}
 80014e4:	bf00      	nop
 80014e6:	3728      	adds	r7, #40	@ 0x28
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013000 	.word	0x40013000
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010800 	.word	0x40010800
 80014f8:	40003800 	.word	0x40003800
 80014fc:	40010c00 	.word	0x40010c00

08001500 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_MspInit+0x5c>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	4a14      	ldr	r2, [pc, #80]	@ (800155c <HAL_MspInit+0x5c>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6193      	str	r3, [r2, #24]
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_MspInit+0x5c>)
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_MspInit+0x5c>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	4a0e      	ldr	r2, [pc, #56]	@ (800155c <HAL_MspInit+0x5c>)
 8001524:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001528:	61d3      	str	r3, [r2, #28]
 800152a:	4b0c      	ldr	r3, [pc, #48]	@ (800155c <HAL_MspInit+0x5c>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001536:	4b0a      	ldr	r3, [pc, #40]	@ (8001560 <HAL_MspInit+0x60>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	4a04      	ldr	r2, [pc, #16]	@ (8001560 <HAL_MspInit+0x60>)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	40021000 	.word	0x40021000
 8001560:	40010000 	.word	0x40010000

08001564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <NMI_Handler+0x4>

0800156c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001570:	bf00      	nop
 8001572:	e7fd      	b.n	8001570 <HardFault_Handler+0x4>

08001574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001578:	bf00      	nop
 800157a:	e7fd      	b.n	8001578 <MemManage_Handler+0x4>

0800157c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001580:	bf00      	nop
 8001582:	e7fd      	b.n	8001580 <BusFault_Handler+0x4>

08001584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001588:	bf00      	nop
 800158a:	e7fd      	b.n	8001588 <UsageFault_Handler+0x4>

0800158c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	bc80      	pop	{r7}
 8001596:	4770      	bx	lr

08001598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr

080015a4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a8:	bf00      	nop
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b4:	f000 fce6 	bl	8001f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f002 ff31 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}

080015ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 80015ce:	2002      	movs	r0, #2
 80015d0:	f002 ff2a 	bl	8004428 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <DMA1_Channel7_IRQHandler+0x10>)
 80015de:	f002 fb55 	bl	8003c8c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002f4 	.word	0x200002f4

080015ec <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <ADC1_2_IRQHandler+0x14>)
 80015f2:	f000 fe71 	bl	80022d8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80015f6:	4803      	ldr	r0, [pc, #12]	@ (8001604 <ADC1_2_IRQHandler+0x18>)
 80015f8:	f000 fe6e 	bl	80022d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80015fc:	bf00      	nop
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	2000007c 	.word	0x2000007c
 8001604:	200000ac 	.word	0x200000ac

08001608 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800160e:	f001 fdef 	bl	80031f0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000100 	.word	0x20000100

0800161c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001624:	4a14      	ldr	r2, [pc, #80]	@ (8001678 <_sbrk+0x5c>)
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <_sbrk+0x60>)
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001630:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <_sbrk+0x64>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001638:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <_sbrk+0x64>)
 800163a:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <_sbrk+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800163e:	4b10      	ldr	r3, [pc, #64]	@ (8001680 <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	693a      	ldr	r2, [r7, #16]
 8001648:	429a      	cmp	r2, r3
 800164a:	d207      	bcs.n	800165c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800164c:	f006 fd0c 	bl	8008068 <__errno>
 8001650:	4603      	mov	r3, r0
 8001652:	220c      	movs	r2, #12
 8001654:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	e009      	b.n	8001670 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800165c:	4b08      	ldr	r3, [pc, #32]	@ (8001680 <_sbrk+0x64>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <_sbrk+0x64>)
 800166c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20005000 	.word	0x20005000
 800167c:	00000400 	.word	0x00000400
 8001680:	200002a8 	.word	0x200002a8
 8001684:	200004f8 	.word	0x200004f8

08001688 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	bc80      	pop	{r7}
 8001692:	4770      	bx	lr

08001694 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08e      	sub	sp, #56	@ 0x38
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800169a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016a8:	f107 0320 	add.w	r3, r7, #32
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
 80016c0:	615a      	str	r2, [r3, #20]
 80016c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c4:	4b2d      	ldr	r3, [pc, #180]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 80016cc:	4b2b      	ldr	r3, [pc, #172]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016ce:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80016d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b29      	ldr	r3, [pc, #164]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80016da:	4b28      	ldr	r3, [pc, #160]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016dc:	2263      	movs	r2, #99	@ 0x63
 80016de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b26      	ldr	r3, [pc, #152]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b25      	ldr	r3, [pc, #148]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ec:	4823      	ldr	r0, [pc, #140]	@ (800177c <MX_TIM2_Init+0xe8>)
 80016ee:	f004 faf9 	bl	8005ce4 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016f8:	f7ff fdd4 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001700:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001706:	4619      	mov	r1, r3
 8001708:	481c      	ldr	r0, [pc, #112]	@ (800177c <MX_TIM2_Init+0xe8>)
 800170a:	f005 f8e3 	bl	80068d4 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001714:	f7ff fdc6 	bl	80012a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001718:	4818      	ldr	r0, [pc, #96]	@ (800177c <MX_TIM2_Init+0xe8>)
 800171a:	f004 fb9b 	bl	8005e54 <HAL_TIM_PWM_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001724:	f7ff fdbe 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001728:	2300      	movs	r3, #0
 800172a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172c:	2300      	movs	r3, #0
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001730:	f107 0320 	add.w	r3, r7, #32
 8001734:	4619      	mov	r1, r3
 8001736:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_TIM2_Init+0xe8>)
 8001738:	f005 ffc4 	bl	80076c4 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001742:	f7ff fdaf 	bl	80012a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001746:	2370      	movs	r3, #112	@ 0x70
 8001748:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800174a:	2300      	movs	r3, #0
 800174c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174e:	2300      	movs	r3, #0
 8001750:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2204      	movs	r2, #4
 800175a:	4619      	mov	r1, r3
 800175c:	4807      	ldr	r0, [pc, #28]	@ (800177c <MX_TIM2_Init+0xe8>)
 800175e:	f004 ff47 	bl	80065f0 <HAL_TIM_PWM_ConfigChannel>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001768:	f7ff fd9c 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800176c:	4803      	ldr	r0, [pc, #12]	@ (800177c <MX_TIM2_Init+0xe8>)
 800176e:	f000 f855 	bl	800181c <HAL_TIM_MspPostInit>

}
 8001772:	bf00      	nop
 8001774:	3738      	adds	r7, #56	@ 0x38
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200002ac 	.word	0x200002ac

08001780 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001790:	d139      	bne.n	8001806 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001792:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <HAL_TIM_Base_MspInit+0x90>)
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	4a1e      	ldr	r2, [pc, #120]	@ (8001810 <HAL_TIM_Base_MspInit+0x90>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	61d3      	str	r3, [r2, #28]
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_TIM_Base_MspInit+0x90>)
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001818 <HAL_TIM_Base_MspInit+0x98>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017b6:	4b17      	ldr	r3, [pc, #92]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017bc:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017be:	2280      	movs	r2, #128	@ 0x80
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017c2:	4b14      	ldr	r3, [pc, #80]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 80017de:	480d      	ldr	r0, [pc, #52]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017e0:	f002 f86e 	bl	80038c0 <HAL_DMA_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 80017ea:	f7ff fd5b 	bl	80012a4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80017f4:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 80017fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <HAL_TIM_Base_MspInit+0x94>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
 8001814:	200002f4 	.word	0x200002f4
 8001818:	40020080 	.word	0x40020080

0800181c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800183a:	d129      	bne.n	8001890 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b16      	ldr	r3, [pc, #88]	@ (8001898 <HAL_TIM_MspPostInit+0x7c>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	4a15      	ldr	r2, [pc, #84]	@ (8001898 <HAL_TIM_MspPostInit+0x7c>)
 8001842:	f043 0308 	orr.w	r3, r3, #8
 8001846:	6193      	str	r3, [r2, #24]
 8001848:	4b13      	ldr	r3, [pc, #76]	@ (8001898 <HAL_TIM_MspPostInit+0x7c>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	f003 0308 	and.w	r3, r3, #8
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DRIVER_STEP_PWM_Pin;
 8001854:	2308      	movs	r3, #8
 8001856:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	2302      	movs	r3, #2
 800185e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DRIVER_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4619      	mov	r1, r3
 8001866:	480d      	ldr	r0, [pc, #52]	@ (800189c <HAL_TIM_MspPostInit+0x80>)
 8001868:	f002 fb44 	bl	8003ef4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <HAL_TIM_MspPostInit+0x84>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001888:	61fb      	str	r3, [r7, #28]
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <HAL_TIM_MspPostInit+0x84>)
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */
//    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	40021000 	.word	0x40021000
 800189c:	40010c00 	.word	0x40010c00
 80018a0:	40010000 	.word	0x40010000

080018a4 <MX_TMC_2590_1_Init>:
#include "tim.h"

TMC_2590_HandleTypeDef tmc_2590_1;

void MX_TMC_2590_1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
    tmc_2590_1.Init.SPI_HandlerInstance = &hspi1;
 80018a8:	4b59      	ldr	r3, [pc, #356]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018aa:	4a5a      	ldr	r2, [pc, #360]	@ (8001a14 <MX_TMC_2590_1_Init+0x170>)
 80018ac:	601a      	str	r2, [r3, #0]
    tmc_2590_1.Init.CS_GPIO_Port = DRIVER_CS_GPIO_Port;
 80018ae:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018b0:	4a59      	ldr	r2, [pc, #356]	@ (8001a18 <MX_TMC_2590_1_Init+0x174>)
 80018b2:	605a      	str	r2, [r3, #4]
    tmc_2590_1.Init.CS_Pin = DRIVER_CS_Pin;
 80018b4:	4b56      	ldr	r3, [pc, #344]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018b6:	2210      	movs	r2, #16
 80018b8:	811a      	strh	r2, [r3, #8]
    tmc_2590_1.Init.ENN_GPIO_Port = DRIVER_ENN_GPIO_Port;
 80018ba:	4b55      	ldr	r3, [pc, #340]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018bc:	4a56      	ldr	r2, [pc, #344]	@ (8001a18 <MX_TMC_2590_1_Init+0x174>)
 80018be:	60da      	str	r2, [r3, #12]
    tmc_2590_1.Init.ENN_Pin = DRIVER_ENN_Pin;
 80018c0:	4b53      	ldr	r3, [pc, #332]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018c6:	821a      	strh	r2, [r3, #16]
    tmc_2590_1.Init.use_st_alone = 0;
 80018c8:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	749a      	strb	r2, [r3, #18]
    tmc_2590_1.Init.ST_ALONE_GPIO_Port = DRIVER_ST_ALONE_GPIO_Port;
 80018ce:	4b50      	ldr	r3, [pc, #320]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018d0:	4a51      	ldr	r2, [pc, #324]	@ (8001a18 <MX_TMC_2590_1_Init+0x174>)
 80018d2:	615a      	str	r2, [r3, #20]
    tmc_2590_1.Init.ST_ALONE_Pin = DRIVER_ST_ALONE_Pin;
 80018d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018d6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018da:	831a      	strh	r2, [r3, #24]
    tmc_2590_1.Init.DIR_GPIO_Port = DRIVER_DIR_GPIO_Port;
 80018dc:	4b4c      	ldr	r3, [pc, #304]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018de:	4a4f      	ldr	r2, [pc, #316]	@ (8001a1c <MX_TMC_2590_1_Init+0x178>)
 80018e0:	61da      	str	r2, [r3, #28]
    tmc_2590_1.Init.DIR_Pin = DRIVER_DIR_Pin;
 80018e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018e4:	2210      	movs	r2, #16
 80018e6:	841a      	strh	r2, [r3, #32]
    tmc_2590_1.Init.use_pwm = 1;
 80018e8:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//    tmc_2590_1.Init.STEP_GPIO_Port = ;
//    tmc_2590_1.Init.STEP_Pin = ;
    tmc_2590_1.Init.STEP_Tim = &htim2;
 80018f0:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018f2:	4a4b      	ldr	r2, [pc, #300]	@ (8001a20 <MX_TMC_2590_1_Init+0x17c>)
 80018f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    tmc_2590_1.Init.STEP_Channel = TIM_CHANNEL_2;
 80018f6:	4b46      	ldr	r3, [pc, #280]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018f8:	2204      	movs	r2, #4
 80018fa:	631a      	str	r2, [r3, #48]	@ 0x30
    tmc_2590_1.Init.max_steps = 1000;
 80018fc:	4b44      	ldr	r3, [pc, #272]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80018fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001902:	869a      	strh	r2, [r3, #52]	@ 0x34
    tmc_2590_1.Init.SG_TST_GPIO_Port = DRIVER_SG_TEST_GPIO_Port;
 8001904:	4b42      	ldr	r3, [pc, #264]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001906:	4a44      	ldr	r2, [pc, #272]	@ (8001a18 <MX_TMC_2590_1_Init+0x174>)
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38
    tmc_2590_1.Init.SG_TST_Pin = DRIVER_SG_TEST_Pin;
 800190a:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001910:	879a      	strh	r2, [r3, #60]	@ 0x3c

    // this data should stored in EEPROM
    tmc_2590_1.ConfRegisters.CHOPCONF.chm = 0b0;
 8001912:	4b3f      	ldr	r3, [pc, #252]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    tmc_2590_1.ConfRegisters.CHOPCONF.hdec = 0b00;
 800191a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    tmc_2590_1.ConfRegisters.CHOPCONF.hend = 0b0100;
 8001922:	4b3b      	ldr	r3, [pc, #236]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001924:	2204      	movs	r2, #4
 8001926:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    tmc_2590_1.ConfRegisters.CHOPCONF.hstrt = 0b110;
 800192a:	4b39      	ldr	r3, [pc, #228]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800192c:	2206      	movs	r2, #6
 800192e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    tmc_2590_1.ConfRegisters.CHOPCONF.rndtf = 0b0;
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
    tmc_2590_1.ConfRegisters.CHOPCONF.tbl = 0b10;
 800193a:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800193c:	2202      	movs	r2, #2
 800193e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
    tmc_2590_1.ConfRegisters.CHOPCONF.toff = 0b100;
 8001942:	4b33      	ldr	r3, [pc, #204]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001944:	2204      	movs	r2, #4
 8001946:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59

    tmc_2590_1.ConfRegisters.DRVCONF.dis_s2g = 0b0;
 800194a:	4b31      	ldr	r3, [pc, #196]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    tmc_2590_1.ConfRegisters.DRVCONF.en_pfd = 0b1;
 8001952:	4b2f      	ldr	r3, [pc, #188]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001954:	2201      	movs	r2, #1
 8001956:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    tmc_2590_1.ConfRegisters.DRVCONF.en_s2vs = 0b1;
 800195a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800195c:	2201      	movs	r2, #1
 800195e:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    tmc_2590_1.ConfRegisters.DRVCONF.otsens = 0b0;
 8001962:	4b2b      	ldr	r3, [pc, #172]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001964:	2200      	movs	r2, #0
 8001966:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    tmc_2590_1.ConfRegisters.DRVCONF.rdsel = 0b11;
 800196a:	4b29      	ldr	r3, [pc, #164]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    tmc_2590_1.ConfRegisters.DRVCONF.sdoff = 0b0;
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    tmc_2590_1.ConfRegisters.DRVCONF.shrtsens = 0b1;
 800197a:	4b25      	ldr	r3, [pc, #148]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    tmc_2590_1.ConfRegisters.DRVCONF.slp = 0b11110;
 8001982:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001984:	221e      	movs	r2, #30
 8001986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    tmc_2590_1.ConfRegisters.DRVCONF.ts2g = 0b00;
 800198a:	4b21      	ldr	r3, [pc, #132]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    tmc_2590_1.ConfRegisters.DRVCONF.tst = 0b0;
 8001992:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 8001994:	2200      	movs	r2, #0
 8001996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    tmc_2590_1.ConfRegisters.DRVCONF.vsense = 0b0;
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    tmc_2590_1.ConfRegisters.DRVCTRL.dedge = 0b0;
 80019a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    tmc_2590_1.ConfRegisters.DRVCTRL.intpol = 0b1;
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    tmc_2590_1.ConfRegisters.DRVCTRL.mres = 0b0100;
 80019b2:	4b17      	ldr	r3, [pc, #92]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019b4:	2204      	movs	r2, #4
 80019b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    tmc_2590_1.ConfRegisters.SGCSCONF.cs = 5;
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019bc:	2205      	movs	r2, #5
 80019be:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    tmc_2590_1.ConfRegisters.SGCSCONF.sfilt = 0b0;
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    tmc_2590_1.ConfRegisters.SGCSCONF.sgt = 0b0000010;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019cc:	2202      	movs	r2, #2
 80019ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    tmc_2590_1.ConfRegisters.SMARTEN.sedn = 0b00;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    tmc_2590_1.ConfRegisters.SMARTEN.seimin = 0b0;
 80019da:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    tmc_2590_1.ConfRegisters.SMARTEN.semax = 0b0000;
 80019e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    tmc_2590_1.ConfRegisters.SMARTEN.semin = 0b0000;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    tmc_2590_1.ConfRegisters.SMARTEN.seup = 0b00;
 80019f2:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (TMC_2590_Init(&tmc_2590_1) != TMC_2590_OK)
 80019fa:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <MX_TMC_2590_1_Init+0x16c>)
 80019fc:	f005 ff0c 	bl	8007818 <TMC_2590_Init>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d001      	beq.n	8001a0a <MX_TMC_2590_1_Init+0x166>
    {
        Error_Handler();
 8001a06:	f7ff fc4d 	bl	80012a4 <Error_Handler>
    }
}
 8001a0a:	bf00      	nop
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	20000338 	.word	0x20000338
 8001a14:	200001f8 	.word	0x200001f8
 8001a18:	40010800 	.word	0x40010800
 8001a1c:	40010c00 	.word	0x40010c00
 8001a20:	200002ac 	.word	0x200002ac

08001a24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a24:	f7ff fe30 	bl	8001688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480b      	ldr	r0, [pc, #44]	@ (8001a58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a2a:	490c      	ldr	r1, [pc, #48]	@ (8001a5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a2c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a09      	ldr	r2, [pc, #36]	@ (8001a64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a40:	4c09      	ldr	r4, [pc, #36]	@ (8001a68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a4e:	f006 fb11 	bl	8008074 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a52:	f7ff fb25 	bl	80010a0 <main>
  bx lr
 8001a56:	4770      	bx	lr
  ldr r0, =_sdata
 8001a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001a60:	08008384 	.word	0x08008384
  ldr r2, =_sbss
 8001a64:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001a68:	200004f8 	.word	0x200004f8

08001a6c <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a6c:	e7fe      	b.n	8001a6c <CAN1_RX1_IRQHandler>

08001a6e <AS5048A_Init>:
 */

#include "stm32f1xx_as5048a.h"

AS5048A_StatusTypeDef AS5048A_Init(AS5048A_HandleTypeDef *has5048a)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
    // check as5048a handle allocation
    if (has5048a == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <AS5048A_Init+0x12>
    {
        return AS5048A_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e024      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_READY)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7b1b      	ldrb	r3, [r3, #12]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <AS5048A_Init+0x20>
    {
        // Peripheral is already initialized
        return AS5048A_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e01d      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_BUSY)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	7b1b      	ldrb	r3, [r3, #12]
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d101      	bne.n	8001a9c <AS5048A_Init+0x2e>
    {
        return AS5048A_BUSY;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e016      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_ERROR)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7b1b      	ldrb	r3, [r3, #12]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d101      	bne.n	8001aaa <AS5048A_Init+0x3c>
    {
        return AS5048A_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e00f      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    if (has5048a->Init.SPI_HandlerInstance == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <AS5048A_Init+0x48>
    {
        return AS5048A_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e009      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    if (!has5048a->Init.CS_GPIO_Port)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <AS5048A_Init+0x54>
    {
        return AS5048A_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e003      	b.n	8001aca <AS5048A_Init+0x5c>
    }

    has5048a->State = AS5048A_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	731a      	strb	r2, [r3, #12]

    // return status
    return AS5048A_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr

08001ad4 <AS5048A_ReadAngle>:

    return AS5048A_OK;
}

AS5048A_StatusTypeDef AS5048A_ReadAngle(AS5048A_HandleTypeDef *has5048a)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
    // check as5048a handle allocation
    if (has5048a == NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d101      	bne.n	8001ae6 <AS5048A_ReadAngle+0x12>
    {
        return AS5048A_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e026      	b.n	8001b34 <AS5048A_ReadAngle+0x60>
    }
    // check driver state
    if (has5048a->State == AS5048A_STATE_RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	7b1b      	ldrb	r3, [r3, #12]
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <AS5048A_ReadAngle+0x20>
    {
        // Peripheral is not initialized
        return AS5048A_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e01f      	b.n	8001b34 <AS5048A_ReadAngle+0x60>
    }

    if (has5048a->State == AS5048A_STATE_BUSY)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d101      	bne.n	8001b02 <AS5048A_ReadAngle+0x2e>
    {
        return AS5048A_BUSY;
 8001afe:	2302      	movs	r3, #2
 8001b00:	e018      	b.n	8001b34 <AS5048A_ReadAngle+0x60>
    }

    if (has5048a->State == AS5048A_STATE_ERROR)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7b1b      	ldrb	r3, [r3, #12]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b06      	cmp	r3, #6
 8001b0a:	d101      	bne.n	8001b10 <AS5048A_ReadAngle+0x3c>
    {
        return AS5048A_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e011      	b.n	8001b34 <AS5048A_ReadAngle+0x60>
    }
    // set driver state
    has5048a->State = AS5048A_STATE_BUSY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2202      	movs	r2, #2
 8001b14:	731a      	strb	r2, [r3, #12]

    if (__read_angle_command(has5048a) != AS5048A_OK)
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f000 f812 	bl	8001b40 <__read_angle_command>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d004      	beq.n	8001b2c <AS5048A_ReadAngle+0x58>
    {
        //todo remove this it's a hack
        has5048a->State = AS5048A_STATE_READY;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	731a      	strb	r2, [r3, #12]
        return AS5048A_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e003      	b.n	8001b34 <AS5048A_ReadAngle+0x60>
    }

    has5048a->State = AS5048A_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	731a      	strb	r2, [r3, #12]

    return AS5048A_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	0000      	movs	r0, r0
	...

08001b40 <__read_angle_command>:

    return AS5048A_OK;
}

AS5048A_StatusTypeDef __read_angle_command(AS5048A_HandleTypeDef *has5048a)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
    uint16_t SPImsg = 0xFFFF;
 8001b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b4c:	82fb      	strh	r3, [r7, #22]
    uint16_t SPIread;
    uint8_t SPI_read_bytes[2];

    if (__send_spi_packet_as5048a(has5048a, SPImsg, SPI_read_bytes) != HAL_OK)
 8001b4e:	f107 0208 	add.w	r2, r7, #8
 8001b52:	8afb      	ldrh	r3, [r7, #22]
 8001b54:	4619      	mov	r1, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f890 	bl	8001c7c <__send_spi_packet_as5048a>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <__read_angle_command+0x26>
    {
        // todo handle error
        return AS5048A_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e057      	b.n	8001c16 <__read_angle_command+0xd6>
    }

    SPIread = __spi_order_buffer_to_word_2bytes(SPI_read_bytes);
 8001b66:	f107 0308 	add.w	r3, r7, #8
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 f872 	bl	8001c54 <__spi_order_buffer_to_word_2bytes>
 8001b70:	4603      	mov	r3, r0
 8001b72:	82bb      	strh	r3, [r7, #20]

    uint16_t angle_data = SPIread & 0x3fff;
 8001b74:	8abb      	ldrh	r3, [r7, #20]
 8001b76:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b7a:	827b      	strh	r3, [r7, #18]
    uint8_t error = (SPIread & 0x4000) >> 14;
 8001b7c:	8abb      	ldrh	r3, [r7, #20]
 8001b7e:	139b      	asrs	r3, r3, #14
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	747b      	strb	r3, [r7, #17]

    if (error)
 8001b88:	7c7b      	ldrb	r3, [r7, #17]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <__read_angle_command+0x62>
    {
        __send_spi_packet_as5048a(has5048a, 0x4001, SPI_read_bytes);
 8001b8e:	f107 0308 	add.w	r3, r7, #8
 8001b92:	461a      	mov	r2, r3
 8001b94:	f244 0101 	movw	r1, #16385	@ 0x4001
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 f86f 	bl	8001c7c <__send_spi_packet_as5048a>
        return AS5048A_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e039      	b.n	8001c16 <__read_angle_command+0xd6>
    }

    // fast parity check
    uint16_t parity_check = SPIread;
 8001ba2:	8abb      	ldrh	r3, [r7, #20]
 8001ba4:	81fb      	strh	r3, [r7, #14]
    parity_check ^= parity_check >> 8;
 8001ba6:	89fb      	ldrh	r3, [r7, #14]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	89fb      	ldrh	r3, [r7, #14]
 8001bae:	4053      	eors	r3, r2
 8001bb0:	81fb      	strh	r3, [r7, #14]
    parity_check ^= parity_check >> 4;
 8001bb2:	89fb      	ldrh	r3, [r7, #14]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	4053      	eors	r3, r2
 8001bbc:	81fb      	strh	r3, [r7, #14]
    parity_check ^= parity_check >> 2;
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	089b      	lsrs	r3, r3, #2
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	89fb      	ldrh	r3, [r7, #14]
 8001bc6:	4053      	eors	r3, r2
 8001bc8:	81fb      	strh	r3, [r7, #14]
    parity_check ^= parity_check >> 1;
 8001bca:	89fb      	ldrh	r3, [r7, #14]
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	89fb      	ldrh	r3, [r7, #14]
 8001bd2:	4053      	eors	r3, r2
 8001bd4:	81fb      	strh	r3, [r7, #14]
    uint8_t parity = (~parity_check) & 1;
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	bf0c      	ite	eq
 8001be0:	2301      	moveq	r3, #1
 8001be2:	2300      	movne	r3, #0
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	737b      	strb	r3, [r7, #13]
    if (!parity)
 8001be8:	7b7b      	ldrb	r3, [r7, #13]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d101      	bne.n	8001bf2 <__read_angle_command+0xb2>
    {
        return AS5048A_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e011      	b.n	8001c16 <__read_angle_command+0xd6>
    }

    has5048a->Angle = angle_data;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	8a7a      	ldrh	r2, [r7, #18]
 8001bf6:	81da      	strh	r2, [r3, #14]
    has5048a->Angle_double = ((double) angle_data) * 0.0219;
 8001bf8:	8a7b      	ldrh	r3, [r7, #18]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fbea 	bl	80003d4 <__aeabi_ui2d>
 8001c00:	a307      	add	r3, pc, #28	@ (adr r3, 8001c20 <__read_angle_command+0xe0>)
 8001c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c06:	f7fe fc5f 	bl	80004c8 <__aeabi_dmul>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return AS5048A_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	1f212d77 	.word	0x1f212d77
 8001c24:	3f966cf4 	.word	0x3f966cf4

08001c28 <__word_to_spi_order_buffer_2bytes>:

    return AS5048A_OK;
}

void __word_to_spi_order_buffer_2bytes(uint16_t word, uint8_t *buff)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	80fb      	strh	r3, [r7, #6]
    buff[0] = (uint8_t) ((word & 0xFF00) >> 8);
 8001c34:	88fb      	ldrh	r3, [r7, #6]
 8001c36:	0a1b      	lsrs	r3, r3, #8
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	701a      	strb	r2, [r3, #0]
    buff[1] = (uint8_t) (word & 0xFF);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	3301      	adds	r3, #1
 8001c44:	88fa      	ldrh	r2, [r7, #6]
 8001c46:	b2d2      	uxtb	r2, r2
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <__spi_order_buffer_to_word_2bytes>:

uint16_t __spi_order_buffer_to_word_2bytes(uint8_t *buff)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
    return ((uint16_t) buff[0] << 8) | (uint16_t) buff[1];
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3301      	adds	r3, #1
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b21b      	sxth	r3, r3
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	b21b      	sxth	r3, r3
 8001c70:	b29b      	uxth	r3, r3
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <__send_spi_packet_as5048a>:

HAL_StatusTypeDef __send_spi_packet_as5048a(AS5048A_HandleTypeDef *has5048a,
        uint16_t SPImsg, uint8_t *SPI_read_bytes)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	460b      	mov	r3, r1
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	817b      	strh	r3, [r7, #10]
    uint8_t SPImsg_bytes[2];
    __word_to_spi_order_buffer_2bytes(SPImsg, SPImsg_bytes);
 8001c8a:	f107 0214 	add.w	r2, r7, #20
 8001c8e:	897b      	ldrh	r3, [r7, #10]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ffc8 	bl	8001c28 <__word_to_spi_order_buffer_2bytes>
    // write new registers
    HAL_GPIO_WritePin(has5048a->Init.CS_GPIO_Port, has5048a->Init.CS_Pin,
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6858      	ldr	r0, [r3, #4]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	891b      	ldrh	r3, [r3, #8]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f002 fb94 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f107 0114 	add.w	r1, r7, #20
 8001cb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	f003 fdb1 	bl	8005820 <HAL_SPI_TransmitReceive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	75fb      	strb	r3, [r7, #23]
            has5048a->Init.SPI_HandlerInstance, SPImsg_bytes, SPI_read_bytes, 2,
            1000);
    HAL_GPIO_WritePin(has5048a->Init.CS_GPIO_Port, has5048a->Init.CS_Pin,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6858      	ldr	r0, [r3, #4]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	891b      	ldrh	r3, [r3, #8]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f002 fb7f 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);
    return spi_status;
 8001cd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <PID_Init>:
 */

#include "PID_lib.h"

void PID_Init(PID_HandleTypeDef *PID)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
    if (PID == NULL)
    {
        // TODO throw error
    }

    PID->__time = HAL_GetTick();
 8001ce4:	f000 f960 	bl	8001fa8 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	629a      	str	r2, [r3, #40]	@ 0x28

    PID->__error_old = *(PID->Init.feedback) - PID->__set_point;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001cfc:	f7fe fa2c 	bl	8000158 <__aeabi_dsub>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
    PID->__i_error = 0.0;
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

    // todo zero out error & other values
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <PID_Update>:

void PID_Update(PID_HandleTypeDef *PID)
{
 8001d20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d24:	b090      	sub	sp, #64	@ 0x40
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
    double feedback_value = *(PID->Init.feedback);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d32:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    uint32_t current_time = HAL_GetTick();
 8001d36:	f000 f937 	bl	8001fa8 <HAL_GetTick>
 8001d3a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    double dt = (double) (current_time - PID->__time);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb45 	bl	80003d4 <__aeabi_ui2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38

    PID->__time = current_time;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
    PID->__error = PID->__set_point - feedback_value;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8001d5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001d62:	f7fe f9f9 	bl	8000158 <__aeabi_dsub>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    double proportional = PID->Init.kp * PID->__error;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001d7c:	f7fe fba4 	bl	80004c8 <__aeabi_dmul>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	e9c7 2308 	strd	r2, r3, [r7, #32]

    PID->__i_error = PID->__i_error + (PID->__error * dt);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	e9d3 ab12 	ldrd	sl, fp, [r3, #72]	@ 0x48
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001d94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001d98:	f7fe fb96 	bl	80004c8 <__aeabi_dmul>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4650      	mov	r0, sl
 8001da2:	4659      	mov	r1, fp
 8001da4:	f7fe f9da 	bl	800015c <__adddf3>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    double integral = PID->Init.ki * PID->__i_error;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8001dbe:	f7fe fb83 	bl	80004c8 <__aeabi_dmul>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	e9c7 2306 	strd	r2, r3, [r7, #24]

    // todo remove this hack
    if (current_time == PID->__time)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d104      	bne.n	8001dde <PID_Update+0xbe>
    {
        dt = 1;
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b34      	ldr	r3, [pc, #208]	@ (8001eac <PID_Update+0x18c>)
 8001dda:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double derivative = PID->Init.kd * ((PID->__error - PID->__error_old) / dt);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8001df0:	f7fe f9b2 	bl	8000158 <__aeabi_dsub>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4610      	mov	r0, r2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001e00:	f7fe fc8c 	bl	800071c <__aeabi_ddiv>
 8001e04:	4602      	mov	r2, r0
 8001e06:	460b      	mov	r3, r1
 8001e08:	4650      	mov	r0, sl
 8001e0a:	4659      	mov	r1, fp
 8001e0c:	f7fe fb5c 	bl	80004c8 <__aeabi_dmul>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PID->__error_old = PID->__error;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001e1e:	6879      	ldr	r1, [r7, #4]
 8001e20:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double output_raw = proportional + integral + derivative;
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001e2c:	f7fe f996 	bl	800015c <__adddf3>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e38:	f7fe f990 	bl	800015c <__adddf3>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_raw > PID->Init.max_output_abs)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e4e:	f7fe fdcb 	bl	80009e8 <__aeabi_dcmpgt>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d006      	beq.n	8001e66 <PID_Update+0x146>
    {
        PID->output = PID->Init.max_output_abs;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e5e:	6879      	ldr	r1, [r7, #4]
 8001e60:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
        return;
 8001e64:	e01d      	b.n	8001ea2 <PID_Update+0x182>
    }
    if (output_raw < -1.0 * PID->Init.max_output_abs)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e6c:	4690      	mov	r8, r2
 8001e6e:	f083 4900 	eor.w	r9, r3, #2147483648	@ 0x80000000
 8001e72:	4642      	mov	r2, r8
 8001e74:	464b      	mov	r3, r9
 8001e76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e7a:	f7fe fd97 	bl	80009ac <__aeabi_dcmplt>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <PID_Update+0x178>
    {
        PID->output = -1.0 * PID->Init.max_output_abs;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8001e8a:	4614      	mov	r4, r2
 8001e8c:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	e9c3 4514 	strd	r4, r5, [r3, #80]	@ 0x50
        return;
 8001e96:	e004      	b.n	8001ea2 <PID_Update+0x182>
    }
    PID->output = output_raw;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e9e:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
}
 8001ea2:	3740      	adds	r7, #64	@ 0x40
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001eaa:	bf00      	nop
 8001eac:	3ff00000 	.word	0x3ff00000

08001eb0 <PID_ChangeSetPoint>:

void PID_ChangeSetPoint(PID_HandleTypeDef *PID, double set_point)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	e9c7 2300 	strd	r2, r3, [r7]
    PID->__set_point = set_point;
 8001ebc:	68f9      	ldr	r1, [r7, #12]
 8001ebe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ec2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    PID->__i_error = 0.0;
 8001ec6:	68f9      	ldr	r1, [r7, #12]
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	f04f 0300 	mov.w	r3, #0
 8001ed0:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
    PID->__error_old = *(PID->Init.feedback) - PID->__set_point;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8001ee2:	f7fe f939 	bl	8000158 <__aeabi_dsub>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
}
 8001ef0:	bf00      	nop
 8001ef2:	3710      	adds	r7, #16
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}

08001ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001efc:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <HAL_Init+0x28>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a07      	ldr	r2, [pc, #28]	@ (8001f20 <HAL_Init+0x28>)
 8001f02:	f043 0310 	orr.w	r3, r3, #16
 8001f06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f08:	2003      	movs	r0, #3
 8001f0a:	f001 fc69 	bl	80037e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0e:	200f      	movs	r0, #15
 8001f10:	f000 f808 	bl	8001f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7ff faf4 	bl	8001500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000

08001f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x54>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_InitTick+0x58>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	4619      	mov	r1, r3
 8001f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f42:	4618      	mov	r0, r3
 8001f44:	f001 fcb0 	bl	80038a8 <HAL_SYSTICK_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e00e      	b.n	8001f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b0f      	cmp	r3, #15
 8001f56:	d80a      	bhi.n	8001f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f60:	f001 fc5e 	bl	8003820 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f64:	4a06      	ldr	r2, [pc, #24]	@ (8001f80 <HAL_InitTick+0x5c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000008 	.word	0x20000008
 8001f80:	20000004 	.word	0x20000004

08001f84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <HAL_IncTick+0x1c>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4413      	add	r3, r2
 8001f94:	4a03      	ldr	r2, [pc, #12]	@ (8001fa4 <HAL_IncTick+0x20>)
 8001f96:	6013      	str	r3, [r2, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	200003ac 	.word	0x200003ac

08001fa8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b02      	ldr	r3, [pc, #8]	@ (8001fb8 <HAL_GetTick+0x10>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	200003ac 	.word	0x200003ac

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc4:	f7ff fff0 	bl	8001fa8 <HAL_GetTick>
 8001fc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd4:	d005      	beq.n	8001fe2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002000 <HAL_Delay+0x44>)
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4413      	add	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffe0 	bl	8001fa8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d8f7      	bhi.n	8001fe4 <HAL_Delay+0x28>
  {
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008

08002004 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002014:	2300      	movs	r3, #0
 8002016:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e154      	b.n	80022d0 <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a97      	ldr	r2, [pc, #604]	@ (8002288 <HAL_ADC_Init+0x284>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d009      	beq.n	8002044 <HAL_ADC_Init+0x40>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a95      	ldr	r2, [pc, #596]	@ (800228c <HAL_ADC_Init+0x288>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d004      	beq.n	8002044 <HAL_ADC_Init+0x40>
 800203a:	f240 11a9 	movw	r1, #425	@ 0x1a9
 800203e:	4894      	ldr	r0, [pc, #592]	@ (8002290 <HAL_ADC_Init+0x28c>)
 8002040:	f7ff f936 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_ADC_Init+0x5c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002054:	d004      	beq.n	8002060 <HAL_ADC_Init+0x5c>
 8002056:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800205a:	488d      	ldr	r0, [pc, #564]	@ (8002290 <HAL_ADC_Init+0x28c>)
 800205c:	f7ff f928 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d009      	beq.n	800207c <HAL_ADC_Init+0x78>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002070:	d004      	beq.n	800207c <HAL_ADC_Init+0x78>
 8002072:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8002076:	4886      	ldr	r0, [pc, #536]	@ (8002290 <HAL_ADC_Init+0x28c>)
 8002078:	f7ff f91a 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	7b1b      	ldrb	r3, [r3, #12]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <HAL_ADC_Init+0x92>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7b1b      	ldrb	r3, [r3, #12]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d004      	beq.n	8002096 <HAL_ADC_Init+0x92>
 800208c:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8002090:	487f      	ldr	r0, [pc, #508]	@ (8002290 <HAL_ADC_Init+0x28c>)
 8002092:	f7ff f90d 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d022      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020a6:	d01d      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 80020b0:	d018      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80020ba:	d013      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 80020c4:	d00e      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80020ce:	d009      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Init+0xe0>
 80020da:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80020de:	486c      	ldr	r0, [pc, #432]	@ (8002290 <HAL_ADC_Init+0x28c>)
 80020e0:	f7ff f8e6 	bl	80012b0 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d02a      	beq.n	8002142 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d003      	beq.n	80020fc <HAL_ADC_Init+0xf8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d904      	bls.n	8002106 <HAL_ADC_Init+0x102>
 80020fc:	f240 11b1 	movw	r1, #433	@ 0x1b1
 8002100:	4863      	ldr	r0, [pc, #396]	@ (8002290 <HAL_ADC_Init+0x28c>)
 8002102:	f7ff f8d5 	bl	80012b0 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	7d1b      	ldrb	r3, [r3, #20]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_ADC_Init+0x11c>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	7d1b      	ldrb	r3, [r3, #20]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d004      	beq.n	8002120 <HAL_ADC_Init+0x11c>
 8002116:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 800211a:	485d      	ldr	r0, [pc, #372]	@ (8002290 <HAL_ADC_Init+0x28c>)
 800211c:	f7ff f8c8 	bl	80012b0 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7d1b      	ldrb	r3, [r3, #20]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_ADC_Init+0x134>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	2b08      	cmp	r3, #8
 8002136:	d904      	bls.n	8002142 <HAL_ADC_Init+0x13e>
 8002138:	f240 11b5 	movw	r1, #437	@ 0x1b5
 800213c:	4854      	ldr	r0, [pc, #336]	@ (8002290 <HAL_ADC_Init+0x28c>)
 800213e:	f7ff f8b7 	bl	80012b0 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	2b00      	cmp	r3, #0
 8002148:	d109      	bne.n	800215e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fd33 	bl	8000bc4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fc86 	bl	8002a70 <ADC_ConversionStop_Disable>
 8002164:	4603      	mov	r3, r0
 8002166:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800216c:	f003 0310 	and.w	r3, r3, #16
 8002170:	2b00      	cmp	r3, #0
 8002172:	f040 80a4 	bne.w	80022be <HAL_ADC_Init+0x2ba>
 8002176:	7dfb      	ldrb	r3, [r7, #23]
 8002178:	2b00      	cmp	r3, #0
 800217a:	f040 80a0 	bne.w	80022be <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002186:	f023 0302 	bic.w	r3, r3, #2
 800218a:	f043 0202 	orr.w	r2, r3, #2
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800219a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7b1b      	ldrb	r3, [r3, #12]
 80021a0:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80021a2:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80021a4:	68ba      	ldr	r2, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021b2:	d003      	beq.n	80021bc <HAL_ADC_Init+0x1b8>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d102      	bne.n	80021c2 <HAL_ADC_Init+0x1be>
 80021bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c0:	e000      	b.n	80021c4 <HAL_ADC_Init+0x1c0>
 80021c2:	2300      	movs	r3, #0
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	7d1b      	ldrb	r3, [r3, #20]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d119      	bne.n	8002206 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	7b1b      	ldrb	r3, [r3, #12]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d109      	bne.n	80021ee <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	3b01      	subs	r3, #1
 80021e0:	035a      	lsls	r2, r3, #13
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	e00b      	b.n	8002206 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	f043 0201 	orr.w	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	430a      	orrs	r2, r1
 8002218:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4b1c      	ldr	r3, [pc, #112]	@ (8002294 <HAL_ADC_Init+0x290>)
 8002222:	4013      	ands	r3, r2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	68b9      	ldr	r1, [r7, #8]
 800222a:	430b      	orrs	r3, r1
 800222c:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002236:	d003      	beq.n	8002240 <HAL_ADC_Init+0x23c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d104      	bne.n	800224a <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	3b01      	subs	r3, #1
 8002246:	051b      	lsls	r3, r3, #20
 8002248:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002250:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	430a      	orrs	r2, r1
 800225c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689a      	ldr	r2, [r3, #8]
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <HAL_ADC_Init+0x294>)
 8002266:	4013      	ands	r3, r2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	429a      	cmp	r2, r3
 800226c:	d116      	bne.n	800229c <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002278:	f023 0303 	bic.w	r3, r3, #3
 800227c:	f043 0201 	orr.w	r2, r3, #1
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002284:	e023      	b.n	80022ce <HAL_ADC_Init+0x2ca>
 8002286:	bf00      	nop
 8002288:	40012400 	.word	0x40012400
 800228c:	40012800 	.word	0x40012800
 8002290:	080080d8 	.word	0x080080d8
 8002294:	ffe1f7fd 	.word	0xffe1f7fd
 8002298:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a0:	f023 0312 	bic.w	r3, r3, #18
 80022a4:	f043 0210 	orr.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022bc:	e007      	b.n	80022ce <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c2:	f043 0210 	orr.w	r2, r3, #16
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a6c      	ldr	r2, [pc, #432]	@ (80024a8 <HAL_ADC_IRQHandler+0x1d0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d009      	beq.n	800230e <HAL_ADC_IRQHandler+0x36>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a6b      	ldr	r2, [pc, #428]	@ (80024ac <HAL_ADC_IRQHandler+0x1d4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d004      	beq.n	800230e <HAL_ADC_IRQHandler+0x36>
 8002304:	f240 61f9 	movw	r1, #1785	@ 0x6f9
 8002308:	4869      	ldr	r0, [pc, #420]	@ (80024b0 <HAL_ADC_IRQHandler+0x1d8>)
 800230a:	f7fe ffd1 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	7b1b      	ldrb	r3, [r3, #12]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_ADC_IRQHandler+0x50>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	7b1b      	ldrb	r3, [r3, #12]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d004      	beq.n	8002328 <HAL_ADC_IRQHandler+0x50>
 800231e:	f240 61fa 	movw	r1, #1786	@ 0x6fa
 8002322:	4863      	ldr	r0, [pc, #396]	@ (80024b0 <HAL_ADC_IRQHandler+0x1d8>)
 8002324:	f7fe ffc4 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_ADC_IRQHandler+0x60>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2b10      	cmp	r3, #16
 8002336:	d904      	bls.n	8002342 <HAL_ADC_IRQHandler+0x6a>
 8002338:	f240 61fb 	movw	r1, #1787	@ 0x6fb
 800233c:	485c      	ldr	r0, [pc, #368]	@ (80024b0 <HAL_ADC_IRQHandler+0x1d8>)
 800233e:	f7fe ffb7 	bl	80012b0 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d03e      	beq.n	80023ca <HAL_ADC_IRQHandler+0xf2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d039      	beq.n	80023ca <HAL_ADC_IRQHandler+0xf2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800235a:	f003 0310 	and.w	r3, r3, #16
 800235e:	2b00      	cmp	r3, #0
 8002360:	d105      	bne.n	800236e <HAL_ADC_IRQHandler+0x96>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002366:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002378:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800237c:	d11d      	bne.n	80023ba <HAL_ADC_IRQHandler+0xe2>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002382:	2b00      	cmp	r3, #0
 8002384:	d119      	bne.n	80023ba <HAL_ADC_IRQHandler+0xe2>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0220 	bic.w	r2, r2, #32
 8002394:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <HAL_ADC_IRQHandler+0xe2>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b2:	f043 0201 	orr.w	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f87a 	bl	80024b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0212 	mvn.w	r2, #18
 80023c8:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d04d      	beq.n	8002470 <HAL_ADC_IRQHandler+0x198>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d048      	beq.n	8002470 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d105      	bne.n	80023f6 <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ee:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8002400:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002404:	d012      	beq.n	800242c <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002410:	2b00      	cmp	r3, #0
 8002412:	d125      	bne.n	8002460 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800241e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002422:	d11d      	bne.n	8002460 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002428:	2b00      	cmp	r3, #0
 800242a:	d119      	bne.n	8002460 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002440:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002458:	f043 0201 	orr.w	r2, r3, #1
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f000 fb46 	bl	8002af2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f06f 020c 	mvn.w	r2, #12
 800246e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002476:	2b00      	cmp	r3, #0
 8002478:	d012      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x1c8>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00d      	beq.n	80024a0 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 f818 	bl	80024c6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f06f 0201 	mvn.w	r2, #1
 800249e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80024a0:	bf00      	nop
 80024a2:	3710      	adds	r7, #16
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40012400 	.word	0x40012400
 80024ac:	40012800 	.word	0x40012800
 80024b0:	080080d8 	.word	0x080080d8

080024b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bc80      	pop	{r7}
 80024c4:	4770      	bx	lr

080024c6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bc80      	pop	{r7}
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e2:	2300      	movs	r3, #0
 80024e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a88      	ldr	r2, [pc, #544]	@ (8002710 <HAL_ADC_ConfigChannel+0x238>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d009      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x30>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a86      	ldr	r2, [pc, #536]	@ (8002714 <HAL_ADC_ConfigChannel+0x23c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x30>
 80024fe:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8002502:	4885      	ldr	r0, [pc, #532]	@ (8002718 <HAL_ADC_ConfigChannel+0x240>)
 8002504:	f7fe fed4 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d048      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d044      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d040      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d03c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b04      	cmp	r3, #4
 800252e:	d038      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2b05      	cmp	r3, #5
 8002536:	d034      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2b06      	cmp	r3, #6
 800253e:	d030      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2b07      	cmp	r3, #7
 8002546:	d02c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d028      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b09      	cmp	r3, #9
 8002556:	d024      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b0a      	cmp	r3, #10
 800255e:	d020      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b0b      	cmp	r3, #11
 8002566:	d01c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b0c      	cmp	r3, #12
 800256e:	d018      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b0d      	cmp	r3, #13
 8002576:	d014      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b0e      	cmp	r3, #14
 800257e:	d010      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d00c      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d008      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2b11      	cmp	r3, #17
 8002596:	d004      	beq.n	80025a2 <HAL_ADC_ConfigChannel+0xca>
 8002598:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 800259c:	485e      	ldr	r0, [pc, #376]	@ (8002718 <HAL_ADC_ConfigChannel+0x240>)
 800259e:	f7fe fe87 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d040      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d03c      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b03      	cmp	r3, #3
 80025b8:	d038      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d034      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	2b05      	cmp	r3, #5
 80025c8:	d030      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b06      	cmp	r3, #6
 80025d0:	d02c      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b07      	cmp	r3, #7
 80025d8:	d028      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d024      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b09      	cmp	r3, #9
 80025e8:	d020      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b0a      	cmp	r3, #10
 80025f0:	d01c      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	2b0b      	cmp	r3, #11
 80025f8:	d018      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b0c      	cmp	r3, #12
 8002600:	d014      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b0d      	cmp	r3, #13
 8002608:	d010      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b0e      	cmp	r3, #14
 8002610:	d00c      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b0f      	cmp	r3, #15
 8002618:	d008      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b10      	cmp	r3, #16
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x154>
 8002622:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 8002626:	483c      	ldr	r0, [pc, #240]	@ (8002718 <HAL_ADC_ConfigChannel+0x240>)
 8002628:	f7fe fe42 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d01c      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d018      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2b03      	cmp	r3, #3
 800264a:	d014      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b04      	cmp	r3, #4
 8002652:	d010      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b05      	cmp	r3, #5
 800265a:	d00c      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b06      	cmp	r3, #6
 8002662:	d008      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b07      	cmp	r3, #7
 800266a:	d004      	beq.n	8002676 <HAL_ADC_ConfigChannel+0x19e>
 800266c:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8002670:	4829      	ldr	r0, [pc, #164]	@ (8002718 <HAL_ADC_ConfigChannel+0x240>)
 8002672:	f7fe fe1d 	bl	80012b0 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x1ac>
 8002680:	2302      	movs	r3, #2
 8002682:	e0e2      	b.n	800284a <HAL_ADC_ConfigChannel+0x372>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b06      	cmp	r3, #6
 8002692:	d81c      	bhi.n	80026ce <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685a      	ldr	r2, [r3, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4413      	add	r3, r2
 80026a4:	3b05      	subs	r3, #5
 80026a6:	221f      	movs	r2, #31
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	43db      	mvns	r3, r3
 80026ae:	4019      	ands	r1, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	3b05      	subs	r3, #5
 80026c0:	fa00 f203 	lsl.w	r2, r0, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80026cc:	e042      	b.n	8002754 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b0c      	cmp	r3, #12
 80026d4:	d822      	bhi.n	800271c <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685a      	ldr	r2, [r3, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	3b23      	subs	r3, #35	@ 0x23
 80026e8:	221f      	movs	r2, #31
 80026ea:	fa02 f303 	lsl.w	r3, r2, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	4019      	ands	r1, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	3b23      	subs	r3, #35	@ 0x23
 8002702:	fa00 f203 	lsl.w	r2, r0, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	631a      	str	r2, [r3, #48]	@ 0x30
 800270e:	e021      	b.n	8002754 <HAL_ADC_ConfigChannel+0x27c>
 8002710:	40012400 	.word	0x40012400
 8002714:	40012800 	.word	0x40012800
 8002718:	080080d8 	.word	0x080080d8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b41      	subs	r3, #65	@ 0x41
 800272e:	221f      	movs	r2, #31
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43db      	mvns	r3, r3
 8002736:	4019      	ands	r1, r3
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	3b41      	subs	r3, #65	@ 0x41
 8002748:	fa00 f203 	lsl.w	r2, r0, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b09      	cmp	r3, #9
 800275a:	d91c      	bls.n	8002796 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68d9      	ldr	r1, [r3, #12]
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	4613      	mov	r3, r2
 8002768:	005b      	lsls	r3, r3, #1
 800276a:	4413      	add	r3, r2
 800276c:	3b1e      	subs	r3, #30
 800276e:	2207      	movs	r2, #7
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	4019      	ands	r1, r3
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	6898      	ldr	r0, [r3, #8]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	3b1e      	subs	r3, #30
 8002788:	fa00 f203 	lsl.w	r2, r0, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	60da      	str	r2, [r3, #12]
 8002794:	e019      	b.n	80027ca <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6919      	ldr	r1, [r3, #16]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	2207      	movs	r2, #7
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	43db      	mvns	r3, r3
 80027ae:	4019      	ands	r1, r3
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	6898      	ldr	r0, [r3, #8]
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	fa00 f203 	lsl.w	r2, r0, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d003      	beq.n	80027da <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027d6:	2b11      	cmp	r3, #17
 80027d8:	d132      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1d      	ldr	r2, [pc, #116]	@ (8002854 <HAL_ADC_ConfigChannel+0x37c>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d125      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d126      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002800:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b10      	cmp	r3, #16
 8002808:	d11a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b13      	ldr	r3, [pc, #76]	@ (8002858 <HAL_ADC_ConfigChannel+0x380>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a13      	ldr	r2, [pc, #76]	@ (800285c <HAL_ADC_ConfigChannel+0x384>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9a      	lsrs	r2, r3, #18
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002820:	e002      	b.n	8002828 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x34a>
 800282e:	e007      	b.n	8002840 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002848:	7bfb      	ldrb	r3, [r7, #15]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40012400 	.word	0x40012400
 8002858:	20000000 	.word	0x20000000
 800285c:	431bde83 	.word	0x431bde83

08002860 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a79      	ldr	r2, [pc, #484]	@ (8002a54 <HAL_ADC_AnalogWDGConfig+0x1f4>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d009      	beq.n	8002888 <HAL_ADC_AnalogWDGConfig+0x28>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a77      	ldr	r2, [pc, #476]	@ (8002a58 <HAL_ADC_AnalogWDGConfig+0x1f8>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d004      	beq.n	8002888 <HAL_ADC_AnalogWDGConfig+0x28>
 800287e:	f640 0141 	movw	r1, #2113	@ 0x841
 8002882:	4876      	ldr	r0, [pc, #472]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8002884:	f7fe fd14 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d022      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a72      	ldr	r2, [pc, #456]	@ (8002a60 <HAL_ADC_AnalogWDGConfig+0x200>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d01d      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a71      	ldr	r2, [pc, #452]	@ (8002a64 <HAL_ADC_AnalogWDGConfig+0x204>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d018      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a6f      	ldr	r2, [pc, #444]	@ (8002a68 <HAL_ADC_AnalogWDGConfig+0x208>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d013      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80028b6:	d00e      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028c0:	d009      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80028ca:	d004      	beq.n	80028d6 <HAL_ADC_AnalogWDGConfig+0x76>
 80028cc:	f640 0142 	movw	r1, #2114	@ 0x842
 80028d0:	4862      	ldr	r0, [pc, #392]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80028d2:	f7fe fced 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d008      	beq.n	80028f0 <HAL_ADC_AnalogWDGConfig+0x90>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	7a1b      	ldrb	r3, [r3, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d004      	beq.n	80028f0 <HAL_ADC_AnalogWDGConfig+0x90>
 80028e6:	f640 0143 	movw	r1, #2115	@ 0x843
 80028ea:	485c      	ldr	r0, [pc, #368]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80028ec:	f7fe fce0 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028f8:	d304      	bcc.n	8002904 <HAL_ADC_AnalogWDGConfig+0xa4>
 80028fa:	f640 0144 	movw	r1, #2116	@ 0x844
 80028fe:	4857      	ldr	r0, [pc, #348]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8002900:	f7fe fcd6 	bl	80012b0 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800290c:	d304      	bcc.n	8002918 <HAL_ADC_AnalogWDGConfig+0xb8>
 800290e:	f640 0145 	movw	r1, #2117	@ 0x845
 8002912:	4852      	ldr	r0, [pc, #328]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8002914:	f7fe fccc 	bl	80012b0 <assert_failed>
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a50      	ldr	r2, [pc, #320]	@ (8002a60 <HAL_ADC_AnalogWDGConfig+0x200>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d009      	beq.n	8002936 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8002926:	4a4f      	ldr	r2, [pc, #316]	@ (8002a64 <HAL_ADC_AnalogWDGConfig+0x204>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d004      	beq.n	8002936 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002930:	4a4d      	ldr	r2, [pc, #308]	@ (8002a68 <HAL_ADC_AnalogWDGConfig+0x208>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d14c      	bne.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d048      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d044      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	2b02      	cmp	r3, #2
 800294c:	d040      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b03      	cmp	r3, #3
 8002954:	d03c      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b04      	cmp	r3, #4
 800295c:	d038      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d034      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b06      	cmp	r3, #6
 800296c:	d030      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b07      	cmp	r3, #7
 8002974:	d02c      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	2b08      	cmp	r3, #8
 800297c:	d028      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b09      	cmp	r3, #9
 8002984:	d024      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	2b0a      	cmp	r3, #10
 800298c:	d020      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b0b      	cmp	r3, #11
 8002994:	d01c      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b0c      	cmp	r3, #12
 800299c:	d018      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b0d      	cmp	r3, #13
 80029a4:	d014      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2b0e      	cmp	r3, #14
 80029ac:	d010      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	2b0f      	cmp	r3, #15
 80029b4:	d00c      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d008      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b11      	cmp	r3, #17
 80029c4:	d004      	beq.n	80029d0 <HAL_ADC_AnalogWDGConfig+0x170>
 80029c6:	f640 014b 	movw	r1, #2123	@ 0x84b
 80029ca:	4824      	ldr	r0, [pc, #144]	@ (8002a5c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80029cc:	f7fe fc70 	bl	80012b0 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_ADC_AnalogWDGConfig+0x17e>
 80029da:	2302      	movs	r3, #2
 80029dc:	e035      	b.n	8002a4a <HAL_ADC_AnalogWDGConfig+0x1ea>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	7a1b      	ldrb	r3, [r3, #8]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_ADC_AnalogWDGConfig+0x1a0>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685a      	ldr	r2, [r3, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	e007      	b.n	8002a10 <HAL_ADC_AnalogWDGConfig+0x1b0>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685a      	ldr	r2, [r3, #4]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a0e:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685a      	ldr	r2, [r3, #4]
 8002a16:	4b15      	ldr	r3, [pc, #84]	@ (8002a6c <HAL_ADC_AnalogWDGConfig+0x20c>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	6811      	ldr	r1, [r2, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	6852      	ldr	r2, [r2, #4]
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	430b      	orrs	r3, r1
 8002a2a:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	68d2      	ldr	r2, [r2, #12]
 8002a34:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	6912      	ldr	r2, [r2, #16]
 8002a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8002a48:	2300      	movs	r3, #0
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3708      	adds	r7, #8
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	40012400 	.word	0x40012400
 8002a58:	40012800 	.word	0x40012800
 8002a5c:	080080d8 	.word	0x080080d8
 8002a60:	00800200 	.word	0x00800200
 8002a64:	00400200 	.word	0x00400200
 8002a68:	00c00200 	.word	0x00c00200
 8002a6c:	ff3ffde0 	.word	0xff3ffde0

08002a70 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d12e      	bne.n	8002ae8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0201 	bic.w	r2, r2, #1
 8002a98:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a9a:	f7ff fa85 	bl	8001fa8 <HAL_GetTick>
 8002a9e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002aa0:	e01b      	b.n	8002ada <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002aa2:	f7ff fa81 	bl	8001fa8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d914      	bls.n	8002ada <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10d      	bne.n	8002ada <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac2:	f043 0210 	orr.w	r2, r3, #16
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ace:	f043 0201 	orr.w	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e007      	b.n	8002aea <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d0dc      	beq.n	8002aa2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002afa:	bf00      	nop
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e209      	b.n	8002f2a <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a8f      	ldr	r2, [pc, #572]	@ (8002d58 <HAL_CAN_Init+0x254>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_CAN_Init+0x26>
 8002b20:	f240 111d 	movw	r1, #285	@ 0x11d
 8002b24:	488d      	ldr	r0, [pc, #564]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002b26:	f7fe fbc3 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	7e1b      	ldrb	r3, [r3, #24]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_CAN_Init+0x40>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7e1b      	ldrb	r3, [r3, #24]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d004      	beq.n	8002b44 <HAL_CAN_Init+0x40>
 8002b3a:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8002b3e:	4887      	ldr	r0, [pc, #540]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002b40:	f7fe fbb6 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e5b      	ldrb	r3, [r3, #25]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d008      	beq.n	8002b5e <HAL_CAN_Init+0x5a>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7e5b      	ldrb	r3, [r3, #25]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d004      	beq.n	8002b5e <HAL_CAN_Init+0x5a>
 8002b54:	f240 111f 	movw	r1, #287	@ 0x11f
 8002b58:	4880      	ldr	r0, [pc, #512]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002b5a:	f7fe fba9 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	7e9b      	ldrb	r3, [r3, #26]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_CAN_Init+0x74>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	7e9b      	ldrb	r3, [r3, #26]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d004      	beq.n	8002b78 <HAL_CAN_Init+0x74>
 8002b6e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002b72:	487a      	ldr	r0, [pc, #488]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002b74:	f7fe fb9c 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7edb      	ldrb	r3, [r3, #27]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_CAN_Init+0x8e>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	7edb      	ldrb	r3, [r3, #27]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d004      	beq.n	8002b92 <HAL_CAN_Init+0x8e>
 8002b88:	f240 1121 	movw	r1, #289	@ 0x121
 8002b8c:	4873      	ldr	r0, [pc, #460]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002b8e:	f7fe fb8f 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7f1b      	ldrb	r3, [r3, #28]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d008      	beq.n	8002bac <HAL_CAN_Init+0xa8>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	7f1b      	ldrb	r3, [r3, #28]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d004      	beq.n	8002bac <HAL_CAN_Init+0xa8>
 8002ba2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002ba6:	486d      	ldr	r0, [pc, #436]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002ba8:	f7fe fb82 	bl	80012b0 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7f5b      	ldrb	r3, [r3, #29]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_CAN_Init+0xc2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	7f5b      	ldrb	r3, [r3, #29]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d004      	beq.n	8002bc6 <HAL_CAN_Init+0xc2>
 8002bbc:	f240 1123 	movw	r1, #291	@ 0x123
 8002bc0:	4866      	ldr	r0, [pc, #408]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002bc2:	f7fe fb75 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d013      	beq.n	8002bf6 <HAL_CAN_Init+0xf2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bd6:	d00e      	beq.n	8002bf6 <HAL_CAN_Init+0xf2>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002be0:	d009      	beq.n	8002bf6 <HAL_CAN_Init+0xf2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002bea:	d004      	beq.n	8002bf6 <HAL_CAN_Init+0xf2>
 8002bec:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8002bf0:	485a      	ldr	r0, [pc, #360]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002bf2:	f7fe fb5d 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d013      	beq.n	8002c26 <HAL_CAN_Init+0x122>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c06:	d00e      	beq.n	8002c26 <HAL_CAN_Init+0x122>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c10:	d009      	beq.n	8002c26 <HAL_CAN_Init+0x122>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002c1a:	d004      	beq.n	8002c26 <HAL_CAN_Init+0x122>
 8002c1c:	f240 1125 	movw	r1, #293	@ 0x125
 8002c20:	484e      	ldr	r0, [pc, #312]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002c22:	f7fe fb45 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d04f      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c36:	d04a      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002c40:	d045      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002c4a:	d040      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002c54:	d03b      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c5e:	d036      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8002c68:	d031      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8002c72:	d02c      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002c7c:	d027      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8002c86:	d022      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8002c90:	d01d      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8002c9a:	d018      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002ca4:	d013      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	691b      	ldr	r3, [r3, #16]
 8002caa:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8002cae:	d00e      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002cb8:	d009      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8002cc2:	d004      	beq.n	8002cce <HAL_CAN_Init+0x1ca>
 8002cc4:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8002cc8:	4824      	ldr	r0, [pc, #144]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002cca:	f7fe faf1 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d027      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cde:	d022      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ce8:	d01d      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002cf2:	d018      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cfc:	d013      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8002d06:	d00e      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d10:	d009      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8002d1a:	d004      	beq.n	8002d26 <HAL_CAN_Init+0x222>
 8002d1c:	f240 1127 	movw	r1, #295	@ 0x127
 8002d20:	480e      	ldr	r0, [pc, #56]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002d22:	f7fe fac5 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d004      	beq.n	8002d38 <HAL_CAN_Init+0x234>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d36:	d904      	bls.n	8002d42 <HAL_CAN_Init+0x23e>
 8002d38:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <HAL_CAN_Init+0x258>)
 8002d3e:	f7fe fab7 	bl	80012b0 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f7fe f80a 	bl	8000d68 <HAL_CAN_MspInit>
 8002d54:	e004      	b.n	8002d60 <HAL_CAN_Init+0x25c>
 8002d56:	bf00      	nop
 8002d58:	40006400 	.word	0x40006400
 8002d5c:	08008110 	.word	0x08008110
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d70:	f7ff f91a 	bl	8001fa8 <HAL_GetTick>
 8002d74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d76:	e012      	b.n	8002d9e <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d78:	f7ff f916 	bl	8001fa8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b0a      	cmp	r3, #10
 8002d84:	d90b      	bls.n	8002d9e <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2205      	movs	r2, #5
 8002d96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e0c5      	b.n	8002f2a <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0e5      	beq.n	8002d78 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f022 0202 	bic.w	r2, r2, #2
 8002dba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dbc:	f7ff f8f4 	bl	8001fa8 <HAL_GetTick>
 8002dc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dc2:	e012      	b.n	8002dea <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dc4:	f7ff f8f0 	bl	8001fa8 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b0a      	cmp	r3, #10
 8002dd0:	d90b      	bls.n	8002dea <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2205      	movs	r2, #5
 8002de2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e09f      	b.n	8002f2a <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e5      	bne.n	8002dc4 <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7e5b      	ldrb	r3, [r3, #25]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	7e9b      	ldrb	r3, [r3, #26]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d108      	bne.n	8002e66 <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e007      	b.n	8002e76 <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0220 	bic.w	r2, r2, #32
 8002e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	7edb      	ldrb	r3, [r3, #27]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f022 0210 	bic.w	r2, r2, #16
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	e007      	b.n	8002ea0 <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0210 	orr.w	r2, r2, #16
 8002e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d108      	bne.n	8002eba <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	e007      	b.n	8002eca <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0208 	bic.w	r2, r2, #8
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	7f5b      	ldrb	r3, [r3, #29]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d108      	bne.n	8002ee4 <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0204 	orr.w	r2, r2, #4
 8002ee0:	601a      	str	r2, [r3, #0]
 8002ee2:	e007      	b.n	8002ef4 <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0204 	bic.w	r2, r2, #4
 8002ef2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	1e5a      	subs	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop

08002f34 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d12e      	bne.n	8002fa6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 0201 	bic.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f60:	f7ff f822 	bl	8001fa8 <HAL_GetTick>
 8002f64:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f66:	e012      	b.n	8002f8e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f68:	f7ff f81e 	bl	8001fa8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b0a      	cmp	r3, #10
 8002f74:	d90b      	bls.n	8002f8e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2205      	movs	r2, #5
 8002f86:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e012      	b.n	8002fb4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1e5      	bne.n	8002f68 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e006      	b.n	8002fb4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002faa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
 8002fc8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fd0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_CAN_IDTYPE(pHeader->IDE));
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d008      	beq.n	8002ff4 <HAL_CAN_AddTxMessage+0x38>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d004      	beq.n	8002ff4 <HAL_CAN_AddTxMessage+0x38>
 8002fea:	f240 41cf 	movw	r1, #1231	@ 0x4cf
 8002fee:	487f      	ldr	r0, [pc, #508]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 8002ff0:	f7fe f95e 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_RTR(pHeader->RTR));
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d008      	beq.n	800300e <HAL_CAN_AddTxMessage+0x52>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b02      	cmp	r3, #2
 8003002:	d004      	beq.n	800300e <HAL_CAN_AddTxMessage+0x52>
 8003004:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
 8003008:	4878      	ldr	r0, [pc, #480]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 800300a:	f7fe f951 	bl	80012b0 <assert_failed>
  assert_param(IS_CAN_DLC(pHeader->DLC));
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d904      	bls.n	8003020 <HAL_CAN_AddTxMessage+0x64>
 8003016:	f240 41d1 	movw	r1, #1233	@ 0x4d1
 800301a:	4874      	ldr	r0, [pc, #464]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 800301c:	f7fe f948 	bl	80012b0 <assert_failed>
  if (pHeader->IDE == CAN_ID_STD)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <HAL_CAN_AddTxMessage+0x82>
  {
    assert_param(IS_CAN_STDID(pHeader->StdId));
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003030:	d30f      	bcc.n	8003052 <HAL_CAN_AddTxMessage+0x96>
 8003032:	f240 41d4 	movw	r1, #1236	@ 0x4d4
 8003036:	486d      	ldr	r0, [pc, #436]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 8003038:	f7fe f93a 	bl	80012b0 <assert_failed>
 800303c:	e009      	b.n	8003052 <HAL_CAN_AddTxMessage+0x96>
  }
  else
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003046:	d304      	bcc.n	8003052 <HAL_CAN_AddTxMessage+0x96>
 8003048:	f44f 619b 	mov.w	r1, #1240	@ 0x4d8
 800304c:	4867      	ldr	r0, [pc, #412]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 800304e:	f7fe f92f 	bl	80012b0 <assert_failed>
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	7d1b      	ldrb	r3, [r3, #20]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d008      	beq.n	800306c <HAL_CAN_AddTxMessage+0xb0>
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	7d1b      	ldrb	r3, [r3, #20]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d004      	beq.n	800306c <HAL_CAN_AddTxMessage+0xb0>
 8003062:	f240 41da 	movw	r1, #1242	@ 0x4da
 8003066:	4861      	ldr	r0, [pc, #388]	@ (80031ec <HAL_CAN_AddTxMessage+0x230>)
 8003068:	f7fe f922 	bl	80012b0 <assert_failed>

  if ((state == HAL_CAN_STATE_READY) ||
 800306c:	7ffb      	ldrb	r3, [r7, #31]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d003      	beq.n	800307a <HAL_CAN_AddTxMessage+0xbe>
 8003072:	7ffb      	ldrb	r3, [r7, #31]
 8003074:	2b02      	cmp	r3, #2
 8003076:	f040 80ad 	bne.w	80031d4 <HAL_CAN_AddTxMessage+0x218>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10a      	bne.n	800309a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800308a:	2b00      	cmp	r3, #0
 800308c:	d105      	bne.n	800309a <HAL_CAN_AddTxMessage+0xde>
        ((tsr & CAN_TSR_TME2) != 0U))
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8095 	beq.w	80031c4 <HAL_CAN_AddTxMessage+0x208>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80030a4:	2201      	movs	r2, #1
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	409a      	lsls	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10d      	bne.n	80030d2 <HAL_CAN_AddTxMessage+0x116>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80030c0:	68f9      	ldr	r1, [r7, #12]
 80030c2:	6809      	ldr	r1, [r1, #0]
 80030c4:	431a      	orrs	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	3318      	adds	r3, #24
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	440b      	add	r3, r1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	e00f      	b.n	80030f2 <HAL_CAN_AddTxMessage+0x136>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030dc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030e2:	68f9      	ldr	r1, [r7, #12]
 80030e4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80030e6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	3318      	adds	r3, #24
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	440b      	add	r3, r1
 80030f0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	3318      	adds	r3, #24
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	440b      	add	r3, r1
 8003102:	3304      	adds	r3, #4
 8003104:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	7d1b      	ldrb	r3, [r3, #20]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d111      	bne.n	8003132 <HAL_CAN_AddTxMessage+0x176>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	3318      	adds	r3, #24
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	4413      	add	r3, r2
 800311a:	3304      	adds	r3, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	6811      	ldr	r1, [r2, #0]
 8003122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3318      	adds	r3, #24
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	440b      	add	r3, r1
 800312e:	3304      	adds	r3, #4
 8003130:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3307      	adds	r3, #7
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	061a      	lsls	r2, r3, #24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3306      	adds	r3, #6
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	041b      	lsls	r3, r3, #16
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3305      	adds	r3, #5
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4313      	orrs	r3, r2
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	3204      	adds	r2, #4
 8003152:	7812      	ldrb	r2, [r2, #0]
 8003154:	4610      	mov	r0, r2
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	6811      	ldr	r1, [r2, #0]
 800315a:	ea43 0200 	orr.w	r2, r3, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	440b      	add	r3, r1
 8003164:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8003168:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3303      	adds	r3, #3
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	061a      	lsls	r2, r3, #24
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3302      	adds	r3, #2
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	041b      	lsls	r3, r3, #16
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3301      	adds	r3, #1
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	021b      	lsls	r3, r3, #8
 8003184:	4313      	orrs	r3, r2
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	7812      	ldrb	r2, [r2, #0]
 800318a:	4610      	mov	r0, r2
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	6811      	ldr	r1, [r2, #0]
 8003190:	ea43 0200 	orr.w	r2, r3, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	440b      	add	r3, r1
 800319a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800319e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	3318      	adds	r3, #24
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	4413      	add	r3, r2
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	6811      	ldr	r1, [r2, #0]
 80031b2:	f043 0201 	orr.w	r2, r3, #1
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3318      	adds	r3, #24
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	440b      	add	r3, r1
 80031be:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e00e      	b.n	80031e2 <HAL_CAN_AddTxMessage+0x226>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e006      	b.n	80031e2 <HAL_CAN_AddTxMessage+0x226>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3720      	adds	r7, #32
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	08008110 	.word	0x08008110

080031f0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	@ 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b00      	cmp	r3, #0
 8003234:	d07c      	beq.n	8003330 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d023      	beq.n	8003288 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f983 	bl	800355e <HAL_CAN_TxMailbox0CompleteCallback>
 8003258:	e016      	b.n	8003288 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	f003 0304 	and.w	r3, r3, #4
 8003260:	2b00      	cmp	r3, #0
 8003262:	d004      	beq.n	800326e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003266:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800326a:	627b      	str	r3, [r7, #36]	@ 0x24
 800326c:	e00c      	b.n	8003288 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d004      	beq.n	8003282 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800327e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003280:	e002      	b.n	8003288 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f986 	bl	8003594 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800329a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f962 	bl	8003570 <HAL_CAN_TxMailbox1CompleteCallback>
 80032ac:	e016      	b.n	80032dc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ba:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032be:	627b      	str	r3, [r7, #36]	@ 0x24
 80032c0:	e00c      	b.n	80032dc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d004      	beq.n	80032d6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d4:	e002      	b.n	80032dc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f965 	bl	80035a6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d024      	beq.n	8003330 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d003      	beq.n	8003302 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 f941 	bl	8003582 <HAL_CAN_TxMailbox2CompleteCallback>
 8003300:	e016      	b.n	8003330 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d004      	beq.n	8003316 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800330c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
 8003314:	e00c      	b.n	8003330 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d004      	beq.n	800332a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003322:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
 8003328:	e002      	b.n	8003330 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f944 	bl	80035b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003330:	6a3b      	ldr	r3, [r7, #32]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00c      	beq.n	8003354 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f003 0310 	and.w	r3, r3, #16
 8003340:	2b00      	cmp	r3, #0
 8003342:	d007      	beq.n	8003354 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800334a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2210      	movs	r2, #16
 8003352:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00b      	beq.n	8003376 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d006      	beq.n	8003376 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2208      	movs	r2, #8
 800336e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f933 	bl	80035dc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	f003 0302 	and.w	r3, r3, #2
 800337c:	2b00      	cmp	r3, #0
 800337e:	d009      	beq.n	8003394 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f91b 	bl	80035ca <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003394:	6a3b      	ldr	r3, [r7, #32]
 8003396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00c      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d007      	beq.n	80033b8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033ae:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2210      	movs	r2, #16
 80033b6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f003 0320 	and.w	r3, r3, #32
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00b      	beq.n	80033da <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	f003 0308 	and.w	r3, r3, #8
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d006      	beq.n	80033da <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2208      	movs	r2, #8
 80033d2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f913 	bl	8003600 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033da:	6a3b      	ldr	r3, [r7, #32]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	f003 0303 	and.w	r3, r3, #3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f8fb 	bl	80035ee <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033f8:	6a3b      	ldr	r3, [r7, #32]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00b      	beq.n	800341a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2210      	movs	r2, #16
 8003412:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 f8fc 	bl	8003612 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800341a:	6a3b      	ldr	r3, [r7, #32]
 800341c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00b      	beq.n	800343c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d006      	beq.n	800343c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2208      	movs	r2, #8
 8003434:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f8f4 	bl	8003624 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d07b      	beq.n	800353e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0304 	and.w	r3, r3, #4
 800344c:	2b00      	cmp	r3, #0
 800344e:	d072      	beq.n	8003536 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003450:	6a3b      	ldr	r3, [r7, #32]
 8003452:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003456:	2b00      	cmp	r3, #0
 8003458:	d008      	beq.n	800346c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	f043 0301 	orr.w	r3, r3, #1
 800346a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003472:	2b00      	cmp	r3, #0
 8003474:	d008      	beq.n	8003488 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003482:	f043 0302 	orr.w	r3, r3, #2
 8003486:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003488:	6a3b      	ldr	r3, [r7, #32]
 800348a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800348e:	2b00      	cmp	r3, #0
 8003490:	d008      	beq.n	80034a4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800349c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800349e:	f043 0304 	orr.w	r3, r3, #4
 80034a2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d043      	beq.n	8003536 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d03e      	beq.n	8003536 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034be:	2b60      	cmp	r3, #96	@ 0x60
 80034c0:	d02b      	beq.n	800351a <HAL_CAN_IRQHandler+0x32a>
 80034c2:	2b60      	cmp	r3, #96	@ 0x60
 80034c4:	d82e      	bhi.n	8003524 <HAL_CAN_IRQHandler+0x334>
 80034c6:	2b50      	cmp	r3, #80	@ 0x50
 80034c8:	d022      	beq.n	8003510 <HAL_CAN_IRQHandler+0x320>
 80034ca:	2b50      	cmp	r3, #80	@ 0x50
 80034cc:	d82a      	bhi.n	8003524 <HAL_CAN_IRQHandler+0x334>
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d019      	beq.n	8003506 <HAL_CAN_IRQHandler+0x316>
 80034d2:	2b40      	cmp	r3, #64	@ 0x40
 80034d4:	d826      	bhi.n	8003524 <HAL_CAN_IRQHandler+0x334>
 80034d6:	2b30      	cmp	r3, #48	@ 0x30
 80034d8:	d010      	beq.n	80034fc <HAL_CAN_IRQHandler+0x30c>
 80034da:	2b30      	cmp	r3, #48	@ 0x30
 80034dc:	d822      	bhi.n	8003524 <HAL_CAN_IRQHandler+0x334>
 80034de:	2b10      	cmp	r3, #16
 80034e0:	d002      	beq.n	80034e8 <HAL_CAN_IRQHandler+0x2f8>
 80034e2:	2b20      	cmp	r3, #32
 80034e4:	d005      	beq.n	80034f2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034e6:	e01d      	b.n	8003524 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ea:	f043 0308 	orr.w	r3, r3, #8
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034f0:	e019      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f4:	f043 0310 	orr.w	r3, r3, #16
 80034f8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034fa:	e014      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034fe:	f043 0320 	orr.w	r3, r3, #32
 8003502:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003504:	e00f      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800350e:	e00a      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003518:	e005      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003520:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003522:	e000      	b.n	8003526 <HAL_CAN_IRQHandler+0x336>
            break;
 8003524:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	699a      	ldr	r2, [r3, #24]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003534:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2204      	movs	r2, #4
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800353e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003540:	2b00      	cmp	r3, #0
 8003542:	d008      	beq.n	8003556 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f000 f870 	bl	8003636 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003556:	bf00      	nop
 8003558:	3728      	adds	r7, #40	@ 0x28
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr

080035ca <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b083      	sub	sp, #12
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bc80      	pop	{r7}
 80035da:	4770      	bx	lr

080035dc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bc80      	pop	{r7}
 80035ec:	4770      	bx	lr

080035ee <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bc80      	pop	{r7}
 80035fe:	4770      	bx	lr

08003600 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	bc80      	pop	{r7}
 8003610:	4770      	bx	lr

08003612 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr

08003636 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr

08003648 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003658:	4b0c      	ldr	r3, [pc, #48]	@ (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003664:	4013      	ands	r3, r2
 8003666:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003670:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003678:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800367a:	4a04      	ldr	r2, [pc, #16]	@ (800368c <__NVIC_SetPriorityGrouping+0x44>)
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	60d3      	str	r3, [r2, #12]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	e000ed00 	.word	0xe000ed00

08003690 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003694:	4b04      	ldr	r3, [pc, #16]	@ (80036a8 <__NVIC_GetPriorityGrouping+0x18>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	f003 0307 	and.w	r3, r3, #7
}
 800369e:	4618      	mov	r0, r3
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bc80      	pop	{r7}
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000ed00 	.word	0xe000ed00

080036ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	db0b      	blt.n	80036d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	f003 021f 	and.w	r2, r3, #31
 80036c4:	4906      	ldr	r1, [pc, #24]	@ (80036e0 <__NVIC_EnableIRQ+0x34>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	095b      	lsrs	r3, r3, #5
 80036cc:	2001      	movs	r0, #1
 80036ce:	fa00 f202 	lsl.w	r2, r0, r2
 80036d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100

080036e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	4603      	mov	r3, r0
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	db0a      	blt.n	800370e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	490c      	ldr	r1, [pc, #48]	@ (8003730 <__NVIC_SetPriority+0x4c>)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	0112      	lsls	r2, r2, #4
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	440b      	add	r3, r1
 8003708:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800370c:	e00a      	b.n	8003724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	b2da      	uxtb	r2, r3
 8003712:	4908      	ldr	r1, [pc, #32]	@ (8003734 <__NVIC_SetPriority+0x50>)
 8003714:	79fb      	ldrb	r3, [r7, #7]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	3b04      	subs	r3, #4
 800371c:	0112      	lsls	r2, r2, #4
 800371e:	b2d2      	uxtb	r2, r2
 8003720:	440b      	add	r3, r1
 8003722:	761a      	strb	r2, [r3, #24]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003738:	b480      	push	{r7}
 800373a:	b089      	sub	sp, #36	@ 0x24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f1c3 0307 	rsb	r3, r3, #7
 8003752:	2b04      	cmp	r3, #4
 8003754:	bf28      	it	cs
 8003756:	2304      	movcs	r3, #4
 8003758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	3304      	adds	r3, #4
 800375e:	2b06      	cmp	r3, #6
 8003760:	d902      	bls.n	8003768 <NVIC_EncodePriority+0x30>
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	3b03      	subs	r3, #3
 8003766:	e000      	b.n	800376a <NVIC_EncodePriority+0x32>
 8003768:	2300      	movs	r3, #0
 800376a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800376c:	f04f 32ff 	mov.w	r2, #4294967295
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43da      	mvns	r2, r3
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	401a      	ands	r2, r3
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003780:	f04f 31ff 	mov.w	r1, #4294967295
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa01 f303 	lsl.w	r3, r1, r3
 800378a:	43d9      	mvns	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003790:	4313      	orrs	r3, r2
         );
}
 8003792:	4618      	mov	r0, r3
 8003794:	3724      	adds	r7, #36	@ 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	bc80      	pop	{r7}
 800379a:	4770      	bx	lr

0800379c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b082      	sub	sp, #8
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ac:	d301      	bcc.n	80037b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037ae:	2301      	movs	r3, #1
 80037b0:	e00f      	b.n	80037d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037b2:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <SysTick_Config+0x40>)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037ba:	210f      	movs	r1, #15
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295
 80037c0:	f7ff ff90 	bl	80036e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80037c4:	4b05      	ldr	r3, [pc, #20]	@ (80037dc <SysTick_Config+0x40>)
 80037c6:	2200      	movs	r2, #0
 80037c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <SysTick_Config+0x40>)
 80037cc:	2207      	movs	r2, #7
 80037ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	e000e010 	.word	0xe000e010

080037e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b07      	cmp	r3, #7
 80037ec:	d00f      	beq.n	800380e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2b06      	cmp	r3, #6
 80037f2:	d00c      	beq.n	800380e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b05      	cmp	r3, #5
 80037f8:	d009      	beq.n	800380e <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b04      	cmp	r3, #4
 80037fe:	d006      	beq.n	800380e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d003      	beq.n	800380e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003806:	2191      	movs	r1, #145	@ 0x91
 8003808:	4804      	ldr	r0, [pc, #16]	@ (800381c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800380a:	f7fd fd51 	bl	80012b0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff ff1a 	bl	8003648 <__NVIC_SetPriorityGrouping>
}
 8003814:	bf00      	nop
 8003816:	3708      	adds	r7, #8
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08008148 	.word	0x08008148

08003820 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003820:	b580      	push	{r7, lr}
 8003822:	b086      	sub	sp, #24
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b0f      	cmp	r3, #15
 8003836:	d903      	bls.n	8003840 <HAL_NVIC_SetPriority+0x20>
 8003838:	21a9      	movs	r1, #169	@ 0xa9
 800383a:	480e      	ldr	r0, [pc, #56]	@ (8003874 <HAL_NVIC_SetPriority+0x54>)
 800383c:	f7fd fd38 	bl	80012b0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b0f      	cmp	r3, #15
 8003844:	d903      	bls.n	800384e <HAL_NVIC_SetPriority+0x2e>
 8003846:	21aa      	movs	r1, #170	@ 0xaa
 8003848:	480a      	ldr	r0, [pc, #40]	@ (8003874 <HAL_NVIC_SetPriority+0x54>)
 800384a:	f7fd fd31 	bl	80012b0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800384e:	f7ff ff1f 	bl	8003690 <__NVIC_GetPriorityGrouping>
 8003852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f7ff ff6d 	bl	8003738 <NVIC_EncodePriority>
 800385e:	4602      	mov	r2, r0
 8003860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff3c 	bl	80036e4 <__NVIC_SetPriority>
}
 800386c:	bf00      	nop
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	08008148 	.word	0x08008148

08003878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	da03      	bge.n	8003892 <HAL_NVIC_EnableIRQ+0x1a>
 800388a:	21bd      	movs	r1, #189	@ 0xbd
 800388c:	4805      	ldr	r0, [pc, #20]	@ (80038a4 <HAL_NVIC_EnableIRQ+0x2c>)
 800388e:	f7fd fd0f 	bl	80012b0 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	4618      	mov	r0, r3
 8003898:	f7ff ff08 	bl	80036ac <__NVIC_EnableIRQ>
}
 800389c:	bf00      	nop
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	08008148 	.word	0x08008148

080038a8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff73 	bl	800379c <SysTick_Config>
 80038b6:	4603      	mov	r3, r0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0da      	b.n	8003a8c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a6e      	ldr	r2, [pc, #440]	@ (8003a94 <HAL_DMA_Init+0x1d4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d021      	beq.n	8003924 <HAL_DMA_Init+0x64>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a6c      	ldr	r2, [pc, #432]	@ (8003a98 <HAL_DMA_Init+0x1d8>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01c      	beq.n	8003924 <HAL_DMA_Init+0x64>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a6b      	ldr	r2, [pc, #428]	@ (8003a9c <HAL_DMA_Init+0x1dc>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d017      	beq.n	8003924 <HAL_DMA_Init+0x64>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a69      	ldr	r2, [pc, #420]	@ (8003aa0 <HAL_DMA_Init+0x1e0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d012      	beq.n	8003924 <HAL_DMA_Init+0x64>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a68      	ldr	r2, [pc, #416]	@ (8003aa4 <HAL_DMA_Init+0x1e4>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00d      	beq.n	8003924 <HAL_DMA_Init+0x64>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a66      	ldr	r2, [pc, #408]	@ (8003aa8 <HAL_DMA_Init+0x1e8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d008      	beq.n	8003924 <HAL_DMA_Init+0x64>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a65      	ldr	r2, [pc, #404]	@ (8003aac <HAL_DMA_Init+0x1ec>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d003      	beq.n	8003924 <HAL_DMA_Init+0x64>
 800391c:	2199      	movs	r1, #153	@ 0x99
 800391e:	4864      	ldr	r0, [pc, #400]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003920:	f7fd fcc6 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00c      	beq.n	8003946 <HAL_DMA_Init+0x86>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b10      	cmp	r3, #16
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Init+0x86>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800393c:	d003      	beq.n	8003946 <HAL_DMA_Init+0x86>
 800393e:	219a      	movs	r1, #154	@ 0x9a
 8003940:	485b      	ldr	r0, [pc, #364]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003942:	f7fd fcb5 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b40      	cmp	r3, #64	@ 0x40
 800394c:	d007      	beq.n	800395e <HAL_DMA_Init+0x9e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_DMA_Init+0x9e>
 8003956:	219b      	movs	r1, #155	@ 0x9b
 8003958:	4855      	ldr	r0, [pc, #340]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 800395a:	f7fd fca9 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	2b80      	cmp	r3, #128	@ 0x80
 8003964:	d007      	beq.n	8003976 <HAL_DMA_Init+0xb6>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_DMA_Init+0xb6>
 800396e:	219c      	movs	r1, #156	@ 0x9c
 8003970:	484f      	ldr	r0, [pc, #316]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003972:	f7fd fc9d 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00d      	beq.n	800399a <HAL_DMA_Init+0xda>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003986:	d008      	beq.n	800399a <HAL_DMA_Init+0xda>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003990:	d003      	beq.n	800399a <HAL_DMA_Init+0xda>
 8003992:	219d      	movs	r1, #157	@ 0x9d
 8003994:	4846      	ldr	r0, [pc, #280]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003996:	f7fd fc8b 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00d      	beq.n	80039be <HAL_DMA_Init+0xfe>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039aa:	d008      	beq.n	80039be <HAL_DMA_Init+0xfe>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b4:	d003      	beq.n	80039be <HAL_DMA_Init+0xfe>
 80039b6:	219e      	movs	r1, #158	@ 0x9e
 80039b8:	483d      	ldr	r0, [pc, #244]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 80039ba:	f7fd fc79 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d007      	beq.n	80039d6 <HAL_DMA_Init+0x116>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d003      	beq.n	80039d6 <HAL_DMA_Init+0x116>
 80039ce:	219f      	movs	r1, #159	@ 0x9f
 80039d0:	4837      	ldr	r0, [pc, #220]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 80039d2:	f7fd fc6d 	bl	80012b0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d012      	beq.n	8003a04 <HAL_DMA_Init+0x144>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039e6:	d00d      	beq.n	8003a04 <HAL_DMA_Init+0x144>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	69db      	ldr	r3, [r3, #28]
 80039ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039f0:	d008      	beq.n	8003a04 <HAL_DMA_Init+0x144>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039fa:	d003      	beq.n	8003a04 <HAL_DMA_Init+0x144>
 80039fc:	21a0      	movs	r1, #160	@ 0xa0
 80039fe:	482c      	ldr	r0, [pc, #176]	@ (8003ab0 <HAL_DMA_Init+0x1f0>)
 8003a00:	f7fd fc56 	bl	80012b0 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ab4 <HAL_DMA_Init+0x1f4>)
 8003a0c:	4413      	add	r3, r2
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab8 <HAL_DMA_Init+0x1f8>)
 8003a10:	fba2 2303 	umull	r2, r3, r2, r3
 8003a14:	091b      	lsrs	r3, r3, #4
 8003a16:	009a      	lsls	r2, r3, #2
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a27      	ldr	r2, [pc, #156]	@ (8003abc <HAL_DMA_Init+0x1fc>)
 8003a20:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a38:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003a3c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40020008 	.word	0x40020008
 8003a98:	4002001c 	.word	0x4002001c
 8003a9c:	40020030 	.word	0x40020030
 8003aa0:	40020044 	.word	0x40020044
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	4002006c 	.word	0x4002006c
 8003aac:	40020080 	.word	0x40020080
 8003ab0:	08008184 	.word	0x08008184
 8003ab4:	bffdfff8 	.word	0xbffdfff8
 8003ab8:	cccccccd 	.word	0xcccccccd
 8003abc:	40020000 	.word	0x40020000

08003ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
 8003acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_DMA_Start_IT+0x20>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ade:	d304      	bcc.n	8003aea <HAL_DMA_Start_IT+0x2a>
 8003ae0:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8003ae4:	482c      	ldr	r0, [pc, #176]	@ (8003b98 <HAL_DMA_Start_IT+0xd8>)
 8003ae6:	f7fd fbe3 	bl	80012b0 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d101      	bne.n	8003af8 <HAL_DMA_Start_IT+0x38>
 8003af4:	2302      	movs	r3, #2
 8003af6:	e04b      	b.n	8003b90 <HAL_DMA_Start_IT+0xd0>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d13a      	bne.n	8003b82 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0201 	bic.w	r2, r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f000 f9b1 	bl	8003e98 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d008      	beq.n	8003b50 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f042 020e 	orr.w	r2, r2, #14
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	e00f      	b.n	8003b70 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f042 020a 	orr.w	r2, r2, #10
 8003b6e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	e005      	b.n	8003b8e <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	08008184 	.word	0x08008184

08003b9c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d005      	beq.n	8003bc0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	73fb      	strb	r3, [r7, #15]
 8003bbe:	e051      	b.n	8003c64 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f022 020e 	bic.w	r2, r2, #14
 8003bce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0201 	bic.w	r2, r2, #1
 8003bde:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a22      	ldr	r2, [pc, #136]	@ (8003c70 <HAL_DMA_Abort_IT+0xd4>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d029      	beq.n	8003c3e <HAL_DMA_Abort_IT+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	@ (8003c74 <HAL_DMA_Abort_IT+0xd8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort_IT+0x9e>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	@ (8003c78 <HAL_DMA_Abort_IT+0xdc>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01a      	beq.n	8003c34 <HAL_DMA_Abort_IT+0x98>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1e      	ldr	r2, [pc, #120]	@ (8003c7c <HAL_DMA_Abort_IT+0xe0>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d012      	beq.n	8003c2e <HAL_DMA_Abort_IT+0x92>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003c80 <HAL_DMA_Abort_IT+0xe4>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d00a      	beq.n	8003c28 <HAL_DMA_Abort_IT+0x8c>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a1b      	ldr	r2, [pc, #108]	@ (8003c84 <HAL_DMA_Abort_IT+0xe8>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d102      	bne.n	8003c22 <HAL_DMA_Abort_IT+0x86>
 8003c1c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c20:	e00e      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c22:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c26:	e00b      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c2c:	e008      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c32:	e005      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c38:	e002      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c3a:	2310      	movs	r3, #16
 8003c3c:	e000      	b.n	8003c40 <HAL_DMA_Abort_IT+0xa4>
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4a11      	ldr	r2, [pc, #68]	@ (8003c88 <HAL_DMA_Abort_IT+0xec>)
 8003c42:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4798      	blx	r3
    } 
  }
  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40020008 	.word	0x40020008
 8003c74:	4002001c 	.word	0x4002001c
 8003c78:	40020030 	.word	0x40020030
 8003c7c:	40020044 	.word	0x40020044
 8003c80:	40020058 	.word	0x40020058
 8003c84:	4002006c 	.word	0x4002006c
 8003c88:	40020000 	.word	0x40020000

08003c8c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca8:	2204      	movs	r2, #4
 8003caa:	409a      	lsls	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04f      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xc8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d04a      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d107      	bne.n	8003cdc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0204 	bic.w	r2, r2, #4
 8003cda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a66      	ldr	r2, [pc, #408]	@ (8003e7c <HAL_DMA_IRQHandler+0x1f0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d029      	beq.n	8003d3a <HAL_DMA_IRQHandler+0xae>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a65      	ldr	r2, [pc, #404]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d022      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xaa>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a63      	ldr	r2, [pc, #396]	@ (8003e84 <HAL_DMA_IRQHandler+0x1f8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d01a      	beq.n	8003d30 <HAL_DMA_IRQHandler+0xa4>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a62      	ldr	r2, [pc, #392]	@ (8003e88 <HAL_DMA_IRQHandler+0x1fc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d012      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x9e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a60      	ldr	r2, [pc, #384]	@ (8003e8c <HAL_DMA_IRQHandler+0x200>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00a      	beq.n	8003d24 <HAL_DMA_IRQHandler+0x98>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a5f      	ldr	r2, [pc, #380]	@ (8003e90 <HAL_DMA_IRQHandler+0x204>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d102      	bne.n	8003d1e <HAL_DMA_IRQHandler+0x92>
 8003d18:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d1c:	e00e      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d1e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d22:	e00b      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d24:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d28:	e008      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d2e:	e005      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d34:	e002      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d36:	2340      	movs	r3, #64	@ 0x40
 8003d38:	e000      	b.n	8003d3c <HAL_DMA_IRQHandler+0xb0>
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	4a55      	ldr	r2, [pc, #340]	@ (8003e94 <HAL_DMA_IRQHandler+0x208>)
 8003d3e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8094 	beq.w	8003e72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d52:	e08e      	b.n	8003e72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d58:	2202      	movs	r2, #2
 8003d5a:	409a      	lsls	r2, r3
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	4013      	ands	r3, r2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d056      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x186>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d051      	beq.n	8003e12 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0320 	and.w	r3, r3, #32
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10b      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f022 020a 	bic.w	r2, r2, #10
 8003d8a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a38      	ldr	r2, [pc, #224]	@ (8003e7c <HAL_DMA_IRQHandler+0x1f0>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d029      	beq.n	8003df2 <HAL_DMA_IRQHandler+0x166>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a37      	ldr	r2, [pc, #220]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d022      	beq.n	8003dee <HAL_DMA_IRQHandler+0x162>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a35      	ldr	r2, [pc, #212]	@ (8003e84 <HAL_DMA_IRQHandler+0x1f8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d01a      	beq.n	8003de8 <HAL_DMA_IRQHandler+0x15c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a34      	ldr	r2, [pc, #208]	@ (8003e88 <HAL_DMA_IRQHandler+0x1fc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d012      	beq.n	8003de2 <HAL_DMA_IRQHandler+0x156>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a32      	ldr	r2, [pc, #200]	@ (8003e8c <HAL_DMA_IRQHandler+0x200>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d00a      	beq.n	8003ddc <HAL_DMA_IRQHandler+0x150>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a31      	ldr	r2, [pc, #196]	@ (8003e90 <HAL_DMA_IRQHandler+0x204>)
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d102      	bne.n	8003dd6 <HAL_DMA_IRQHandler+0x14a>
 8003dd0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dd4:	e00e      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003dd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dda:	e00b      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003ddc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003de0:	e008      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de6:	e005      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003dec:	e002      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003dee:	2320      	movs	r3, #32
 8003df0:	e000      	b.n	8003df4 <HAL_DMA_IRQHandler+0x168>
 8003df2:	2302      	movs	r3, #2
 8003df4:	4a27      	ldr	r2, [pc, #156]	@ (8003e94 <HAL_DMA_IRQHandler+0x208>)
 8003df6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d034      	beq.n	8003e72 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e10:	e02f      	b.n	8003e72 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e16:	2208      	movs	r2, #8
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d028      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x1e8>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d023      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f022 020e 	bic.w	r2, r2, #14
 8003e3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
    }
  }
  return;
 8003e72:	bf00      	nop
 8003e74:	bf00      	nop
}
 8003e76:	3710      	adds	r7, #16
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40020008 	.word	0x40020008
 8003e80:	4002001c 	.word	0x4002001c
 8003e84:	40020030 	.word	0x40020030
 8003e88:	40020044 	.word	0x40020044
 8003e8c:	40020058 	.word	0x40020058
 8003e90:	4002006c 	.word	0x4002006c
 8003e94:	40020000 	.word	0x40020000

08003e98 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eae:	2101      	movs	r1, #1
 8003eb0:	fa01 f202 	lsl.w	r2, r1, r2
 8003eb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	683a      	ldr	r2, [r7, #0]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d108      	bne.n	8003ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ed6:	e007      	b.n	8003ee8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	60da      	str	r2, [r3, #12]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
	...

08003ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08a      	sub	sp, #40	@ 0x28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003efe:	2300      	movs	r3, #0
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003f02:	2300      	movs	r3, #0
 8003f04:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a96      	ldr	r2, [pc, #600]	@ (8004164 <HAL_GPIO_Init+0x270>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d013      	beq.n	8003f36 <HAL_GPIO_Init+0x42>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a95      	ldr	r2, [pc, #596]	@ (8004168 <HAL_GPIO_Init+0x274>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00f      	beq.n	8003f36 <HAL_GPIO_Init+0x42>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a94      	ldr	r2, [pc, #592]	@ (800416c <HAL_GPIO_Init+0x278>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00b      	beq.n	8003f36 <HAL_GPIO_Init+0x42>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a93      	ldr	r2, [pc, #588]	@ (8004170 <HAL_GPIO_Init+0x27c>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d007      	beq.n	8003f36 <HAL_GPIO_Init+0x42>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a92      	ldr	r2, [pc, #584]	@ (8004174 <HAL_GPIO_Init+0x280>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x42>
 8003f2e:	21bd      	movs	r1, #189	@ 0xbd
 8003f30:	4891      	ldr	r0, [pc, #580]	@ (8004178 <HAL_GPIO_Init+0x284>)
 8003f32:	f7fd f9bd 	bl	80012b0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d004      	beq.n	8003f4a <HAL_GPIO_Init+0x56>
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f48:	d303      	bcc.n	8003f52 <HAL_GPIO_Init+0x5e>
 8003f4a:	21be      	movs	r1, #190	@ 0xbe
 8003f4c:	488a      	ldr	r0, [pc, #552]	@ (8004178 <HAL_GPIO_Init+0x284>)
 8003f4e:	f7fd f9af 	bl	80012b0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 821d 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	f000 8218 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b11      	cmp	r3, #17
 8003f6c:	f000 8213 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	f000 820e 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	2b12      	cmp	r3, #18
 8003f80:	f000 8209 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	4a7c      	ldr	r2, [pc, #496]	@ (800417c <HAL_GPIO_Init+0x288>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	f000 8203 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <HAL_GPIO_Init+0x28c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	f000 81fd 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	4a78      	ldr	r2, [pc, #480]	@ (8004184 <HAL_GPIO_Init+0x290>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	f000 81f7 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a76      	ldr	r2, [pc, #472]	@ (8004188 <HAL_GPIO_Init+0x294>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	f000 81f1 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a74      	ldr	r2, [pc, #464]	@ (800418c <HAL_GPIO_Init+0x298>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	f000 81eb 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	4a72      	ldr	r2, [pc, #456]	@ (8004190 <HAL_GPIO_Init+0x29c>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	f000 81e5 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b03      	cmp	r3, #3
 8003fd2:	f000 81e0 	beq.w	8004396 <HAL_GPIO_Init+0x4a2>
 8003fd6:	21bf      	movs	r1, #191	@ 0xbf
 8003fd8:	4867      	ldr	r0, [pc, #412]	@ (8004178 <HAL_GPIO_Init+0x284>)
 8003fda:	f7fd f969 	bl	80012b0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003fde:	e1da      	b.n	8004396 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	f040 81c9 	bne.w	8004390 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a58      	ldr	r2, [pc, #352]	@ (8004164 <HAL_GPIO_Init+0x270>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x13a>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a57      	ldr	r2, [pc, #348]	@ (8004168 <HAL_GPIO_Init+0x274>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00f      	beq.n	800402e <HAL_GPIO_Init+0x13a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a56      	ldr	r2, [pc, #344]	@ (800416c <HAL_GPIO_Init+0x278>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d00b      	beq.n	800402e <HAL_GPIO_Init+0x13a>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a55      	ldr	r2, [pc, #340]	@ (8004170 <HAL_GPIO_Init+0x27c>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d007      	beq.n	800402e <HAL_GPIO_Init+0x13a>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a54      	ldr	r2, [pc, #336]	@ (8004174 <HAL_GPIO_Init+0x280>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x13a>
 8004026:	21cd      	movs	r1, #205	@ 0xcd
 8004028:	4853      	ldr	r0, [pc, #332]	@ (8004178 <HAL_GPIO_Init+0x284>)
 800402a:	f7fd f941 	bl	80012b0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a57      	ldr	r2, [pc, #348]	@ (8004190 <HAL_GPIO_Init+0x29c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	f000 80c2 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
 800403a:	4a55      	ldr	r2, [pc, #340]	@ (8004190 <HAL_GPIO_Init+0x29c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	f200 80e8 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 8004042:	4a50      	ldr	r2, [pc, #320]	@ (8004184 <HAL_GPIO_Init+0x290>)
 8004044:	4293      	cmp	r3, r2
 8004046:	f000 80ba 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
 800404a:	4a4e      	ldr	r2, [pc, #312]	@ (8004184 <HAL_GPIO_Init+0x290>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f200 80e0 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 8004052:	4a4e      	ldr	r2, [pc, #312]	@ (800418c <HAL_GPIO_Init+0x298>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f000 80b2 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
 800405a:	4a4c      	ldr	r2, [pc, #304]	@ (800418c <HAL_GPIO_Init+0x298>)
 800405c:	4293      	cmp	r3, r2
 800405e:	f200 80d8 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 8004062:	4a47      	ldr	r2, [pc, #284]	@ (8004180 <HAL_GPIO_Init+0x28c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f000 80aa 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
 800406a:	4a45      	ldr	r2, [pc, #276]	@ (8004180 <HAL_GPIO_Init+0x28c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	f200 80d0 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 8004072:	4a45      	ldr	r2, [pc, #276]	@ (8004188 <HAL_GPIO_Init+0x294>)
 8004074:	4293      	cmp	r3, r2
 8004076:	f000 80a2 	beq.w	80041be <HAL_GPIO_Init+0x2ca>
 800407a:	4a43      	ldr	r2, [pc, #268]	@ (8004188 <HAL_GPIO_Init+0x294>)
 800407c:	4293      	cmp	r3, r2
 800407e:	f200 80c8 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 8004082:	2b12      	cmp	r3, #18
 8004084:	d82c      	bhi.n	80040e0 <HAL_GPIO_Init+0x1ec>
 8004086:	2b12      	cmp	r3, #18
 8004088:	f200 80c3 	bhi.w	8004212 <HAL_GPIO_Init+0x31e>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <HAL_GPIO_Init+0x1a0>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080041bf 	.word	0x080041bf
 8004098:	080040e9 	.word	0x080040e9
 800409c:	0800413b 	.word	0x0800413b
 80040a0:	0800420d 	.word	0x0800420d
 80040a4:	08004213 	.word	0x08004213
 80040a8:	08004213 	.word	0x08004213
 80040ac:	08004213 	.word	0x08004213
 80040b0:	08004213 	.word	0x08004213
 80040b4:	08004213 	.word	0x08004213
 80040b8:	08004213 	.word	0x08004213
 80040bc:	08004213 	.word	0x08004213
 80040c0:	08004213 	.word	0x08004213
 80040c4:	08004213 	.word	0x08004213
 80040c8:	08004213 	.word	0x08004213
 80040cc:	08004213 	.word	0x08004213
 80040d0:	08004213 	.word	0x08004213
 80040d4:	08004213 	.word	0x08004213
 80040d8:	08004111 	.word	0x08004111
 80040dc:	08004195 	.word	0x08004195
 80040e0:	4a26      	ldr	r2, [pc, #152]	@ (800417c <HAL_GPIO_Init+0x288>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d06b      	beq.n	80041be <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040e6:	e094      	b.n	8004212 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d00b      	beq.n	8004108 <HAL_GPIO_Init+0x214>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d007      	beq.n	8004108 <HAL_GPIO_Init+0x214>
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b03      	cmp	r3, #3
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x214>
 8004100:	21d5      	movs	r1, #213	@ 0xd5
 8004102:	481d      	ldr	r0, [pc, #116]	@ (8004178 <HAL_GPIO_Init+0x284>)
 8004104:	f7fd f8d4 	bl	80012b0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	623b      	str	r3, [r7, #32]
          break;
 800410e:	e081      	b.n	8004214 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b02      	cmp	r3, #2
 8004116:	d00b      	beq.n	8004130 <HAL_GPIO_Init+0x23c>
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d007      	beq.n	8004130 <HAL_GPIO_Init+0x23c>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d003      	beq.n	8004130 <HAL_GPIO_Init+0x23c>
 8004128:	21dc      	movs	r1, #220	@ 0xdc
 800412a:	4813      	ldr	r0, [pc, #76]	@ (8004178 <HAL_GPIO_Init+0x284>)
 800412c:	f7fd f8c0 	bl	80012b0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	3304      	adds	r3, #4
 8004136:	623b      	str	r3, [r7, #32]
          break;
 8004138:	e06c      	b.n	8004214 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d00b      	beq.n	800415a <HAL_GPIO_Init+0x266>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2b01      	cmp	r3, #1
 8004148:	d007      	beq.n	800415a <HAL_GPIO_Init+0x266>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	68db      	ldr	r3, [r3, #12]
 800414e:	2b03      	cmp	r3, #3
 8004150:	d003      	beq.n	800415a <HAL_GPIO_Init+0x266>
 8004152:	21e3      	movs	r1, #227	@ 0xe3
 8004154:	4808      	ldr	r0, [pc, #32]	@ (8004178 <HAL_GPIO_Init+0x284>)
 8004156:	f7fd f8ab 	bl	80012b0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	3308      	adds	r3, #8
 8004160:	623b      	str	r3, [r7, #32]
          break;
 8004162:	e057      	b.n	8004214 <HAL_GPIO_Init+0x320>
 8004164:	40010800 	.word	0x40010800
 8004168:	40010c00 	.word	0x40010c00
 800416c:	40011000 	.word	0x40011000
 8004170:	40011400 	.word	0x40011400
 8004174:	40011800 	.word	0x40011800
 8004178:	080081bc 	.word	0x080081bc
 800417c:	10110000 	.word	0x10110000
 8004180:	10210000 	.word	0x10210000
 8004184:	10310000 	.word	0x10310000
 8004188:	10120000 	.word	0x10120000
 800418c:	10220000 	.word	0x10220000
 8004190:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d00b      	beq.n	80041b4 <HAL_GPIO_Init+0x2c0>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d007      	beq.n	80041b4 <HAL_GPIO_Init+0x2c0>
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b03      	cmp	r3, #3
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2c0>
 80041ac:	21ea      	movs	r1, #234	@ 0xea
 80041ae:	4880      	ldr	r0, [pc, #512]	@ (80043b0 <HAL_GPIO_Init+0x4bc>)
 80041b0:	f7fd f87e 	bl	80012b0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	330c      	adds	r3, #12
 80041ba:	623b      	str	r3, [r7, #32]
          break;
 80041bc:	e02a      	b.n	8004214 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_GPIO_Init+0x2ea>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d007      	beq.n	80041de <HAL_GPIO_Init+0x2ea>
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_Init+0x2ea>
 80041d6:	21f7      	movs	r1, #247	@ 0xf7
 80041d8:	4875      	ldr	r0, [pc, #468]	@ (80043b0 <HAL_GPIO_Init+0x4bc>)
 80041da:	f7fd f869 	bl	80012b0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80041e6:	2304      	movs	r3, #4
 80041e8:	623b      	str	r3, [r7, #32]
          break;
 80041ea:	e013      	b.n	8004214 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d105      	bne.n	8004200 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80041f4:	2308      	movs	r3, #8
 80041f6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	69fa      	ldr	r2, [r7, #28]
 80041fc:	611a      	str	r2, [r3, #16]
          break;
 80041fe:	e009      	b.n	8004214 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004200:	2308      	movs	r3, #8
 8004202:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	615a      	str	r2, [r3, #20]
          break;
 800420a:	e003      	b.n	8004214 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800420c:	2300      	movs	r3, #0
 800420e:	623b      	str	r3, [r7, #32]
          break;
 8004210:	e000      	b.n	8004214 <HAL_GPIO_Init+0x320>
          break;
 8004212:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2bff      	cmp	r3, #255	@ 0xff
 8004218:	d801      	bhi.n	800421e <HAL_GPIO_Init+0x32a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	e001      	b.n	8004222 <HAL_GPIO_Init+0x32e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	3304      	adds	r3, #4
 8004222:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	2bff      	cmp	r3, #255	@ 0xff
 8004228:	d802      	bhi.n	8004230 <HAL_GPIO_Init+0x33c>
 800422a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	e002      	b.n	8004236 <HAL_GPIO_Init+0x342>
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	3b08      	subs	r3, #8
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	210f      	movs	r1, #15
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	43db      	mvns	r3, r3
 8004246:	401a      	ands	r2, r3
 8004248:	6a39      	ldr	r1, [r7, #32]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	fa01 f303 	lsl.w	r3, r1, r3
 8004250:	431a      	orrs	r2, r3
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8096 	beq.w	8004390 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004264:	4b53      	ldr	r3, [pc, #332]	@ (80043b4 <HAL_GPIO_Init+0x4c0>)
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	4a52      	ldr	r2, [pc, #328]	@ (80043b4 <HAL_GPIO_Init+0x4c0>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	6193      	str	r3, [r2, #24]
 8004270:	4b50      	ldr	r3, [pc, #320]	@ (80043b4 <HAL_GPIO_Init+0x4c0>)
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800427c:	4a4e      	ldr	r2, [pc, #312]	@ (80043b8 <HAL_GPIO_Init+0x4c4>)
 800427e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004280:	089b      	lsrs	r3, r3, #2
 8004282:	3302      	adds	r3, #2
 8004284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004288:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800428a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	220f      	movs	r2, #15
 8004294:	fa02 f303 	lsl.w	r3, r2, r3
 8004298:	43db      	mvns	r3, r3
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a46      	ldr	r2, [pc, #280]	@ (80043bc <HAL_GPIO_Init+0x4c8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_GPIO_Init+0x3dc>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a45      	ldr	r2, [pc, #276]	@ (80043c0 <HAL_GPIO_Init+0x4cc>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d00d      	beq.n	80042cc <HAL_GPIO_Init+0x3d8>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a44      	ldr	r2, [pc, #272]	@ (80043c4 <HAL_GPIO_Init+0x4d0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d007      	beq.n	80042c8 <HAL_GPIO_Init+0x3d4>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	4a43      	ldr	r2, [pc, #268]	@ (80043c8 <HAL_GPIO_Init+0x4d4>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d101      	bne.n	80042c4 <HAL_GPIO_Init+0x3d0>
 80042c0:	2303      	movs	r3, #3
 80042c2:	e006      	b.n	80042d2 <HAL_GPIO_Init+0x3de>
 80042c4:	2304      	movs	r3, #4
 80042c6:	e004      	b.n	80042d2 <HAL_GPIO_Init+0x3de>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e002      	b.n	80042d2 <HAL_GPIO_Init+0x3de>
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <HAL_GPIO_Init+0x3de>
 80042d0:	2300      	movs	r3, #0
 80042d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042d4:	f002 0203 	and.w	r2, r2, #3
 80042d8:	0092      	lsls	r2, r2, #2
 80042da:	4093      	lsls	r3, r2
 80042dc:	68fa      	ldr	r2, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80042e2:	4935      	ldr	r1, [pc, #212]	@ (80043b8 <HAL_GPIO_Init+0x4c4>)
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	089b      	lsrs	r3, r3, #2
 80042e8:	3302      	adds	r3, #2
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80042fc:	4b33      	ldr	r3, [pc, #204]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	4932      	ldr	r1, [pc, #200]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	608b      	str	r3, [r1, #8]
 8004308:	e006      	b.n	8004318 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800430a:	4b30      	ldr	r3, [pc, #192]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	43db      	mvns	r3, r3
 8004312:	492e      	ldr	r1, [pc, #184]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004314:	4013      	ands	r3, r2
 8004316:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d006      	beq.n	8004332 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004324:	4b29      	ldr	r3, [pc, #164]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	4928      	ldr	r1, [pc, #160]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	60cb      	str	r3, [r1, #12]
 8004330:	e006      	b.n	8004340 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004332:	4b26      	ldr	r3, [pc, #152]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	43db      	mvns	r3, r3
 800433a:	4924      	ldr	r1, [pc, #144]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800433c:	4013      	ands	r3, r2
 800433e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d006      	beq.n	800435a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800434c:	4b1f      	ldr	r3, [pc, #124]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	491e      	ldr	r1, [pc, #120]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4313      	orrs	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
 8004358:	e006      	b.n	8004368 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800435a:	4b1c      	ldr	r3, [pc, #112]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800435c:	685a      	ldr	r2, [r3, #4]
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	43db      	mvns	r3, r3
 8004362:	491a      	ldr	r1, [pc, #104]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004364:	4013      	ands	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d006      	beq.n	8004382 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004374:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	4914      	ldr	r1, [pc, #80]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	600b      	str	r3, [r1, #0]
 8004380:	e006      	b.n	8004390 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004382:	4b12      	ldr	r3, [pc, #72]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	43db      	mvns	r3, r3
 800438a:	4910      	ldr	r1, [pc, #64]	@ (80043cc <HAL_GPIO_Init+0x4d8>)
 800438c:	4013      	ands	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004392:	3301      	adds	r3, #1
 8004394:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f47f ae1d 	bne.w	8003fe0 <HAL_GPIO_Init+0xec>
  }
}
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
 80043aa:	3728      	adds	r7, #40	@ 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	080081bc 	.word	0x080081bc
 80043b4:	40021000 	.word	0x40021000
 80043b8:	40010000 	.word	0x40010000
 80043bc:	40010800 	.word	0x40010800
 80043c0:	40010c00 	.word	0x40010c00
 80043c4:	40011000 	.word	0x40011000
 80043c8:	40011400 	.word	0x40011400
 80043cc:	40010400 	.word	0x40010400

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80043e0:	887b      	ldrh	r3, [r7, #2]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d104      	bne.n	80043f0 <HAL_GPIO_WritePin+0x20>
 80043e6:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80043ea:	480e      	ldr	r0, [pc, #56]	@ (8004424 <HAL_GPIO_WritePin+0x54>)
 80043ec:	f7fc ff60 	bl	80012b0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_GPIO_WritePin+0x36>
 80043f6:	787b      	ldrb	r3, [r7, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d004      	beq.n	8004406 <HAL_GPIO_WritePin+0x36>
 80043fc:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8004400:	4808      	ldr	r0, [pc, #32]	@ (8004424 <HAL_GPIO_WritePin+0x54>)
 8004402:	f7fc ff55 	bl	80012b0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8004406:	787b      	ldrb	r3, [r7, #1]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d003      	beq.n	8004414 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 800440c:	887a      	ldrh	r2, [r7, #2]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004412:	e003      	b.n	800441c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004414:	887b      	ldrh	r3, [r7, #2]
 8004416:	041a      	lsls	r2, r3, #16
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	611a      	str	r2, [r3, #16]
}
 800441c:	bf00      	nop
 800441e:	3708      	adds	r7, #8
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}
 8004424:	080081bc 	.word	0x080081bc

08004428 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	4603      	mov	r3, r0
 8004430:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004432:	4b08      	ldr	r3, [pc, #32]	@ (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004434:	695a      	ldr	r2, [r3, #20]
 8004436:	88fb      	ldrh	r3, [r7, #6]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004440:	88fb      	ldrh	r3, [r7, #6]
 8004442:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004444:	88fb      	ldrh	r3, [r7, #6]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f806 	bl	8004458 <HAL_GPIO_EXTI_Callback>
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40010400 	.word	0x40010400

08004458 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e1b4      	b.n	80047e8 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a9b      	ldr	r2, [pc, #620]	@ (80046f0 <HAL_I2C_Init+0x284>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_I2C_Init+0x30>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a99      	ldr	r2, [pc, #612]	@ (80046f4 <HAL_I2C_Init+0x288>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_I2C_Init+0x30>
 8004492:	f240 11db 	movw	r1, #475	@ 0x1db
 8004496:	4898      	ldr	r0, [pc, #608]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 8004498:	f7fc ff0a 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_I2C_Init+0x42>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a94      	ldr	r2, [pc, #592]	@ (80046fc <HAL_I2C_Init+0x290>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d904      	bls.n	80044b8 <HAL_I2C_Init+0x4c>
 80044ae:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80044b2:	4891      	ldr	r0, [pc, #580]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 80044b4:	f7fc fefc 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d009      	beq.n	80044d4 <HAL_I2C_Init+0x68>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044c8:	d004      	beq.n	80044d4 <HAL_I2C_Init+0x68>
 80044ca:	f240 11dd 	movw	r1, #477	@ 0x1dd
 80044ce:	488a      	ldr	r0, [pc, #552]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 80044d0:	f7fc feee 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044dc:	d304      	bcc.n	80044e8 <HAL_I2C_Init+0x7c>
 80044de:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80044e2:	4885      	ldr	r0, [pc, #532]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 80044e4:	f7fc fee4 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	691b      	ldr	r3, [r3, #16]
 80044ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044f0:	d009      	beq.n	8004506 <HAL_I2C_Init+0x9a>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80044fa:	d004      	beq.n	8004506 <HAL_I2C_Init+0x9a>
 80044fc:	f240 11df 	movw	r1, #479	@ 0x1df
 8004500:	487d      	ldr	r0, [pc, #500]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 8004502:	f7fc fed5 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d008      	beq.n	8004520 <HAL_I2C_Init+0xb4>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d004      	beq.n	8004520 <HAL_I2C_Init+0xb4>
 8004516:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800451a:	4877      	ldr	r0, [pc, #476]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 800451c:	f7fc fec8 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004528:	2b00      	cmp	r3, #0
 800452a:	d004      	beq.n	8004536 <HAL_I2C_Init+0xca>
 800452c:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8004530:	4871      	ldr	r0, [pc, #452]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 8004532:	f7fc febd 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	69db      	ldr	r3, [r3, #28]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d008      	beq.n	8004550 <HAL_I2C_Init+0xe4>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	2b40      	cmp	r3, #64	@ 0x40
 8004544:	d004      	beq.n	8004550 <HAL_I2C_Init+0xe4>
 8004546:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800454a:	486b      	ldr	r0, [pc, #428]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 800454c:	f7fc feb0 	bl	80012b0 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d008      	beq.n	800456a <HAL_I2C_Init+0xfe>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2b80      	cmp	r3, #128	@ 0x80
 800455e:	d004      	beq.n	800456a <HAL_I2C_Init+0xfe>
 8004560:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8004564:	4864      	ldr	r0, [pc, #400]	@ (80046f8 <HAL_I2C_Init+0x28c>)
 8004566:	f7fc fea3 	bl	80012b0 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d106      	bne.n	8004584 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f7fc fd4e 	bl	8001020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2224      	movs	r2, #36	@ 0x24
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0201 	bic.w	r2, r2, #1
 800459a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045bc:	f000 fe76 	bl	80052ac <HAL_RCC_GetPCLK1Freq>
 80045c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004700 <HAL_I2C_Init+0x294>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d807      	bhi.n	80045dc <HAL_I2C_Init+0x170>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a4d      	ldr	r2, [pc, #308]	@ (8004704 <HAL_I2C_Init+0x298>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	bf94      	ite	ls
 80045d4:	2301      	movls	r3, #1
 80045d6:	2300      	movhi	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	e006      	b.n	80045ea <HAL_I2C_Init+0x17e>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	4a4a      	ldr	r2, [pc, #296]	@ (8004708 <HAL_I2C_Init+0x29c>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	bf94      	ite	ls
 80045e4:	2301      	movls	r3, #1
 80045e6:	2300      	movhi	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0fa      	b.n	80047e8 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	4a45      	ldr	r2, [pc, #276]	@ (800470c <HAL_I2C_Init+0x2a0>)
 80045f6:	fba2 2303 	umull	r2, r3, r2, r3
 80045fa:	0c9b      	lsrs	r3, r3, #18
 80045fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	430a      	orrs	r2, r1
 8004610:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a37      	ldr	r2, [pc, #220]	@ (8004700 <HAL_I2C_Init+0x294>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d802      	bhi.n	800462c <HAL_I2C_Init+0x1c0>
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	3301      	adds	r3, #1
 800462a:	e009      	b.n	8004640 <HAL_I2C_Init+0x1d4>
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	4a36      	ldr	r2, [pc, #216]	@ (8004710 <HAL_I2C_Init+0x2a4>)
 8004638:	fba2 2303 	umull	r2, r3, r2, r3
 800463c:	099b      	lsrs	r3, r3, #6
 800463e:	3301      	adds	r3, #1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6812      	ldr	r2, [r2, #0]
 8004644:	430b      	orrs	r3, r1
 8004646:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004652:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4929      	ldr	r1, [pc, #164]	@ (8004700 <HAL_I2C_Init+0x294>)
 800465c:	428b      	cmp	r3, r1
 800465e:	d819      	bhi.n	8004694 <HAL_I2C_Init+0x228>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e59      	subs	r1, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	fbb1 f3f3 	udiv	r3, r1, r3
 800466e:	1c59      	adds	r1, r3, #1
 8004670:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004674:	400b      	ands	r3, r1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00a      	beq.n	8004690 <HAL_I2C_Init+0x224>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e59      	subs	r1, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	fbb1 f3f3 	udiv	r3, r1, r3
 8004688:	3301      	adds	r3, #1
 800468a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468e:	e064      	b.n	800475a <HAL_I2C_Init+0x2ee>
 8004690:	2304      	movs	r3, #4
 8004692:	e062      	b.n	800475a <HAL_I2C_Init+0x2ee>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d111      	bne.n	80046c0 <HAL_I2C_Init+0x254>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e58      	subs	r0, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	460b      	mov	r3, r1
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	e012      	b.n	80046e6 <HAL_I2C_Init+0x27a>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e58      	subs	r0, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6859      	ldr	r1, [r3, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	0099      	lsls	r1, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bf0c      	ite	eq
 80046e0:	2301      	moveq	r3, #1
 80046e2:	2300      	movne	r3, #0
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d014      	beq.n	8004714 <HAL_I2C_Init+0x2a8>
 80046ea:	2301      	movs	r3, #1
 80046ec:	e035      	b.n	800475a <HAL_I2C_Init+0x2ee>
 80046ee:	bf00      	nop
 80046f0:	40005400 	.word	0x40005400
 80046f4:	40005800 	.word	0x40005800
 80046f8:	080081f8 	.word	0x080081f8
 80046fc:	00061a80 	.word	0x00061a80
 8004700:	000186a0 	.word	0x000186a0
 8004704:	001e847f 	.word	0x001e847f
 8004708:	003d08ff 	.word	0x003d08ff
 800470c:	431bde83 	.word	0x431bde83
 8004710:	10624dd3 	.word	0x10624dd3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10e      	bne.n	800473a <HAL_I2C_Init+0x2ce>
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	1e58      	subs	r0, r3, #1
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6859      	ldr	r1, [r3, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	440b      	add	r3, r1
 800472a:	fbb0 f3f3 	udiv	r3, r0, r3
 800472e:	3301      	adds	r3, #1
 8004730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004734:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004738:	e00f      	b.n	800475a <HAL_I2C_Init+0x2ee>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	1e58      	subs	r0, r3, #1
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6859      	ldr	r1, [r3, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	440b      	add	r3, r1
 8004748:	0099      	lsls	r1, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004750:	3301      	adds	r3, #1
 8004752:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004756:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	6809      	ldr	r1, [r1, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	69da      	ldr	r2, [r3, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	431a      	orrs	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	430a      	orrs	r2, r1
 800477c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004788:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6911      	ldr	r1, [r2, #16]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	68d2      	ldr	r2, [r2, #12]
 8004794:	4311      	orrs	r1, r2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	6812      	ldr	r2, [r2, #0]
 800479a:	430b      	orrs	r3, r1
 800479c:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f042 0201 	orr.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b086      	sub	sp, #24
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d101      	bne.n	8004802 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e35a      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d01c      	beq.n	8004844 <HAL_RCC_OscConfig+0x54>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0301 	and.w	r3, r3, #1
 8004812:	2b00      	cmp	r3, #0
 8004814:	d116      	bne.n	8004844 <HAL_RCC_OscConfig+0x54>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d110      	bne.n	8004844 <HAL_RCC_OscConfig+0x54>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10a      	bne.n	8004844 <HAL_RCC_OscConfig+0x54>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 0304 	and.w	r3, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	d104      	bne.n	8004844 <HAL_RCC_OscConfig+0x54>
 800483a:	f240 1165 	movw	r1, #357	@ 0x165
 800483e:	488f      	ldr	r0, [pc, #572]	@ (8004a7c <HAL_RCC_OscConfig+0x28c>)
 8004840:	f7fc fd36 	bl	80012b0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 809a 	beq.w	8004986 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00e      	beq.n	8004878 <HAL_RCC_OscConfig+0x88>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004862:	d009      	beq.n	8004878 <HAL_RCC_OscConfig+0x88>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800486c:	d004      	beq.n	8004878 <HAL_RCC_OscConfig+0x88>
 800486e:	f240 116b 	movw	r1, #363	@ 0x16b
 8004872:	4882      	ldr	r0, [pc, #520]	@ (8004a7c <HAL_RCC_OscConfig+0x28c>)
 8004874:	f7fc fd1c 	bl	80012b0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004878:	4b81      	ldr	r3, [pc, #516]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b04      	cmp	r3, #4
 8004882:	d00c      	beq.n	800489e <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004884:	4b7e      	ldr	r3, [pc, #504]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	d112      	bne.n	80048b6 <HAL_RCC_OscConfig+0xc6>
 8004890:	4b7b      	ldr	r3, [pc, #492]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800489c:	d10b      	bne.n	80048b6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800489e:	4b78      	ldr	r3, [pc, #480]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d06c      	beq.n	8004984 <HAL_RCC_OscConfig+0x194>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d168      	bne.n	8004984 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e300      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048be:	d106      	bne.n	80048ce <HAL_RCC_OscConfig+0xde>
 80048c0:	4b6f      	ldr	r3, [pc, #444]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a6e      	ldr	r2, [pc, #440]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e02e      	b.n	800492c <HAL_RCC_OscConfig+0x13c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10c      	bne.n	80048f0 <HAL_RCC_OscConfig+0x100>
 80048d6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a69      	ldr	r2, [pc, #420]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	4b67      	ldr	r3, [pc, #412]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a66      	ldr	r2, [pc, #408]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ec:	6013      	str	r3, [r2, #0]
 80048ee:	e01d      	b.n	800492c <HAL_RCC_OscConfig+0x13c>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048f8:	d10c      	bne.n	8004914 <HAL_RCC_OscConfig+0x124>
 80048fa:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a60      	ldr	r2, [pc, #384]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	4b5e      	ldr	r3, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a5d      	ldr	r2, [pc, #372]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e00b      	b.n	800492c <HAL_RCC_OscConfig+0x13c>
 8004914:	4b5a      	ldr	r3, [pc, #360]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a59      	ldr	r2, [pc, #356]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 800491a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	4b57      	ldr	r3, [pc, #348]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a56      	ldr	r2, [pc, #344]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004926:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800492a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d013      	beq.n	800495c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004934:	f7fd fb38 	bl	8001fa8 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800493c:	f7fd fb34 	bl	8001fa8 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b64      	cmp	r3, #100	@ 0x64
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e2b4      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x14c>
 800495a:	e014      	b.n	8004986 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495c:	f7fd fb24 	bl	8001fa8 <HAL_GetTick>
 8004960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004962:	e008      	b.n	8004976 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004964:	f7fd fb20 	bl	8001fa8 <HAL_GetTick>
 8004968:	4602      	mov	r2, r0
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	1ad3      	subs	r3, r2, r3
 800496e:	2b64      	cmp	r3, #100	@ 0x64
 8004970:	d901      	bls.n	8004976 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e2a0      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	4b42      	ldr	r3, [pc, #264]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1f0      	bne.n	8004964 <HAL_RCC_OscConfig+0x174>
 8004982:	e000      	b.n	8004986 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8080 	beq.w	8004a94 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_OscConfig+0x1be>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d004      	beq.n	80049ae <HAL_RCC_OscConfig+0x1be>
 80049a4:	f240 119f 	movw	r1, #415	@ 0x19f
 80049a8:	4834      	ldr	r0, [pc, #208]	@ (8004a7c <HAL_RCC_OscConfig+0x28c>)
 80049aa:	f7fc fc81 	bl	80012b0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b1f      	cmp	r3, #31
 80049b4:	d904      	bls.n	80049c0 <HAL_RCC_OscConfig+0x1d0>
 80049b6:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80049ba:	4830      	ldr	r0, [pc, #192]	@ (8004a7c <HAL_RCC_OscConfig+0x28c>)
 80049bc:	f7fc fc78 	bl	80012b0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049c0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f003 030c 	and.w	r3, r3, #12
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00b      	beq.n	80049e4 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049cc:	4b2c      	ldr	r3, [pc, #176]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f003 030c 	and.w	r3, r3, #12
 80049d4:	2b08      	cmp	r3, #8
 80049d6:	d11c      	bne.n	8004a12 <HAL_RCC_OscConfig+0x222>
 80049d8:	4b29      	ldr	r3, [pc, #164]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d116      	bne.n	8004a12 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e4:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d005      	beq.n	80049fc <HAL_RCC_OscConfig+0x20c>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e25d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fc:	4b20      	ldr	r3, [pc, #128]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	491d      	ldr	r1, [pc, #116]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a10:	e040      	b.n	8004a94 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d020      	beq.n	8004a5c <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004a84 <HAL_RCC_OscConfig+0x294>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a20:	f7fd fac2 	bl	8001fa8 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a28:	f7fd fabe 	bl	8001fa8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e23e      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3a:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	490a      	ldr	r1, [pc, #40]	@ (8004a80 <HAL_RCC_OscConfig+0x290>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	600b      	str	r3, [r1, #0]
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x294>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a62:	f7fd faa1 	bl	8001fa8 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a68:	e00e      	b.n	8004a88 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6a:	f7fd fa9d 	bl	8001fa8 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d907      	bls.n	8004a88 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e21d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
 8004a7c:	08008230 	.word	0x08008230
 8004a80:	40021000 	.word	0x40021000
 8004a84:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a88:	4b7d      	ldr	r3, [pc, #500]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0308 	and.w	r3, r3, #8
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d040      	beq.n	8004b22 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_RCC_OscConfig+0x2ca>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d004      	beq.n	8004aba <HAL_RCC_OscConfig+0x2ca>
 8004ab0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8004ab4:	4873      	ldr	r0, [pc, #460]	@ (8004c84 <HAL_RCC_OscConfig+0x494>)
 8004ab6:	f7fc fbfb 	bl	80012b0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d019      	beq.n	8004af6 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ac2:	4b71      	ldr	r3, [pc, #452]	@ (8004c88 <HAL_RCC_OscConfig+0x498>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac8:	f7fd fa6e 	bl	8001fa8 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fa6a 	bl	8001fa8 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e1ea      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	4b67      	ldr	r3, [pc, #412]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d0f0      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 fbf0 	bl	80052d4 <RCC_Delay>
 8004af4:	e015      	b.n	8004b22 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004af6:	4b64      	ldr	r3, [pc, #400]	@ (8004c88 <HAL_RCC_OscConfig+0x498>)
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004afc:	f7fd fa54 	bl	8001fa8 <HAL_GetTick>
 8004b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b02:	e008      	b.n	8004b16 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b04:	f7fd fa50 	bl	8001fa8 <HAL_GetTick>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d901      	bls.n	8004b16 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e1d0      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b16:	4b5a      	ldr	r3, [pc, #360]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f0      	bne.n	8004b04 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0304 	and.w	r3, r3, #4
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f000 80bf 	beq.w	8004cae <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00c      	beq.n	8004b56 <HAL_RCC_OscConfig+0x366>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d008      	beq.n	8004b56 <HAL_RCC_OscConfig+0x366>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b05      	cmp	r3, #5
 8004b4a:	d004      	beq.n	8004b56 <HAL_RCC_OscConfig+0x366>
 8004b4c:	f240 210f 	movw	r1, #527	@ 0x20f
 8004b50:	484c      	ldr	r0, [pc, #304]	@ (8004c84 <HAL_RCC_OscConfig+0x494>)
 8004b52:	f7fc fbad 	bl	80012b0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b56:	4b4a      	ldr	r3, [pc, #296]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10d      	bne.n	8004b7e <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b62:	4b47      	ldr	r3, [pc, #284]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	4a46      	ldr	r2, [pc, #280]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b6c:	61d3      	str	r3, [r2, #28]
 8004b6e:	4b44      	ldr	r3, [pc, #272]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	60bb      	str	r3, [r7, #8]
 8004b78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7e:	4b43      	ldr	r3, [pc, #268]	@ (8004c8c <HAL_RCC_OscConfig+0x49c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d118      	bne.n	8004bbc <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b8a:	4b40      	ldr	r3, [pc, #256]	@ (8004c8c <HAL_RCC_OscConfig+0x49c>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3f      	ldr	r2, [pc, #252]	@ (8004c8c <HAL_RCC_OscConfig+0x49c>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b96:	f7fd fa07 	bl	8001fa8 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b9e:	f7fd fa03 	bl	8001fa8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	@ 0x64
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e183      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb0:	4b36      	ldr	r3, [pc, #216]	@ (8004c8c <HAL_RCC_OscConfig+0x49c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d0f0      	beq.n	8004b9e <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x3e2>
 8004bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004bc6:	6a1b      	ldr	r3, [r3, #32]
 8004bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6213      	str	r3, [r2, #32]
 8004bd0:	e02d      	b.n	8004c2e <HAL_RCC_OscConfig+0x43e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10c      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x404>
 8004bda:	4b29      	ldr	r3, [pc, #164]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4a28      	ldr	r2, [pc, #160]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004be0:	f023 0301 	bic.w	r3, r3, #1
 8004be4:	6213      	str	r3, [r2, #32]
 8004be6:	4b26      	ldr	r3, [pc, #152]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	4a25      	ldr	r2, [pc, #148]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004bec:	f023 0304 	bic.w	r3, r3, #4
 8004bf0:	6213      	str	r3, [r2, #32]
 8004bf2:	e01c      	b.n	8004c2e <HAL_RCC_OscConfig+0x43e>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	d10c      	bne.n	8004c16 <HAL_RCC_OscConfig+0x426>
 8004bfc:	4b20      	ldr	r3, [pc, #128]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a1f      	ldr	r2, [pc, #124]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c02:	f043 0304 	orr.w	r3, r3, #4
 8004c06:	6213      	str	r3, [r2, #32]
 8004c08:	4b1d      	ldr	r3, [pc, #116]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6213      	str	r3, [r2, #32]
 8004c14:	e00b      	b.n	8004c2e <HAL_RCC_OscConfig+0x43e>
 8004c16:	4b1a      	ldr	r3, [pc, #104]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	4a19      	ldr	r2, [pc, #100]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c1c:	f023 0301 	bic.w	r3, r3, #1
 8004c20:	6213      	str	r3, [r2, #32]
 8004c22:	4b17      	ldr	r3, [pc, #92]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	4a16      	ldr	r2, [pc, #88]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c28:	f023 0304 	bic.w	r3, r3, #4
 8004c2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d015      	beq.n	8004c62 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c36:	f7fd f9b7 	bl	8001fa8 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3c:	e00a      	b.n	8004c54 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c3e:	f7fd f9b3 	bl	8001fa8 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e131      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	4b0a      	ldr	r3, [pc, #40]	@ (8004c80 <HAL_RCC_OscConfig+0x490>)
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ee      	beq.n	8004c3e <HAL_RCC_OscConfig+0x44e>
 8004c60:	e01c      	b.n	8004c9c <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c62:	f7fd f9a1 	bl	8001fa8 <HAL_GetTick>
 8004c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c68:	e012      	b.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6a:	f7fd f99d 	bl	8001fa8 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d909      	bls.n	8004c90 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e11b      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08008230 	.word	0x08008230
 8004c88:	42420480 	.word	0x42420480
 8004c8c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c90:	4b8b      	ldr	r3, [pc, #556]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1e6      	bne.n	8004c6a <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c9c:	7dfb      	ldrb	r3, [r7, #23]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d105      	bne.n	8004cae <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ca2:	4b87      	ldr	r3, [pc, #540]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004ca4:	69db      	ldr	r3, [r3, #28]
 8004ca6:	4a86      	ldr	r2, [pc, #536]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004ca8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cac:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d004      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x4e0>
 8004cc6:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8004cca:	487e      	ldr	r0, [pc, #504]	@ (8004ec4 <HAL_RCC_OscConfig+0x6d4>)
 8004ccc:	f7fc faf0 	bl	80012b0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	69db      	ldr	r3, [r3, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80ee 	beq.w	8004eb6 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cda:	4b79      	ldr	r3, [pc, #484]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	f003 030c 	and.w	r3, r3, #12
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	f000 80ce 	beq.w	8004e84 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	f040 80b2 	bne.w	8004e56 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d009      	beq.n	8004d0e <HAL_RCC_OscConfig+0x51e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d02:	d004      	beq.n	8004d0e <HAL_RCC_OscConfig+0x51e>
 8004d04:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8004d08:	486e      	ldr	r0, [pc, #440]	@ (8004ec4 <HAL_RCC_OscConfig+0x6d4>)
 8004d0a:	f7fc fad1 	bl	80012b0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d04a      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d1e:	d045      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d28:	d040      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d32:	d03b      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004d3c:	d036      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d42:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8004d46:	d031      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004d50:	d02c      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8004d5a:	d027      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d60:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d64:	d022      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004d6e:	d01d      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d74:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004d78:	d018      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004d82:	d013      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d8c:	d00e      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d92:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 8004d96:	d009      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8004da0:	d004      	beq.n	8004dac <HAL_RCC_OscConfig+0x5bc>
 8004da2:	f240 21b7 	movw	r1, #695	@ 0x2b7
 8004da6:	4847      	ldr	r0, [pc, #284]	@ (8004ec4 <HAL_RCC_OscConfig+0x6d4>)
 8004da8:	f7fc fa82 	bl	80012b0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dac:	4b46      	ldr	r3, [pc, #280]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d8>)
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004db2:	f7fd f8f9 	bl	8001fa8 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dba:	f7fd f8f5 	bl	8001fa8 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e075      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1f0      	bne.n	8004dba <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de0:	d116      	bne.n	8004e10 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCC_OscConfig+0x60e>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004df2:	d004      	beq.n	8004dfe <HAL_RCC_OscConfig+0x60e>
 8004df4:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8004df8:	4832      	ldr	r0, [pc, #200]	@ (8004ec4 <HAL_RCC_OscConfig+0x6d4>)
 8004dfa:	f7fc fa59 	bl	80012b0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004dfe:	4b30      	ldr	r3, [pc, #192]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	492d      	ldr	r1, [pc, #180]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a19      	ldr	r1, [r3, #32]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	430b      	orrs	r3, r1
 8004e22:	4927      	ldr	r1, [pc, #156]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e28:	4b27      	ldr	r3, [pc, #156]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d8>)
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2e:	f7fd f8bb 	bl	8001fa8 <HAL_GetTick>
 8004e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e34:	e008      	b.n	8004e48 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fd f8b7 	bl	8001fa8 <HAL_GetTick>
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	1ad3      	subs	r3, r2, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d901      	bls.n	8004e48 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e037      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004e48:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0f0      	beq.n	8004e36 <HAL_RCC_OscConfig+0x646>
 8004e54:	e02f      	b.n	8004eb6 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <HAL_RCC_OscConfig+0x6d8>)
 8004e58:	2200      	movs	r2, #0
 8004e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fd f8a4 	bl	8001fa8 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fd f8a0 	bl	8001fa8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e020      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e76:	4b12      	ldr	r3, [pc, #72]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x674>
 8004e82:	e018      	b.n	8004eb6 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d101      	bne.n	8004e90 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	e013      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004e90:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec0 <HAL_RCC_OscConfig+0x6d0>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	08008230 	.word	0x08008230
 8004ec8:	42420060 	.word	0x42420060

08004ecc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e176      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d116      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x4e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0302 	and.w	r3, r3, #2
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d110      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x4e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d10a      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x4e>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d104      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x4e>
 8004f10:	f240 3136 	movw	r1, #822	@ 0x336
 8004f14:	4874      	ldr	r0, [pc, #464]	@ (80050e8 <HAL_RCC_ClockConfig+0x21c>)
 8004f16:	f7fc f9cb 	bl	80012b0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x6a>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d007      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x6a>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d004      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x6a>
 8004f2c:	f240 3137 	movw	r1, #823	@ 0x337
 8004f30:	486d      	ldr	r0, [pc, #436]	@ (80050e8 <HAL_RCC_ClockConfig+0x21c>)
 8004f32:	f7fc f9bd 	bl	80012b0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f36:	4b6d      	ldr	r3, [pc, #436]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0307 	and.w	r3, r3, #7
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d910      	bls.n	8004f66 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f44:	4b69      	ldr	r3, [pc, #420]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f023 0207 	bic.w	r2, r3, #7
 8004f4c:	4967      	ldr	r1, [pc, #412]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f54:	4b65      	ldr	r3, [pc, #404]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e133      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d049      	beq.n	8005006 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d005      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f7e:	4b5c      	ldr	r3, [pc, #368]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a5b      	ldr	r2, [pc, #364]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8004f84:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004f88:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d005      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f96:	4b56      	ldr	r3, [pc, #344]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a55      	ldr	r2, [pc, #340]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8004f9c:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fa0:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d024      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	2b80      	cmp	r3, #128	@ 0x80
 8004fb0:	d020      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b90      	cmp	r3, #144	@ 0x90
 8004fb8:	d01c      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	2ba0      	cmp	r3, #160	@ 0xa0
 8004fc0:	d018      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	2bb0      	cmp	r3, #176	@ 0xb0
 8004fc8:	d014      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fd0:	d010      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2bd0      	cmp	r3, #208	@ 0xd0
 8004fd8:	d00c      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	2be0      	cmp	r3, #224	@ 0xe0
 8004fe0:	d008      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	2bf0      	cmp	r3, #240	@ 0xf0
 8004fe8:	d004      	beq.n	8004ff4 <HAL_RCC_ClockConfig+0x128>
 8004fea:	f240 315d 	movw	r1, #861	@ 0x35d
 8004fee:	483e      	ldr	r0, [pc, #248]	@ (80050e8 <HAL_RCC_ClockConfig+0x21c>)
 8004ff0:	f7fc f95e 	bl	80012b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ff4:	4b3e      	ldr	r3, [pc, #248]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	493b      	ldr	r1, [pc, #236]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d051      	beq.n	80050b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d00c      	beq.n	8005034 <HAL_RCC_ClockConfig+0x168>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d008      	beq.n	8005034 <HAL_RCC_ClockConfig+0x168>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d004      	beq.n	8005034 <HAL_RCC_ClockConfig+0x168>
 800502a:	f44f 7159 	mov.w	r1, #868	@ 0x364
 800502e:	482e      	ldr	r0, [pc, #184]	@ (80050e8 <HAL_RCC_ClockConfig+0x21c>)
 8005030:	f7fc f93e 	bl	80012b0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d107      	bne.n	800504c <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503c:	4b2c      	ldr	r3, [pc, #176]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d115      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e0c0      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	685b      	ldr	r3, [r3, #4]
 8005050:	2b02      	cmp	r3, #2
 8005052:	d107      	bne.n	8005064 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005054:	4b26      	ldr	r3, [pc, #152]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d109      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e0b4      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005064:	4b22      	ldr	r3, [pc, #136]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d101      	bne.n	8005074 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e0ac      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005074:	4b1e      	ldr	r3, [pc, #120]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f023 0203 	bic.w	r2, r3, #3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	491b      	ldr	r1, [pc, #108]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 8005082:	4313      	orrs	r3, r2
 8005084:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005086:	f7fc ff8f 	bl	8001fa8 <HAL_GetTick>
 800508a:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508c:	e00a      	b.n	80050a4 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800508e:	f7fc ff8b 	bl	8001fa8 <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800509c:	4293      	cmp	r3, r2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e094      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a4:	4b12      	ldr	r3, [pc, #72]	@ (80050f0 <HAL_RCC_ClockConfig+0x224>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 020c 	and.w	r2, r3, #12
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d1eb      	bne.n	800508e <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050b6:	4b0d      	ldr	r3, [pc, #52]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0307 	and.w	r3, r3, #7
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d217      	bcs.n	80050f4 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c4:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f023 0207 	bic.w	r2, r3, #7
 80050cc:	4907      	ldr	r1, [pc, #28]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d4:	4b05      	ldr	r3, [pc, #20]	@ (80050ec <HAL_RCC_ClockConfig+0x220>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d008      	beq.n	80050f4 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e073      	b.n	80051ce <HAL_RCC_ClockConfig+0x302>
 80050e6:	bf00      	nop
 80050e8:	08008230 	.word	0x08008230
 80050ec:	40022000 	.word	0x40022000
 80050f0:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d025      	beq.n	800514c <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d018      	beq.n	800513a <HAL_RCC_ClockConfig+0x26e>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005110:	d013      	beq.n	800513a <HAL_RCC_ClockConfig+0x26e>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800511a:	d00e      	beq.n	800513a <HAL_RCC_ClockConfig+0x26e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x26e>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800512e:	d004      	beq.n	800513a <HAL_RCC_ClockConfig+0x26e>
 8005130:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8005134:	4828      	ldr	r0, [pc, #160]	@ (80051d8 <HAL_RCC_ClockConfig+0x30c>)
 8005136:	f7fc f8bb 	bl	80012b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800513a:	4b28      	ldr	r3, [pc, #160]	@ (80051dc <HAL_RCC_ClockConfig+0x310>)
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	4925      	ldr	r1, [pc, #148]	@ (80051dc <HAL_RCC_ClockConfig+0x310>)
 8005148:	4313      	orrs	r3, r2
 800514a:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d026      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d018      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2c6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005168:	d013      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2c6>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005172:	d00e      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2c6>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691b      	ldr	r3, [r3, #16]
 8005178:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800517c:	d009      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2c6>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005186:	d004      	beq.n	8005192 <HAL_RCC_ClockConfig+0x2c6>
 8005188:	f240 31a9 	movw	r1, #937	@ 0x3a9
 800518c:	4812      	ldr	r0, [pc, #72]	@ (80051d8 <HAL_RCC_ClockConfig+0x30c>)
 800518e:	f7fc f88f 	bl	80012b0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005192:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <HAL_RCC_ClockConfig+0x310>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	490e      	ldr	r1, [pc, #56]	@ (80051dc <HAL_RCC_ClockConfig+0x310>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051a6:	f000 f821 	bl	80051ec <HAL_RCC_GetSysClockFreq>
 80051aa:	4602      	mov	r2, r0
 80051ac:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <HAL_RCC_ClockConfig+0x310>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	091b      	lsrs	r3, r3, #4
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	490a      	ldr	r1, [pc, #40]	@ (80051e0 <HAL_RCC_ClockConfig+0x314>)
 80051b8:	5ccb      	ldrb	r3, [r1, r3]
 80051ba:	fa22 f303 	lsr.w	r3, r2, r3
 80051be:	4a09      	ldr	r2, [pc, #36]	@ (80051e4 <HAL_RCC_ClockConfig+0x318>)
 80051c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80051c2:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <HAL_RCC_ClockConfig+0x31c>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fc feac 	bl	8001f24 <HAL_InitTick>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	08008230 	.word	0x08008230
 80051dc:	40021000 	.word	0x40021000
 80051e0:	08008350 	.word	0x08008350
 80051e4:	20000000 	.word	0x20000000
 80051e8:	20000004 	.word	0x20000004

080051ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	60fb      	str	r3, [r7, #12]
 80051f6:	2300      	movs	r3, #0
 80051f8:	60bb      	str	r3, [r7, #8]
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	2300      	movs	r3, #0
 8005200:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005202:	2300      	movs	r3, #0
 8005204:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005206:	4b1e      	ldr	r3, [pc, #120]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x94>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 030c 	and.w	r3, r3, #12
 8005212:	2b04      	cmp	r3, #4
 8005214:	d002      	beq.n	800521c <HAL_RCC_GetSysClockFreq+0x30>
 8005216:	2b08      	cmp	r3, #8
 8005218:	d003      	beq.n	8005222 <HAL_RCC_GetSysClockFreq+0x36>
 800521a:	e027      	b.n	800526c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800521c:	4b19      	ldr	r3, [pc, #100]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x98>)
 800521e:	613b      	str	r3, [r7, #16]
      break;
 8005220:	e027      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0c9b      	lsrs	r3, r3, #18
 8005226:	f003 030f 	and.w	r3, r3, #15
 800522a:	4a17      	ldr	r2, [pc, #92]	@ (8005288 <HAL_RCC_GetSysClockFreq+0x9c>)
 800522c:	5cd3      	ldrb	r3, [r2, r3]
 800522e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d010      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800523a:	4b11      	ldr	r3, [pc, #68]	@ (8005280 <HAL_RCC_GetSysClockFreq+0x94>)
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	0c5b      	lsrs	r3, r3, #17
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	4a11      	ldr	r2, [pc, #68]	@ (800528c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005246:	5cd3      	ldrb	r3, [r2, r3]
 8005248:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a0d      	ldr	r2, [pc, #52]	@ (8005284 <HAL_RCC_GetSysClockFreq+0x98>)
 800524e:	fb03 f202 	mul.w	r2, r3, r2
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	fbb2 f3f3 	udiv	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	e004      	b.n	8005266 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0c      	ldr	r2, [pc, #48]	@ (8005290 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005260:	fb02 f303 	mul.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	613b      	str	r3, [r7, #16]
      break;
 800526a:	e002      	b.n	8005272 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800526c:	4b09      	ldr	r3, [pc, #36]	@ (8005294 <HAL_RCC_GetSysClockFreq+0xa8>)
 800526e:	613b      	str	r3, [r7, #16]
      break;
 8005270:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005272:	693b      	ldr	r3, [r7, #16]
}
 8005274:	4618      	mov	r0, r3
 8005276:	371c      	adds	r7, #28
 8005278:	46bd      	mov	sp, r7
 800527a:	bc80      	pop	{r7}
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40021000 	.word	0x40021000
 8005284:	00f42400 	.word	0x00f42400
 8005288:	08008368 	.word	0x08008368
 800528c:	08008378 	.word	0x08008378
 8005290:	003d0900 	.word	0x003d0900
 8005294:	007a1200 	.word	0x007a1200

08005298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800529c:	4b02      	ldr	r3, [pc, #8]	@ (80052a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800529e:	681b      	ldr	r3, [r3, #0]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bc80      	pop	{r7}
 80052a6:	4770      	bx	lr
 80052a8:	20000000 	.word	0x20000000

080052ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052b0:	f7ff fff2 	bl	8005298 <HAL_RCC_GetHCLKFreq>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b05      	ldr	r3, [pc, #20]	@ (80052cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	4903      	ldr	r1, [pc, #12]	@ (80052d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052c2:	5ccb      	ldrb	r3, [r1, r3]
 80052c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40021000 	.word	0x40021000
 80052d0:	08008360 	.word	0x08008360

080052d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052dc:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <RCC_Delay+0x34>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a0a      	ldr	r2, [pc, #40]	@ (800530c <RCC_Delay+0x38>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0a5b      	lsrs	r3, r3, #9
 80052e8:	687a      	ldr	r2, [r7, #4]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052f0:	bf00      	nop
  }
  while (Delay --);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	1e5a      	subs	r2, r3, #1
 80052f6:	60fa      	str	r2, [r7, #12]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1f9      	bne.n	80052f0 <RCC_Delay+0x1c>
}
 80052fc:	bf00      	nop
 80052fe:	bf00      	nop
 8005300:	3714      	adds	r7, #20
 8005302:	46bd      	mov	sp, r7
 8005304:	bc80      	pop	{r7}
 8005306:	4770      	bx	lr
 8005308:	20000000 	.word	0x20000000
 800530c:	10624dd3 	.word	0x10624dd3

08005310 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10f      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d109      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8005344:	216a      	movs	r1, #106	@ 0x6a
 8005346:	4873      	ldr	r0, [pc, #460]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005348:	f7fb ffb2 	bl	80012b0 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	2b00      	cmp	r3, #0
 8005356:	f000 8095 	beq.w	8005484 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 800535a:	2300      	movs	r3, #0
 800535c:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d012      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800536e:	d00d      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005378:	d008      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005384:	2172      	movs	r1, #114	@ 0x72
 8005386:	4863      	ldr	r0, [pc, #396]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8005388:	f7fb ff92 	bl	80012b0 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800538c:	4b62      	ldr	r3, [pc, #392]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800538e:	69db      	ldr	r3, [r3, #28]
 8005390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005398:	4b5f      	ldr	r3, [pc, #380]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	4a5e      	ldr	r2, [pc, #376]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800539e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a2:	61d3      	str	r3, [r2, #28]
 80053a4:	4b5c      	ldr	r3, [pc, #368]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053a6:	69db      	ldr	r3, [r3, #28]
 80053a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053b0:	2301      	movs	r3, #1
 80053b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053b4:	4b59      	ldr	r3, [pc, #356]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d118      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053c0:	4b56      	ldr	r3, [pc, #344]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a55      	ldr	r2, [pc, #340]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80053c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053cc:	f7fc fdec 	bl	8001fa8 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053d2:	e008      	b.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053d4:	f7fc fde8 	bl	8001fa8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b64      	cmp	r3, #100	@ 0x64
 80053e0:	d901      	bls.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e092      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053e6:	4b4d      	ldr	r3, [pc, #308]	@ (800551c <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053f2:	4b49      	ldr	r3, [pc, #292]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053fa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d02e      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	429a      	cmp	r2, r3
 800540e:	d027      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005410:	4b41      	ldr	r3, [pc, #260]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005418:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800541a:	4b41      	ldr	r3, [pc, #260]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800541c:	2201      	movs	r2, #1
 800541e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005420:	4b3f      	ldr	r3, [pc, #252]	@ (8005520 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005426:	4a3c      	ldr	r2, [pc, #240]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fc fdb7 	bl	8001fa8 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800543c:	e00a      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543e:	f7fc fdb3 	bl	8001fa8 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544c:	4293      	cmp	r3, r2
 800544e:	d901      	bls.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e05b      	b.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005454:	4b30      	ldr	r3, [pc, #192]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b00      	cmp	r3, #0
 800545e:	d0ee      	beq.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005460:	4b2d      	ldr	r3, [pc, #180]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	492a      	ldr	r1, [pc, #168]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800546e:	4313      	orrs	r3, r2
 8005470:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005472:	7dfb      	ldrb	r3, [r7, #23]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d105      	bne.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005478:	4b27      	ldr	r3, [pc, #156]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	4a26      	ldr	r2, [pc, #152]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800547e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005482:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01f      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d012      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054a0:	d00d      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054aa:	d008      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054b4:	d003      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80054b6:	21b7      	movs	r1, #183	@ 0xb7
 80054b8:	4816      	ldr	r0, [pc, #88]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80054ba:	f7fb fef9 	bl	80012b0 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054be:	4b16      	ldr	r3, [pc, #88]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	4913      	ldr	r1, [pc, #76]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0310 	and.w	r3, r3, #16
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d016      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054e4:	d008      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d004      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80054ee:	f240 1113 	movw	r1, #275	@ 0x113
 80054f2:	4808      	ldr	r0, [pc, #32]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80054f4:	f7fb fedc 	bl	80012b0 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80054f8:	4b07      	ldr	r3, [pc, #28]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	4904      	ldr	r1, [pc, #16]	@ (8005518 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8005506:	4313      	orrs	r3, r2
 8005508:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800550a:	2300      	movs	r3, #0
}
 800550c:	4618      	mov	r0, r3
 800550e:	3718      	adds	r7, #24
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	08008268 	.word	0x08008268
 8005518:	40021000 	.word	0x40021000
 800551c:	40007000 	.word	0x40007000
 8005520:	42420440 	.word	0x42420440

08005524 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b082      	sub	sp, #8
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e16d      	b.n	8005812 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6b      	ldr	r2, [pc, #428]	@ (80056e8 <HAL_SPI_Init+0x1c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d009      	beq.n	8005554 <HAL_SPI_Init+0x30>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a69      	ldr	r2, [pc, #420]	@ (80056ec <HAL_SPI_Init+0x1c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d004      	beq.n	8005554 <HAL_SPI_Init+0x30>
 800554a:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 800554e:	4868      	ldr	r0, [pc, #416]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 8005550:	f7fb feae 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <HAL_SPI_Init+0x4c>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005564:	d004      	beq.n	8005570 <HAL_SPI_Init+0x4c>
 8005566:	f240 1157 	movw	r1, #343	@ 0x157
 800556a:	4861      	ldr	r0, [pc, #388]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 800556c:	f7fb fea0 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00e      	beq.n	8005596 <HAL_SPI_Init+0x72>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005580:	d009      	beq.n	8005596 <HAL_SPI_Init+0x72>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800558a:	d004      	beq.n	8005596 <HAL_SPI_Init+0x72>
 800558c:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8005590:	4857      	ldr	r0, [pc, #348]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 8005592:	f7fb fe8d 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800559e:	d008      	beq.n	80055b2 <HAL_SPI_Init+0x8e>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <HAL_SPI_Init+0x8e>
 80055a8:	f240 1159 	movw	r1, #345	@ 0x159
 80055ac:	4850      	ldr	r0, [pc, #320]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 80055ae:	f7fb fe7f 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055ba:	d00d      	beq.n	80055d8 <HAL_SPI_Init+0xb4>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d009      	beq.n	80055d8 <HAL_SPI_Init+0xb4>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80055cc:	d004      	beq.n	80055d8 <HAL_SPI_Init+0xb4>
 80055ce:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80055d2:	4847      	ldr	r0, [pc, #284]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 80055d4:	f7fb fe6c 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69db      	ldr	r3, [r3, #28]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d020      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	2b08      	cmp	r3, #8
 80055e6:	d01c      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	69db      	ldr	r3, [r3, #28]
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d018      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	69db      	ldr	r3, [r3, #28]
 80055f4:	2b18      	cmp	r3, #24
 80055f6:	d014      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d010      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b28      	cmp	r3, #40	@ 0x28
 8005606:	d00c      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69db      	ldr	r3, [r3, #28]
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d008      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	2b38      	cmp	r3, #56	@ 0x38
 8005616:	d004      	beq.n	8005622 <HAL_SPI_Init+0xfe>
 8005618:	f240 115b 	movw	r1, #347	@ 0x15b
 800561c:	4834      	ldr	r0, [pc, #208]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 800561e:	f7fb fe47 	bl	80012b0 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <HAL_SPI_Init+0x118>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	2b80      	cmp	r3, #128	@ 0x80
 8005630:	d004      	beq.n	800563c <HAL_SPI_Init+0x118>
 8005632:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005636:	482e      	ldr	r0, [pc, #184]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 8005638:	f7fb fe3a 	bl	80012b0 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	2b00      	cmp	r3, #0
 8005642:	d004      	beq.n	800564e <HAL_SPI_Init+0x12a>
 8005644:	f240 115f 	movw	r1, #351	@ 0x15f
 8005648:	4829      	ldr	r0, [pc, #164]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 800564a:	f7fb fe31 	bl	80012b0 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005652:	2b00      	cmp	r3, #0
 8005654:	d14e      	bne.n	80056f4 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d008      	beq.n	8005670 <HAL_SPI_Init+0x14c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	2b02      	cmp	r3, #2
 8005664:	d004      	beq.n	8005670 <HAL_SPI_Init+0x14c>
 8005666:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800566a:	4821      	ldr	r0, [pc, #132]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 800566c:	f7fb fe20 	bl	80012b0 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_SPI_Init+0x166>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	695b      	ldr	r3, [r3, #20]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d004      	beq.n	800568a <HAL_SPI_Init+0x166>
 8005680:	f240 1163 	movw	r1, #355	@ 0x163
 8005684:	481a      	ldr	r0, [pc, #104]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 8005686:	f7fb fe13 	bl	80012b0 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005692:	d125      	bne.n	80056e0 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d056      	beq.n	800574a <HAL_SPI_Init+0x226>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b08      	cmp	r3, #8
 80056a2:	d052      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	2b10      	cmp	r3, #16
 80056aa:	d04e      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	2b18      	cmp	r3, #24
 80056b2:	d04a      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	69db      	ldr	r3, [r3, #28]
 80056b8:	2b20      	cmp	r3, #32
 80056ba:	d046      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	2b28      	cmp	r3, #40	@ 0x28
 80056c2:	d042      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	2b30      	cmp	r3, #48	@ 0x30
 80056ca:	d03e      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2b38      	cmp	r3, #56	@ 0x38
 80056d2:	d03a      	beq.n	800574a <HAL_SPI_Init+0x226>
 80056d4:	f240 1167 	movw	r1, #359	@ 0x167
 80056d8:	4805      	ldr	r0, [pc, #20]	@ (80056f0 <HAL_SPI_Init+0x1cc>)
 80056da:	f7fb fde9 	bl	80012b0 <assert_failed>
 80056de:	e034      	b.n	800574a <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	61da      	str	r2, [r3, #28]
 80056e6:	e030      	b.n	800574a <HAL_SPI_Init+0x226>
 80056e8:	40013000 	.word	0x40013000
 80056ec:	40003800 	.word	0x40003800
 80056f0:	080082a4 	.word	0x080082a4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d020      	beq.n	800573e <HAL_SPI_Init+0x21a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d01c      	beq.n	800573e <HAL_SPI_Init+0x21a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	2b10      	cmp	r3, #16
 800570a:	d018      	beq.n	800573e <HAL_SPI_Init+0x21a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	69db      	ldr	r3, [r3, #28]
 8005710:	2b18      	cmp	r3, #24
 8005712:	d014      	beq.n	800573e <HAL_SPI_Init+0x21a>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	2b20      	cmp	r3, #32
 800571a:	d010      	beq.n	800573e <HAL_SPI_Init+0x21a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	2b28      	cmp	r3, #40	@ 0x28
 8005722:	d00c      	beq.n	800573e <HAL_SPI_Init+0x21a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	2b30      	cmp	r3, #48	@ 0x30
 800572a:	d008      	beq.n	800573e <HAL_SPI_Init+0x21a>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	69db      	ldr	r3, [r3, #28]
 8005730:	2b38      	cmp	r3, #56	@ 0x38
 8005732:	d004      	beq.n	800573e <HAL_SPI_Init+0x21a>
 8005734:	f240 1171 	movw	r1, #369	@ 0x171
 8005738:	4838      	ldr	r0, [pc, #224]	@ (800581c <HAL_SPI_Init+0x2f8>)
 800573a:	f7fb fdb9 	bl	80012b0 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005756:	b2db      	uxtb	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7fb fe45 	bl	80013f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2202      	movs	r2, #2
 800576e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005780:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	431a      	orrs	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	431a      	orrs	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ba:	431a      	orrs	r2, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69db      	ldr	r3, [r3, #28]
 80057c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ce:	ea42 0103 	orr.w	r1, r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	0c1a      	lsrs	r2, r3, #16
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f002 0204 	and.w	r2, r2, #4
 80057f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005800:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005810:	2300      	movs	r3, #0
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	080082a4 	.word	0x080082a4

08005820 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08c      	sub	sp, #48	@ 0x30
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800582e:	2301      	movs	r3, #1
 8005830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <HAL_SPI_TransmitReceive+0x2a>
 8005840:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 8005844:	4886      	ldr	r0, [pc, #536]	@ (8005a60 <HAL_SPI_TransmitReceive+0x240>)
 8005846:	f7fb fd33 	bl	80012b0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005850:	2b01      	cmp	r3, #1
 8005852:	d101      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x38>
 8005854:	2302      	movs	r3, #2
 8005856:	e19b      	b.n	8005b90 <HAL_SPI_TransmitReceive+0x370>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005860:	f7fc fba2 	bl	8001fa8 <HAL_GetTick>
 8005864:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800586c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005876:	887b      	ldrh	r3, [r7, #2]
 8005878:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800587a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800587e:	2b01      	cmp	r3, #1
 8005880:	d00f      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x82>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005888:	d107      	bne.n	800589a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d103      	bne.n	800589a <HAL_SPI_TransmitReceive+0x7a>
 8005892:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005896:	2b04      	cmp	r3, #4
 8005898:	d003      	beq.n	80058a2 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058a0:	e170      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d005      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x94>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_SPI_TransmitReceive+0x94>
 80058ae:	887b      	ldrh	r3, [r7, #2]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d103      	bne.n	80058bc <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80058ba:	e163      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	d003      	beq.n	80058d0 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2205      	movs	r2, #5
 80058cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2200      	movs	r2, #0
 80058d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	887a      	ldrh	r2, [r7, #2]
 80058e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	887a      	ldrh	r2, [r7, #2]
 80058e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	68ba      	ldr	r2, [r7, #8]
 80058ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	887a      	ldrh	r2, [r7, #2]
 80058f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	887a      	ldrh	r2, [r7, #2]
 80058f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2200      	movs	r2, #0
 80058fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b40      	cmp	r3, #64	@ 0x40
 8005912:	d007      	beq.n	8005924 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005922:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800592c:	d17c      	bne.n	8005a28 <HAL_SPI_TransmitReceive+0x208>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_SPI_TransmitReceive+0x11c>
 8005936:	8b7b      	ldrh	r3, [r7, #26]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d16a      	bne.n	8005a12 <HAL_SPI_TransmitReceive+0x1f2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	881a      	ldrh	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594c:	1c9a      	adds	r2, r3, #2
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29a      	uxth	r2, r3
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005960:	e057      	b.n	8005a12 <HAL_SPI_TransmitReceive+0x1f2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d11b      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x188>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005974:	b29b      	uxth	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d016      	beq.n	80059a8 <HAL_SPI_TransmitReceive+0x188>
 800597a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d113      	bne.n	80059a8 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	881a      	ldrh	r2, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	1c9a      	adds	r2, r3, #2
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800599a:	b29b      	uxth	r3, r3
 800599c:	3b01      	subs	r3, #1
 800599e:	b29a      	uxth	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d119      	bne.n	80059ea <HAL_SPI_TransmitReceive+0x1ca>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d014      	beq.n	80059ea <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059ca:	b292      	uxth	r2, r2
 80059cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d2:	1c9a      	adds	r2, r3, #2
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80059e6:	2301      	movs	r3, #1
 80059e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80059ea:	f7fc fadd 	bl	8001fa8 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d80b      	bhi.n	8005a12 <HAL_SPI_TransmitReceive+0x1f2>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d007      	beq.n	8005a12 <HAL_SPI_TransmitReceive+0x1f2>
      {
        errorcode = HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005a10:	e0b8      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1a2      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x142>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d19d      	bne.n	8005962 <HAL_SPI_TransmitReceive+0x142>
 8005a26:	e083      	b.n	8005b30 <HAL_SPI_TransmitReceive+0x310>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d002      	beq.n	8005a36 <HAL_SPI_TransmitReceive+0x216>
 8005a30:	8b7b      	ldrh	r3, [r7, #26]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d172      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x2fc>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	7812      	ldrb	r2, [r2, #0]
 8005a42:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a52:	b29b      	uxth	r3, r3
 8005a54:	3b01      	subs	r3, #1
 8005a56:	b29a      	uxth	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a5c:	e05e      	b.n	8005b1c <HAL_SPI_TransmitReceive+0x2fc>
 8005a5e:	bf00      	nop
 8005a60:	080082a4 	.word	0x080082a4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d11c      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x28c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d017      	beq.n	8005aac <HAL_SPI_TransmitReceive+0x28c>
 8005a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d114      	bne.n	8005aac <HAL_SPI_TransmitReceive+0x28c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	330c      	adds	r3, #12
 8005a8c:	7812      	ldrb	r2, [r2, #0]
 8005a8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d119      	bne.n	8005aee <HAL_SPI_TransmitReceive+0x2ce>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d014      	beq.n	8005aee <HAL_SPI_TransmitReceive+0x2ce>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68da      	ldr	r2, [r3, #12]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	3b01      	subs	r3, #1
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005aea:	2301      	movs	r3, #1
 8005aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005aee:	f7fc fa5b 	bl	8001fa8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d803      	bhi.n	8005b06 <HAL_SPI_TransmitReceive+0x2e6>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_TransmitReceive+0x2ec>
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d107      	bne.n	8005b1c <HAL_SPI_TransmitReceive+0x2fc>
      {
        errorcode = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8005b1a:	e033      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d19e      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x244>
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d199      	bne.n	8005a64 <HAL_SPI_TransmitReceive+0x244>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 f8b7 	bl	8005ca8 <SPI_EndRxTxTransaction>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d006      	beq.n	8005b4e <HAL_SPI_TransmitReceive+0x32e>
  {
    errorcode = HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2220      	movs	r2, #32
 8005b4a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8005b4c:	e01a      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10a      	bne.n	8005b6c <HAL_SPI_TransmitReceive+0x34c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b56:	2300      	movs	r3, #0
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x35c>
  {
    errorcode = HAL_ERROR;
 8005b74:	2301      	movs	r3, #1
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005b7a:	e003      	b.n	8005b84 <HAL_SPI_TransmitReceive+0x364>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005b8c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3730      	adds	r7, #48	@ 0x30
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ba8:	f7fc f9fe 	bl	8001fa8 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb0:	1a9b      	subs	r3, r3, r2
 8005bb2:	683a      	ldr	r2, [r7, #0]
 8005bb4:	4413      	add	r3, r2
 8005bb6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005bb8:	f7fc f9f6 	bl	8001fa8 <HAL_GetTick>
 8005bbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005bbe:	4b39      	ldr	r3, [pc, #228]	@ (8005ca4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	0d1b      	lsrs	r3, r3, #20
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	fb02 f303 	mul.w	r3, r2, r3
 8005bcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005bce:	e054      	b.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d050      	beq.n	8005c7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005bd8:	f7fc f9e6 	bl	8001fa8 <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d902      	bls.n	8005bee <SPI_WaitFlagStateUntilTimeout+0x56>
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d13d      	bne.n	8005c6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005bfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c06:	d111      	bne.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c10:	d004      	beq.n	8005c1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c1a:	d107      	bne.n	8005c2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c34:	d10f      	bne.n	8005c56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e017      	b.n	8005c9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005c70:	2300      	movs	r3, #0
 8005c72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	4013      	ands	r3, r2
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	bf0c      	ite	eq
 8005c8a:	2301      	moveq	r3, #1
 8005c8c:	2300      	movne	r3, #0
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	79fb      	ldrb	r3, [r7, #7]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d19b      	bne.n	8005bd0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000000 	.word	0x20000000

08005ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2180      	movs	r1, #128	@ 0x80
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f7ff ff6a 	bl	8005b98 <SPI_WaitFlagStateUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cce:	f043 0220 	orr.w	r2, r3, #32
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e000      	b.n	8005cdc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005cda:	2300      	movs	r3, #0
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e0a1      	b.n	8005e3a <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a52      	ldr	r2, [pc, #328]	@ (8005e44 <HAL_TIM_Base_Init+0x160>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d013      	beq.n	8005d28 <HAL_TIM_Base_Init+0x44>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d08:	d00e      	beq.n	8005d28 <HAL_TIM_Base_Init+0x44>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e48 <HAL_TIM_Base_Init+0x164>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d009      	beq.n	8005d28 <HAL_TIM_Base_Init+0x44>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a4c      	ldr	r2, [pc, #304]	@ (8005e4c <HAL_TIM_Base_Init+0x168>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <HAL_TIM_Base_Init+0x44>
 8005d1e:	f240 1113 	movw	r1, #275	@ 0x113
 8005d22:	484b      	ldr	r0, [pc, #300]	@ (8005e50 <HAL_TIM_Base_Init+0x16c>)
 8005d24:	f7fb fac4 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d014      	beq.n	8005d5a <HAL_TIM_Base_Init+0x76>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d010      	beq.n	8005d5a <HAL_TIM_Base_Init+0x76>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d00c      	beq.n	8005d5a <HAL_TIM_Base_Init+0x76>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b40      	cmp	r3, #64	@ 0x40
 8005d46:	d008      	beq.n	8005d5a <HAL_TIM_Base_Init+0x76>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2b60      	cmp	r3, #96	@ 0x60
 8005d4e:	d004      	beq.n	8005d5a <HAL_TIM_Base_Init+0x76>
 8005d50:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005d54:	483e      	ldr	r0, [pc, #248]	@ (8005e50 <HAL_TIM_Base_Init+0x16c>)
 8005d56:	f7fb faab 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d00e      	beq.n	8005d80 <HAL_TIM_Base_Init+0x9c>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6a:	d009      	beq.n	8005d80 <HAL_TIM_Base_Init+0x9c>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d74:	d004      	beq.n	8005d80 <HAL_TIM_Base_Init+0x9c>
 8005d76:	f240 1115 	movw	r1, #277	@ 0x115
 8005d7a:	4835      	ldr	r0, [pc, #212]	@ (8005e50 <HAL_TIM_Base_Init+0x16c>)
 8005d7c:	f7fb fa98 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d004      	beq.n	8005d92 <HAL_TIM_Base_Init+0xae>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d90:	d304      	bcc.n	8005d9c <HAL_TIM_Base_Init+0xb8>
 8005d92:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005d96:	482e      	ldr	r0, [pc, #184]	@ (8005e50 <HAL_TIM_Base_Init+0x16c>)
 8005d98:	f7fb fa8a 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d008      	beq.n	8005db6 <HAL_TIM_Base_Init+0xd2>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	2b80      	cmp	r3, #128	@ 0x80
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_Base_Init+0xd2>
 8005dac:	f240 1117 	movw	r1, #279	@ 0x117
 8005db0:	4827      	ldr	r0, [pc, #156]	@ (8005e50 <HAL_TIM_Base_Init+0x16c>)
 8005db2:	f7fb fa7d 	bl	80012b0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <HAL_TIM_Base_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fb fcd8 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2202      	movs	r2, #2
 8005dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3304      	adds	r3, #4
 8005de0:	4619      	mov	r1, r3
 8005de2:	4610      	mov	r0, r2
 8005de4:	f001 f90c 	bl	8007000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	40012c00 	.word	0x40012c00
 8005e48:	40000400 	.word	0x40000400
 8005e4c:	40000800 	.word	0x40000800
 8005e50:	080082dc 	.word	0x080082dc

08005e54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e0a1      	b.n	8005faa <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a52      	ldr	r2, [pc, #328]	@ (8005fb4 <HAL_TIM_PWM_Init+0x160>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d013      	beq.n	8005e98 <HAL_TIM_PWM_Init+0x44>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e78:	d00e      	beq.n	8005e98 <HAL_TIM_PWM_Init+0x44>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4e      	ldr	r2, [pc, #312]	@ (8005fb8 <HAL_TIM_PWM_Init+0x164>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d009      	beq.n	8005e98 <HAL_TIM_PWM_Init+0x44>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4c      	ldr	r2, [pc, #304]	@ (8005fbc <HAL_TIM_PWM_Init+0x168>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d004      	beq.n	8005e98 <HAL_TIM_PWM_Init+0x44>
 8005e8e:	f240 512c 	movw	r1, #1324	@ 0x52c
 8005e92:	484b      	ldr	r0, [pc, #300]	@ (8005fc0 <HAL_TIM_PWM_Init+0x16c>)
 8005e94:	f7fb fa0c 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d014      	beq.n	8005eca <HAL_TIM_PWM_Init+0x76>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d010      	beq.n	8005eca <HAL_TIM_PWM_Init+0x76>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d00c      	beq.n	8005eca <HAL_TIM_PWM_Init+0x76>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	d008      	beq.n	8005eca <HAL_TIM_PWM_Init+0x76>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
 8005ebc:	2b60      	cmp	r3, #96	@ 0x60
 8005ebe:	d004      	beq.n	8005eca <HAL_TIM_PWM_Init+0x76>
 8005ec0:	f240 512d 	movw	r1, #1325	@ 0x52d
 8005ec4:	483e      	ldr	r0, [pc, #248]	@ (8005fc0 <HAL_TIM_PWM_Init+0x16c>)
 8005ec6:	f7fb f9f3 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_PWM_Init+0x9c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_PWM_Init+0x9c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_PWM_Init+0x9c>
 8005ee6:	f240 512e 	movw	r1, #1326	@ 0x52e
 8005eea:	4835      	ldr	r0, [pc, #212]	@ (8005fc0 <HAL_TIM_PWM_Init+0x16c>)
 8005eec:	f7fb f9e0 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d004      	beq.n	8005f02 <HAL_TIM_PWM_Init+0xae>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	d304      	bcc.n	8005f0c <HAL_TIM_PWM_Init+0xb8>
 8005f02:	f240 512f 	movw	r1, #1327	@ 0x52f
 8005f06:	482e      	ldr	r0, [pc, #184]	@ (8005fc0 <HAL_TIM_PWM_Init+0x16c>)
 8005f08:	f7fb f9d2 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d008      	beq.n	8005f26 <HAL_TIM_PWM_Init+0xd2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	2b80      	cmp	r3, #128	@ 0x80
 8005f1a:	d004      	beq.n	8005f26 <HAL_TIM_PWM_Init+0xd2>
 8005f1c:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8005f20:	4827      	ldr	r0, [pc, #156]	@ (8005fc0 <HAL_TIM_PWM_Init+0x16c>)
 8005f22:	f7fb f9c5 	bl	80012b0 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_TIM_PWM_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f842 	bl	8005fc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f001 f854 	bl	8007000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	40012c00 	.word	0x40012c00
 8005fb8:	40000400 	.word	0x40000400
 8005fbc:	40000800 	.word	0x40000800
 8005fc0:	080082dc 	.word	0x080082dc

08005fc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr
	...

08005fd8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b086      	sub	sp, #24
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a8c      	ldr	r2, [pc, #560]	@ (8006220 <HAL_TIM_PWM_Start_DMA+0x248>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d10b      	bne.n	800600c <HAL_TIM_PWM_Start_DMA+0x34>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d040      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	2b04      	cmp	r3, #4
 8005ffe:	d03d      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b08      	cmp	r3, #8
 8006004:	d03a      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	2b0c      	cmp	r3, #12
 800600a:	d037      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d10b      	bne.n	800602e <HAL_TIM_PWM_Start_DMA+0x56>
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d02f      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2b04      	cmp	r3, #4
 8006020:	d02c      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	2b08      	cmp	r3, #8
 8006026:	d029      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	2b0c      	cmp	r3, #12
 800602c:	d026      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a7c      	ldr	r2, [pc, #496]	@ (8006224 <HAL_TIM_PWM_Start_DMA+0x24c>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d10b      	bne.n	8006050 <HAL_TIM_PWM_Start_DMA+0x78>
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d01e      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2b04      	cmp	r3, #4
 8006042:	d01b      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	2b08      	cmp	r3, #8
 8006048:	d018      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b0c      	cmp	r3, #12
 800604e:	d015      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a74      	ldr	r2, [pc, #464]	@ (8006228 <HAL_TIM_PWM_Start_DMA+0x250>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d10b      	bne.n	8006072 <HAL_TIM_PWM_Start_DMA+0x9a>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00d      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b04      	cmp	r3, #4
 8006064:	d00a      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	2b08      	cmp	r3, #8
 800606a:	d007      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d004      	beq.n	800607c <HAL_TIM_PWM_Start_DMA+0xa4>
 8006072:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 8006076:	486d      	ldr	r0, [pc, #436]	@ (800622c <HAL_TIM_PWM_Start_DMA+0x254>)
 8006078:	f7fb f91a 	bl	80012b0 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_TIM_PWM_Start_DMA+0xbe>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b02      	cmp	r3, #2
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e022      	b.n	80060dc <HAL_TIM_PWM_Start_DMA+0x104>
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d109      	bne.n	80060b0 <HAL_TIM_PWM_Start_DMA+0xd8>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	bf0c      	ite	eq
 80060a8:	2301      	moveq	r3, #1
 80060aa:	2300      	movne	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e015      	b.n	80060dc <HAL_TIM_PWM_Start_DMA+0x104>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d109      	bne.n	80060ca <HAL_TIM_PWM_Start_DMA+0xf2>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	bf0c      	ite	eq
 80060c2:	2301      	moveq	r3, #1
 80060c4:	2300      	movne	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	e008      	b.n	80060dc <HAL_TIM_PWM_Start_DMA+0x104>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	bf0c      	ite	eq
 80060d6:	2301      	moveq	r3, #1
 80060d8:	2300      	movne	r3, #0
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <HAL_TIM_PWM_Start_DMA+0x10c>
  {
    return HAL_BUSY;
 80060e0:	2302      	movs	r3, #2
 80060e2:	e160      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d109      	bne.n	80060fe <HAL_TIM_PWM_Start_DMA+0x126>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	bf0c      	ite	eq
 80060f6:	2301      	moveq	r3, #1
 80060f8:	2300      	movne	r3, #0
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	e022      	b.n	8006144 <HAL_TIM_PWM_Start_DMA+0x16c>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b04      	cmp	r3, #4
 8006102:	d109      	bne.n	8006118 <HAL_TIM_PWM_Start_DMA+0x140>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b01      	cmp	r3, #1
 800610e:	bf0c      	ite	eq
 8006110:	2301      	moveq	r3, #1
 8006112:	2300      	movne	r3, #0
 8006114:	b2db      	uxtb	r3, r3
 8006116:	e015      	b.n	8006144 <HAL_TIM_PWM_Start_DMA+0x16c>
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b08      	cmp	r3, #8
 800611c:	d109      	bne.n	8006132 <HAL_TIM_PWM_Start_DMA+0x15a>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b01      	cmp	r3, #1
 8006128:	bf0c      	ite	eq
 800612a:	2301      	moveq	r3, #1
 800612c:	2300      	movne	r3, #0
 800612e:	b2db      	uxtb	r3, r3
 8006130:	e008      	b.n	8006144 <HAL_TIM_PWM_Start_DMA+0x16c>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b01      	cmp	r3, #1
 800613c:	bf0c      	ite	eq
 800613e:	2301      	moveq	r3, #1
 8006140:	2300      	movne	r3, #0
 8006142:	b2db      	uxtb	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d024      	beq.n	8006192 <HAL_TIM_PWM_Start_DMA+0x1ba>
  {
    if ((pData == NULL) || (Length == 0U))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_TIM_PWM_Start_DMA+0x17c>
 800614e:	887b      	ldrh	r3, [r7, #2]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d101      	bne.n	8006158 <HAL_TIM_PWM_Start_DMA+0x180>
    {
      return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e126      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d104      	bne.n	8006168 <HAL_TIM_PWM_Start_DMA+0x190>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2202      	movs	r2, #2
 8006162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006166:	e016      	b.n	8006196 <HAL_TIM_PWM_Start_DMA+0x1be>
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	2b04      	cmp	r3, #4
 800616c:	d104      	bne.n	8006178 <HAL_TIM_PWM_Start_DMA+0x1a0>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2202      	movs	r2, #2
 8006172:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006176:	e00e      	b.n	8006196 <HAL_TIM_PWM_Start_DMA+0x1be>
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	2b08      	cmp	r3, #8
 800617c:	d104      	bne.n	8006188 <HAL_TIM_PWM_Start_DMA+0x1b0>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2202      	movs	r2, #2
 8006182:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006186:	e006      	b.n	8006196 <HAL_TIM_PWM_Start_DMA+0x1be>
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006190:	e001      	b.n	8006196 <HAL_TIM_PWM_Start_DMA+0x1be>
    }
  }
  else
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e107      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
  }

  switch (Channel)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	2b0c      	cmp	r3, #12
 800619a:	f200 80bb 	bhi.w	8006314 <HAL_TIM_PWM_Start_DMA+0x33c>
 800619e:	a201      	add	r2, pc, #4	@ (adr r2, 80061a4 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061d9 	.word	0x080061d9
 80061a8:	08006315 	.word	0x08006315
 80061ac:	08006315 	.word	0x08006315
 80061b0:	08006315 	.word	0x08006315
 80061b4:	0800623d 	.word	0x0800623d
 80061b8:	08006315 	.word	0x08006315
 80061bc:	08006315 	.word	0x08006315
 80061c0:	08006315 	.word	0x08006315
 80061c4:	08006285 	.word	0x08006285
 80061c8:	08006315 	.word	0x08006315
 80061cc:	08006315 	.word	0x08006315
 80061d0:	08006315 	.word	0x08006315
 80061d4:	080062cd 	.word	0x080062cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061dc:	4a14      	ldr	r2, [pc, #80]	@ (8006230 <HAL_TIM_PWM_Start_DMA+0x258>)
 80061de:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e4:	4a13      	ldr	r2, [pc, #76]	@ (8006234 <HAL_TIM_PWM_Start_DMA+0x25c>)
 80061e6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ec:	4a12      	ldr	r2, [pc, #72]	@ (8006238 <HAL_TIM_PWM_Start_DMA+0x260>)
 80061ee:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3334      	adds	r3, #52	@ 0x34
 80061fc:	461a      	mov	r2, r3
 80061fe:	887b      	ldrh	r3, [r7, #2]
 8006200:	f7fd fc5e 	bl	8003ac0 <HAL_DMA_Start_IT>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e0cb      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800621c:	60da      	str	r2, [r3, #12]
      break;
 800621e:	e07c      	b.n	800631a <HAL_TIM_PWM_Start_DMA+0x342>
 8006220:	40012c00 	.word	0x40012c00
 8006224:	40000400 	.word	0x40000400
 8006228:	40000800 	.word	0x40000800
 800622c:	080082dc 	.word	0x080082dc
 8006230:	08006eef 	.word	0x08006eef
 8006234:	08006f97 	.word	0x08006f97
 8006238:	08006e5d 	.word	0x08006e5d
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006240:	4a5b      	ldr	r2, [pc, #364]	@ (80063b0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8006242:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	4a5a      	ldr	r2, [pc, #360]	@ (80063b4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800624a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	4a59      	ldr	r2, [pc, #356]	@ (80063b8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8006252:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3338      	adds	r3, #56	@ 0x38
 8006260:	461a      	mov	r2, r3
 8006262:	887b      	ldrh	r3, [r7, #2]
 8006264:	f7fd fc2c 	bl	8003ac0 <HAL_DMA_Start_IT>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <HAL_TIM_PWM_Start_DMA+0x29a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e099      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006280:	60da      	str	r2, [r3, #12]
      break;
 8006282:	e04a      	b.n	800631a <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006288:	4a49      	ldr	r2, [pc, #292]	@ (80063b0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800628a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	4a48      	ldr	r2, [pc, #288]	@ (80063b4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8006292:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006298:	4a47      	ldr	r2, [pc, #284]	@ (80063b8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800629a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80062a0:	6879      	ldr	r1, [r7, #4]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	333c      	adds	r3, #60	@ 0x3c
 80062a8:	461a      	mov	r2, r3
 80062aa:	887b      	ldrh	r3, [r7, #2]
 80062ac:	f7fd fc08 	bl	8003ac0 <HAL_DMA_Start_IT>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <HAL_TIM_PWM_Start_DMA+0x2e2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e075      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68da      	ldr	r2, [r3, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c8:	60da      	str	r2, [r3, #12]
      break;
 80062ca:	e026      	b.n	800631a <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d0:	4a37      	ldr	r2, [pc, #220]	@ (80063b0 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062d8:	4a36      	ldr	r2, [pc, #216]	@ (80063b4 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80062da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	4a35      	ldr	r2, [pc, #212]	@ (80063b8 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	3340      	adds	r3, #64	@ 0x40
 80062f0:	461a      	mov	r2, r3
 80062f2:	887b      	ldrh	r3, [r7, #2]
 80062f4:	f7fd fbe4 	bl	8003ac0 <HAL_DMA_Start_IT>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <HAL_TIM_PWM_Start_DMA+0x32a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e051      	b.n	80063a6 <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68da      	ldr	r2, [r3, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006310:	60da      	str	r2, [r3, #12]
      break;
 8006312:	e002      	b.n	800631a <HAL_TIM_PWM_Start_DMA+0x342>
    }

    default:
      status = HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	75fb      	strb	r3, [r7, #23]
      break;
 8006318:	bf00      	nop
  }

  if (status == HAL_OK)
 800631a:	7dfb      	ldrb	r3, [r7, #23]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d141      	bne.n	80063a4 <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2201      	movs	r2, #1
 8006326:	68b9      	ldr	r1, [r7, #8]
 8006328:	4618      	mov	r0, r3
 800632a:	f001 f977 	bl	800761c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a22      	ldr	r2, [pc, #136]	@ (80063bc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d107      	bne.n	8006348 <HAL_TIM_PWM_Start_DMA+0x370>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006346:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1b      	ldr	r2, [pc, #108]	@ (80063bc <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_PWM_Start_DMA+0x398>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635a:	d009      	beq.n	8006370 <HAL_TIM_PWM_Start_DMA+0x398>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a17      	ldr	r2, [pc, #92]	@ (80063c0 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_PWM_Start_DMA+0x398>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a16      	ldr	r2, [pc, #88]	@ (80063c4 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d111      	bne.n	8006394 <HAL_TIM_PWM_Start_DMA+0x3bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d010      	beq.n	80063a4 <HAL_TIM_PWM_Start_DMA+0x3cc>
      {
        __HAL_TIM_ENABLE(htim);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f042 0201 	orr.w	r2, r2, #1
 8006390:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	e007      	b.n	80063a4 <HAL_TIM_PWM_Start_DMA+0x3cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f042 0201 	orr.w	r2, r2, #1
 80063a2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	08006eef 	.word	0x08006eef
 80063b4:	08006f97 	.word	0x08006f97
 80063b8:	08006e5d 	.word	0x08006e5d
 80063bc:	40012c00 	.word	0x40012c00
 80063c0:	40000400 	.word	0x40000400
 80063c4:	40000800 	.word	0x40000800

080063c8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
 80063d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4a81      	ldr	r2, [pc, #516]	@ (80065e0 <HAL_TIM_PWM_Stop_DMA+0x218>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d10b      	bne.n	80063f8 <HAL_TIM_PWM_Stop_DMA+0x30>
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d040      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d03d      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d03a      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	2b0c      	cmp	r3, #12
 80063f6:	d037      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006400:	d10b      	bne.n	800641a <HAL_TIM_PWM_Stop_DMA+0x52>
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02f      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b04      	cmp	r3, #4
 800640c:	d02c      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d029      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	2b0c      	cmp	r3, #12
 8006418:	d026      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a71      	ldr	r2, [pc, #452]	@ (80065e4 <HAL_TIM_PWM_Stop_DMA+0x21c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d10b      	bne.n	800643c <HAL_TIM_PWM_Stop_DMA+0x74>
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d01e      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b04      	cmp	r3, #4
 800642e:	d01b      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b08      	cmp	r3, #8
 8006434:	d018      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b0c      	cmp	r3, #12
 800643a:	d015      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a69      	ldr	r2, [pc, #420]	@ (80065e8 <HAL_TIM_PWM_Stop_DMA+0x220>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d10b      	bne.n	800645e <HAL_TIM_PWM_Stop_DMA+0x96>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00d      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	2b04      	cmp	r3, #4
 8006450:	d00a      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b08      	cmp	r3, #8
 8006456:	d007      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	2b0c      	cmp	r3, #12
 800645c:	d004      	beq.n	8006468 <HAL_TIM_PWM_Stop_DMA+0xa0>
 800645e:	f240 7159 	movw	r1, #1881	@ 0x759
 8006462:	4862      	ldr	r0, [pc, #392]	@ (80065ec <HAL_TIM_PWM_Stop_DMA+0x224>)
 8006464:	f7fa ff24 	bl	80012b0 <assert_failed>

  switch (Channel)
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	2b0c      	cmp	r3, #12
 800646c:	d854      	bhi.n	8006518 <HAL_TIM_PWM_Stop_DMA+0x150>
 800646e:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <HAL_TIM_PWM_Stop_DMA+0xac>)
 8006470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006474:	080064a9 	.word	0x080064a9
 8006478:	08006519 	.word	0x08006519
 800647c:	08006519 	.word	0x08006519
 8006480:	08006519 	.word	0x08006519
 8006484:	080064c5 	.word	0x080064c5
 8006488:	08006519 	.word	0x08006519
 800648c:	08006519 	.word	0x08006519
 8006490:	08006519 	.word	0x08006519
 8006494:	080064e1 	.word	0x080064e1
 8006498:	08006519 	.word	0x08006519
 800649c:	08006519 	.word	0x08006519
 80064a0:	08006519 	.word	0x08006519
 80064a4:	080064fd 	.word	0x080064fd
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	68da      	ldr	r2, [r3, #12]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80064b6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd fb6d 	bl	8003b9c <HAL_DMA_Abort_IT>
      break;
 80064c2:	e02c      	b.n	800651e <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	68da      	ldr	r2, [r3, #12]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064d2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fb5f 	bl	8003b9c <HAL_DMA_Abort_IT>
      break;
 80064de:	e01e      	b.n	800651e <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68da      	ldr	r2, [r3, #12]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064ee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7fd fb51 	bl	8003b9c <HAL_DMA_Abort_IT>
      break;
 80064fa:	e010      	b.n	800651e <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800650a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006510:	4618      	mov	r0, r3
 8006512:	f7fd fb43 	bl	8003b9c <HAL_DMA_Abort_IT>
      break;
 8006516:	e002      	b.n	800651e <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    default:
      status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	73fb      	strb	r3, [r7, #15]
      break;
 800651c:	bf00      	nop
  }

  if (status == HAL_OK)
 800651e:	7bfb      	ldrb	r3, [r7, #15]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d157      	bne.n	80065d4 <HAL_TIM_PWM_Stop_DMA+0x20c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2200      	movs	r2, #0
 800652a:	6839      	ldr	r1, [r7, #0]
 800652c:	4618      	mov	r0, r3
 800652e:	f001 f875 	bl	800761c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2a      	ldr	r2, [pc, #168]	@ (80065e0 <HAL_TIM_PWM_Stop_DMA+0x218>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d117      	bne.n	800656c <HAL_TIM_PWM_Stop_DMA+0x1a4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006546:	4013      	ands	r3, r2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d10f      	bne.n	800656c <HAL_TIM_PWM_Stop_DMA+0x1a4>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6a1a      	ldr	r2, [r3, #32]
 8006552:	f240 4344 	movw	r3, #1092	@ 0x444
 8006556:	4013      	ands	r3, r2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d107      	bne.n	800656c <HAL_TIM_PWM_Stop_DMA+0x1a4>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800656a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6a1a      	ldr	r2, [r3, #32]
 8006572:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10f      	bne.n	800659c <HAL_TIM_PWM_Stop_DMA+0x1d4>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	f240 4344 	movw	r3, #1092	@ 0x444
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <HAL_TIM_PWM_Stop_DMA+0x1d4>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0201 	bic.w	r2, r2, #1
 800659a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d104      	bne.n	80065ac <HAL_TIM_PWM_Stop_DMA+0x1e4>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065aa:	e013      	b.n	80065d4 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d104      	bne.n	80065bc <HAL_TIM_PWM_Stop_DMA+0x1f4>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065ba:	e00b      	b.n	80065d4 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b08      	cmp	r3, #8
 80065c0:	d104      	bne.n	80065cc <HAL_TIM_PWM_Stop_DMA+0x204>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065ca:	e003      	b.n	80065d4 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80065d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3710      	adds	r7, #16
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40012c00 	.word	0x40012c00
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	080082dc 	.word	0x080082dc

080065f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d010      	beq.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b04      	cmp	r3, #4
 800660a:	d00d      	beq.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x38>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b08      	cmp	r3, #8
 8006610:	d00a      	beq.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b0c      	cmp	r3, #12
 8006616:	d007      	beq.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b3c      	cmp	r3, #60	@ 0x3c
 800661c:	d004      	beq.n	8006628 <HAL_TIM_PWM_ConfigChannel+0x38>
 800661e:	f241 017e 	movw	r1, #4222	@ 0x107e
 8006622:	4881      	ldr	r0, [pc, #516]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8006624:	f7fa fe44 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b60      	cmp	r3, #96	@ 0x60
 800662e:	d008      	beq.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x52>
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2b70      	cmp	r3, #112	@ 0x70
 8006636:	d004      	beq.n	8006642 <HAL_TIM_PWM_ConfigChannel+0x52>
 8006638:	f241 017f 	movw	r1, #4223	@ 0x107f
 800663c:	487a      	ldr	r0, [pc, #488]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800663e:	f7fa fe37 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_TIM_PWM_ConfigChannel+0x6c>
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	2b02      	cmp	r3, #2
 8006650:	d004      	beq.n	800665c <HAL_TIM_PWM_ConfigChannel+0x6c>
 8006652:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8006656:	4874      	ldr	r0, [pc, #464]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8006658:	f7fa fe2a 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d008      	beq.n	8006676 <HAL_TIM_PWM_ConfigChannel+0x86>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b04      	cmp	r3, #4
 800666a:	d004      	beq.n	8006676 <HAL_TIM_PWM_ConfigChannel+0x86>
 800666c:	f241 0181 	movw	r1, #4225	@ 0x1081
 8006670:	486d      	ldr	r0, [pc, #436]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8006672:	f7fa fe1d 	bl	80012b0 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_TIM_PWM_ConfigChannel+0x94>
 8006680:	2302      	movs	r3, #2
 8006682:	e11b      	b.n	80068bc <HAL_TIM_PWM_ConfigChannel+0x2cc>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b0c      	cmp	r3, #12
 8006690:	f200 810c 	bhi.w	80068ac <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8006694:	a201      	add	r2, pc, #4	@ (adr r2, 800669c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066d1 	.word	0x080066d1
 80066a0:	080068ad 	.word	0x080068ad
 80066a4:	080068ad 	.word	0x080068ad
 80066a8:	080068ad 	.word	0x080068ad
 80066ac:	08006743 	.word	0x08006743
 80066b0:	080068ad 	.word	0x080068ad
 80066b4:	080068ad 	.word	0x080068ad
 80066b8:	080068ad 	.word	0x080068ad
 80066bc:	080067b7 	.word	0x080067b7
 80066c0:	080068ad 	.word	0x080068ad
 80066c4:	080068ad 	.word	0x080068ad
 80066c8:	080068ad 	.word	0x080068ad
 80066cc:	08006839 	.word	0x08006839
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a55      	ldr	r2, [pc, #340]	@ (800682c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d013      	beq.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x112>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066e2:	d00e      	beq.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x112>
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a51      	ldr	r2, [pc, #324]	@ (8006830 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d009      	beq.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x112>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a50      	ldr	r2, [pc, #320]	@ (8006834 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d004      	beq.n	8006702 <HAL_TIM_PWM_ConfigChannel+0x112>
 80066f8:	f241 018b 	movw	r1, #4235	@ 0x108b
 80066fc:	484a      	ldr	r0, [pc, #296]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80066fe:	f7fa fdd7 	bl	80012b0 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fcdb 	bl	80070c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	699a      	ldr	r2, [r3, #24]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f042 0208 	orr.w	r2, r2, #8
 800671c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	699a      	ldr	r2, [r3, #24]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f022 0204 	bic.w	r2, r2, #4
 800672c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6999      	ldr	r1, [r3, #24]
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	619a      	str	r2, [r3, #24]
      break;
 8006740:	e0b7      	b.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a39      	ldr	r2, [pc, #228]	@ (800682c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <HAL_TIM_PWM_ConfigChannel+0x184>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006754:	d00e      	beq.n	8006774 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a35      	ldr	r2, [pc, #212]	@ (8006830 <HAL_TIM_PWM_ConfigChannel+0x240>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d009      	beq.n	8006774 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a33      	ldr	r2, [pc, #204]	@ (8006834 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d004      	beq.n	8006774 <HAL_TIM_PWM_ConfigChannel+0x184>
 800676a:	f241 019c 	movw	r1, #4252	@ 0x109c
 800676e:	482e      	ldr	r0, [pc, #184]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8006770:	f7fa fd9e 	bl	80012b0 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	68b9      	ldr	r1, [r7, #8]
 800677a:	4618      	mov	r0, r3
 800677c:	f000 fd32 	bl	80071e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800678e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	699a      	ldr	r2, [r3, #24]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6999      	ldr	r1, [r3, #24]
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	021a      	lsls	r2, r3, #8
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	430a      	orrs	r2, r1
 80067b2:	619a      	str	r2, [r3, #24]
      break;
 80067b4:	e07d      	b.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a1c      	ldr	r2, [pc, #112]	@ (800682c <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d013      	beq.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d00e      	beq.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a18      	ldr	r2, [pc, #96]	@ (8006830 <HAL_TIM_PWM_ConfigChannel+0x240>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d009      	beq.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d004      	beq.n	80067e8 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80067de:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 80067e2:	4811      	ldr	r0, [pc, #68]	@ (8006828 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80067e4:	f7fa fd64 	bl	80012b0 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fd8c 	bl	800730c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69da      	ldr	r2, [r3, #28]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0208 	orr.w	r2, r2, #8
 8006802:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69da      	ldr	r2, [r3, #28]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0204 	bic.w	r2, r2, #4
 8006812:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69d9      	ldr	r1, [r3, #28]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	61da      	str	r2, [r3, #28]
      break;
 8006826:	e044      	b.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8006828:	080082dc 	.word	0x080082dc
 800682c:	40012c00 	.word	0x40012c00
 8006830:	40000400 	.word	0x40000400
 8006834:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a21      	ldr	r2, [pc, #132]	@ (80068c4 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d013      	beq.n	800686a <HAL_TIM_PWM_ConfigChannel+0x27a>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800684a:	d00e      	beq.n	800686a <HAL_TIM_PWM_ConfigChannel+0x27a>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a1d      	ldr	r2, [pc, #116]	@ (80068c8 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d009      	beq.n	800686a <HAL_TIM_PWM_ConfigChannel+0x27a>
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1c      	ldr	r2, [pc, #112]	@ (80068cc <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d004      	beq.n	800686a <HAL_TIM_PWM_ConfigChannel+0x27a>
 8006860:	f241 01be 	movw	r1, #4286	@ 0x10be
 8006864:	481a      	ldr	r0, [pc, #104]	@ (80068d0 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8006866:	f7fa fd23 	bl	80012b0 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68b9      	ldr	r1, [r7, #8]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fddf 	bl	8007434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	69da      	ldr	r2, [r3, #28]
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	69da      	ldr	r2, [r3, #28]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	69d9      	ldr	r1, [r3, #28]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	021a      	lsls	r2, r3, #8
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	61da      	str	r2, [r3, #28]
      break;
 80068aa:	e002      	b.n	80068b2 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    default:
      status = HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	75fb      	strb	r3, [r7, #23]
      break;
 80068b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	40012c00 	.word	0x40012c00
 80068c8:	40000400 	.word	0x40000400
 80068cc:	40000800 	.word	0x40000800
 80068d0:	080082dc 	.word	0x080082dc

080068d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d101      	bne.n	80068f0 <HAL_TIM_ConfigClockSource+0x1c>
 80068ec:	2302      	movs	r3, #2
 80068ee:	e296      	b.n	8006e1e <HAL_TIM_ConfigClockSource+0x54a>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2202      	movs	r2, #2
 80068fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006908:	d029      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b70      	cmp	r3, #112	@ 0x70
 8006910:	d025      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800691a:	d020      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2b40      	cmp	r3, #64	@ 0x40
 8006922:	d01c      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b50      	cmp	r3, #80	@ 0x50
 800692a:	d018      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	2b60      	cmp	r3, #96	@ 0x60
 8006932:	d014      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d010      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b10      	cmp	r3, #16
 8006942:	d00c      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b20      	cmp	r3, #32
 800694a:	d008      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	2b30      	cmp	r3, #48	@ 0x30
 8006952:	d004      	beq.n	800695e <HAL_TIM_ConfigClockSource+0x8a>
 8006954:	f241 41be 	movw	r1, #5310	@ 0x14be
 8006958:	486b      	ldr	r0, [pc, #428]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 800695a:	f7fa fca9 	bl	80012b0 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800696c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006974:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006986:	f000 80c7 	beq.w	8006b18 <HAL_TIM_ConfigClockSource+0x244>
 800698a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800698e:	f200 8239 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 8006992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006996:	d02d      	beq.n	80069f4 <HAL_TIM_ConfigClockSource+0x120>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800699c:	f200 8232 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069a0:	2b70      	cmp	r3, #112	@ 0x70
 80069a2:	d045      	beq.n	8006a30 <HAL_TIM_ConfigClockSource+0x15c>
 80069a4:	2b70      	cmp	r3, #112	@ 0x70
 80069a6:	f200 822d 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069aa:	2b60      	cmp	r3, #96	@ 0x60
 80069ac:	f000 8167 	beq.w	8006c7e <HAL_TIM_ConfigClockSource+0x3aa>
 80069b0:	2b60      	cmp	r3, #96	@ 0x60
 80069b2:	f200 8227 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069b6:	2b50      	cmp	r3, #80	@ 0x50
 80069b8:	f000 8115 	beq.w	8006be6 <HAL_TIM_ConfigClockSource+0x312>
 80069bc:	2b50      	cmp	r3, #80	@ 0x50
 80069be:	f200 8221 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069c2:	2b40      	cmp	r3, #64	@ 0x40
 80069c4:	f000 81b0 	beq.w	8006d28 <HAL_TIM_ConfigClockSource+0x454>
 80069c8:	2b40      	cmp	r3, #64	@ 0x40
 80069ca:	f200 821b 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069ce:	2b30      	cmp	r3, #48	@ 0x30
 80069d0:	f000 81f6 	beq.w	8006dc0 <HAL_TIM_ConfigClockSource+0x4ec>
 80069d4:	2b30      	cmp	r3, #48	@ 0x30
 80069d6:	f200 8215 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069da:	2b20      	cmp	r3, #32
 80069dc:	f000 81f0 	beq.w	8006dc0 <HAL_TIM_ConfigClockSource+0x4ec>
 80069e0:	2b20      	cmp	r3, #32
 80069e2:	f200 820f 	bhi.w	8006e04 <HAL_TIM_ConfigClockSource+0x530>
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 81ea 	beq.w	8006dc0 <HAL_TIM_ConfigClockSource+0x4ec>
 80069ec:	2b10      	cmp	r3, #16
 80069ee:	f000 81e7 	beq.w	8006dc0 <HAL_TIM_ConfigClockSource+0x4ec>
 80069f2:	e207      	b.n	8006e04 <HAL_TIM_ConfigClockSource+0x530>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a44      	ldr	r2, [pc, #272]	@ (8006b0c <HAL_TIM_ConfigClockSource+0x238>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	f000 8205 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x536>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a08:	f000 81ff 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x536>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a3f      	ldr	r2, [pc, #252]	@ (8006b10 <HAL_TIM_ConfigClockSource+0x23c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	f000 81f9 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x536>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a3d      	ldr	r2, [pc, #244]	@ (8006b14 <HAL_TIM_ConfigClockSource+0x240>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	f000 81f3 	beq.w	8006e0a <HAL_TIM_ConfigClockSource+0x536>
 8006a24:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8006a28:	4837      	ldr	r0, [pc, #220]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 8006a2a:	f7fa fc41 	bl	80012b0 <assert_failed>
      break;
 8006a2e:	e1ec      	b.n	8006e0a <HAL_TIM_ConfigClockSource+0x536>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	4a35      	ldr	r2, [pc, #212]	@ (8006b0c <HAL_TIM_ConfigClockSource+0x238>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d013      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x18e>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a42:	d00e      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x18e>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a31      	ldr	r2, [pc, #196]	@ (8006b10 <HAL_TIM_ConfigClockSource+0x23c>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d009      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x18e>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a30      	ldr	r2, [pc, #192]	@ (8006b14 <HAL_TIM_ConfigClockSource+0x240>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d004      	beq.n	8006a62 <HAL_TIM_ConfigClockSource+0x18e>
 8006a58:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8006a5c:	482a      	ldr	r0, [pc, #168]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 8006a5e:	f7fa fc27 	bl	80012b0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d013      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1be>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a72:	d00e      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1be>
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006a7c:	d009      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1be>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006a86:	d004      	beq.n	8006a92 <HAL_TIM_ConfigClockSource+0x1be>
 8006a88:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8006a8c:	481e      	ldr	r0, [pc, #120]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 8006a8e:	f7fa fc0f 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9a:	d014      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1f2>
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d010      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1f2>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d00c      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1f2>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b02      	cmp	r3, #2
 8006ab2:	d008      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1f2>
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2b0a      	cmp	r3, #10
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_ConfigClockSource+0x1f2>
 8006abc:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8006ac0:	4811      	ldr	r0, [pc, #68]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 8006ac2:	f7fa fbf5 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2b0f      	cmp	r3, #15
 8006acc:	d904      	bls.n	8006ad8 <HAL_TIM_ConfigClockSource+0x204>
 8006ace:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8006ad2:	480d      	ldr	r0, [pc, #52]	@ (8006b08 <HAL_TIM_ConfigClockSource+0x234>)
 8006ad4:	f7fa fbec 	bl	80012b0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006ae8:	f000 fd79 	bl	80075de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006afa:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	68ba      	ldr	r2, [r7, #8]
 8006b02:	609a      	str	r2, [r3, #8]
      break;
 8006b04:	e182      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
 8006b06:	bf00      	nop
 8006b08:	080082dc 	.word	0x080082dc
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40000800 	.word	0x40000800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7e      	ldr	r2, [pc, #504]	@ (8006d18 <HAL_TIM_ConfigClockSource+0x444>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d013      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x276>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2a:	d00e      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x276>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a7a      	ldr	r2, [pc, #488]	@ (8006d1c <HAL_TIM_ConfigClockSource+0x448>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d009      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x276>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a79      	ldr	r2, [pc, #484]	@ (8006d20 <HAL_TIM_ConfigClockSource+0x44c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIM_ConfigClockSource+0x276>
 8006b40:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8006b44:	4877      	ldr	r0, [pc, #476]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006b46:	f7fa fbb3 	bl	80012b0 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d013      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x2a6>
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b5a:	d00e      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x2a6>
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b64:	d009      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x2a6>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b6e:	d004      	beq.n	8006b7a <HAL_TIM_ConfigClockSource+0x2a6>
 8006b70:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8006b74:	486b      	ldr	r0, [pc, #428]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006b76:	f7fa fb9b 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b82:	d014      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x2da>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d010      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x2da>
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00c      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x2da>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d008      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x2da>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	2b0a      	cmp	r3, #10
 8006ba2:	d004      	beq.n	8006bae <HAL_TIM_ConfigClockSource+0x2da>
 8006ba4:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8006ba8:	485e      	ldr	r0, [pc, #376]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006baa:	f7fa fb81 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b0f      	cmp	r3, #15
 8006bb4:	d904      	bls.n	8006bc0 <HAL_TIM_ConfigClockSource+0x2ec>
 8006bb6:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8006bba:	485a      	ldr	r0, [pc, #360]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006bbc:	f7fa fb78 	bl	80012b0 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006bd0:	f000 fd05 	bl	80075de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	689a      	ldr	r2, [r3, #8]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006be2:	609a      	str	r2, [r3, #8]
      break;
 8006be4:	e112      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	4a4b      	ldr	r2, [pc, #300]	@ (8006d18 <HAL_TIM_ConfigClockSource+0x444>)
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d013      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0x344>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bf8:	d00e      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0x344>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a47      	ldr	r2, [pc, #284]	@ (8006d1c <HAL_TIM_ConfigClockSource+0x448>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d009      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0x344>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	4a45      	ldr	r2, [pc, #276]	@ (8006d20 <HAL_TIM_ConfigClockSource+0x44c>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d004      	beq.n	8006c18 <HAL_TIM_ConfigClockSource+0x344>
 8006c0e:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8006c12:	4844      	ldr	r0, [pc, #272]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006c14:	f7fa fb4c 	bl	80012b0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c20:	d014      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x378>
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d010      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x378>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00c      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x378>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d008      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x378>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	2b0a      	cmp	r3, #10
 8006c40:	d004      	beq.n	8006c4c <HAL_TIM_ConfigClockSource+0x378>
 8006c42:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8006c46:	4837      	ldr	r0, [pc, #220]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006c48:	f7fa fb32 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	2b0f      	cmp	r3, #15
 8006c52:	d904      	bls.n	8006c5e <HAL_TIM_ConfigClockSource+0x38a>
 8006c54:	f241 5101 	movw	r1, #5377	@ 0x1501
 8006c58:	4832      	ldr	r0, [pc, #200]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006c5a:	f7fa fb29 	bl	80012b0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 fc40 	bl	80074f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2150      	movs	r1, #80	@ 0x50
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 fc97 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 8006c7c:	e0c6      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a25      	ldr	r2, [pc, #148]	@ (8006d18 <HAL_TIM_ConfigClockSource+0x444>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d013      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x3dc>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c90:	d00e      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x3dc>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a21      	ldr	r2, [pc, #132]	@ (8006d1c <HAL_TIM_ConfigClockSource+0x448>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d009      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x3dc>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d20 <HAL_TIM_ConfigClockSource+0x44c>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d004      	beq.n	8006cb0 <HAL_TIM_ConfigClockSource+0x3dc>
 8006ca6:	f241 510d 	movw	r1, #5389	@ 0x150d
 8006caa:	481e      	ldr	r0, [pc, #120]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006cac:	f7fa fb00 	bl	80012b0 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb8:	d014      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x410>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d010      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x410>
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00c      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x410>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d008      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x410>
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2b0a      	cmp	r3, #10
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x410>
 8006cda:	f241 5110 	movw	r1, #5392	@ 0x1510
 8006cde:	4811      	ldr	r0, [pc, #68]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006ce0:	f7fa fae6 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	2b0f      	cmp	r3, #15
 8006cea:	d904      	bls.n	8006cf6 <HAL_TIM_ConfigClockSource+0x422>
 8006cec:	f241 5111 	movw	r1, #5393	@ 0x1511
 8006cf0:	480c      	ldr	r0, [pc, #48]	@ (8006d24 <HAL_TIM_ConfigClockSource+0x450>)
 8006cf2:	f7fa fadd 	bl	80012b0 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006d02:	461a      	mov	r2, r3
 8006d04:	f000 fc22 	bl	800754c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2160      	movs	r1, #96	@ 0x60
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fc4b 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 8006d14:	e07a      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
 8006d16:	bf00      	nop
 8006d18:	40012c00 	.word	0x40012c00
 8006d1c:	40000400 	.word	0x40000400
 8006d20:	40000800 	.word	0x40000800
 8006d24:	080082dc 	.word	0x080082dc
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e28 <HAL_TIM_ConfigClockSource+0x554>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x486>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d3a:	d00e      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x486>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a3a      	ldr	r2, [pc, #232]	@ (8006e2c <HAL_TIM_ConfigClockSource+0x558>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x486>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a39      	ldr	r2, [pc, #228]	@ (8006e30 <HAL_TIM_ConfigClockSource+0x55c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0x486>
 8006d50:	f241 511d 	movw	r1, #5405	@ 0x151d
 8006d54:	4837      	ldr	r0, [pc, #220]	@ (8006e34 <HAL_TIM_ConfigClockSource+0x560>)
 8006d56:	f7fa faab 	bl	80012b0 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d62:	d014      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x4ba>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d010      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x4ba>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d00c      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x4ba>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b02      	cmp	r3, #2
 8006d7a:	d008      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x4ba>
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	2b0a      	cmp	r3, #10
 8006d82:	d004      	beq.n	8006d8e <HAL_TIM_ConfigClockSource+0x4ba>
 8006d84:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8006d88:	482a      	ldr	r0, [pc, #168]	@ (8006e34 <HAL_TIM_ConfigClockSource+0x560>)
 8006d8a:	f7fa fa91 	bl	80012b0 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	68db      	ldr	r3, [r3, #12]
 8006d92:	2b0f      	cmp	r3, #15
 8006d94:	d904      	bls.n	8006da0 <HAL_TIM_ConfigClockSource+0x4cc>
 8006d96:	f241 5121 	movw	r1, #5409	@ 0x1521
 8006d9a:	4826      	ldr	r0, [pc, #152]	@ (8006e34 <HAL_TIM_ConfigClockSource+0x560>)
 8006d9c:	f7fa fa88 	bl	80012b0 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dac:	461a      	mov	r2, r3
 8006dae:	f000 fb9f 	bl	80074f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2140      	movs	r1, #64	@ 0x40
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 fbf6 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 8006dbe:	e025      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a18      	ldr	r2, [pc, #96]	@ (8006e28 <HAL_TIM_ConfigClockSource+0x554>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d013      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x51e>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dd2:	d00e      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x51e>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a14      	ldr	r2, [pc, #80]	@ (8006e2c <HAL_TIM_ConfigClockSource+0x558>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x51e>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a13      	ldr	r2, [pc, #76]	@ (8006e30 <HAL_TIM_ConfigClockSource+0x55c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIM_ConfigClockSource+0x51e>
 8006de8:	f241 5130 	movw	r1, #5424	@ 0x1530
 8006dec:	4811      	ldr	r0, [pc, #68]	@ (8006e34 <HAL_TIM_ConfigClockSource+0x560>)
 8006dee:	f7fa fa5f 	bl	80012b0 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	4610      	mov	r0, r2
 8006dfe:	f000 fbd4 	bl	80075aa <TIM_ITRx_SetConfig>
      break;
 8006e02:	e003      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
    }

    default:
      status = HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	73fb      	strb	r3, [r7, #15]
      break;
 8006e08:	e000      	b.n	8006e0c <HAL_TIM_ConfigClockSource+0x538>
      break;
 8006e0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40012c00 	.word	0x40012c00
 8006e2c:	40000400 	.word	0x40000400
 8006e30:	40000800 	.word	0x40000800
 8006e34:	080082dc 	.word	0x080082dc

08006e38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b083      	sub	sp, #12
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bc80      	pop	{r7}
 8006e48:	4770      	bx	lr

08006e4a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	b083      	sub	sp, #12
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bc80      	pop	{r7}
 8006e5a:	4770      	bx	lr

08006e5c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e68:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d107      	bne.n	8006e84 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e82:	e02a      	b.n	8006eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d107      	bne.n	8006e9e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2202      	movs	r2, #2
 8006e92:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e9c:	e01d      	b.n	8006eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea2:	687a      	ldr	r2, [r7, #4]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d107      	bne.n	8006eb8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2204      	movs	r2, #4
 8006eac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006eb6:	e010      	b.n	8006eda <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d107      	bne.n	8006ed2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ed0:	e003      	b.n	8006eda <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f7ff ffb5 	bl	8006e4a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	771a      	strb	r2, [r3, #28]
}
 8006ee6:	bf00      	nop
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b084      	sub	sp, #16
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d10b      	bne.n	8006f1e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d136      	bne.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f1c:	e031      	b.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d10b      	bne.n	8006f40 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d125      	bne.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f3e:	e020      	b.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d10b      	bne.n	8006f62 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2204      	movs	r2, #4
 8006f4e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	699b      	ldr	r3, [r3, #24]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d114      	bne.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f60:	e00f      	b.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d10a      	bne.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2208      	movs	r2, #8
 8006f70:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	699b      	ldr	r3, [r3, #24]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d103      	bne.n	8006f82 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f7fa f980 	bl	8001288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	3710      	adds	r7, #16
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	b084      	sub	sp, #16
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d103      	bne.n	8006fb6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	771a      	strb	r2, [r3, #28]
 8006fb4:	e019      	b.n	8006fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d103      	bne.n	8006fc8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	771a      	strb	r2, [r3, #28]
 8006fc6:	e010      	b.n	8006fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d103      	bne.n	8006fda <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	771a      	strb	r2, [r3, #28]
 8006fd8:	e007      	b.n	8006fea <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d102      	bne.n	8006fea <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2208      	movs	r2, #8
 8006fe8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f7ff ff24 	bl	8006e38 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	771a      	strb	r2, [r3, #28]
}
 8006ff6:	bf00      	nop
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
	...

08007000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	4a29      	ldr	r2, [pc, #164]	@ (80070b8 <TIM_Base_SetConfig+0xb8>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d00b      	beq.n	8007030 <TIM_Base_SetConfig+0x30>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800701e:	d007      	beq.n	8007030 <TIM_Base_SetConfig+0x30>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a26      	ldr	r2, [pc, #152]	@ (80070bc <TIM_Base_SetConfig+0xbc>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_Base_SetConfig+0x30>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a25      	ldr	r2, [pc, #148]	@ (80070c0 <TIM_Base_SetConfig+0xc0>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d108      	bne.n	8007042 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007036:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	68fa      	ldr	r2, [r7, #12]
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a1c      	ldr	r2, [pc, #112]	@ (80070b8 <TIM_Base_SetConfig+0xb8>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d00b      	beq.n	8007062 <TIM_Base_SetConfig+0x62>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007050:	d007      	beq.n	8007062 <TIM_Base_SetConfig+0x62>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a19      	ldr	r2, [pc, #100]	@ (80070bc <TIM_Base_SetConfig+0xbc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d003      	beq.n	8007062 <TIM_Base_SetConfig+0x62>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a18      	ldr	r2, [pc, #96]	@ (80070c0 <TIM_Base_SetConfig+0xc0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d108      	bne.n	8007074 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007068:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	4313      	orrs	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	695b      	ldr	r3, [r3, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	689a      	ldr	r2, [r3, #8]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a07      	ldr	r2, [pc, #28]	@ (80070b8 <TIM_Base_SetConfig+0xb8>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d103      	bne.n	80070a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	615a      	str	r2, [r3, #20]
}
 80070ae:	bf00      	nop
 80070b0:	3714      	adds	r7, #20
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bc80      	pop	{r7}
 80070b6:	4770      	bx	lr
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40000400 	.word	0x40000400
 80070c0:	40000800 	.word	0x40000800

080070c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	f023 0201 	bic.w	r2, r3, #1
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	699b      	ldr	r3, [r3, #24]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0303 	bic.w	r3, r3, #3
 80070fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007106:	697b      	ldr	r3, [r7, #20]
 8007108:	f023 0302 	bic.w	r3, r3, #2
 800710c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	4313      	orrs	r3, r2
 8007116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a30      	ldr	r2, [pc, #192]	@ (80071dc <TIM_OC1_SetConfig+0x118>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d119      	bne.n	8007154 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d008      	beq.n	800713a <TIM_OC1_SetConfig+0x76>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	2b08      	cmp	r3, #8
 800712e:	d004      	beq.n	800713a <TIM_OC1_SetConfig+0x76>
 8007130:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8007134:	482a      	ldr	r0, [pc, #168]	@ (80071e0 <TIM_OC1_SetConfig+0x11c>)
 8007136:	f7fa f8bb 	bl	80012b0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f023 0308 	bic.w	r3, r3, #8
 8007140:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	f023 0304 	bic.w	r3, r3, #4
 8007152:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a21      	ldr	r2, [pc, #132]	@ (80071dc <TIM_OC1_SetConfig+0x118>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d12d      	bne.n	80071b8 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	699b      	ldr	r3, [r3, #24]
 8007160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007164:	d008      	beq.n	8007178 <TIM_OC1_SetConfig+0xb4>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d004      	beq.n	8007178 <TIM_OC1_SetConfig+0xb4>
 800716e:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 8007172:	481b      	ldr	r0, [pc, #108]	@ (80071e0 <TIM_OC1_SetConfig+0x11c>)
 8007174:	f7fa f89c 	bl	80012b0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	695b      	ldr	r3, [r3, #20]
 800717c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007180:	d008      	beq.n	8007194 <TIM_OC1_SetConfig+0xd0>
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <TIM_OC1_SetConfig+0xd0>
 800718a:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 800718e:	4814      	ldr	r0, [pc, #80]	@ (80071e0 <TIM_OC1_SetConfig+0x11c>)
 8007190:	f7fa f88e 	bl	80012b0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800719a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80071a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	695b      	ldr	r3, [r3, #20]
 80071a8:	693a      	ldr	r2, [r7, #16]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	693a      	ldr	r2, [r7, #16]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	3718      	adds	r7, #24
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	40012c00 	.word	0x40012c00
 80071e0:	080082dc 	.word	0x080082dc

080071e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	f023 0210 	bic.w	r2, r3, #16
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800721a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	021b      	lsls	r3, r3, #8
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	f023 0320 	bic.w	r3, r3, #32
 800722e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	011b      	lsls	r3, r3, #4
 8007236:	697a      	ldr	r2, [r7, #20]
 8007238:	4313      	orrs	r3, r2
 800723a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	4a31      	ldr	r2, [pc, #196]	@ (8007304 <TIM_OC2_SetConfig+0x120>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d11a      	bne.n	800727a <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d008      	beq.n	800725e <TIM_OC2_SetConfig+0x7a>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	2b08      	cmp	r3, #8
 8007252:	d004      	beq.n	800725e <TIM_OC2_SetConfig+0x7a>
 8007254:	f641 3110 	movw	r1, #6928	@ 0x1b10
 8007258:	482b      	ldr	r0, [pc, #172]	@ (8007308 <TIM_OC2_SetConfig+0x124>)
 800725a:	f7fa f829 	bl	80012b0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	011b      	lsls	r3, r3, #4
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007278:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a21      	ldr	r2, [pc, #132]	@ (8007304 <TIM_OC2_SetConfig+0x120>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d12f      	bne.n	80072e2 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	699b      	ldr	r3, [r3, #24]
 8007286:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800728a:	d008      	beq.n	800729e <TIM_OC2_SetConfig+0xba>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d004      	beq.n	800729e <TIM_OC2_SetConfig+0xba>
 8007294:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 8007298:	481b      	ldr	r0, [pc, #108]	@ (8007308 <TIM_OC2_SetConfig+0x124>)
 800729a:	f7fa f809 	bl	80012b0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80072a6:	d008      	beq.n	80072ba <TIM_OC2_SetConfig+0xd6>
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d004      	beq.n	80072ba <TIM_OC2_SetConfig+0xd6>
 80072b0:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 80072b4:	4814      	ldr	r0, [pc, #80]	@ (8007308 <TIM_OC2_SetConfig+0x124>)
 80072b6:	f7f9 fffb 	bl	80012b0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80072c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80072c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	695b      	ldr	r3, [r3, #20]
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	4313      	orrs	r3, r2
 80072d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	693a      	ldr	r2, [r7, #16]
 80072e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	621a      	str	r2, [r3, #32]
}
 80072fc:	bf00      	nop
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	40012c00 	.word	0x40012c00
 8007308:	080082dc 	.word	0x080082dc

0800730c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a1b      	ldr	r3, [r3, #32]
 8007320:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	69db      	ldr	r3, [r3, #28]
 8007332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f023 0303 	bic.w	r3, r3, #3
 8007342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4313      	orrs	r3, r2
 800734c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	021b      	lsls	r3, r3, #8
 800735c:	697a      	ldr	r2, [r7, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	4a31      	ldr	r2, [pc, #196]	@ (800742c <TIM_OC3_SetConfig+0x120>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d11a      	bne.n	80073a0 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d008      	beq.n	8007384 <TIM_OC3_SetConfig+0x78>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	2b08      	cmp	r3, #8
 8007378:	d004      	beq.n	8007384 <TIM_OC3_SetConfig+0x78>
 800737a:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 800737e:	482c      	ldr	r0, [pc, #176]	@ (8007430 <TIM_OC3_SetConfig+0x124>)
 8007380:	f7f9 ff96 	bl	80012b0 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800738a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68db      	ldr	r3, [r3, #12]
 8007390:	021b      	lsls	r3, r3, #8
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	4313      	orrs	r3, r2
 8007396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800739e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a22      	ldr	r2, [pc, #136]	@ (800742c <TIM_OC3_SetConfig+0x120>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d12f      	bne.n	8007408 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073b0:	d008      	beq.n	80073c4 <TIM_OC3_SetConfig+0xb8>
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	699b      	ldr	r3, [r3, #24]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d004      	beq.n	80073c4 <TIM_OC3_SetConfig+0xb8>
 80073ba:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80073be:	481c      	ldr	r0, [pc, #112]	@ (8007430 <TIM_OC3_SetConfig+0x124>)
 80073c0:	f7f9 ff76 	bl	80012b0 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073cc:	d008      	beq.n	80073e0 <TIM_OC3_SetConfig+0xd4>
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <TIM_OC3_SetConfig+0xd4>
 80073d6:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 80073da:	4815      	ldr	r0, [pc, #84]	@ (8007430 <TIM_OC3_SetConfig+0x124>)
 80073dc:	f7f9 ff68 	bl	80012b0 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80073e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	011b      	lsls	r3, r3, #4
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	3718      	adds	r7, #24
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	40012c00 	.word	0x40012c00
 8007430:	080082dc 	.word	0x080082dc

08007434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b086      	sub	sp, #24
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800746a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	4313      	orrs	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800747e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	031b      	lsls	r3, r3, #12
 8007486:	693a      	ldr	r2, [r7, #16]
 8007488:	4313      	orrs	r3, r2
 800748a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a16      	ldr	r2, [pc, #88]	@ (80074e8 <TIM_OC4_SetConfig+0xb4>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d117      	bne.n	80074c4 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	695b      	ldr	r3, [r3, #20]
 8007498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800749c:	d008      	beq.n	80074b0 <TIM_OC4_SetConfig+0x7c>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	695b      	ldr	r3, [r3, #20]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <TIM_OC4_SetConfig+0x7c>
 80074a6:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 80074aa:	4810      	ldr	r0, [pc, #64]	@ (80074ec <TIM_OC4_SetConfig+0xb8>)
 80074ac:	f7f9 ff00 	bl	80012b0 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80074b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	695b      	ldr	r3, [r3, #20]
 80074bc:	019b      	lsls	r3, r3, #6
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	621a      	str	r2, [r3, #32]
}
 80074de:	bf00      	nop
 80074e0:	3718      	adds	r7, #24
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40012c00 	.word	0x40012c00
 80074ec:	080082dc 	.word	0x080082dc

080074f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b087      	sub	sp, #28
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6a1b      	ldr	r3, [r3, #32]
 8007500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	f023 0201 	bic.w	r2, r3, #1
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800751a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4313      	orrs	r3, r2
 8007524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	f023 030a 	bic.w	r3, r3, #10
 800752c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	bc80      	pop	{r7}
 800754a:	4770      	bx	lr

0800754c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	6a1b      	ldr	r3, [r3, #32]
 8007562:	f023 0210 	bic.w	r2, r3, #16
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	699b      	ldr	r3, [r3, #24]
 800756e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	031b      	lsls	r3, r3, #12
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	4313      	orrs	r3, r2
 8007580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007588:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	4313      	orrs	r3, r2
 8007592:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bc80      	pop	{r7}
 80075a8:	4770      	bx	lr

080075aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b085      	sub	sp, #20
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075c2:	683a      	ldr	r2, [r7, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	f043 0307 	orr.w	r3, r3, #7
 80075cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	609a      	str	r2, [r3, #8]
}
 80075d4:	bf00      	nop
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	bc80      	pop	{r7}
 80075dc:	4770      	bx	lr

080075de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075de:	b480      	push	{r7}
 80075e0:	b087      	sub	sp, #28
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	60f8      	str	r0, [r7, #12]
 80075e6:	60b9      	str	r1, [r7, #8]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	021a      	lsls	r2, r3, #8
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	431a      	orrs	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4313      	orrs	r3, r2
 8007606:	697a      	ldr	r2, [r7, #20]
 8007608:	4313      	orrs	r3, r2
 800760a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	609a      	str	r2, [r3, #8]
}
 8007612:	bf00      	nop
 8007614:	371c      	adds	r7, #28
 8007616:	46bd      	mov	sp, r7
 8007618:	bc80      	pop	{r7}
 800761a:	4770      	bx	lr

0800761c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a22      	ldr	r2, [pc, #136]	@ (80076b4 <TIM_CCxChannelCmd+0x98>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d010      	beq.n	8007652 <TIM_CCxChannelCmd+0x36>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007636:	d00c      	beq.n	8007652 <TIM_CCxChannelCmd+0x36>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4a1f      	ldr	r2, [pc, #124]	@ (80076b8 <TIM_CCxChannelCmd+0x9c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d008      	beq.n	8007652 <TIM_CCxChannelCmd+0x36>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	4a1e      	ldr	r2, [pc, #120]	@ (80076bc <TIM_CCxChannelCmd+0xa0>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d004      	beq.n	8007652 <TIM_CCxChannelCmd+0x36>
 8007648:	f641 5192 	movw	r1, #7570	@ 0x1d92
 800764c:	481c      	ldr	r0, [pc, #112]	@ (80076c0 <TIM_CCxChannelCmd+0xa4>)
 800764e:	f7f9 fe2f 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d010      	beq.n	800767a <TIM_CCxChannelCmd+0x5e>
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	2b04      	cmp	r3, #4
 800765c:	d00d      	beq.n	800767a <TIM_CCxChannelCmd+0x5e>
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	2b08      	cmp	r3, #8
 8007662:	d00a      	beq.n	800767a <TIM_CCxChannelCmd+0x5e>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2b0c      	cmp	r3, #12
 8007668:	d007      	beq.n	800767a <TIM_CCxChannelCmd+0x5e>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	2b3c      	cmp	r3, #60	@ 0x3c
 800766e:	d004      	beq.n	800767a <TIM_CCxChannelCmd+0x5e>
 8007670:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8007674:	4812      	ldr	r0, [pc, #72]	@ (80076c0 <TIM_CCxChannelCmd+0xa4>)
 8007676:	f7f9 fe1b 	bl	80012b0 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	f003 031f 	and.w	r3, r3, #31
 8007680:	2201      	movs	r2, #1
 8007682:	fa02 f303 	lsl.w	r3, r2, r3
 8007686:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	43db      	mvns	r3, r3
 8007690:	401a      	ands	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1a      	ldr	r2, [r3, #32]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	fa01 f303 	lsl.w	r3, r1, r3
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]
}
 80076ac:	bf00      	nop
 80076ae:	3718      	adds	r7, #24
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	40012c00 	.word	0x40012c00
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	080082dc 	.word	0x080082dc

080076c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a4d      	ldr	r2, [pc, #308]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d013      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076e0:	d00e      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a49      	ldr	r2, [pc, #292]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d009      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a47      	ldr	r2, [pc, #284]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d004      	beq.n	8007700 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80076f6:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 80076fa:	4846      	ldr	r0, [pc, #280]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80076fc:	f7f9 fdd8 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d020      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b10      	cmp	r3, #16
 800770e:	d01c      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b20      	cmp	r3, #32
 8007716:	d018      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b30      	cmp	r3, #48	@ 0x30
 800771e:	d014      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2b40      	cmp	r3, #64	@ 0x40
 8007726:	d010      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	2b50      	cmp	r3, #80	@ 0x50
 800772e:	d00c      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2b60      	cmp	r3, #96	@ 0x60
 8007736:	d008      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2b70      	cmp	r3, #112	@ 0x70
 800773e:	d004      	beq.n	800774a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8007740:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8007744:	4833      	ldr	r0, [pc, #204]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8007746:	f7f9 fdb3 	bl	80012b0 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d008      	beq.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800775a:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 800775e:	482d      	ldr	r0, [pc, #180]	@ (8007814 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8007760:	f7f9 fda6 	bl	80012b0 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800776e:	2302      	movs	r3, #2
 8007770:	e046      	b.n	8007800 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2202      	movs	r2, #2
 800777e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007798:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68fa      	ldr	r2, [r7, #12]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a15      	ldr	r2, [pc, #84]	@ (8007808 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d00e      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80077be:	d009      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a11      	ldr	r2, [pc, #68]	@ (800780c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d004      	beq.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a10      	ldr	r2, [pc, #64]	@ (8007810 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d10c      	bne.n	80077ee <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2201      	movs	r2, #1
 80077f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	40012c00 	.word	0x40012c00
 800780c:	40000400 	.word	0x40000400
 8007810:	40000800 	.word	0x40000800
 8007814:	08008314 	.word	0x08008314

08007818 <TMC_2590_Init>:
#include "stm32f1xx_tmc_2590.h"

#include <stdlib.h>

TMC_2590_StatusTypeDef TMC_2590_Init(TMC_2590_HandleTypeDef *htmc2590)
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <TMC_2590_Init+0x12>
    {
        return TMC_2590_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e096      	b.n	8007958 <TMC_2590_Init+0x140>
    }

    if (htmc2590->State == TMC_2590_STATE_READY)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	d101      	bne.n	800783a <TMC_2590_Init+0x22>
    {
        // Peripheral is already initialized
        return TMC_2590_ERROR;
 8007836:	2301      	movs	r3, #1
 8007838:	e08e      	b.n	8007958 <TMC_2590_Init+0x140>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8007840:	b2db      	uxtb	r3, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d101      	bne.n	800784a <TMC_2590_Init+0x32>
    {
        return TMC_2590_BUSY;
 8007846:	2302      	movs	r3, #2
 8007848:	e086      	b.n	8007958 <TMC_2590_Init+0x140>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8007850:	b2db      	uxtb	r3, r3
 8007852:	2b06      	cmp	r3, #6
 8007854:	d101      	bne.n	800785a <TMC_2590_Init+0x42>
    {
        return TMC_2590_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	e07e      	b.n	8007958 <TMC_2590_Init+0x140>
    }

    if (htmc2590->Init.SPI_HandlerInstance == NULL)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <TMC_2590_Init+0x4e>
    {
        return TMC_2590_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e078      	b.n	8007958 <TMC_2590_Init+0x140>
    }

    if (!htmc2590->Init.use_pwm && htmc2590->Init.STEP_Tim == NULL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800786c:	2b00      	cmp	r3, #0
 800786e:	d105      	bne.n	800787c <TMC_2590_Init+0x64>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <TMC_2590_Init+0x64>
    {
        return TMC_2590_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e06d      	b.n	8007958 <TMC_2590_Init+0x140>
    }
    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    // todo throw errors if pins are undefined

    // set st_alone
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6958      	ldr	r0, [r3, #20]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	8b19      	ldrh	r1, [r3, #24]
            htmc2590->Init.ST_ALONE_Pin,
            htmc2590->Init.use_st_alone ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	7c9b      	ldrb	r3, [r3, #18]
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf14      	ite	ne
 8007894:	2301      	movne	r3, #1
 8007896:	2300      	moveq	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	f7fc fd98 	bl	80043d0 <HAL_GPIO_WritePin>

    // set default pin state. this should actually already be configured by the gpio library
    if (!htmc2590->Init.use_st_alone)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7c9b      	ldrb	r3, [r3, #18]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <TMC_2590_Init+0xa6>
    {
        // todo check conf registers
        HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6858      	ldr	r0, [r3, #4]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	891b      	ldrh	r3, [r3, #8]
 80078b0:	2201      	movs	r2, #1
 80078b2:	4619      	mov	r1, r3
 80078b4:	f7fc fd8c 	bl	80043d0 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
        // write config registers
        __send_conf_registers(htmc2590);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f8f1 	bl	8007aa0 <__send_conf_registers>
    }
    if (!htmc2590->Init.use_pwm)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <TMC_2590_Init+0xc0>
    {
        // set default step
        HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078d0:	2200      	movs	r2, #0
 80078d2:	4619      	mov	r1, r3
 80078d4:	f7fc fd7c 	bl	80043d0 <HAL_GPIO_WritePin>
                htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
    }
    // set default dir
    HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69d8      	ldr	r0, [r3, #28]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8c1b      	ldrh	r3, [r3, #32]
 80078e0:	2200      	movs	r2, #0
 80078e2:	4619      	mov	r1, r3
 80078e4:	f7fc fd74 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    // set enn
    HAL_GPIO_WritePin(htmc2590->Init.ENN_GPIO_Port, htmc2590->Init.ENN_Pin,
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	68d8      	ldr	r0, [r3, #12]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	8a1b      	ldrh	r3, [r3, #16]
 80078f0:	2200      	movs	r2, #0
 80078f2:	4619      	mov	r1, r3
 80078f4:	f7fc fd6c 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    if (htmc2590->Init.use_pwm)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d025      	beq.n	800794e <TMC_2590_Init+0x136>
    {
        // pre-allocate memory for pwm dma
        htmc2590->__pwm_dma_ptr = (uint16_t*) calloc(htmc2590->Init.max_steps,
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007906:	2102      	movs	r1, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f000 facb 	bl	8007ea4 <calloc>
 800790e:	4603      	mov	r3, r0
 8007910:	461a      	mov	r2, r3
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	671a      	str	r2, [r3, #112]	@ 0x70
                sizeof(uint16_t));
        // check calloc was successful
        if (htmc2590->__pwm_dma_ptr == NULL)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <TMC_2590_Init+0x112>
        {
            htmc2590->State = TMC_2590_STATE_ERROR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2206      	movs	r2, #6
 8007922:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
            return TMC_2590_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e016      	b.n	8007958 <TMC_2590_Init+0x140>
        }
        // set all values to 50% duty cycle
        for (uint16_t i = 0; i < htmc2590->Init.max_steps; i++)
 800792a:	2300      	movs	r3, #0
 800792c:	81fb      	strh	r3, [r7, #14]
 800792e:	e009      	b.n	8007944 <TMC_2590_Init+0x12c>
        {
            htmc2590->__pwm_dma_ptr[i] = 50;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007934:	89fb      	ldrh	r3, [r7, #14]
 8007936:	005b      	lsls	r3, r3, #1
 8007938:	4413      	add	r3, r2
 800793a:	2232      	movs	r2, #50	@ 0x32
 800793c:	801a      	strh	r2, [r3, #0]
        for (uint16_t i = 0; i < htmc2590->Init.max_steps; i++)
 800793e:	89fb      	ldrh	r3, [r7, #14]
 8007940:	3301      	adds	r3, #1
 8007942:	81fb      	strh	r3, [r7, #14]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007948:	89fa      	ldrh	r2, [r7, #14]
 800794a:	429a      	cmp	r2, r3
 800794c:	d3f0      	bcc.n	8007930 <TMC_2590_Init+0x118>
        }
    }
    // set driver state
    htmc2590->State = TMC_2590_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    // return status
    return TMC_2590_OK;
 8007956:	2300      	movs	r3, #0
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <TMC_2590_MoveSteps>:
    return TMC_2590_OK;
}

TMC_2590_StatusTypeDef TMC_2590_MoveSteps(TMC_2590_HandleTypeDef *htmc2590,
        int16_t steps)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	807b      	strh	r3, [r7, #2]
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <TMC_2590_MoveSteps+0x16>
    {
        return TMC_2590_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e07d      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }
    // check driver state
    if (htmc2590->State == TMC_2590_STATE_RESET)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <TMC_2590_MoveSteps+0x26>
    {
        // Peripheral is not initialized
        return TMC_2590_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e075      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b02      	cmp	r3, #2
 8007990:	d101      	bne.n	8007996 <TMC_2590_MoveSteps+0x36>
    {
        return TMC_2590_BUSY;
 8007992:	2302      	movs	r3, #2
 8007994:	e06d      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b06      	cmp	r3, #6
 80079a0:	d101      	bne.n	80079a6 <TMC_2590_MoveSteps+0x46>
    {
        return TMC_2590_ERROR;
 80079a2:	2301      	movs	r3, #1
 80079a4:	e065      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }

    // short-circuit if steps to move is 0, prevents callback to reset state from never firing
    if (steps == 0)
 80079a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <TMC_2590_MoveSteps+0x52>
    {
        return TMC_2590_OK;
 80079ae:	2300      	movs	r3, #0
 80079b0:	e05f      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }

    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a

    // set dir
    if (steps < 0)
 80079ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	da08      	bge.n	80079d4 <TMC_2590_MoveSteps+0x74>
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69d8      	ldr	r0, [r3, #28]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	8c1b      	ldrh	r3, [r3, #32]
 80079ca:	2200      	movs	r2, #0
 80079cc:	4619      	mov	r1, r3
 80079ce:	f7fc fcff 	bl	80043d0 <HAL_GPIO_WritePin>
 80079d2:	e007      	b.n	80079e4 <TMC_2590_MoveSteps+0x84>
                GPIO_PIN_RESET);
    }
    else
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	69d8      	ldr	r0, [r3, #28]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	8c1b      	ldrh	r3, [r3, #32]
 80079dc:	2201      	movs	r2, #1
 80079de:	4619      	mov	r1, r3
 80079e0:	f7fc fcf6 	bl	80043d0 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
    }

    if (!htmc2590->Init.use_pwm)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d126      	bne.n	8007a3c <TMC_2590_MoveSteps+0xdc>
    {
        // pulse step pin with some delay
        for (uint32_t i = 0; i < steps; i++)
 80079ee:	2300      	movs	r3, #0
 80079f0:	60fb      	str	r3, [r7, #12]
 80079f2:	e018      	b.n	8007a26 <TMC_2590_MoveSteps+0xc6>
        {
            // TODO set a constant for the delay
            HAL_Delay(1);
 80079f4:	2001      	movs	r0, #1
 80079f6:	f7fa fae1 	bl	8001fbc <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a02:	2201      	movs	r2, #1
 8007a04:	4619      	mov	r1, r3
 8007a06:	f7fc fce3 	bl	80043d0 <HAL_GPIO_WritePin>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_SET);
            // TODO set a constant for the delay
            HAL_Delay(1);
 8007a0a:	2001      	movs	r0, #1
 8007a0c:	f7fa fad6 	bl	8001fbc <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a18:	2200      	movs	r2, #0
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	f7fc fcd8 	bl	80043d0 <HAL_GPIO_WritePin>
        for (uint32_t i = 0; i < steps; i++)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	3301      	adds	r3, #1
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d3e1      	bcc.n	80079f4 <TMC_2590_MoveSteps+0x94>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
        }
        //  set driver state
        htmc2590->State = TMC_2590_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        return TMC_2590_OK;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	e01a      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }


    // callback moves TMC2590 to READY state
    // config timer settings to pulse
    uint16_t pwm_pulses = abs(steps);
 8007a3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bfb8      	it	lt
 8007a44:	425b      	neglt	r3, r3
 8007a46:	817b      	strh	r3, [r7, #10]
    if (pwm_pulses > htmc2590->Init.max_steps)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007a4c:	897a      	ldrh	r2, [r7, #10]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d905      	bls.n	8007a5e <TMC_2590_MoveSteps+0xfe>
    {
        // throw error
        htmc2590->State = TMC_2590_STATE_ERROR;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2206      	movs	r2, #6
 8007a56:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
        return TMC_2590_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e009      	b.n	8007a72 <TMC_2590_MoveSteps+0x112>
    }

    HAL_TIM_PWM_Start_DMA(htmc2590->Init.STEP_Tim, htmc2590->Init.STEP_Channel,
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
            (uint32_t*) htmc2590->__pwm_dma_ptr, pwm_pulses);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
    HAL_TIM_PWM_Start_DMA(htmc2590->Init.STEP_Tim, htmc2590->Init.STEP_Channel,
 8007a6a:	897b      	ldrh	r3, [r7, #10]
 8007a6c:	f7fe fab4 	bl	8005fd8 <HAL_TIM_PWM_Start_DMA>
    return TMC_2590_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}

08007a7a <TMC_2590_TIM_PWM_PulseFinishedCallback>:
    return TMC_2590_OK;
}

void TMC_2590_TIM_PWM_PulseFinishedCallback(TMC_2590_HandleTypeDef *htmc2590,
        TIM_HandleTypeDef *htim)
{
 8007a7a:	b580      	push	{r7, lr}
 8007a7c:	b082      	sub	sp, #8
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
 8007a82:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop_DMA(htim, htmc2590->Init.STEP_Channel);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6838      	ldr	r0, [r7, #0]
 8007a8c:	f7fe fc9c 	bl	80063c8 <HAL_TIM_PWM_Stop_DMA>
    htmc2590->State = TMC_2590_STATE_READY;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2201      	movs	r2, #1
 8007a94:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
}
 8007a98:	bf00      	nop
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <__send_conf_registers>:

TMC_2590_StatusTypeDef __send_conf_registers(TMC_2590_HandleTypeDef *htmc2590)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
    uint32_t SPImsg = 0;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
    uint8_t SPI_read_bytes[3];

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCONF; // DRVCONF
 8007aac:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8007ab0:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.tst << 16);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ab8:	041b      	lsls	r3, r3, #16
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.slp << 11);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac6:	02db      	lsls	r3, r3, #11
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.dis_s2g << 10);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ad4:	029b      	lsls	r3, r3, #10
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.ts2g << 8);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8007ae2:	021b      	lsls	r3, r3, #8
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.sdoff << 7);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007af0:	01db      	lsls	r3, r3, #7
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.vsense << 6);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007afe:	019b      	lsls	r3, r3, #6
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.rdsel << 4);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8007b0c:	011b      	lsls	r3, r3, #4
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.otsens << 3);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.shrtsens << 2);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_pfd << 1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	68fa      	ldr	r2, [r7, #12]
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_s2vs << 0);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8007b44:	461a      	mov	r2, r3
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
    // write new registers
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007b4c:	f107 0308 	add.w	r3, r7, #8
 8007b50:	461a      	mov	r2, r3
 8007b52:	68f9      	ldr	r1, [r7, #12]
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f000 f910 	bl	8007d7a <__send_spi_packet>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <__send_conf_registers+0xc4>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007b60:	2301      	movs	r3, #1
 8007b62:	e0d7      	b.n	8007d14 <__send_conf_registers+0x274>
    }
    // SPI_read_bytes to DRVSTATUS
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8007b64:	f107 0308 	add.w	r3, r7, #8
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 f933 	bl	8007dd6 <__set_drvstatus_struct>

    // set rest of the registers
    SPImsg = __TMC_2590_ConfRegister_Header_SGCSCONF;
 8007b70:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8007b74:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sfilt << 16);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007b7c:	041b      	lsls	r3, r3, #16
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sgt << 8);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007b8a:	021b      	lsls	r3, r3, #8
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.cs << 0);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007b98:	461a      	mov	r2, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007ba0:	f107 0308 	add.w	r3, r7, #8
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	68f9      	ldr	r1, [r7, #12]
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f8e6 	bl	8007d7a <__send_spi_packet>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d001      	beq.n	8007bb8 <__send_conf_registers+0x118>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e0ad      	b.n	8007d14 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8007bb8:	f107 0308 	add.w	r3, r7, #8
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f909 	bl	8007dd6 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_SMARTEN;
 8007bc4:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8007bc8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seimin << 15);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007bd0:	03db      	lsls	r3, r3, #15
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.sedn << 13);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8007bde:	035b      	lsls	r3, r3, #13
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semax << 8);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seup << 5);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bfa:	015b      	lsls	r3, r3, #5
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semin << 0);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007c08:	461a      	mov	r2, r3
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007c10:	f107 0308 	add.w	r3, r7, #8
 8007c14:	461a      	mov	r2, r3
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f8ae 	bl	8007d7a <__send_spi_packet>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d001      	beq.n	8007c28 <__send_conf_registers+0x188>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e075      	b.n	8007d14 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8007c28:	f107 0308 	add.w	r3, r7, #8
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f8d1 	bl	8007dd6 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_CHOPCONF;
 8007c34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007c38:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.tbl << 15);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8007c40:	03db      	lsls	r3, r3, #15
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	4313      	orrs	r3, r2
 8007c46:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.chm << 14);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007c4e:	039b      	lsls	r3, r3, #14
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.rndtf << 13);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007c5c:	035b      	lsls	r3, r3, #13
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hdec << 11);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8007c6a:	02db      	lsls	r3, r3, #11
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hend << 7);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8007c78:	01db      	lsls	r3, r3, #7
 8007c7a:	68fa      	ldr	r2, [r7, #12]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hstrt << 4);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	68fa      	ldr	r2, [r7, #12]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.toff << 0);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007c94:	461a      	mov	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007c9c:	f107 0308 	add.w	r3, r7, #8
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	68f9      	ldr	r1, [r7, #12]
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f868 	bl	8007d7a <__send_spi_packet>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d001      	beq.n	8007cb4 <__send_conf_registers+0x214>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e02f      	b.n	8007d14 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8007cb4:	f107 0308 	add.w	r3, r7, #8
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f88b 	bl	8007dd6 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCTRL;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.intpol << 9);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 305a 	ldrb.w	r3, [r3, #90]	@ 0x5a
 8007cca:	025b      	lsls	r3, r3, #9
 8007ccc:	68fa      	ldr	r2, [r7, #12]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.dedge << 8);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 305b 	ldrb.w	r3, [r3, #91]	@ 0x5b
 8007cd8:	021b      	lsls	r3, r3, #8
 8007cda:	68fa      	ldr	r2, [r7, #12]
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.mres << 0);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	68f9      	ldr	r1, [r7, #12]
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 f83f 	bl	8007d7a <__send_spi_packet>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d001      	beq.n	8007d06 <__send_conf_registers+0x266>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e006      	b.n	8007d14 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8007d06:	f107 0308 	add.w	r3, r7, #8
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 f862 	bl	8007dd6 <__set_drvstatus_struct>
    return TMC_2590_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <__word_to_spi_order_buffer>:

void __word_to_spi_order_buffer(uint32_t word, uint8_t *buff)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
    // convert to big endian
    buff[2] = (uint8_t) (word & 0xFF);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	3302      	adds	r3, #2
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	b2d2      	uxtb	r2, r2
 8007d2e:	701a      	strb	r2, [r3, #0]
    buff[1] = (uint8_t) ((word & 0xFF00) >> 8);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	0a1a      	lsrs	r2, r3, #8
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	3301      	adds	r3, #1
 8007d38:	b2d2      	uxtb	r2, r2
 8007d3a:	701a      	strb	r2, [r3, #0]
    buff[0] = (uint8_t) ((word & 0xFF0000) >> 16);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	0c1b      	lsrs	r3, r3, #16
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	701a      	strb	r2, [r3, #0]
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bc80      	pop	{r7}
 8007d4e:	4770      	bx	lr

08007d50 <__spi_order_buffer_to_word>:

uint32_t __spi_order_buffer_to_word(uint8_t *buff)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    return ((uint32_t) buff[0] << 16) | ((uint32_t) buff[1] << 8)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	041a      	lsls	r2, r3, #16
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3301      	adds	r3, #1
 8007d62:	781b      	ldrb	r3, [r3, #0]
 8007d64:	021b      	lsls	r3, r3, #8
 8007d66:	4313      	orrs	r3, r2
            | (uint32_t) buff[2];
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	3202      	adds	r2, #2
 8007d6c:	7812      	ldrb	r2, [r2, #0]
 8007d6e:	4313      	orrs	r3, r2
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bc80      	pop	{r7}
 8007d78:	4770      	bx	lr

08007d7a <__send_spi_packet>:

HAL_StatusTypeDef __send_spi_packet(TMC_2590_HandleTypeDef *htmc2590,
        uint32_t SPImsg, uint8_t *SPI_read_bytes)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b088      	sub	sp, #32
 8007d7e:	af02      	add	r7, sp, #8
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
    uint8_t SPImsg_bytes[3];
    __word_to_spi_order_buffer(SPImsg, SPImsg_bytes);
 8007d86:	f107 0314 	add.w	r3, r7, #20
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	68b8      	ldr	r0, [r7, #8]
 8007d8e:	f7ff ffc5 	bl	8007d1c <__word_to_spi_order_buffer>
    // write new registers
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	6858      	ldr	r0, [r3, #4]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	891b      	ldrh	r3, [r3, #8]
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fc fb17 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	f107 0114 	add.w	r1, r7, #20
 8007daa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007dae:	9300      	str	r3, [sp, #0]
 8007db0:	2303      	movs	r3, #3
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	f7fd fd34 	bl	8005820 <HAL_SPI_TransmitReceive>
 8007db8:	4603      	mov	r3, r0
 8007dba:	75fb      	strb	r3, [r7, #23]
            htmc2590->Init.SPI_HandlerInstance, SPImsg_bytes, SPI_read_bytes, 3,
            1000);
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6858      	ldr	r0, [r3, #4]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	891b      	ldrh	r3, [r3, #8]
 8007dc4:	2201      	movs	r2, #1
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	f7fc fb02 	bl	80043d0 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);
    return spi_status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <__set_drvstatus_struct>:

void __set_drvstatus_struct(TMC_2590_HandleTypeDef *htmc2590, uint8_t *status)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	6039      	str	r1, [r7, #0]
    uint32_t status_word = __spi_order_buffer_to_word(status);
 8007de0:	6838      	ldr	r0, [r7, #0]
 8007de2:	f7ff ffb5 	bl	8007d50 <__spi_order_buffer_to_word>
 8007de6:	60f8      	str	r0, [r7, #12]

    htmc2590->DrvStatus.sg = status_word & 0x0001;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	b2da      	uxtb	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    htmc2590->DrvStatus.ot = (status_word >> 1) & 0x0001;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f003 0301 	and.w	r3, r3, #1
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    htmc2590->DrvStatus.otpw = (status_word >> 2) & 0x0001;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	089b      	lsrs	r3, r3, #2
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 0301 	and.w	r3, r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    htmc2590->DrvStatus.shorta = (status_word >> 3) & 0x0001;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	08db      	lsrs	r3, r3, #3
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	b2da      	uxtb	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    htmc2590->DrvStatus.shortb = (status_word >> 4) & 0x0001;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	091b      	lsrs	r3, r3, #4
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	f003 0301 	and.w	r3, r3, #1
 8007e38:	b2da      	uxtb	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
    htmc2590->DrvStatus.ola = (status_word >> 5) & 0x0001;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	f003 0301 	and.w	r3, r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
    htmc2590->DrvStatus.olb = (status_word >> 6) & 0x0001;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	099b      	lsrs	r3, r3, #6
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	b2da      	uxtb	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
    htmc2590->DrvStatus.stst = (status_word >> 7) & 0x0001;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	09db      	lsrs	r3, r3, #7
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	f003 0301 	and.w	r3, r3, #1
 8007e6e:	b2da      	uxtb	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    htmc2590->DrvStatus.unused_bits = (status_word >> 8) & 0x0003;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	0a1b      	lsrs	r3, r3, #8
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	0a9b      	lsrs	r3, r3, #10
            & 0x03FF;
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e92:	b29a      	uxth	r2, r3
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e9a:	bf00      	nop
 8007e9c:	3710      	adds	r7, #16
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
	...

08007ea4 <calloc>:
 8007ea4:	4b02      	ldr	r3, [pc, #8]	@ (8007eb0 <calloc+0xc>)
 8007ea6:	460a      	mov	r2, r1
 8007ea8:	4601      	mov	r1, r0
 8007eaa:	6818      	ldr	r0, [r3, #0]
 8007eac:	f000 b802 	b.w	8007eb4 <_calloc_r>
 8007eb0:	2000000c 	.word	0x2000000c

08007eb4 <_calloc_r>:
 8007eb4:	b570      	push	{r4, r5, r6, lr}
 8007eb6:	fba1 5402 	umull	r5, r4, r1, r2
 8007eba:	b93c      	cbnz	r4, 8007ecc <_calloc_r+0x18>
 8007ebc:	4629      	mov	r1, r5
 8007ebe:	f000 f82f 	bl	8007f20 <_malloc_r>
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	b928      	cbnz	r0, 8007ed2 <_calloc_r+0x1e>
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	4630      	mov	r0, r6
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	220c      	movs	r2, #12
 8007ece:	6002      	str	r2, [r0, #0]
 8007ed0:	e7f9      	b.n	8007ec6 <_calloc_r+0x12>
 8007ed2:	462a      	mov	r2, r5
 8007ed4:	4621      	mov	r1, r4
 8007ed6:	f000 f8af 	bl	8008038 <memset>
 8007eda:	e7f5      	b.n	8007ec8 <_calloc_r+0x14>

08007edc <sbrk_aligned>:
 8007edc:	b570      	push	{r4, r5, r6, lr}
 8007ede:	4e0f      	ldr	r6, [pc, #60]	@ (8007f1c <sbrk_aligned+0x40>)
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	6831      	ldr	r1, [r6, #0]
 8007ee4:	4605      	mov	r5, r0
 8007ee6:	b911      	cbnz	r1, 8007eee <sbrk_aligned+0x12>
 8007ee8:	f000 f8ae 	bl	8008048 <_sbrk_r>
 8007eec:	6030      	str	r0, [r6, #0]
 8007eee:	4621      	mov	r1, r4
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	f000 f8a9 	bl	8008048 <_sbrk_r>
 8007ef6:	1c43      	adds	r3, r0, #1
 8007ef8:	d103      	bne.n	8007f02 <sbrk_aligned+0x26>
 8007efa:	f04f 34ff 	mov.w	r4, #4294967295
 8007efe:	4620      	mov	r0, r4
 8007f00:	bd70      	pop	{r4, r5, r6, pc}
 8007f02:	1cc4      	adds	r4, r0, #3
 8007f04:	f024 0403 	bic.w	r4, r4, #3
 8007f08:	42a0      	cmp	r0, r4
 8007f0a:	d0f8      	beq.n	8007efe <sbrk_aligned+0x22>
 8007f0c:	1a21      	subs	r1, r4, r0
 8007f0e:	4628      	mov	r0, r5
 8007f10:	f000 f89a 	bl	8008048 <_sbrk_r>
 8007f14:	3001      	adds	r0, #1
 8007f16:	d1f2      	bne.n	8007efe <sbrk_aligned+0x22>
 8007f18:	e7ef      	b.n	8007efa <sbrk_aligned+0x1e>
 8007f1a:	bf00      	nop
 8007f1c:	200003b0 	.word	0x200003b0

08007f20 <_malloc_r>:
 8007f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f24:	1ccd      	adds	r5, r1, #3
 8007f26:	f025 0503 	bic.w	r5, r5, #3
 8007f2a:	3508      	adds	r5, #8
 8007f2c:	2d0c      	cmp	r5, #12
 8007f2e:	bf38      	it	cc
 8007f30:	250c      	movcc	r5, #12
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	4606      	mov	r6, r0
 8007f36:	db01      	blt.n	8007f3c <_malloc_r+0x1c>
 8007f38:	42a9      	cmp	r1, r5
 8007f3a:	d904      	bls.n	8007f46 <_malloc_r+0x26>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	6033      	str	r3, [r6, #0]
 8007f40:	2000      	movs	r0, #0
 8007f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800801c <_malloc_r+0xfc>
 8007f4a:	f000 f869 	bl	8008020 <__malloc_lock>
 8007f4e:	f8d8 3000 	ldr.w	r3, [r8]
 8007f52:	461c      	mov	r4, r3
 8007f54:	bb44      	cbnz	r4, 8007fa8 <_malloc_r+0x88>
 8007f56:	4629      	mov	r1, r5
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f7ff ffbf 	bl	8007edc <sbrk_aligned>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	4604      	mov	r4, r0
 8007f62:	d158      	bne.n	8008016 <_malloc_r+0xf6>
 8007f64:	f8d8 4000 	ldr.w	r4, [r8]
 8007f68:	4627      	mov	r7, r4
 8007f6a:	2f00      	cmp	r7, #0
 8007f6c:	d143      	bne.n	8007ff6 <_malloc_r+0xd6>
 8007f6e:	2c00      	cmp	r4, #0
 8007f70:	d04b      	beq.n	800800a <_malloc_r+0xea>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	4639      	mov	r1, r7
 8007f76:	4630      	mov	r0, r6
 8007f78:	eb04 0903 	add.w	r9, r4, r3
 8007f7c:	f000 f864 	bl	8008048 <_sbrk_r>
 8007f80:	4581      	cmp	r9, r0
 8007f82:	d142      	bne.n	800800a <_malloc_r+0xea>
 8007f84:	6821      	ldr	r1, [r4, #0]
 8007f86:	4630      	mov	r0, r6
 8007f88:	1a6d      	subs	r5, r5, r1
 8007f8a:	4629      	mov	r1, r5
 8007f8c:	f7ff ffa6 	bl	8007edc <sbrk_aligned>
 8007f90:	3001      	adds	r0, #1
 8007f92:	d03a      	beq.n	800800a <_malloc_r+0xea>
 8007f94:	6823      	ldr	r3, [r4, #0]
 8007f96:	442b      	add	r3, r5
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	f8d8 3000 	ldr.w	r3, [r8]
 8007f9e:	685a      	ldr	r2, [r3, #4]
 8007fa0:	bb62      	cbnz	r2, 8007ffc <_malloc_r+0xdc>
 8007fa2:	f8c8 7000 	str.w	r7, [r8]
 8007fa6:	e00f      	b.n	8007fc8 <_malloc_r+0xa8>
 8007fa8:	6822      	ldr	r2, [r4, #0]
 8007faa:	1b52      	subs	r2, r2, r5
 8007fac:	d420      	bmi.n	8007ff0 <_malloc_r+0xd0>
 8007fae:	2a0b      	cmp	r2, #11
 8007fb0:	d917      	bls.n	8007fe2 <_malloc_r+0xc2>
 8007fb2:	1961      	adds	r1, r4, r5
 8007fb4:	42a3      	cmp	r3, r4
 8007fb6:	6025      	str	r5, [r4, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	6059      	strne	r1, [r3, #4]
 8007fbc:	6863      	ldr	r3, [r4, #4]
 8007fbe:	bf08      	it	eq
 8007fc0:	f8c8 1000 	streq.w	r1, [r8]
 8007fc4:	5162      	str	r2, [r4, r5]
 8007fc6:	604b      	str	r3, [r1, #4]
 8007fc8:	4630      	mov	r0, r6
 8007fca:	f000 f82f 	bl	800802c <__malloc_unlock>
 8007fce:	f104 000b 	add.w	r0, r4, #11
 8007fd2:	1d23      	adds	r3, r4, #4
 8007fd4:	f020 0007 	bic.w	r0, r0, #7
 8007fd8:	1ac2      	subs	r2, r0, r3
 8007fda:	bf1c      	itt	ne
 8007fdc:	1a1b      	subne	r3, r3, r0
 8007fde:	50a3      	strne	r3, [r4, r2]
 8007fe0:	e7af      	b.n	8007f42 <_malloc_r+0x22>
 8007fe2:	6862      	ldr	r2, [r4, #4]
 8007fe4:	42a3      	cmp	r3, r4
 8007fe6:	bf0c      	ite	eq
 8007fe8:	f8c8 2000 	streq.w	r2, [r8]
 8007fec:	605a      	strne	r2, [r3, #4]
 8007fee:	e7eb      	b.n	8007fc8 <_malloc_r+0xa8>
 8007ff0:	4623      	mov	r3, r4
 8007ff2:	6864      	ldr	r4, [r4, #4]
 8007ff4:	e7ae      	b.n	8007f54 <_malloc_r+0x34>
 8007ff6:	463c      	mov	r4, r7
 8007ff8:	687f      	ldr	r7, [r7, #4]
 8007ffa:	e7b6      	b.n	8007f6a <_malloc_r+0x4a>
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	42a3      	cmp	r3, r4
 8008002:	d1fb      	bne.n	8007ffc <_malloc_r+0xdc>
 8008004:	2300      	movs	r3, #0
 8008006:	6053      	str	r3, [r2, #4]
 8008008:	e7de      	b.n	8007fc8 <_malloc_r+0xa8>
 800800a:	230c      	movs	r3, #12
 800800c:	4630      	mov	r0, r6
 800800e:	6033      	str	r3, [r6, #0]
 8008010:	f000 f80c 	bl	800802c <__malloc_unlock>
 8008014:	e794      	b.n	8007f40 <_malloc_r+0x20>
 8008016:	6005      	str	r5, [r0, #0]
 8008018:	e7d6      	b.n	8007fc8 <_malloc_r+0xa8>
 800801a:	bf00      	nop
 800801c:	200003b4 	.word	0x200003b4

08008020 <__malloc_lock>:
 8008020:	4801      	ldr	r0, [pc, #4]	@ (8008028 <__malloc_lock+0x8>)
 8008022:	f000 b84b 	b.w	80080bc <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	200004f4 	.word	0x200004f4

0800802c <__malloc_unlock>:
 800802c:	4801      	ldr	r0, [pc, #4]	@ (8008034 <__malloc_unlock+0x8>)
 800802e:	f000 b846 	b.w	80080be <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	200004f4 	.word	0x200004f4

08008038 <memset>:
 8008038:	4603      	mov	r3, r0
 800803a:	4402      	add	r2, r0
 800803c:	4293      	cmp	r3, r2
 800803e:	d100      	bne.n	8008042 <memset+0xa>
 8008040:	4770      	bx	lr
 8008042:	f803 1b01 	strb.w	r1, [r3], #1
 8008046:	e7f9      	b.n	800803c <memset+0x4>

08008048 <_sbrk_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	2300      	movs	r3, #0
 800804c:	4d05      	ldr	r5, [pc, #20]	@ (8008064 <_sbrk_r+0x1c>)
 800804e:	4604      	mov	r4, r0
 8008050:	4608      	mov	r0, r1
 8008052:	602b      	str	r3, [r5, #0]
 8008054:	f7f9 fae2 	bl	800161c <_sbrk>
 8008058:	1c43      	adds	r3, r0, #1
 800805a:	d102      	bne.n	8008062 <_sbrk_r+0x1a>
 800805c:	682b      	ldr	r3, [r5, #0]
 800805e:	b103      	cbz	r3, 8008062 <_sbrk_r+0x1a>
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	bd38      	pop	{r3, r4, r5, pc}
 8008064:	200004f0 	.word	0x200004f0

08008068 <__errno>:
 8008068:	4b01      	ldr	r3, [pc, #4]	@ (8008070 <__errno+0x8>)
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	4770      	bx	lr
 800806e:	bf00      	nop
 8008070:	2000000c 	.word	0x2000000c

08008074 <__libc_init_array>:
 8008074:	b570      	push	{r4, r5, r6, lr}
 8008076:	2600      	movs	r6, #0
 8008078:	4d0c      	ldr	r5, [pc, #48]	@ (80080ac <__libc_init_array+0x38>)
 800807a:	4c0d      	ldr	r4, [pc, #52]	@ (80080b0 <__libc_init_array+0x3c>)
 800807c:	1b64      	subs	r4, r4, r5
 800807e:	10a4      	asrs	r4, r4, #2
 8008080:	42a6      	cmp	r6, r4
 8008082:	d109      	bne.n	8008098 <__libc_init_array+0x24>
 8008084:	f000 f81c 	bl	80080c0 <_init>
 8008088:	2600      	movs	r6, #0
 800808a:	4d0a      	ldr	r5, [pc, #40]	@ (80080b4 <__libc_init_array+0x40>)
 800808c:	4c0a      	ldr	r4, [pc, #40]	@ (80080b8 <__libc_init_array+0x44>)
 800808e:	1b64      	subs	r4, r4, r5
 8008090:	10a4      	asrs	r4, r4, #2
 8008092:	42a6      	cmp	r6, r4
 8008094:	d105      	bne.n	80080a2 <__libc_init_array+0x2e>
 8008096:	bd70      	pop	{r4, r5, r6, pc}
 8008098:	f855 3b04 	ldr.w	r3, [r5], #4
 800809c:	4798      	blx	r3
 800809e:	3601      	adds	r6, #1
 80080a0:	e7ee      	b.n	8008080 <__libc_init_array+0xc>
 80080a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a6:	4798      	blx	r3
 80080a8:	3601      	adds	r6, #1
 80080aa:	e7f2      	b.n	8008092 <__libc_init_array+0x1e>
 80080ac:	0800837c 	.word	0x0800837c
 80080b0:	0800837c 	.word	0x0800837c
 80080b4:	0800837c 	.word	0x0800837c
 80080b8:	08008380 	.word	0x08008380

080080bc <__retarget_lock_acquire_recursive>:
 80080bc:	4770      	bx	lr

080080be <__retarget_lock_release_recursive>:
 80080be:	4770      	bx	lr

080080c0 <_init>:
 80080c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080c2:	bf00      	nop
 80080c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c6:	bc08      	pop	{r3}
 80080c8:	469e      	mov	lr, r3
 80080ca:	4770      	bx	lr

080080cc <_fini>:
 80080cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ce:	bf00      	nop
 80080d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080d2:	bc08      	pop	{r3}
 80080d4:	469e      	mov	lr, r3
 80080d6:	4770      	bx	lr
