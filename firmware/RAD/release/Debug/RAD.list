
RAD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08007304  08007304  00008304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075a8  080075a8  0000900c  2**0
                  CONTENTS
  4 .ARM          00000000  080075a8  080075a8  0000900c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075a8  080075a8  0000900c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075a8  080075a8  000085a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080075ac  080075ac  000085ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080075b0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000010  080075bc  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  080075bc  0000932c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000900c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158b2  00000000  00000000  00009035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003baf  00000000  00000000  0001e8e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  00022498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f35  00000000  00000000  00023848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a07f  00000000  00000000  0002477d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e889  00000000  00000000  0003e7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094269  00000000  00000000  0005d085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f12ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005020  00000000  00000000  000f1334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f6354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	080072ec 	.word	0x080072ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	080072ec 	.word	0x080072ec

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08a      	sub	sp, #40	@ 0x28
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 80004ca:	f107 0310 	add.w	r3, r7, #16
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
 80004d8:	611a      	str	r2, [r3, #16]
 80004da:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80004dc:	1d3b      	adds	r3, r7, #4
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e6:	4b23      	ldr	r3, [pc, #140]	@ (8000574 <MX_ADC1_Init+0xb0>)
 80004e8:	4a23      	ldr	r2, [pc, #140]	@ (8000578 <MX_ADC1_Init+0xb4>)
 80004ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004ec:	4b21      	ldr	r3, [pc, #132]	@ (8000574 <MX_ADC1_Init+0xb0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004f2:	4b20      	ldr	r3, [pc, #128]	@ (8000574 <MX_ADC1_Init+0xb0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000574 <MX_ADC1_Init+0xb0>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000574 <MX_ADC1_Init+0xb0>)
 8000500:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000504:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000506:	4b1b      	ldr	r3, [pc, #108]	@ (8000574 <MX_ADC1_Init+0xb0>)
 8000508:	2200      	movs	r2, #0
 800050a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800050c:	4b19      	ldr	r3, [pc, #100]	@ (8000574 <MX_ADC1_Init+0xb0>)
 800050e:	2201      	movs	r2, #1
 8000510:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000512:	4818      	ldr	r0, [pc, #96]	@ (8000574 <MX_ADC1_Init+0xb0>)
 8000514:	f001 f8ce 	bl	80016b4 <HAL_ADC_Init>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 800051e:	f000 fb97 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000522:	4b16      	ldr	r3, [pc, #88]	@ (800057c <MX_ADC1_Init+0xb8>)
 8000524:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 8000526:	2300      	movs	r3, #0
 8000528:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 800052e:	2302      	movs	r3, #2
 8000530:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000532:	2300      	movs	r3, #0
 8000534:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	480d      	ldr	r0, [pc, #52]	@ (8000574 <MX_ADC1_Init+0xb0>)
 800053e:	f001 fce7 	bl	8001f10 <HAL_ADC_AnalogWDGConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000548:	f000 fb82 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800054c:	2302      	movs	r3, #2
 800054e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000550:	2301      	movs	r3, #1
 8000552:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_ADC1_Init+0xb0>)
 800055e:	f001 fb13 	bl	8001b88 <HAL_ADC_ConfigChannel>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000568:	f000 fb72 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800056c:	bf00      	nop
 800056e:	3728      	adds	r7, #40	@ 0x28
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	2000002c 	.word	0x2000002c
 8000578:	40012400 	.word	0x40012400
 800057c:	00800200 	.word	0x00800200

08000580 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000586:	f107 0310 	add.w	r3, r7, #16
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]
 8000596:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005a2:	4b23      	ldr	r3, [pc, #140]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005a4:	4a23      	ldr	r2, [pc, #140]	@ (8000634 <MX_ADC2_Init+0xb4>)
 80005a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005a8:	4b21      	ldr	r3, [pc, #132]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80005ae:	4b20      	ldr	r3, [pc, #128]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80005b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005bc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80005c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80005c8:	4b19      	ldr	r3, [pc, #100]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005ce:	4818      	ldr	r0, [pc, #96]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005d0:	f001 f870 	bl	80016b4 <HAL_ADC_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 80005da:	f000 fb39 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80005de:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <MX_ADC2_Init+0xb8>)
 80005e0:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 80005ea:	2303      	movs	r3, #3
 80005ec:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80005ee:	2300      	movs	r3, #0
 80005f0:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 80005f2:	f107 0310 	add.w	r3, r7, #16
 80005f6:	4619      	mov	r1, r3
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_ADC2_Init+0xb0>)
 80005fa:	f001 fc89 	bl	8001f10 <HAL_ADC_AnalogWDGConfig>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8000604:	f000 fb24 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000608:	2303      	movs	r3, #3
 800060a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800060c:	2301      	movs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000610:	2300      	movs	r3, #0
 8000612:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000614:	1d3b      	adds	r3, r7, #4
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_ADC2_Init+0xb0>)
 800061a:	f001 fab5 	bl	8001b88 <HAL_ADC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 8000624:	f000 fb14 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	@ 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000005c 	.word	0x2000005c
 8000634:	40012800 	.word	0x40012800
 8000638:	00800200 	.word	0x00800200

0800063c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08a      	sub	sp, #40	@ 0x28
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a30      	ldr	r2, [pc, #192]	@ (8000718 <HAL_ADC_MspInit+0xdc>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d12a      	bne.n	80006b2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800065c:	4b2f      	ldr	r3, [pc, #188]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a2e      	ldr	r2, [pc, #184]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 8000662:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2c      	ldr	r3, [pc, #176]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000674:	4b29      	ldr	r3, [pc, #164]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a28      	ldr	r2, [pc, #160]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 800067a:	f043 0304 	orr.w	r3, r3, #4
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b26      	ldr	r3, [pc, #152]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0304 	and.w	r3, r3, #4
 8000688:	613b      	str	r3, [r7, #16]
 800068a:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FSR_1_Pin;
 800068c:	2304      	movs	r3, #4
 800068e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000690:	2303      	movs	r3, #3
 8000692:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0318 	add.w	r3, r7, #24
 8000698:	4619      	mov	r1, r3
 800069a:	4821      	ldr	r0, [pc, #132]	@ (8000720 <HAL_ADC_MspInit+0xe4>)
 800069c:	f002 fe24 	bl	80032e8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2100      	movs	r1, #0
 80006a4:	2012      	movs	r0, #18
 80006a6:	f002 fab5 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80006aa:	2012      	movs	r0, #18
 80006ac:	f002 fade 	bl	8002c6c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80006b0:	e02e      	b.n	8000710 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a1b      	ldr	r2, [pc, #108]	@ (8000724 <HAL_ADC_MspInit+0xe8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d129      	bne.n	8000710 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80006bc:	4b17      	ldr	r3, [pc, #92]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80006c6:	6193      	str	r3, [r2, #24]
 80006c8:	4b14      	ldr	r3, [pc, #80]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a10      	ldr	r2, [pc, #64]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <HAL_ADC_MspInit+0xe0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FSR_2_Pin;
 80006ec:	2308      	movs	r3, #8
 80006ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f0:	2303      	movs	r3, #3
 80006f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_2_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0318 	add.w	r3, r7, #24
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <HAL_ADC_MspInit+0xe4>)
 80006fc:	f002 fdf4 	bl	80032e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000700:	2200      	movs	r2, #0
 8000702:	2100      	movs	r1, #0
 8000704:	2012      	movs	r0, #18
 8000706:	f002 fa85 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800070a:	2012      	movs	r0, #18
 800070c:	f002 faae 	bl	8002c6c <HAL_NVIC_EnableIRQ>
}
 8000710:	bf00      	nop
 8000712:	3728      	adds	r7, #40	@ 0x28
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40012400 	.word	0x40012400
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	40012800 	.word	0x40012800

08000728 <MX_AS5048A_1_Init>:
#include "spi.h"

AS5048A_HandleTypeDef as5048a_1;

void MX_AS5048A_1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
    as5048a_1.Init.CS_GPIO_Port = ENCODER_CS_GPIO_Port;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_AS5048A_1_Init+0x2c>)
 800072e:	4a0a      	ldr	r2, [pc, #40]	@ (8000758 <MX_AS5048A_1_Init+0x30>)
 8000730:	605a      	str	r2, [r3, #4]
    as5048a_1.Init.CS_Pin = ENCODER_CS_Pin;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_AS5048A_1_Init+0x2c>)
 8000734:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000738:	811a      	strh	r2, [r3, #8]
    as5048a_1.Init.SPI_HandlerInstance = &hspi2;
 800073a:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_AS5048A_1_Init+0x2c>)
 800073c:	4a07      	ldr	r2, [pc, #28]	@ (800075c <MX_AS5048A_1_Init+0x34>)
 800073e:	601a      	str	r2, [r3, #0]

    if (AS5048A_Init(&as5048a_1) != AS5048A_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	@ (8000754 <MX_AS5048A_1_Init+0x2c>)
 8000742:	f000 fe28 	bl	8001396 <AS5048A_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_AS5048A_1_Init+0x28>
    {
        Error_Handler();
 800074c:	f000 fa80 	bl	8000c50 <Error_Handler>
    }
}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000090 	.word	0x20000090
 8000758:	40010c00 	.word	0x40010c00
 800075c:	200001d8 	.word	0x200001d8

08000760 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000766:	4a19      	ldr	r2, [pc, #100]	@ (80007cc <MX_CAN_Init+0x6c>)
 8000768:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <MX_CAN_Init+0x68>)
 800076c:	2202      	movs	r2, #2
 800076e:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000770:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000776:	4b14      	ldr	r3, [pc, #80]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000778:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800077c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000780:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000784:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000788:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800078c:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000790:	2200      	movs	r2, #0
 8000792:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_CAN_Init+0x68>)
 8000796:	2200      	movs	r2, #0
 8000798:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_CAN_Init+0x68>)
 800079c:	2200      	movs	r2, #0
 800079e:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_CAN_Init+0x68>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_CAN_Init+0x68>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_CAN_Init+0x68>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_CAN_Init+0x68>)
 80007b4:	f001 fcfe 	bl	80021b4 <HAL_CAN_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80007be:	f000 fa47 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	200000b0 	.word	0x200000b0
 80007cc:	40006400 	.word	0x40006400

080007d0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	4a20      	ldr	r2, [pc, #128]	@ (800086c <HAL_CAN_MspInit+0x9c>)
 80007ec:	4293      	cmp	r3, r2
 80007ee:	d139      	bne.n	8000864 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 80007f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007fa:	61d3      	str	r3, [r2, #28]
 80007fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 80007fe:	69db      	ldr	r3, [r3, #28]
 8000800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000808:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 800080e:	f043 0304 	orr.w	r3, r3, #4
 8000812:	6193      	str	r3, [r2, #24]
 8000814:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <HAL_CAN_MspInit+0xa0>)
 8000816:	699b      	ldr	r3, [r3, #24]
 8000818:	f003 0304 	and.w	r3, r3, #4
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000820:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000824:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082e:	f107 0310 	add.w	r3, r7, #16
 8000832:	4619      	mov	r1, r3
 8000834:	480f      	ldr	r0, [pc, #60]	@ (8000874 <HAL_CAN_MspInit+0xa4>)
 8000836:	f002 fd57 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800083a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4809      	ldr	r0, [pc, #36]	@ (8000874 <HAL_CAN_MspInit+0xa4>)
 8000850:	f002 fd4a 	bl	80032e8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 8000854:	2200      	movs	r2, #0
 8000856:	2102      	movs	r1, #2
 8000858:	2014      	movs	r0, #20
 800085a:	f002 f9db 	bl	8002c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800085e:	2014      	movs	r0, #20
 8000860:	f002 fa04 	bl	8002c6c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000864:	bf00      	nop
 8000866:	3720      	adds	r7, #32
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40006400 	.word	0x40006400
 8000870:	40021000 	.word	0x40021000
 8000874:	40010800 	.word	0x40010800

08000878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_DMA_Init+0x38>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a0b      	ldr	r2, [pc, #44]	@ (80008b0 <MX_DMA_Init+0x38>)
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_DMA_Init+0x38>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f003 0301 	and.w	r3, r3, #1
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2011      	movs	r0, #17
 800089c:	f002 f9ba 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80008a0:	2011      	movs	r0, #17
 80008a2:	f002 f9e3 	bl	8002c6c <HAL_NVIC_EnableIRQ>

}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000

080008b4 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ba:	f107 0310 	add.w	r3, r7, #16
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]
 80008c4:	609a      	str	r2, [r3, #8]
 80008c6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c8:	4b53      	ldr	r3, [pc, #332]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a52      	ldr	r2, [pc, #328]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008ce:	f043 0310 	orr.w	r3, r3, #16
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b50      	ldr	r3, [pc, #320]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0310 	and.w	r3, r3, #16
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008e6:	f043 0320 	orr.w	r3, r3, #32
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0320 	and.w	r3, r3, #32
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f8:	4b47      	ldr	r3, [pc, #284]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	4a46      	ldr	r2, [pc, #280]	@ (8000a18 <MX_GPIO_Init+0x164>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6193      	str	r3, [r2, #24]
 8000904:	4b44      	ldr	r3, [pc, #272]	@ (8000a18 <MX_GPIO_Init+0x164>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000910:	4b41      	ldr	r3, [pc, #260]	@ (8000a18 <MX_GPIO_Init+0x164>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	4a40      	ldr	r2, [pc, #256]	@ (8000a18 <MX_GPIO_Init+0x164>)
 8000916:	f043 0308 	orr.w	r3, r3, #8
 800091a:	6193      	str	r3, [r2, #24]
 800091c:	4b3e      	ldr	r3, [pc, #248]	@ (8000a18 <MX_GPIO_Init+0x164>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f248 4110 	movw	r1, #33808	@ 0x8410
 800092e:	483b      	ldr	r0, [pc, #236]	@ (8000a1c <MX_GPIO_Init+0x168>)
 8000930:	f002 ff48 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	f241 0114 	movw	r1, #4116	@ 0x1014
 800093a:	4839      	ldr	r0, [pc, #228]	@ (8000a20 <MX_GPIO_Init+0x16c>)
 800093c:	f002 ff42 	bl	80037c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000940:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000944:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000946:	2303      	movs	r3, #3
 8000948:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	4619      	mov	r1, r3
 8000950:	4834      	ldr	r0, [pc, #208]	@ (8000a24 <MX_GPIO_Init+0x170>)
 8000952:	f002 fcc9 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LS_1_Pin|LS_2_Pin;
 8000956:	2303      	movs	r3, #3
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800095a:	4b33      	ldr	r3, [pc, #204]	@ (8000a28 <MX_GPIO_Init+0x174>)
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	482c      	ldr	r0, [pc, #176]	@ (8000a1c <MX_GPIO_Init+0x168>)
 800096a:	f002 fcbd 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin;
 800096e:	f248 4310 	movw	r3, #33808	@ 0x8410
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4825      	ldr	r0, [pc, #148]	@ (8000a1c <MX_GPIO_Init+0x168>)
 8000988:	f002 fcae 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800098c:	f640 7323 	movw	r3, #3875	@ 0xf23
 8000990:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000992:	2303      	movs	r3, #3
 8000994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000996:	f107 0310 	add.w	r3, r7, #16
 800099a:	4619      	mov	r1, r3
 800099c:	4820      	ldr	r0, [pc, #128]	@ (8000a20 <MX_GPIO_Init+0x16c>)
 800099e:	f002 fca3 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin;
 80009a2:	f241 0314 	movw	r3, #4116	@ 0x1014
 80009a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2302      	movs	r3, #2
 80009b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b4:	f107 0310 	add.w	r3, r7, #16
 80009b8:	4619      	mov	r1, r3
 80009ba:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0x16c>)
 80009bc:	f002 fc94 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c6:	2303      	movs	r3, #3
 80009c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0310 	add.w	r3, r7, #16
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	@ (8000a1c <MX_GPIO_Init+0x168>)
 80009d2:	f002 fc89 	bl	80032e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVER_SG_TEST_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVER_SG_TEST_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	@ (8000a1c <MX_GPIO_Init+0x168>)
 80009ec:	f002 fc7c 	bl	80032e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2101      	movs	r1, #1
 80009f4:	2006      	movs	r0, #6
 80009f6:	f002 f90d 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009fa:	2006      	movs	r0, #6
 80009fc:	f002 f936 	bl	8002c6c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2101      	movs	r1, #1
 8000a04:	2007      	movs	r0, #7
 8000a06:	f002 f905 	bl	8002c14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000a0a:	2007      	movs	r0, #7
 8000a0c:	f002 f92e 	bl	8002c6c <HAL_NVIC_EnableIRQ>

}
 8000a10:	bf00      	nop
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40010800 	.word	0x40010800
 8000a20:	40010c00 	.word	0x40010c00
 8000a24:	40011000 	.word	0x40011000
 8000a28:	10310000 	.word	0x10310000

08000a2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a30:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a32:	4a13      	ldr	r2, [pc, #76]	@ (8000a80 <MX_I2C1_Init+0x54>)
 8000a34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a36:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a38:	4a12      	ldr	r2, [pc, #72]	@ (8000a84 <MX_I2C1_Init+0x58>)
 8000a3a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a50:	4b0a      	ldr	r3, [pc, #40]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a56:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a5c:	4b07      	ldr	r3, [pc, #28]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a62:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a68:	4804      	ldr	r0, [pc, #16]	@ (8000a7c <MX_I2C1_Init+0x50>)
 8000a6a:	f002 fef9 	bl	8003860 <HAL_I2C_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a74:	f000 f8ec 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	200000d8 	.word	0x200000d8
 8000a80:	40005400 	.word	0x40005400
 8000a84:	000186a0 	.word	0x000186a0

08000a88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0310 	add.w	r3, r7, #16
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a15      	ldr	r2, [pc, #84]	@ (8000af8 <HAL_I2C_MspInit+0x70>)
 8000aa4:	4293      	cmp	r3, r2
 8000aa6:	d123      	bne.n	8000af0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa8:	4b14      	ldr	r3, [pc, #80]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000aae:	f043 0308 	orr.w	r3, r3, #8
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b11      	ldr	r3, [pc, #68]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0308 	and.w	r3, r3, #8
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ac0:	23c0      	movs	r3, #192	@ 0xc0
 8000ac2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac4:	2312      	movs	r3, #18
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	f107 0310 	add.w	r3, r7, #16
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	480b      	ldr	r0, [pc, #44]	@ (8000b00 <HAL_I2C_MspInit+0x78>)
 8000ad4:	f002 fc08 	bl	80032e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000ada:	69db      	ldr	r3, [r3, #28]
 8000adc:	4a07      	ldr	r2, [pc, #28]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000ade:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	61d3      	str	r3, [r2, #28]
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_I2C_MspInit+0x74>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000af0:	bf00      	nop
 8000af2:	3720      	adds	r7, #32
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40005400 	.word	0x40005400
 8000afc:	40021000 	.word	0x40021000
 8000b00:	40010c00 	.word	0x40010c00

08000b04 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000b08:	f000 fd4e 	bl	80015a8 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000b0c:	f000 f836 	bl	8000b7c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000b10:	f7ff fed0 	bl	80008b4 <MX_GPIO_Init>
    MX_DMA_Init();
 8000b14:	f7ff feb0 	bl	8000878 <MX_DMA_Init>
    MX_CAN_Init();
 8000b18:	f7ff fe22 	bl	8000760 <MX_CAN_Init>
    MX_I2C1_Init();
 8000b1c:	f7ff ff86 	bl	8000a2c <MX_I2C1_Init>
    MX_SPI1_Init();
 8000b20:	f000 f8ca 	bl	8000cb8 <MX_SPI1_Init>
    MX_SPI2_Init();
 8000b24:	f000 f8fe 	bl	8000d24 <MX_SPI2_Init>
    MX_ADC1_Init();
 8000b28:	f7ff fccc 	bl	80004c4 <MX_ADC1_Init>
    MX_ADC2_Init();
 8000b2c:	f7ff fd28 	bl	8000580 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000b30:	f000 fa48 	bl	8000fc4 <MX_TIM2_Init>
    /* USER CODE BEGIN 2 */
    MX_TMC_2590_1_Init();
 8000b34:	f000 fb4e 	bl	80011d4 <MX_TMC_2590_1_Init>
    MX_AS5048A_1_Init();
 8000b38:	f7ff fdf6 	bl	8000728 <MX_AS5048A_1_Init>
    MX_PID_1_Init();
 8000b3c:	f000 f898 	bl	8000c70 <MX_PID_1_Init>
//                != TMC_2590_OK)
//        {
//            AS5048A_ReadAngle(&as5048a_1);
//            PID_Update(&pid_1);
//        }
        while (TMC_2590_MoveSteps(&tmc_2590_1, 2000) != TMC_2590_OK)
 8000b40:	e002      	b.n	8000b48 <main+0x44>
            AS5048A_ReadAngle(&as5048a_1);
 8000b42:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <main+0x6c>)
 8000b44:	f000 fc5a 	bl	80013fc <AS5048A_ReadAngle>
        while (TMC_2590_MoveSteps(&tmc_2590_1, 2000) != TMC_2590_OK)
 8000b48:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <main+0x70>)
 8000b4e:	f006 f8d6 	bl	8006cfe <TMC_2590_MoveSteps>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f4      	bne.n	8000b42 <main+0x3e>
        while (TMC_2590_MoveSteps(&tmc_2590_1, -2000) != TMC_2590_OK)
 8000b58:	e002      	b.n	8000b60 <main+0x5c>
            AS5048A_ReadAngle(&as5048a_1);
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <main+0x6c>)
 8000b5c:	f000 fc4e 	bl	80013fc <AS5048A_ReadAngle>
        while (TMC_2590_MoveSteps(&tmc_2590_1, -2000) != TMC_2590_OK)
 8000b60:	4905      	ldr	r1, [pc, #20]	@ (8000b78 <main+0x74>)
 8000b62:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <main+0x70>)
 8000b64:	f006 f8cb 	bl	8006cfe <TMC_2590_MoveSteps>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d1f5      	bne.n	8000b5a <main+0x56>
        while (TMC_2590_MoveSteps(&tmc_2590_1, 2000) != TMC_2590_OK)
 8000b6e:	e7eb      	b.n	8000b48 <main+0x44>
 8000b70:	20000090 	.word	0x20000090
 8000b74:	200002bc 	.word	0x200002bc
 8000b78:	fffff830 	.word	0xfffff830

08000b7c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	@ 0x50
 8000b80:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000b82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b86:	2228      	movs	r2, #40	@ 0x28
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f006 fb82 	bl	8007294 <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bac:	2301      	movs	r3, #1
 8000bae:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bb0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000bb6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000bca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f003 f805 	bl	8003be4 <HAL_RCC_OscConfig>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <SystemClock_Config+0x68>
    {
        Error_Handler();
 8000be0:	f000 f836 	bl	8000c50 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000be4:	230f      	movs	r3, #15
 8000be6:	617b      	str	r3, [r7, #20]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bf4:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2102      	movs	r1, #2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fb5d 	bl	80042c0 <HAL_RCC_ClockConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <SystemClock_Config+0x94>
    {
        Error_Handler();
 8000c0c:	f000 f820 	bl	8000c50 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c10:	2302      	movs	r3, #2
 8000c12:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000c14:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c18:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f003 fd71 	bl	8004704 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xb0>
    {
        Error_Handler();
 8000c28:	f000 f812 	bl	8000c50 <Error_Handler>
    }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	@ 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_TIM_PWM_PulseFinishedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
    TMC_2590_TIM_PWM_PulseFinishedCallback(&tmc_2590_1, htim);
 8000c3c:	6879      	ldr	r1, [r7, #4]
 8000c3e:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <HAL_TIM_PWM_PulseFinishedCallback+0x18>)
 8000c40:	f006 f916 	bl	8006e70 <TMC_2590_TIM_PWM_PulseFinishedCallback>
}
 8000c44:	bf00      	nop
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	200002bc 	.word	0x200002bc

08000c50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr

08000c70 <MX_PID_1_Init>:
#include "as5048a.h"

PID_HandleTypeDef pid_1;

void MX_PID_1_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
    // todo convert the angle into a double
    pid_1.Init.feedback = &(as5048a_1.Angle_double);
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <MX_PID_1_Init+0x3c>)
 8000c76:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb0 <MX_PID_1_Init+0x40>)
 8000c78:	601a      	str	r2, [r3, #0]
    pid_1.Init.kp = 1;
 8000c7a:	490c      	ldr	r1, [pc, #48]	@ (8000cac <MX_PID_1_Init+0x3c>)
 8000c7c:	f04f 0200 	mov.w	r2, #0
 8000c80:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb4 <MX_PID_1_Init+0x44>)
 8000c82:	e9c1 2302 	strd	r2, r3, [r1, #8]
    pid_1.Init.ki = 0;
 8000c86:	4909      	ldr	r1, [pc, #36]	@ (8000cac <MX_PID_1_Init+0x3c>)
 8000c88:	f04f 0200 	mov.w	r2, #0
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e9c1 2304 	strd	r2, r3, [r1, #16]
    pid_1.Init.kd = 0;
 8000c94:	4905      	ldr	r1, [pc, #20]	@ (8000cac <MX_PID_1_Init+0x3c>)
 8000c96:	f04f 0200 	mov.w	r2, #0
 8000c9a:	f04f 0300 	mov.w	r3, #0
 8000c9e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    PID_Init(&pid_1);
 8000ca2:	4802      	ldr	r0, [pc, #8]	@ (8000cac <MX_PID_1_Init+0x3c>)
 8000ca4:	f000 fc5e 	bl	8001564 <PID_Init>

//    if (PID_Init(&pid_1) != PID_OK)
//    {
//        Error_Handler();
//    }
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000130 	.word	0x20000130
 8000cb0:	200000a0 	.word	0x200000a0
 8000cb4:	3ff00000 	.word	0x3ff00000

08000cb8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000cbc:	4b17      	ldr	r3, [pc, #92]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cbe:	4a18      	ldr	r2, [pc, #96]	@ (8000d20 <MX_SPI1_Init+0x68>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cc2:	4b16      	ldr	r3, [pc, #88]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cc4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000cc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cca:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cd0:	4b12      	ldr	r3, [pc, #72]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cd6:	4b11      	ldr	r3, [pc, #68]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000ce4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ce8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cec:	2220      	movs	r2, #32
 8000cee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cf6:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cfc:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d02:	4b06      	ldr	r3, [pc, #24]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000d04:	220a      	movs	r2, #10
 8000d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d08:	4804      	ldr	r0, [pc, #16]	@ (8000d1c <MX_SPI1_Init+0x64>)
 8000d0a:	f003 fe05 	bl	8004918 <HAL_SPI_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d14:	f7ff ff9c 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	20000180 	.word	0x20000180
 8000d20:	40013000 	.word	0x40013000

08000d24 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000d28:	4b17      	ldr	r3, [pc, #92]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <MX_SPI2_Init+0x68>)
 8000d2c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d34:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d36:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d54:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d58:	2208      	movs	r2, #8
 8000d5a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d70:	220a      	movs	r2, #10
 8000d72:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	@ (8000d88 <MX_SPI2_Init+0x64>)
 8000d76:	f003 fdcf 	bl	8004918 <HAL_SPI_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d80:	f7ff ff66 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200001d8 	.word	0x200001d8
 8000d8c:	40003800 	.word	0x40003800

08000d90 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	@ 0x28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a37      	ldr	r2, [pc, #220]	@ (8000e88 <HAL_SPI_MspInit+0xf8>)
 8000dac:	4293      	cmp	r3, r2
 8000dae:	d130      	bne.n	8000e12 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000db0:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a35      	ldr	r2, [pc, #212]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000db6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b33      	ldr	r3, [pc, #204]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b30      	ldr	r3, [pc, #192]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000dca:	699b      	ldr	r3, [r3, #24]
 8000dcc:	4a2f      	ldr	r2, [pc, #188]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000dce:	f043 0304 	orr.w	r3, r3, #4
 8000dd2:	6193      	str	r3, [r2, #24]
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000dd6:	699b      	ldr	r3, [r3, #24]
 8000dd8:	f003 0304 	and.w	r3, r3, #4
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SCK_Pin|DRIVER_MOSI_Pin;
 8000de0:	23a0      	movs	r3, #160	@ 0xa0
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de8:	2303      	movs	r3, #3
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0318 	add.w	r3, r7, #24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4827      	ldr	r0, [pc, #156]	@ (8000e90 <HAL_SPI_MspInit+0x100>)
 8000df4:	f002 fa78 	bl	80032e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_MISO_Pin;
 8000df8:	2340      	movs	r3, #64	@ 0x40
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DRIVER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <HAL_SPI_MspInit+0x100>)
 8000e0c:	f002 fa6c 	bl	80032e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e10:	e036      	b.n	8000e80 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a1f      	ldr	r2, [pc, #124]	@ (8000e94 <HAL_SPI_MspInit+0x104>)
 8000e18:	4293      	cmp	r3, r2
 8000e1a:	d131      	bne.n	8000e80 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	4a1a      	ldr	r2, [pc, #104]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e26:	61d3      	str	r3, [r2, #28]
 8000e28:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b15      	ldr	r3, [pc, #84]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e36:	699b      	ldr	r3, [r3, #24]
 8000e38:	4a14      	ldr	r2, [pc, #80]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e3a:	f043 0308 	orr.w	r3, r3, #8
 8000e3e:	6193      	str	r3, [r2, #24]
 8000e40:	4b12      	ldr	r3, [pc, #72]	@ (8000e8c <HAL_SPI_MspInit+0xfc>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_SCK_Pin|ENCODER_MOSI_Pin;
 8000e4c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0318 	add.w	r3, r7, #24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <HAL_SPI_MspInit+0x108>)
 8000e62:	f002 fa41 	bl	80032e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_MISO_Pin;
 8000e66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 0318 	add.w	r3, r7, #24
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4807      	ldr	r0, [pc, #28]	@ (8000e98 <HAL_SPI_MspInit+0x108>)
 8000e7c:	f002 fa34 	bl	80032e8 <HAL_GPIO_Init>
}
 8000e80:	bf00      	nop
 8000e82:	3728      	adds	r7, #40	@ 0x28
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40013000 	.word	0x40013000
 8000e8c:	40021000 	.word	0x40021000
 8000e90:	40010800 	.word	0x40010800
 8000e94:	40003800 	.word	0x40003800
 8000e98:	40010c00 	.word	0x40010c00

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	4a14      	ldr	r2, [pc, #80]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	6193      	str	r3, [r2, #24]
 8000eae:	4b12      	ldr	r3, [pc, #72]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ebc:	69db      	ldr	r3, [r3, #28]
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ec0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ec4:	61d3      	str	r3, [r2, #28]
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_MspInit+0x5c>)
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8000efc <HAL_MspInit+0x60>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <HAL_MspInit+0x60>)
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3714      	adds	r7, #20
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	40021000 	.word	0x40021000
 8000efc:	40010000 	.word	0x40010000

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr

08000f34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f50:	f000 fb70 	bl	8001634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	f002 fc5d 	bl	800381c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f002 fc56 	bl	800381c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000f78:	4802      	ldr	r0, [pc, #8]	@ (8000f84 <DMA1_Channel7_IRQHandler+0x10>)
 8000f7a:	f002 f881 	bl	8003080 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000278 	.word	0x20000278

08000f88 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <ADC1_2_IRQHandler+0x14>)
 8000f8e:	f000 fcfb 	bl	8001988 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000f92:	4803      	ldr	r0, [pc, #12]	@ (8000fa0 <ADC1_2_IRQHandler+0x18>)
 8000f94:	f000 fcf8 	bl	8001988 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000002c 	.word	0x2000002c
 8000fa0:	2000005c 	.word	0x2000005c

08000fa4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000faa:	f001 fb1b 	bl	80025e4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	200000b0 	.word	0x200000b0

08000fb8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bc80      	pop	{r7}
 8000fc2:	4770      	bx	lr

08000fc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	@ 0x38
 8000fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
 8000ff0:	615a      	str	r2, [r3, #20]
 8000ff2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8000ff6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ffa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8000ffe:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8001002:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001004:	4b29      	ldr	r3, [pc, #164]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8001006:	2200      	movs	r2, #0
 8001008:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800100a:	4b28      	ldr	r3, [pc, #160]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800100c:	2263      	movs	r2, #99	@ 0x63
 800100e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800101c:	4823      	ldr	r0, [pc, #140]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800101e:	f004 f85b 	bl	80050d8 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001028:	f7ff fe12 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800102c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001030:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001032:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001036:	4619      	mov	r1, r3
 8001038:	481c      	ldr	r0, [pc, #112]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800103a:	f004 fe45 	bl	8005cc8 <HAL_TIM_ConfigClockSource>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001044:	f7ff fe04 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001048:	4818      	ldr	r0, [pc, #96]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800104a:	f004 f8fd 	bl	8005248 <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001054:	f7ff fdfc 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001060:	f107 0320 	add.w	r3, r7, #32
 8001064:	4619      	mov	r1, r3
 8001066:	4811      	ldr	r0, [pc, #68]	@ (80010ac <MX_TIM2_Init+0xe8>)
 8001068:	f005 fd26 	bl	8006ab8 <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001072:	f7ff fded 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001076:	2370      	movs	r3, #112	@ 0x70
 8001078:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	2204      	movs	r2, #4
 800108a:	4619      	mov	r1, r3
 800108c:	4807      	ldr	r0, [pc, #28]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800108e:	f004 fca9 	bl	80059e4 <HAL_TIM_PWM_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001098:	f7ff fdda 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800109c:	4803      	ldr	r0, [pc, #12]	@ (80010ac <MX_TIM2_Init+0xe8>)
 800109e:	f000 f855 	bl	800114c <HAL_TIM_MspPostInit>

}
 80010a2:	bf00      	nop
 80010a4:	3738      	adds	r7, #56	@ 0x38
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000230 	.word	0x20000230

080010b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010c0:	d139      	bne.n	8001136 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001140 <HAL_TIM_Base_MspInit+0x90>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001140 <HAL_TIM_Base_MspInit+0x90>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	61d3      	str	r3, [r2, #28]
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_TIM_Base_MspInit+0x90>)
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010dc:	4a1a      	ldr	r2, [pc, #104]	@ (8001148 <HAL_TIM_Base_MspInit+0x98>)
 80010de:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010f8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010fa:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 80010fc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001100:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b0e      	ldr	r3, [pc, #56]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 800110e:	480d      	ldr	r0, [pc, #52]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 8001110:	f001 fdd0 	bl	8002cb4 <HAL_DMA_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 800111a:	f7ff fd99 	bl	8000c50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a08      	ldr	r2, [pc, #32]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 8001122:	629a      	str	r2, [r3, #40]	@ 0x28
 8001124:	4a07      	ldr	r2, [pc, #28]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 800112e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_TIM_Base_MspInit+0x94>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40021000 	.word	0x40021000
 8001144:	20000278 	.word	0x20000278
 8001148:	40020080 	.word	0x40020080

0800114c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800116a:	d129      	bne.n	80011c0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116c:	4b16      	ldr	r3, [pc, #88]	@ (80011c8 <HAL_TIM_MspPostInit+0x7c>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a15      	ldr	r2, [pc, #84]	@ (80011c8 <HAL_TIM_MspPostInit+0x7c>)
 8001172:	f043 0308 	orr.w	r3, r3, #8
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b13      	ldr	r3, [pc, #76]	@ (80011c8 <HAL_TIM_MspPostInit+0x7c>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0308 	and.w	r3, r3, #8
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DRIVER_STEP_PWM_Pin;
 8001184:	2308      	movs	r3, #8
 8001186:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	2302      	movs	r3, #2
 800118a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2302      	movs	r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DRIVER_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 030c 	add.w	r3, r7, #12
 8001194:	4619      	mov	r1, r3
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <HAL_TIM_MspPostInit+0x80>)
 8001198:	f002 f8a6 	bl	80032e8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <HAL_TIM_MspPostInit+0x84>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80011a8:	61fb      	str	r3, [r7, #28]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80011b0:	61fb      	str	r3, [r7, #28]
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <HAL_TIM_MspPostInit+0x84>)
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */
//    HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_2);
  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40021000 	.word	0x40021000
 80011cc:	40010c00 	.word	0x40010c00
 80011d0:	40010000 	.word	0x40010000

080011d4 <MX_TMC_2590_1_Init>:
#include "tim.h"

TMC_2590_HandleTypeDef tmc_2590_1;

void MX_TMC_2590_1_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
    tmc_2590_1.Init.SPI_HandlerInstance = &hspi1;
 80011d8:	4b57      	ldr	r3, [pc, #348]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011da:	4a58      	ldr	r2, [pc, #352]	@ (800133c <MX_TMC_2590_1_Init+0x168>)
 80011dc:	601a      	str	r2, [r3, #0]
    tmc_2590_1.Init.CS_GPIO_Port = DRIVER_CS_GPIO_Port;
 80011de:	4b56      	ldr	r3, [pc, #344]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011e0:	4a57      	ldr	r2, [pc, #348]	@ (8001340 <MX_TMC_2590_1_Init+0x16c>)
 80011e2:	605a      	str	r2, [r3, #4]
    tmc_2590_1.Init.CS_Pin = DRIVER_CS_Pin;
 80011e4:	4b54      	ldr	r3, [pc, #336]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011e6:	2210      	movs	r2, #16
 80011e8:	811a      	strh	r2, [r3, #8]
    tmc_2590_1.Init.ENN_GPIO_Port = DRIVER_ENN_GPIO_Port;
 80011ea:	4b53      	ldr	r3, [pc, #332]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011ec:	4a54      	ldr	r2, [pc, #336]	@ (8001340 <MX_TMC_2590_1_Init+0x16c>)
 80011ee:	60da      	str	r2, [r3, #12]
    tmc_2590_1.Init.ENN_Pin = DRIVER_ENN_Pin;
 80011f0:	4b51      	ldr	r3, [pc, #324]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011f6:	821a      	strh	r2, [r3, #16]
    tmc_2590_1.Init.use_st_alone = 0;
 80011f8:	4b4f      	ldr	r3, [pc, #316]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	749a      	strb	r2, [r3, #18]
    tmc_2590_1.Init.ST_ALONE_GPIO_Port = DRIVER_ST_ALONE_GPIO_Port;
 80011fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001200:	4a4f      	ldr	r2, [pc, #316]	@ (8001340 <MX_TMC_2590_1_Init+0x16c>)
 8001202:	615a      	str	r2, [r3, #20]
    tmc_2590_1.Init.ST_ALONE_Pin = DRIVER_ST_ALONE_Pin;
 8001204:	4b4c      	ldr	r3, [pc, #304]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001206:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800120a:	831a      	strh	r2, [r3, #24]
    tmc_2590_1.Init.DIR_GPIO_Port = DRIVER_DIR_GPIO_Port;
 800120c:	4b4a      	ldr	r3, [pc, #296]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800120e:	4a4d      	ldr	r2, [pc, #308]	@ (8001344 <MX_TMC_2590_1_Init+0x170>)
 8001210:	61da      	str	r2, [r3, #28]
    tmc_2590_1.Init.DIR_Pin = DRIVER_DIR_Pin;
 8001212:	4b49      	ldr	r3, [pc, #292]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001214:	2210      	movs	r2, #16
 8001216:	841a      	strh	r2, [r3, #32]
    tmc_2590_1.Init.use_pwm = 1;
 8001218:	4b47      	ldr	r3, [pc, #284]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800121a:	2201      	movs	r2, #1
 800121c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//    tmc_2590_1.Init.STEP_GPIO_Port = ;
//    tmc_2590_1.Init.STEP_Pin = ;
    tmc_2590_1.Init.STEP_Tim = &htim2;
 8001220:	4b45      	ldr	r3, [pc, #276]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001222:	4a49      	ldr	r2, [pc, #292]	@ (8001348 <MX_TMC_2590_1_Init+0x174>)
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
    tmc_2590_1.Init.STEP_Channel = TIM_CHANNEL_2;
 8001226:	4b44      	ldr	r3, [pc, #272]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001228:	2204      	movs	r2, #4
 800122a:	631a      	str	r2, [r3, #48]	@ 0x30
    tmc_2590_1.Init.SG_TST_GPIO_Port = DRIVER_SG_TEST_GPIO_Port;
 800122c:	4b42      	ldr	r3, [pc, #264]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800122e:	4a44      	ldr	r2, [pc, #272]	@ (8001340 <MX_TMC_2590_1_Init+0x16c>)
 8001230:	635a      	str	r2, [r3, #52]	@ 0x34
    tmc_2590_1.Init.SG_TST_Pin = DRIVER_SG_TEST_Pin;
 8001232:	4b41      	ldr	r3, [pc, #260]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001234:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001238:	871a      	strh	r2, [r3, #56]	@ 0x38

    // this data should stored in EEPROM
    tmc_2590_1.ConfRegisters.CHOPCONF.chm = 0b0;
 800123a:	4b3f      	ldr	r3, [pc, #252]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    tmc_2590_1.ConfRegisters.CHOPCONF.hdec = 0b00;
 8001242:	4b3d      	ldr	r3, [pc, #244]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
    tmc_2590_1.ConfRegisters.CHOPCONF.hend = 0b0100;
 800124a:	4b3b      	ldr	r3, [pc, #236]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800124c:	2204      	movs	r2, #4
 800124e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
    tmc_2590_1.ConfRegisters.CHOPCONF.hstrt = 0b110;
 8001252:	4b39      	ldr	r3, [pc, #228]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001254:	2206      	movs	r2, #6
 8001256:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
    tmc_2590_1.ConfRegisters.CHOPCONF.rndtf = 0b0;
 800125a:	4b37      	ldr	r3, [pc, #220]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800125c:	2200      	movs	r2, #0
 800125e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    tmc_2590_1.ConfRegisters.CHOPCONF.tbl = 0b10;
 8001262:	4b35      	ldr	r3, [pc, #212]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001264:	2202      	movs	r2, #2
 8001266:	f883 204f 	strb.w	r2, [r3, #79]	@ 0x4f
    tmc_2590_1.ConfRegisters.CHOPCONF.toff = 0b100;
 800126a:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800126c:	2204      	movs	r2, #4
 800126e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

    tmc_2590_1.ConfRegisters.DRVCONF.dis_s2g = 0b0;
 8001272:	4b31      	ldr	r3, [pc, #196]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    tmc_2590_1.ConfRegisters.DRVCONF.en_pfd = 0b1;
 800127a:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800127c:	2201      	movs	r2, #1
 800127e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    tmc_2590_1.ConfRegisters.DRVCONF.en_s2vs = 0b1;
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001284:	2201      	movs	r2, #1
 8001286:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
    tmc_2590_1.ConfRegisters.DRVCONF.otsens = 0b0;
 800128a:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800128c:	2200      	movs	r2, #0
 800128e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    tmc_2590_1.ConfRegisters.DRVCONF.rdsel = 0b11;
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001294:	2203      	movs	r2, #3
 8001296:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    tmc_2590_1.ConfRegisters.DRVCONF.sdoff = 0b0;
 800129a:	4b27      	ldr	r3, [pc, #156]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    tmc_2590_1.ConfRegisters.DRVCONF.shrtsens = 0b1;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    tmc_2590_1.ConfRegisters.DRVCONF.slp = 0b11110;
 80012aa:	4b23      	ldr	r3, [pc, #140]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012ac:	221e      	movs	r2, #30
 80012ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    tmc_2590_1.ConfRegisters.DRVCONF.ts2g = 0b00;
 80012b2:	4b21      	ldr	r3, [pc, #132]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
    tmc_2590_1.ConfRegisters.DRVCONF.tst = 0b0;
 80012ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    tmc_2590_1.ConfRegisters.DRVCONF.vsense = 0b0;
 80012c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    tmc_2590_1.ConfRegisters.DRVCTRL.dedge = 0b0;
 80012ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2057 	strb.w	r2, [r3, #87]	@ 0x57
    tmc_2590_1.ConfRegisters.DRVCTRL.intpol = 0b1;
 80012d2:	4b19      	ldr	r3, [pc, #100]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    tmc_2590_1.ConfRegisters.DRVCTRL.mres = 0b1000;
 80012da:	4b17      	ldr	r3, [pc, #92]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012dc:	2208      	movs	r2, #8
 80012de:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    tmc_2590_1.ConfRegisters.SGCSCONF.cs = 5;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012e4:	2205      	movs	r2, #5
 80012e6:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49
    tmc_2590_1.ConfRegisters.SGCSCONF.sfilt = 0b0;
 80012ea:	4b13      	ldr	r3, [pc, #76]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    tmc_2590_1.ConfRegisters.SGCSCONF.sgt = 0b0000010;
 80012f2:	4b11      	ldr	r3, [pc, #68]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    tmc_2590_1.ConfRegisters.SMARTEN.sedn = 0b00;
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
    tmc_2590_1.ConfRegisters.SMARTEN.seimin = 0b0;
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001304:	2200      	movs	r2, #0
 8001306:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
    tmc_2590_1.ConfRegisters.SMARTEN.semax = 0b0000;
 800130a:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800130c:	2200      	movs	r2, #0
 800130e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    tmc_2590_1.ConfRegisters.SMARTEN.semin = 0b0000;
 8001312:	4b09      	ldr	r3, [pc, #36]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001314:	2200      	movs	r2, #0
 8001316:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    tmc_2590_1.ConfRegisters.SMARTEN.seup = 0b00;
 800131a:	4b07      	ldr	r3, [pc, #28]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 800131c:	2200      	movs	r2, #0
 800131e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d

    if (TMC_2590_Init(&tmc_2590_1) != TMC_2590_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	@ (8001338 <MX_TMC_2590_1_Init+0x164>)
 8001324:	f005 fc72 	bl	8006c0c <TMC_2590_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TMC_2590_1_Init+0x15e>
    {
        Error_Handler();
 800132e:	f7ff fc8f 	bl	8000c50 <Error_Handler>
    }
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	200002bc 	.word	0x200002bc
 800133c:	20000180 	.word	0x20000180
 8001340:	40010800 	.word	0x40010800
 8001344:	40010c00 	.word	0x40010c00
 8001348:	20000230 	.word	0x20000230

0800134c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff fe34 	bl	8000fb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480b      	ldr	r0, [pc, #44]	@ (8001380 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001352:	490c      	ldr	r1, [pc, #48]	@ (8001384 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001354:	4a0c      	ldr	r2, [pc, #48]	@ (8001388 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a09      	ldr	r2, [pc, #36]	@ (800138c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001368:	4c09      	ldr	r4, [pc, #36]	@ (8001390 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f005 ff95 	bl	80072a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800137a:	f7ff fbc3 	bl	8000b04 <main>
  bx lr
 800137e:	4770      	bx	lr
  ldr r0, =_sdata
 8001380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001384:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001388:	080075b0 	.word	0x080075b0
  ldr r2, =_sbss
 800138c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001390:	2000032c 	.word	0x2000032c

08001394 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001394:	e7fe      	b.n	8001394 <CAN1_RX1_IRQHandler>

08001396 <AS5048A_Init>:
 */

#include "stm32f1xx_as5048a.h"

AS5048A_StatusTypeDef AS5048A_Init(AS5048A_HandleTypeDef *has5048a)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
    // check as5048a handle allocation
    if (has5048a == NULL)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <AS5048A_Init+0x12>
    {
        return AS5048A_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e024      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_READY)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7b1b      	ldrb	r3, [r3, #12]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <AS5048A_Init+0x20>
    {
        // Peripheral is already initialized
        return AS5048A_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e01d      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_BUSY)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7b1b      	ldrb	r3, [r3, #12]
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d101      	bne.n	80013c4 <AS5048A_Init+0x2e>
    {
        return AS5048A_BUSY;
 80013c0:	2302      	movs	r3, #2
 80013c2:	e016      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    if (has5048a->State == AS5048A_STATE_ERROR)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7b1b      	ldrb	r3, [r3, #12]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b06      	cmp	r3, #6
 80013cc:	d101      	bne.n	80013d2 <AS5048A_Init+0x3c>
    {
        return AS5048A_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e00f      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    if (has5048a->Init.SPI_HandlerInstance == NULL)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d101      	bne.n	80013de <AS5048A_Init+0x48>
    {
        return AS5048A_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e009      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    if (!has5048a->Init.CS_GPIO_Port)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <AS5048A_Init+0x54>
    {
        return AS5048A_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e003      	b.n	80013f2 <AS5048A_Init+0x5c>
    }

    has5048a->State = AS5048A_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	731a      	strb	r2, [r3, #12]

    // return status
    return AS5048A_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bc80      	pop	{r7}
 80013fa:	4770      	bx	lr

080013fc <AS5048A_ReadAngle>:

    return AS5048A_OK;
}

AS5048A_StatusTypeDef AS5048A_ReadAngle(AS5048A_HandleTypeDef *has5048a)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    // check as5048a handle allocation
    if (has5048a == NULL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <AS5048A_ReadAngle+0x12>
    {
        return AS5048A_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e023      	b.n	8001456 <AS5048A_ReadAngle+0x5a>
    }
    // check driver state
    if (has5048a->State == AS5048A_STATE_RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7b1b      	ldrb	r3, [r3, #12]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d101      	bne.n	800141c <AS5048A_ReadAngle+0x20>
    {
        // Peripheral is not initialized
        return AS5048A_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e01c      	b.n	8001456 <AS5048A_ReadAngle+0x5a>
    }

    if (has5048a->State == AS5048A_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7b1b      	ldrb	r3, [r3, #12]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d101      	bne.n	800142a <AS5048A_ReadAngle+0x2e>
    {
        return AS5048A_BUSY;
 8001426:	2302      	movs	r3, #2
 8001428:	e015      	b.n	8001456 <AS5048A_ReadAngle+0x5a>
    }

    if (has5048a->State == AS5048A_STATE_ERROR)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7b1b      	ldrb	r3, [r3, #12]
 800142e:	b2db      	uxtb	r3, r3
 8001430:	2b06      	cmp	r3, #6
 8001432:	d101      	bne.n	8001438 <AS5048A_ReadAngle+0x3c>
    {
        return AS5048A_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e00e      	b.n	8001456 <AS5048A_ReadAngle+0x5a>
    }
    // set driver state
    has5048a->State = AS5048A_STATE_BUSY;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2202      	movs	r2, #2
 800143c:	731a      	strb	r2, [r3, #12]

    if (__read_angle_command(has5048a) != AS5048A_OK)
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 f80d 	bl	800145e <__read_angle_command>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <AS5048A_ReadAngle+0x52>
    {
        return AS5048A_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e003      	b.n	8001456 <AS5048A_ReadAngle+0x5a>
    }

    has5048a->State = AS5048A_STATE_READY;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2201      	movs	r2, #1
 8001452:	731a      	strb	r2, [r3, #12]

    return AS5048A_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <__read_angle_command>:

    return AS5048A_OK;
}

AS5048A_StatusTypeDef __read_angle_command(AS5048A_HandleTypeDef *has5048a)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
    uint16_t SPImsg = 0xFFFF;
 8001466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800146a:	81fb      	strh	r3, [r7, #14]
    uint16_t SPIread;
    uint8_t SPI_read_bytes[2];

    if (__send_spi_packet_as5048a(has5048a, SPImsg, SPI_read_bytes) != HAL_OK)
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	89fb      	ldrh	r3, [r7, #14]
 8001472:	4619      	mov	r1, r3
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f000 f845 	bl	8001504 <__send_spi_packet_as5048a>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <__read_angle_command+0x26>
    {
        // todo handle error
        return AS5048A_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e013      	b.n	80014ac <__read_angle_command+0x4e>
    }

    SPIread = __spi_order_buffer_to_word_2bytes(SPI_read_bytes);
 8001484:	f107 0308 	add.w	r3, r7, #8
 8001488:	4618      	mov	r0, r3
 800148a:	f000 f829 	bl	80014e0 <__spi_order_buffer_to_word_2bytes>
 800148e:	4603      	mov	r3, r0
 8001490:	81bb      	strh	r3, [r7, #12]

    has5048a->Angle = SPIread;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	89ba      	ldrh	r2, [r7, #12]
 8001496:	81da      	strh	r2, [r3, #14]
    has5048a->Angle_double = (double) SPIread;
 8001498:	89bb      	ldrh	r3, [r7, #12]
 800149a:	4618      	mov	r0, r3
 800149c:	f7fe ff98 	bl	80003d0 <__aeabi_ui2d>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	e9c1 2304 	strd	r2, r3, [r1, #16]

    return AS5048A_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <__word_to_spi_order_buffer_2bytes>:

    return AS5048A_OK;
}

void __word_to_spi_order_buffer_2bytes(uint16_t word, uint8_t *buff)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	80fb      	strh	r3, [r7, #6]
    buff[0] = (uint8_t) (word & 0xFF);
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	701a      	strb	r2, [r3, #0]
    buff[1] = (uint8_t) ((word & 0xFF00) >> 8);
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	0a1b      	lsrs	r3, r3, #8
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <__spi_order_buffer_to_word_2bytes>:

uint16_t __spi_order_buffer_to_word_2bytes(uint8_t *buff)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    return ((uint32_t) buff[1] << 8) | (uint32_t) buff[0];
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	7812      	ldrb	r2, [r2, #0]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	b29b      	uxth	r3, r3
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	bc80      	pop	{r7}
 8001502:	4770      	bx	lr

08001504 <__send_spi_packet_as5048a>:

HAL_StatusTypeDef __send_spi_packet_as5048a(AS5048A_HandleTypeDef *has5048a,
        uint16_t SPImsg, uint8_t *SPI_read_bytes)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b088      	sub	sp, #32
 8001508:	af02      	add	r7, sp, #8
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	460b      	mov	r3, r1
 800150e:	607a      	str	r2, [r7, #4]
 8001510:	817b      	strh	r3, [r7, #10]
    uint8_t SPImsg_bytes[2];
    __word_to_spi_order_buffer_2bytes(SPImsg, SPImsg_bytes);
 8001512:	f107 0214 	add.w	r2, r7, #20
 8001516:	897b      	ldrh	r3, [r7, #10]
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff ffca 	bl	80014b4 <__word_to_spi_order_buffer_2bytes>
    // write new registers
    HAL_GPIO_WritePin(has5048a->Init.CS_GPIO_Port, has5048a->Init.CS_Pin,
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	6858      	ldr	r0, [r3, #4]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	891b      	ldrh	r3, [r3, #8]
 8001528:	2200      	movs	r2, #0
 800152a:	4619      	mov	r1, r3
 800152c:	f002 f94a 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6818      	ldr	r0, [r3, #0]
 8001534:	f107 0114 	add.w	r1, r7, #20
 8001538:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	2302      	movs	r3, #2
 8001540:	687a      	ldr	r2, [r7, #4]
 8001542:	f003 fb67 	bl	8004c14 <HAL_SPI_TransmitReceive>
 8001546:	4603      	mov	r3, r0
 8001548:	75fb      	strb	r3, [r7, #23]
            has5048a->Init.SPI_HandlerInstance, SPImsg_bytes, SPI_read_bytes, 2,
            1000);
    HAL_GPIO_WritePin(has5048a->Init.CS_GPIO_Port, has5048a->Init.CS_Pin,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	6858      	ldr	r0, [r3, #4]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	891b      	ldrh	r3, [r3, #8]
 8001552:	2201      	movs	r2, #1
 8001554:	4619      	mov	r1, r3
 8001556:	f002 f935 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);
    return spi_status;
 800155a:	7dfb      	ldrb	r3, [r7, #23]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}

08001564 <PID_Init>:
 */

#include "PID_lib.h"

void PID_Init(PID_HandleTypeDef *PID)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
    if (PID == NULL)
    {
        // TODO throw error
    }

    PID->__time = HAL_GetTick();
 800156c:	f000 f874 	bl	8001658 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	621a      	str	r2, [r3, #32]

    PID->__error_old = *(PID->Init.feedback) - PID->__set_point;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8001584:	f7fe fde6 	bl	8000154 <__aeabi_dsub>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    PID->__i_error = 0.0;
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    // todo zero out error & other values
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015ac:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <HAL_Init+0x28>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a07      	ldr	r2, [pc, #28]	@ (80015d0 <HAL_Init+0x28>)
 80015b2:	f043 0310 	orr.w	r3, r3, #16
 80015b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b8:	2003      	movs	r0, #3
 80015ba:	f001 fb0b 	bl	8002bd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015be:	200f      	movs	r0, #15
 80015c0:	f000 f808 	bl	80015d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c4:	f7ff fc6a 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40022000 	.word	0x40022000

080015d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x54>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x58>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f001 fb52 	bl	8002c9c <HAL_SYSTICK_Config>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e00e      	b.n	8001620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d80a      	bhi.n	800161e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	f04f 30ff 	mov.w	r0, #4294967295
 8001610:	f001 fb00 	bl	8002c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001614:	4a06      	ldr	r2, [pc, #24]	@ (8001630 <HAL_InitTick+0x5c>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	e000      	b.n	8001620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000
 800162c:	20000008 	.word	0x20000008
 8001630:	20000004 	.word	0x20000004

08001634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001638:	4b05      	ldr	r3, [pc, #20]	@ (8001650 <HAL_IncTick+0x1c>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_IncTick+0x20>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4413      	add	r3, r2
 8001644:	4a03      	ldr	r2, [pc, #12]	@ (8001654 <HAL_IncTick+0x20>)
 8001646:	6013      	str	r3, [r2, #0]
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000008 	.word	0x20000008
 8001654:	20000328 	.word	0x20000328

08001658 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b02      	ldr	r3, [pc, #8]	@ (8001668 <HAL_GetTick+0x10>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	20000328 	.word	0x20000328

0800166c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001674:	f7ff fff0 	bl	8001658 <HAL_GetTick>
 8001678:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001684:	d005      	beq.n	8001692 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001686:	4b0a      	ldr	r3, [pc, #40]	@ (80016b0 <HAL_Delay+0x44>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	4413      	add	r3, r2
 8001690:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001692:	bf00      	nop
 8001694:	f7ff ffe0 	bl	8001658 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d8f7      	bhi.n	8001694 <HAL_Delay+0x28>
  {
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000008 	.word	0x20000008

080016b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016bc:	2300      	movs	r3, #0
 80016be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e154      	b.n	8001980 <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a97      	ldr	r2, [pc, #604]	@ (8001938 <HAL_ADC_Init+0x284>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d009      	beq.n	80016f4 <HAL_ADC_Init+0x40>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a95      	ldr	r2, [pc, #596]	@ (800193c <HAL_ADC_Init+0x288>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d004      	beq.n	80016f4 <HAL_ADC_Init+0x40>
 80016ea:	f240 11a9 	movw	r1, #425	@ 0x1a9
 80016ee:	4894      	ldr	r0, [pc, #592]	@ (8001940 <HAL_ADC_Init+0x28c>)
 80016f0:	f7ff fab4 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d009      	beq.n	8001710 <HAL_ADC_Init+0x5c>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001704:	d004      	beq.n	8001710 <HAL_ADC_Init+0x5c>
 8001706:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800170a:	488d      	ldr	r0, [pc, #564]	@ (8001940 <HAL_ADC_Init+0x28c>)
 800170c:	f7ff faa6 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d009      	beq.n	800172c <HAL_ADC_Init+0x78>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001720:	d004      	beq.n	800172c <HAL_ADC_Init+0x78>
 8001722:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001726:	4886      	ldr	r0, [pc, #536]	@ (8001940 <HAL_ADC_Init+0x28c>)
 8001728:	f7ff fa98 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7b1b      	ldrb	r3, [r3, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_ADC_Init+0x92>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7b1b      	ldrb	r3, [r3, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d004      	beq.n	8001746 <HAL_ADC_Init+0x92>
 800173c:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001740:	487f      	ldr	r0, [pc, #508]	@ (8001940 <HAL_ADC_Init+0x28c>)
 8001742:	f7ff fa8b 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d022      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001756:	d01d      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001760:	d018      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800176a:	d013      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001774:	d00e      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800177e:	d009      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	69db      	ldr	r3, [r3, #28]
 8001784:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001788:	d004      	beq.n	8001794 <HAL_ADC_Init+0xe0>
 800178a:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800178e:	486c      	ldr	r0, [pc, #432]	@ (8001940 <HAL_ADC_Init+0x28c>)
 8001790:	f7ff fa64 	bl	8000c5c <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d02a      	beq.n	80017f2 <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <HAL_ADC_Init+0xf8>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	2b10      	cmp	r3, #16
 80017aa:	d904      	bls.n	80017b6 <HAL_ADC_Init+0x102>
 80017ac:	f240 11b1 	movw	r1, #433	@ 0x1b1
 80017b0:	4863      	ldr	r0, [pc, #396]	@ (8001940 <HAL_ADC_Init+0x28c>)
 80017b2:	f7ff fa53 	bl	8000c5c <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	7d1b      	ldrb	r3, [r3, #20]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d008      	beq.n	80017d0 <HAL_ADC_Init+0x11c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7d1b      	ldrb	r3, [r3, #20]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d004      	beq.n	80017d0 <HAL_ADC_Init+0x11c>
 80017c6:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80017ca:	485d      	ldr	r0, [pc, #372]	@ (8001940 <HAL_ADC_Init+0x28c>)
 80017cc:	f7ff fa46 	bl	8000c5c <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7d1b      	ldrb	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00c      	beq.n	80017f2 <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <HAL_ADC_Init+0x134>
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	d904      	bls.n	80017f2 <HAL_ADC_Init+0x13e>
 80017e8:	f240 11b5 	movw	r1, #437	@ 0x1b5
 80017ec:	4854      	ldr	r0, [pc, #336]	@ (8001940 <HAL_ADC_Init+0x28c>)
 80017ee:	f7ff fa35 	bl	8000c5c <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7fe ff17 	bl	800063c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 fc86 	bl	8002120 <ADC_ConversionStop_Disable>
 8001814:	4603      	mov	r3, r0
 8001816:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	f003 0310 	and.w	r3, r3, #16
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 80a4 	bne.w	800196e <HAL_ADC_Init+0x2ba>
 8001826:	7dfb      	ldrb	r3, [r7, #23]
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 80a0 	bne.w	800196e <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001832:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001836:	f023 0302 	bic.w	r3, r3, #2
 800183a:	f043 0202 	orr.w	r2, r3, #2
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800184a:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	7b1b      	ldrb	r3, [r3, #12]
 8001850:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001852:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	4313      	orrs	r3, r2
 8001858:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001862:	d003      	beq.n	800186c <HAL_ADC_Init+0x1b8>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d102      	bne.n	8001872 <HAL_ADC_Init+0x1be>
 800186c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001870:	e000      	b.n	8001874 <HAL_ADC_Init+0x1c0>
 8001872:	2300      	movs	r3, #0
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4313      	orrs	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	7d1b      	ldrb	r3, [r3, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	d119      	bne.n	80018b6 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	7b1b      	ldrb	r3, [r3, #12]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d109      	bne.n	800189e <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	3b01      	subs	r3, #1
 8001890:	035a      	lsls	r2, r3, #13
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800189a:	613b      	str	r3, [r7, #16]
 800189c:	e00b      	b.n	80018b6 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a2:	f043 0220 	orr.w	r2, r3, #32
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ae:	f043 0201 	orr.w	r2, r3, #1
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001944 <HAL_ADC_Init+0x290>)
 80018d2:	4013      	ands	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	6812      	ldr	r2, [r2, #0]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	430b      	orrs	r3, r1
 80018dc:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e6:	d003      	beq.n	80018f0 <HAL_ADC_Init+0x23c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	051b      	lsls	r3, r3, #20
 80018f8:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	430a      	orrs	r2, r1
 800190c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	4b0c      	ldr	r3, [pc, #48]	@ (8001948 <HAL_ADC_Init+0x294>)
 8001916:	4013      	ands	r3, r2
 8001918:	68ba      	ldr	r2, [r7, #8]
 800191a:	429a      	cmp	r2, r3
 800191c:	d116      	bne.n	800194c <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001928:	f023 0303 	bic.w	r3, r3, #3
 800192c:	f043 0201 	orr.w	r2, r3, #1
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001934:	e023      	b.n	800197e <HAL_ADC_Init+0x2ca>
 8001936:	bf00      	nop
 8001938:	40012400 	.word	0x40012400
 800193c:	40012800 	.word	0x40012800
 8001940:	08007304 	.word	0x08007304
 8001944:	ffe1f7fd 	.word	0xffe1f7fd
 8001948:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001950:	f023 0312 	bic.w	r3, r3, #18
 8001954:	f043 0210 	orr.w	r2, r3, #16
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001960:	f043 0201 	orr.w	r2, r3, #1
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196c:	e007      	b.n	800197e <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	f043 0210 	orr.w	r2, r3, #16
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800197e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001980:	4618      	mov	r0, r3
 8001982:	3718      	adds	r7, #24
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6c      	ldr	r2, [pc, #432]	@ (8001b58 <HAL_ADC_IRQHandler+0x1d0>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_ADC_IRQHandler+0x36>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a6b      	ldr	r2, [pc, #428]	@ (8001b5c <HAL_ADC_IRQHandler+0x1d4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d004      	beq.n	80019be <HAL_ADC_IRQHandler+0x36>
 80019b4:	f240 61f9 	movw	r1, #1785	@ 0x6f9
 80019b8:	4869      	ldr	r0, [pc, #420]	@ (8001b60 <HAL_ADC_IRQHandler+0x1d8>)
 80019ba:	f7ff f94f 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7b1b      	ldrb	r3, [r3, #12]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d008      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x50>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	7b1b      	ldrb	r3, [r3, #12]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d004      	beq.n	80019d8 <HAL_ADC_IRQHandler+0x50>
 80019ce:	f240 61fa 	movw	r1, #1786	@ 0x6fa
 80019d2:	4863      	ldr	r0, [pc, #396]	@ (8001b60 <HAL_ADC_IRQHandler+0x1d8>)
 80019d4:	f7ff f942 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_ADC_IRQHandler+0x60>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	2b10      	cmp	r3, #16
 80019e6:	d904      	bls.n	80019f2 <HAL_ADC_IRQHandler+0x6a>
 80019e8:	f240 61fb 	movw	r1, #1787	@ 0x6fb
 80019ec:	485c      	ldr	r0, [pc, #368]	@ (8001b60 <HAL_ADC_IRQHandler+0x1d8>)
 80019ee:	f7ff f935 	bl	8000c5c <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d03e      	beq.n	8001a7a <HAL_ADC_IRQHandler+0xf2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d039      	beq.n	8001a7a <HAL_ADC_IRQHandler+0xf2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d105      	bne.n	8001a1e <HAL_ADC_IRQHandler+0x96>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a16:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001a28:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001a2c:	d11d      	bne.n	8001a6a <HAL_ADC_IRQHandler+0xe2>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d119      	bne.n	8001a6a <HAL_ADC_IRQHandler+0xe2>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0220 	bic.w	r2, r2, #32
 8001a44:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a4a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_ADC_IRQHandler+0xe2>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a62:	f043 0201 	orr.w	r2, r3, #1
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f87a 	bl	8001b64 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f06f 0212 	mvn.w	r2, #18
 8001a78:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d04d      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x198>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d048      	beq.n	8001b20 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8001ab0:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001ab4:	d012      	beq.n	8001adc <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d125      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001ace:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ad2:	d11d      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d119      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001aea:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d105      	bne.n	8001b10 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b08:	f043 0201 	orr.w	r2, r3, #1
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f000 fb46 	bl	80021a2 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f06f 020c 	mvn.w	r2, #12
 8001b1e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d012      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x1c8>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00d      	beq.n	8001b50 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b38:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 f818 	bl	8001b76 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f06f 0201 	mvn.w	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001b50:	bf00      	nop
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40012400 	.word	0x40012400
 8001b5c:	40012800 	.word	0x40012800
 8001b60:	08007304 	.word	0x08007304

08001b64 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a88      	ldr	r2, [pc, #544]	@ (8001dc0 <HAL_ADC_ConfigChannel+0x238>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d009      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0x30>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a86      	ldr	r2, [pc, #536]	@ (8001dc4 <HAL_ADC_ConfigChannel+0x23c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d004      	beq.n	8001bb8 <HAL_ADC_ConfigChannel+0x30>
 8001bae:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 8001bb2:	4885      	ldr	r0, [pc, #532]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x240>)
 8001bb4:	f7ff f852 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d048      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d044      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d040      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d03c      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d038      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b05      	cmp	r3, #5
 8001be6:	d034      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b06      	cmp	r3, #6
 8001bee:	d030      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2b07      	cmp	r3, #7
 8001bf6:	d02c      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d028      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b09      	cmp	r3, #9
 8001c06:	d024      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2b0a      	cmp	r3, #10
 8001c0e:	d020      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2b0b      	cmp	r3, #11
 8001c16:	d01c      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d018      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2b0d      	cmp	r3, #13
 8001c26:	d014      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	2b0e      	cmp	r3, #14
 8001c2e:	d010      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d00c      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b10      	cmp	r3, #16
 8001c3e:	d008      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2b11      	cmp	r3, #17
 8001c46:	d004      	beq.n	8001c52 <HAL_ADC_ConfigChannel+0xca>
 8001c48:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8001c4c:	485e      	ldr	r0, [pc, #376]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x240>)
 8001c4e:	f7ff f805 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d040      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d03c      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d038      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d034      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	d030      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b06      	cmp	r3, #6
 8001c80:	d02c      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b07      	cmp	r3, #7
 8001c88:	d028      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d024      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b09      	cmp	r3, #9
 8001c98:	d020      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b0a      	cmp	r3, #10
 8001ca0:	d01c      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b0b      	cmp	r3, #11
 8001ca8:	d018      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d014      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b0d      	cmp	r3, #13
 8001cb8:	d010      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b0e      	cmp	r3, #14
 8001cc0:	d00c      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	2b0f      	cmp	r3, #15
 8001cc8:	d008      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	2b10      	cmp	r3, #16
 8001cd0:	d004      	beq.n	8001cdc <HAL_ADC_ConfigChannel+0x154>
 8001cd2:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 8001cd6:	483c      	ldr	r0, [pc, #240]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x240>)
 8001cd8:	f7fe ffc0 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d01c      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d018      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d014      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d010      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	d00c      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	2b06      	cmp	r3, #6
 8001d12:	d008      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b07      	cmp	r3, #7
 8001d1a:	d004      	beq.n	8001d26 <HAL_ADC_ConfigChannel+0x19e>
 8001d1c:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8001d20:	4829      	ldr	r0, [pc, #164]	@ (8001dc8 <HAL_ADC_ConfigChannel+0x240>)
 8001d22:	f7fe ff9b 	bl	8000c5c <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1ac>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e0e2      	b.n	8001efa <HAL_ADC_ConfigChannel+0x372>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d81c      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	4413      	add	r3, r2
 8001d54:	3b05      	subs	r3, #5
 8001d56:	221f      	movs	r2, #31
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	4019      	ands	r1, r3
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	3b05      	subs	r3, #5
 8001d70:	fa00 f203 	lsl.w	r2, r0, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d7c:	e042      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d822      	bhi.n	8001dcc <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b23      	subs	r3, #35	@ 0x23
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	4019      	ands	r1, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6818      	ldr	r0, [r3, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	3b23      	subs	r3, #35	@ 0x23
 8001db2:	fa00 f203 	lsl.w	r2, r0, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	631a      	str	r2, [r3, #48]	@ 0x30
 8001dbe:	e021      	b.n	8001e04 <HAL_ADC_ConfigChannel+0x27c>
 8001dc0:	40012400 	.word	0x40012400
 8001dc4:	40012800 	.word	0x40012800
 8001dc8:	08007304 	.word	0x08007304
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b41      	subs	r3, #65	@ 0x41
 8001dde:	221f      	movs	r2, #31
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	4413      	add	r3, r2
 8001df6:	3b41      	subs	r3, #65	@ 0x41
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b09      	cmp	r3, #9
 8001e0a:	d91c      	bls.n	8001e46 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68d9      	ldr	r1, [r3, #12]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4613      	mov	r3, r2
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3b1e      	subs	r3, #30
 8001e1e:	2207      	movs	r2, #7
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4019      	ands	r1, r3
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	6898      	ldr	r0, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	3b1e      	subs	r3, #30
 8001e38:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	60da      	str	r2, [r3, #12]
 8001e44:	e019      	b.n	8001e7a <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	6919      	ldr	r1, [r3, #16]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4019      	ands	r1, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d003      	beq.n	8001e8a <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001e86:	2b11      	cmp	r3, #17
 8001e88:	d132      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f04 <HAL_ADC_ConfigChannel+0x37c>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d125      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d126      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001eb0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d11a      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eba:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <HAL_ADC_ConfigChannel+0x380>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <HAL_ADC_ConfigChannel+0x384>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9a      	lsrs	r2, r3, #18
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x34a>
 8001ede:	e007      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	f043 0220 	orr.w	r2, r3, #32
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40012400 	.word	0x40012400
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a79      	ldr	r2, [pc, #484]	@ (8002104 <HAL_ADC_AnalogWDGConfig+0x1f4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d009      	beq.n	8001f38 <HAL_ADC_AnalogWDGConfig+0x28>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a77      	ldr	r2, [pc, #476]	@ (8002108 <HAL_ADC_AnalogWDGConfig+0x1f8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d004      	beq.n	8001f38 <HAL_ADC_AnalogWDGConfig+0x28>
 8001f2e:	f640 0141 	movw	r1, #2113	@ 0x841
 8001f32:	4876      	ldr	r0, [pc, #472]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001f34:	f7fe fe92 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d022      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a72      	ldr	r2, [pc, #456]	@ (8002110 <HAL_ADC_AnalogWDGConfig+0x200>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d01d      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a71      	ldr	r2, [pc, #452]	@ (8002114 <HAL_ADC_AnalogWDGConfig+0x204>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d018      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a6f      	ldr	r2, [pc, #444]	@ (8002118 <HAL_ADC_AnalogWDGConfig+0x208>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d013      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001f66:	d00e      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f70:	d009      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001f7a:	d004      	beq.n	8001f86 <HAL_ADC_AnalogWDGConfig+0x76>
 8001f7c:	f640 0142 	movw	r1, #2114	@ 0x842
 8001f80:	4862      	ldr	r0, [pc, #392]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001f82:	f7fe fe6b 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	7a1b      	ldrb	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d008      	beq.n	8001fa0 <HAL_ADC_AnalogWDGConfig+0x90>
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	7a1b      	ldrb	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d004      	beq.n	8001fa0 <HAL_ADC_AnalogWDGConfig+0x90>
 8001f96:	f640 0143 	movw	r1, #2115	@ 0x843
 8001f9a:	485c      	ldr	r0, [pc, #368]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001f9c:	f7fe fe5e 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fa8:	d304      	bcc.n	8001fb4 <HAL_ADC_AnalogWDGConfig+0xa4>
 8001faa:	f640 0144 	movw	r1, #2116	@ 0x844
 8001fae:	4857      	ldr	r0, [pc, #348]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001fb0:	f7fe fe54 	bl	8000c5c <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	691b      	ldr	r3, [r3, #16]
 8001fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001fbc:	d304      	bcc.n	8001fc8 <HAL_ADC_AnalogWDGConfig+0xb8>
 8001fbe:	f640 0145 	movw	r1, #2117	@ 0x845
 8001fc2:	4852      	ldr	r0, [pc, #328]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001fc4:	f7fe fe4a 	bl	8000c5c <assert_failed>
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a50      	ldr	r2, [pc, #320]	@ (8002110 <HAL_ADC_AnalogWDGConfig+0x200>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8001fd6:	4a4f      	ldr	r2, [pc, #316]	@ (8002114 <HAL_ADC_AnalogWDGConfig+0x204>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8001fe0:	4a4d      	ldr	r2, [pc, #308]	@ (8002118 <HAL_ADC_AnalogWDGConfig+0x208>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d14c      	bne.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d048      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d044      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d040      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	2b03      	cmp	r3, #3
 8002004:	d03c      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b04      	cmp	r3, #4
 800200c:	d038      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d034      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b06      	cmp	r3, #6
 800201c:	d030      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b07      	cmp	r3, #7
 8002024:	d02c      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b08      	cmp	r3, #8
 800202c:	d028      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	2b09      	cmp	r3, #9
 8002034:	d024      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b0a      	cmp	r3, #10
 800203c:	d020      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b0b      	cmp	r3, #11
 8002044:	d01c      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d018      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b0d      	cmp	r3, #13
 8002054:	d014      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2b0e      	cmp	r3, #14
 800205c:	d010      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b0f      	cmp	r3, #15
 8002064:	d00c      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b10      	cmp	r3, #16
 800206c:	d008      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b11      	cmp	r3, #17
 8002074:	d004      	beq.n	8002080 <HAL_ADC_AnalogWDGConfig+0x170>
 8002076:	f640 014b 	movw	r1, #2123	@ 0x84b
 800207a:	4824      	ldr	r0, [pc, #144]	@ (800210c <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800207c:	f7fe fdee 	bl	8000c5c <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_ADC_AnalogWDGConfig+0x17e>
 800208a:	2302      	movs	r3, #2
 800208c:	e035      	b.n	80020fa <HAL_ADC_AnalogWDGConfig+0x1ea>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	7a1b      	ldrb	r3, [r3, #8]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d108      	bne.n	80020b0 <HAL_ADC_AnalogWDGConfig+0x1a0>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	e007      	b.n	80020c0 <HAL_ADC_AnalogWDGConfig+0x1b0>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020be:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b15      	ldr	r3, [pc, #84]	@ (800211c <HAL_ADC_AnalogWDGConfig+0x20c>)
 80020c8:	4013      	ands	r3, r2
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	6811      	ldr	r1, [r2, #0]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	6852      	ldr	r2, [r2, #4]
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	430b      	orrs	r3, r1
 80020da:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	68d2      	ldr	r2, [r2, #12]
 80020e4:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6912      	ldr	r2, [r2, #16]
 80020ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40012400 	.word	0x40012400
 8002108:	40012800 	.word	0x40012800
 800210c:	08007304 	.word	0x08007304
 8002110:	00800200 	.word	0x00800200
 8002114:	00400200 	.word	0x00400200
 8002118:	00c00200 	.word	0x00c00200
 800211c:	ff3ffde0 	.word	0xff3ffde0

08002120 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d12e      	bne.n	8002198 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0201 	bic.w	r2, r2, #1
 8002148:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800214a:	f7ff fa85 	bl	8001658 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002150:	e01b      	b.n	800218a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002152:	f7ff fa81 	bl	8001658 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d914      	bls.n	800218a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b01      	cmp	r3, #1
 800216c:	d10d      	bne.n	800218a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002172:	f043 0210 	orr.w	r2, r3, #16
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e007      	b.n	800219a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	689b      	ldr	r3, [r3, #8]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d0dc      	beq.n	8002152 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021a2:	b480      	push	{r7}
 80021a4:	b083      	sub	sp, #12
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e209      	b.n	80025da <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8f      	ldr	r2, [pc, #572]	@ (8002408 <HAL_CAN_Init+0x254>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_CAN_Init+0x26>
 80021d0:	f240 111d 	movw	r1, #285	@ 0x11d
 80021d4:	488d      	ldr	r0, [pc, #564]	@ (800240c <HAL_CAN_Init+0x258>)
 80021d6:	f7fe fd41 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7e1b      	ldrb	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_CAN_Init+0x40>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	7e1b      	ldrb	r3, [r3, #24]
 80021e6:	2b01      	cmp	r3, #1
 80021e8:	d004      	beq.n	80021f4 <HAL_CAN_Init+0x40>
 80021ea:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80021ee:	4887      	ldr	r0, [pc, #540]	@ (800240c <HAL_CAN_Init+0x258>)
 80021f0:	f7fe fd34 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7e5b      	ldrb	r3, [r3, #25]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_CAN_Init+0x5a>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	7e5b      	ldrb	r3, [r3, #25]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d004      	beq.n	800220e <HAL_CAN_Init+0x5a>
 8002204:	f240 111f 	movw	r1, #287	@ 0x11f
 8002208:	4880      	ldr	r0, [pc, #512]	@ (800240c <HAL_CAN_Init+0x258>)
 800220a:	f7fe fd27 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	7e9b      	ldrb	r3, [r3, #26]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d008      	beq.n	8002228 <HAL_CAN_Init+0x74>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	7e9b      	ldrb	r3, [r3, #26]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d004      	beq.n	8002228 <HAL_CAN_Init+0x74>
 800221e:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8002222:	487a      	ldr	r0, [pc, #488]	@ (800240c <HAL_CAN_Init+0x258>)
 8002224:	f7fe fd1a 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	7edb      	ldrb	r3, [r3, #27]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_CAN_Init+0x8e>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	7edb      	ldrb	r3, [r3, #27]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d004      	beq.n	8002242 <HAL_CAN_Init+0x8e>
 8002238:	f240 1121 	movw	r1, #289	@ 0x121
 800223c:	4873      	ldr	r0, [pc, #460]	@ (800240c <HAL_CAN_Init+0x258>)
 800223e:	f7fe fd0d 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	7f1b      	ldrb	r3, [r3, #28]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_CAN_Init+0xa8>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	7f1b      	ldrb	r3, [r3, #28]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d004      	beq.n	800225c <HAL_CAN_Init+0xa8>
 8002252:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8002256:	486d      	ldr	r0, [pc, #436]	@ (800240c <HAL_CAN_Init+0x258>)
 8002258:	f7fe fd00 	bl	8000c5c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	7f5b      	ldrb	r3, [r3, #29]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_CAN_Init+0xc2>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7f5b      	ldrb	r3, [r3, #29]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d004      	beq.n	8002276 <HAL_CAN_Init+0xc2>
 800226c:	f240 1123 	movw	r1, #291	@ 0x123
 8002270:	4866      	ldr	r0, [pc, #408]	@ (800240c <HAL_CAN_Init+0x258>)
 8002272:	f7fe fcf3 	bl	8000c5c <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d013      	beq.n	80022a6 <HAL_CAN_Init+0xf2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002286:	d00e      	beq.n	80022a6 <HAL_CAN_Init+0xf2>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002290:	d009      	beq.n	80022a6 <HAL_CAN_Init+0xf2>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800229a:	d004      	beq.n	80022a6 <HAL_CAN_Init+0xf2>
 800229c:	f44f 7192 	mov.w	r1, #292	@ 0x124
 80022a0:	485a      	ldr	r0, [pc, #360]	@ (800240c <HAL_CAN_Init+0x258>)
 80022a2:	f7fe fcdb 	bl	8000c5c <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	68db      	ldr	r3, [r3, #12]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d013      	beq.n	80022d6 <HAL_CAN_Init+0x122>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b6:	d00e      	beq.n	80022d6 <HAL_CAN_Init+0x122>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80022c0:	d009      	beq.n	80022d6 <HAL_CAN_Init+0x122>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022ca:	d004      	beq.n	80022d6 <HAL_CAN_Init+0x122>
 80022cc:	f240 1125 	movw	r1, #293	@ 0x125
 80022d0:	484e      	ldr	r0, [pc, #312]	@ (800240c <HAL_CAN_Init+0x258>)
 80022d2:	f7fe fcc3 	bl	8000c5c <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d04f      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e6:	d04a      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80022f0:	d045      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80022fa:	d040      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002304:	d03b      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800230e:	d036      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8002318:	d031      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8002322:	d02c      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800232c:	d027      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8002336:	d022      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8002340:	d01d      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 800234a:	d018      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002354:	d013      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 800235e:	d00e      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002368:	d009      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8002372:	d004      	beq.n	800237e <HAL_CAN_Init+0x1ca>
 8002374:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8002378:	4824      	ldr	r0, [pc, #144]	@ (800240c <HAL_CAN_Init+0x258>)
 800237a:	f7fe fc6f 	bl	8000c5c <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d027      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800238e:	d022      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002398:	d01d      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80023a2:	d018      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80023ac:	d013      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 80023b6:	d00e      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80023c0:	d009      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 80023ca:	d004      	beq.n	80023d6 <HAL_CAN_Init+0x222>
 80023cc:	f240 1127 	movw	r1, #295	@ 0x127
 80023d0:	480e      	ldr	r0, [pc, #56]	@ (800240c <HAL_CAN_Init+0x258>)
 80023d2:	f7fe fc43 	bl	8000c5c <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d004      	beq.n	80023e8 <HAL_CAN_Init+0x234>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e6:	d904      	bls.n	80023f2 <HAL_CAN_Init+0x23e>
 80023e8:	f44f 7194 	mov.w	r1, #296	@ 0x128
 80023ec:	4807      	ldr	r0, [pc, #28]	@ (800240c <HAL_CAN_Init+0x258>)
 80023ee:	f7fe fc35 	bl	8000c5c <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d108      	bne.n	8002410 <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7fe f9e6 	bl	80007d0 <HAL_CAN_MspInit>
 8002404:	e004      	b.n	8002410 <HAL_CAN_Init+0x25c>
 8002406:	bf00      	nop
 8002408:	40006400 	.word	0x40006400
 800240c:	0800733c 	.word	0x0800733c
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0201 	orr.w	r2, r2, #1
 800241e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002420:	f7ff f91a 	bl	8001658 <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002426:	e012      	b.n	800244e <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002428:	f7ff f916 	bl	8001658 <HAL_GetTick>
 800242c:	4602      	mov	r2, r0
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	1ad3      	subs	r3, r2, r3
 8002432:	2b0a      	cmp	r3, #10
 8002434:	d90b      	bls.n	800244e <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2205      	movs	r2, #5
 8002446:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e0c5      	b.n	80025da <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0e5      	beq.n	8002428 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0202 	bic.w	r2, r2, #2
 800246a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7ff f8f4 	bl	8001658 <HAL_GetTick>
 8002470:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002472:	e012      	b.n	800249a <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002474:	f7ff f8f0 	bl	8001658 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b0a      	cmp	r3, #10
 8002480:	d90b      	bls.n	800249a <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002486:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2205      	movs	r2, #5
 8002492:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e09f      	b.n	80025da <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1e5      	bne.n	8002474 <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7e1b      	ldrb	r3, [r3, #24]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d108      	bne.n	80024c2 <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	e007      	b.n	80024d2 <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	7e5b      	ldrb	r3, [r3, #25]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d108      	bne.n	80024ec <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	e007      	b.n	80024fc <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	7e9b      	ldrb	r3, [r3, #26]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d108      	bne.n	8002516 <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0220 	orr.w	r2, r2, #32
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f022 0220 	bic.w	r2, r2, #32
 8002524:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	7edb      	ldrb	r3, [r3, #27]
 800252a:	2b01      	cmp	r3, #1
 800252c:	d108      	bne.n	8002540 <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0210 	bic.w	r2, r2, #16
 800253c:	601a      	str	r2, [r3, #0]
 800253e:	e007      	b.n	8002550 <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0210 	orr.w	r2, r2, #16
 800254e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7f1b      	ldrb	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0208 	orr.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0208 	bic.w	r2, r2, #8
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7f5b      	ldrb	r3, [r3, #29]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0204 	orr.w	r2, r2, #4
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0204 	bic.w	r2, r2, #4
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	431a      	orrs	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	ea42 0103 	orr.w	r1, r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	430a      	orrs	r2, r1
 80025c8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2200      	movs	r2, #0
 80025ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop

080025e4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b08a      	sub	sp, #40	@ 0x28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80025ec:	2300      	movs	r3, #0
 80025ee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	d07c      	beq.n	8002724 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f003 0301 	and.w	r3, r3, #1
 8002630:	2b00      	cmp	r3, #0
 8002632:	d023      	beq.n	800267c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f983 	bl	8002952 <HAL_CAN_TxMailbox0CompleteCallback>
 800264c:	e016      	b.n	800267c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d004      	beq.n	8002662 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002660:	e00c      	b.n	800267c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d004      	beq.n	8002676 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002672:	627b      	str	r3, [r7, #36]	@ 0x24
 8002674:	e002      	b.n	800267c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f986 	bl	8002988 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d024      	beq.n	80026d0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800268e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f962 	bl	8002964 <HAL_CAN_TxMailbox1CompleteCallback>
 80026a0:	e016      	b.n	80026d0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80026b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b4:	e00c      	b.n	80026d0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d004      	beq.n	80026ca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c8:	e002      	b.n	80026d0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f965 	bl	800299a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d024      	beq.n	8002724 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80026e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f941 	bl	8002976 <HAL_CAN_TxMailbox2CompleteCallback>
 80026f4:	e016      	b.n	8002724 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	e00c      	b.n	8002724 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d004      	beq.n	800271e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
 800271c:	e002      	b.n	8002724 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 f944 	bl	80029ac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00c      	beq.n	8002748 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800273e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2210      	movs	r2, #16
 8002746:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f003 0304 	and.w	r3, r3, #4
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00b      	beq.n	800276a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2208      	movs	r2, #8
 8002762:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f933 	bl	80029d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d009      	beq.n	8002788 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f000 f91b 	bl	80029be <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	d007      	beq.n	80027ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800279c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2210      	movs	r2, #16
 80027aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00b      	beq.n	80027ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	f003 0308 	and.w	r3, r3, #8
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d006      	beq.n	80027ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f913 	bl	80029f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80027ce:	6a3b      	ldr	r3, [r7, #32]
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d009      	beq.n	80027ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d002      	beq.n	80027ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 f8fb 	bl	80029e2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2210      	movs	r2, #16
 8002806:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 f8fc 	bl	8002a06 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	f003 0308 	and.w	r3, r3, #8
 800281e:	2b00      	cmp	r3, #0
 8002820:	d006      	beq.n	8002830 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2208      	movs	r2, #8
 8002828:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f8f4 	bl	8002a18 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d07b      	beq.n	8002932 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d072      	beq.n	800292a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d008      	beq.n	8002860 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002866:	2b00      	cmp	r3, #0
 8002868:	d008      	beq.n	800287c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002882:	2b00      	cmp	r3, #0
 8002884:	d008      	beq.n	8002898 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	f043 0304 	orr.w	r3, r3, #4
 8002896:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002898:	6a3b      	ldr	r3, [r7, #32]
 800289a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d043      	beq.n	800292a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d03e      	beq.n	800292a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028b2:	2b60      	cmp	r3, #96	@ 0x60
 80028b4:	d02b      	beq.n	800290e <HAL_CAN_IRQHandler+0x32a>
 80028b6:	2b60      	cmp	r3, #96	@ 0x60
 80028b8:	d82e      	bhi.n	8002918 <HAL_CAN_IRQHandler+0x334>
 80028ba:	2b50      	cmp	r3, #80	@ 0x50
 80028bc:	d022      	beq.n	8002904 <HAL_CAN_IRQHandler+0x320>
 80028be:	2b50      	cmp	r3, #80	@ 0x50
 80028c0:	d82a      	bhi.n	8002918 <HAL_CAN_IRQHandler+0x334>
 80028c2:	2b40      	cmp	r3, #64	@ 0x40
 80028c4:	d019      	beq.n	80028fa <HAL_CAN_IRQHandler+0x316>
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d826      	bhi.n	8002918 <HAL_CAN_IRQHandler+0x334>
 80028ca:	2b30      	cmp	r3, #48	@ 0x30
 80028cc:	d010      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x30c>
 80028ce:	2b30      	cmp	r3, #48	@ 0x30
 80028d0:	d822      	bhi.n	8002918 <HAL_CAN_IRQHandler+0x334>
 80028d2:	2b10      	cmp	r3, #16
 80028d4:	d002      	beq.n	80028dc <HAL_CAN_IRQHandler+0x2f8>
 80028d6:	2b20      	cmp	r3, #32
 80028d8:	d005      	beq.n	80028e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80028da:	e01d      	b.n	8002918 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80028dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028e4:	e019      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80028e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028e8:	f043 0310 	orr.w	r3, r3, #16
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028ee:	e014      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f2:	f043 0320 	orr.w	r3, r3, #32
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80028f8:	e00f      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80028fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002900:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002902:	e00a      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800290a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800290c:	e005      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002916:	e000      	b.n	800291a <HAL_CAN_IRQHandler+0x336>
            break;
 8002918:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699a      	ldr	r2, [r3, #24]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002928:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2204      	movs	r2, #4
 8002930:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f870 	bl	8002a2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	@ 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bc80      	pop	{r7}
 80029aa:	4770      	bx	lr

080029ac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bc80      	pop	{r7}
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr

080029d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr

08002a18 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4906      	ldr	r1, [pc, #24]	@ (8002ad4 <__NVIC_EnableIRQ+0x34>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100

08002ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	6039      	str	r1, [r7, #0]
 8002ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	db0a      	blt.n	8002b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	490c      	ldr	r1, [pc, #48]	@ (8002b24 <__NVIC_SetPriority+0x4c>)
 8002af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	440b      	add	r3, r1
 8002afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b00:	e00a      	b.n	8002b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	4908      	ldr	r1, [pc, #32]	@ (8002b28 <__NVIC_SetPriority+0x50>)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	3b04      	subs	r3, #4
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	761a      	strb	r2, [r3, #24]
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bc80      	pop	{r7}
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b089      	sub	sp, #36	@ 0x24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f1c3 0307 	rsb	r3, r3, #7
 8002b46:	2b04      	cmp	r3, #4
 8002b48:	bf28      	it	cs
 8002b4a:	2304      	movcs	r3, #4
 8002b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	3304      	adds	r3, #4
 8002b52:	2b06      	cmp	r3, #6
 8002b54:	d902      	bls.n	8002b5c <NVIC_EncodePriority+0x30>
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3b03      	subs	r3, #3
 8002b5a:	e000      	b.n	8002b5e <NVIC_EncodePriority+0x32>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6a:	43da      	mvns	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	401a      	ands	r2, r3
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b74:	f04f 31ff 	mov.w	r1, #4294967295
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7e:	43d9      	mvns	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b84:	4313      	orrs	r3, r2
         );
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3724      	adds	r7, #36	@ 0x24
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ba0:	d301      	bcc.n	8002ba6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e00f      	b.n	8002bc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <SysTick_Config+0x40>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bae:	210f      	movs	r1, #15
 8002bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb4:	f7ff ff90 	bl	8002ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb8:	4b05      	ldr	r3, [pc, #20]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bbe:	4b04      	ldr	r3, [pc, #16]	@ (8002bd0 <SysTick_Config+0x40>)
 8002bc0:	2207      	movs	r2, #7
 8002bc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	e000e010 	.word	0xe000e010

08002bd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b07      	cmp	r3, #7
 8002be0:	d00f      	beq.n	8002c02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b06      	cmp	r3, #6
 8002be6:	d00c      	beq.n	8002c02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	d009      	beq.n	8002c02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b04      	cmp	r3, #4
 8002bf2:	d006      	beq.n	8002c02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d003      	beq.n	8002c02 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002bfa:	2191      	movs	r1, #145	@ 0x91
 8002bfc:	4804      	ldr	r0, [pc, #16]	@ (8002c10 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002bfe:	f7fe f82d 	bl	8000c5c <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff ff1a 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	08007374 	.word	0x08007374

08002c14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
 8002c20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b0f      	cmp	r3, #15
 8002c2a:	d903      	bls.n	8002c34 <HAL_NVIC_SetPriority+0x20>
 8002c2c:	21a9      	movs	r1, #169	@ 0xa9
 8002c2e:	480e      	ldr	r0, [pc, #56]	@ (8002c68 <HAL_NVIC_SetPriority+0x54>)
 8002c30:	f7fe f814 	bl	8000c5c <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d903      	bls.n	8002c42 <HAL_NVIC_SetPriority+0x2e>
 8002c3a:	21aa      	movs	r1, #170	@ 0xaa
 8002c3c:	480a      	ldr	r0, [pc, #40]	@ (8002c68 <HAL_NVIC_SetPriority+0x54>)
 8002c3e:	f7fe f80d 	bl	8000c5c <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c42:	f7ff ff1f 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c46:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	68b9      	ldr	r1, [r7, #8]
 8002c4c:	6978      	ldr	r0, [r7, #20]
 8002c4e:	f7ff ff6d 	bl	8002b2c <NVIC_EncodePriority>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff ff3c 	bl	8002ad8 <__NVIC_SetPriority>
}
 8002c60:	bf00      	nop
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	08007374 	.word	0x08007374

08002c6c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da03      	bge.n	8002c86 <HAL_NVIC_EnableIRQ+0x1a>
 8002c7e:	21bd      	movs	r1, #189	@ 0xbd
 8002c80:	4805      	ldr	r0, [pc, #20]	@ (8002c98 <HAL_NVIC_EnableIRQ+0x2c>)
 8002c82:	f7fd ffeb 	bl	8000c5c <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff08 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002c90:	bf00      	nop
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	08007374 	.word	0x08007374

08002c9c <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff ff73 	bl	8002b90 <SysTick_Config>
 8002caa:	4603      	mov	r3, r0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e0da      	b.n	8002e80 <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a6e      	ldr	r2, [pc, #440]	@ (8002e88 <HAL_DMA_Init+0x1d4>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d021      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a6c      	ldr	r2, [pc, #432]	@ (8002e8c <HAL_DMA_Init+0x1d8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01c      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8002e90 <HAL_DMA_Init+0x1dc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d017      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a69      	ldr	r2, [pc, #420]	@ (8002e94 <HAL_DMA_Init+0x1e0>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d012      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a68      	ldr	r2, [pc, #416]	@ (8002e98 <HAL_DMA_Init+0x1e4>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00d      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a66      	ldr	r2, [pc, #408]	@ (8002e9c <HAL_DMA_Init+0x1e8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d008      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ea0 <HAL_DMA_Init+0x1ec>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d003      	beq.n	8002d18 <HAL_DMA_Init+0x64>
 8002d10:	2199      	movs	r1, #153	@ 0x99
 8002d12:	4864      	ldr	r0, [pc, #400]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d14:	f7fd ffa2 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00c      	beq.n	8002d3a <HAL_DMA_Init+0x86>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b10      	cmp	r3, #16
 8002d26:	d008      	beq.n	8002d3a <HAL_DMA_Init+0x86>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d30:	d003      	beq.n	8002d3a <HAL_DMA_Init+0x86>
 8002d32:	219a      	movs	r1, #154	@ 0x9a
 8002d34:	485b      	ldr	r0, [pc, #364]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d36:	f7fd ff91 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	2b40      	cmp	r3, #64	@ 0x40
 8002d40:	d007      	beq.n	8002d52 <HAL_DMA_Init+0x9e>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_DMA_Init+0x9e>
 8002d4a:	219b      	movs	r1, #155	@ 0x9b
 8002d4c:	4855      	ldr	r0, [pc, #340]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d4e:	f7fd ff85 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	2b80      	cmp	r3, #128	@ 0x80
 8002d58:	d007      	beq.n	8002d6a <HAL_DMA_Init+0xb6>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_DMA_Init+0xb6>
 8002d62:	219c      	movs	r1, #156	@ 0x9c
 8002d64:	484f      	ldr	r0, [pc, #316]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d66:	f7fd ff79 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00d      	beq.n	8002d8e <HAL_DMA_Init+0xda>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d7a:	d008      	beq.n	8002d8e <HAL_DMA_Init+0xda>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d84:	d003      	beq.n	8002d8e <HAL_DMA_Init+0xda>
 8002d86:	219d      	movs	r1, #157	@ 0x9d
 8002d88:	4846      	ldr	r0, [pc, #280]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002d8a:	f7fd ff67 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00d      	beq.n	8002db2 <HAL_DMA_Init+0xfe>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d9e:	d008      	beq.n	8002db2 <HAL_DMA_Init+0xfe>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	695b      	ldr	r3, [r3, #20]
 8002da4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002da8:	d003      	beq.n	8002db2 <HAL_DMA_Init+0xfe>
 8002daa:	219e      	movs	r1, #158	@ 0x9e
 8002dac:	483d      	ldr	r0, [pc, #244]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002dae:	f7fd ff55 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_Init+0x116>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d003      	beq.n	8002dca <HAL_DMA_Init+0x116>
 8002dc2:	219f      	movs	r1, #159	@ 0x9f
 8002dc4:	4837      	ldr	r0, [pc, #220]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002dc6:	f7fd ff49 	bl	8000c5c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <HAL_DMA_Init+0x144>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dda:	d00d      	beq.n	8002df8 <HAL_DMA_Init+0x144>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	69db      	ldr	r3, [r3, #28]
 8002de0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002de4:	d008      	beq.n	8002df8 <HAL_DMA_Init+0x144>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_Init+0x144>
 8002df0:	21a0      	movs	r1, #160	@ 0xa0
 8002df2:	482c      	ldr	r0, [pc, #176]	@ (8002ea4 <HAL_DMA_Init+0x1f0>)
 8002df4:	f7fd ff32 	bl	8000c5c <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8002ea8 <HAL_DMA_Init+0x1f4>)
 8002e00:	4413      	add	r3, r2
 8002e02:	4a2a      	ldr	r2, [pc, #168]	@ (8002eac <HAL_DMA_Init+0x1f8>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a27      	ldr	r2, [pc, #156]	@ (8002eb0 <HAL_DMA_Init+0x1fc>)
 8002e14:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2202      	movs	r2, #2
 8002e1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e2c:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002e30:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	695b      	ldr	r3, [r3, #20]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40020008 	.word	0x40020008
 8002e8c:	4002001c 	.word	0x4002001c
 8002e90:	40020030 	.word	0x40020030
 8002e94:	40020044 	.word	0x40020044
 8002e98:	40020058 	.word	0x40020058
 8002e9c:	4002006c 	.word	0x4002006c
 8002ea0:	40020080 	.word	0x40020080
 8002ea4:	080073b0 	.word	0x080073b0
 8002ea8:	bffdfff8 	.word	0xbffdfff8
 8002eac:	cccccccd 	.word	0xcccccccd
 8002eb0:	40020000 	.word	0x40020000

08002eb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_DMA_Start_IT+0x20>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ed2:	d304      	bcc.n	8002ede <HAL_DMA_Start_IT+0x2a>
 8002ed4:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8002ed8:	482c      	ldr	r0, [pc, #176]	@ (8002f8c <HAL_DMA_Start_IT+0xd8>)
 8002eda:	f7fd febf 	bl	8000c5c <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_DMA_Start_IT+0x38>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e04b      	b.n	8002f84 <HAL_DMA_Start_IT+0xd0>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d13a      	bne.n	8002f76 <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f9b1 	bl	800328c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f042 020e 	orr.w	r2, r2, #14
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e00f      	b.n	8002f64 <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0204 	bic.w	r2, r2, #4
 8002f52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 020a 	orr.w	r2, r2, #10
 8002f62:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e005      	b.n	8002f82 <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	080073b0 	.word	0x080073b0

08002f90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d005      	beq.n	8002fb4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2204      	movs	r2, #4
 8002fac:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	e051      	b.n	8003058 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f022 020e 	bic.w	r2, r2, #14
 8002fc2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a22      	ldr	r2, [pc, #136]	@ (8003064 <HAL_DMA_Abort_IT+0xd4>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d029      	beq.n	8003032 <HAL_DMA_Abort_IT+0xa2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a21      	ldr	r2, [pc, #132]	@ (8003068 <HAL_DMA_Abort_IT+0xd8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMA_Abort_IT+0x9e>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <HAL_DMA_Abort_IT+0xdc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01a      	beq.n	8003028 <HAL_DMA_Abort_IT+0x98>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8003070 <HAL_DMA_Abort_IT+0xe0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d012      	beq.n	8003022 <HAL_DMA_Abort_IT+0x92>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a1c      	ldr	r2, [pc, #112]	@ (8003074 <HAL_DMA_Abort_IT+0xe4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00a      	beq.n	800301c <HAL_DMA_Abort_IT+0x8c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a1b      	ldr	r2, [pc, #108]	@ (8003078 <HAL_DMA_Abort_IT+0xe8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <HAL_DMA_Abort_IT+0x86>
 8003010:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003014:	e00e      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003016:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800301a:	e00b      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 800301c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003020:	e008      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003022:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003026:	e005      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800302c:	e002      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 800302e:	2310      	movs	r3, #16
 8003030:	e000      	b.n	8003034 <HAL_DMA_Abort_IT+0xa4>
 8003032:	2301      	movs	r3, #1
 8003034:	4a11      	ldr	r2, [pc, #68]	@ (800307c <HAL_DMA_Abort_IT+0xec>)
 8003036:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	4798      	blx	r3
    } 
  }
  return status;
 8003058:	7bfb      	ldrb	r3, [r7, #15]
}
 800305a:	4618      	mov	r0, r3
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40020008 	.word	0x40020008
 8003068:	4002001c 	.word	0x4002001c
 800306c:	40020030 	.word	0x40020030
 8003070:	40020044 	.word	0x40020044
 8003074:	40020058 	.word	0x40020058
 8003078:	4002006c 	.word	0x4002006c
 800307c:	40020000 	.word	0x40020000

08003080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	2204      	movs	r2, #4
 800309e:	409a      	lsls	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d04f      	beq.n	8003148 <HAL_DMA_IRQHandler+0xc8>
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d04a      	beq.n	8003148 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d107      	bne.n	80030d0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0204 	bic.w	r2, r2, #4
 80030ce:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a66      	ldr	r2, [pc, #408]	@ (8003270 <HAL_DMA_IRQHandler+0x1f0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d029      	beq.n	800312e <HAL_DMA_IRQHandler+0xae>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_DMA_IRQHandler+0x1f4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d022      	beq.n	800312a <HAL_DMA_IRQHandler+0xaa>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a63      	ldr	r2, [pc, #396]	@ (8003278 <HAL_DMA_IRQHandler+0x1f8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d01a      	beq.n	8003124 <HAL_DMA_IRQHandler+0xa4>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a62      	ldr	r2, [pc, #392]	@ (800327c <HAL_DMA_IRQHandler+0x1fc>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d012      	beq.n	800311e <HAL_DMA_IRQHandler+0x9e>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a60      	ldr	r2, [pc, #384]	@ (8003280 <HAL_DMA_IRQHandler+0x200>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00a      	beq.n	8003118 <HAL_DMA_IRQHandler+0x98>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a5f      	ldr	r2, [pc, #380]	@ (8003284 <HAL_DMA_IRQHandler+0x204>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d102      	bne.n	8003112 <HAL_DMA_IRQHandler+0x92>
 800310c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003110:	e00e      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003112:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003116:	e00b      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003118:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800311c:	e008      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800311e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003122:	e005      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 8003124:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003128:	e002      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800312a:	2340      	movs	r3, #64	@ 0x40
 800312c:	e000      	b.n	8003130 <HAL_DMA_IRQHandler+0xb0>
 800312e:	2304      	movs	r3, #4
 8003130:	4a55      	ldr	r2, [pc, #340]	@ (8003288 <HAL_DMA_IRQHandler+0x208>)
 8003132:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8094 	beq.w	8003266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003146:	e08e      	b.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314c:	2202      	movs	r2, #2
 800314e:	409a      	lsls	r2, r3
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d056      	beq.n	8003206 <HAL_DMA_IRQHandler+0x186>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d051      	beq.n	8003206 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 020a 	bic.w	r2, r2, #10
 800317e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a38      	ldr	r2, [pc, #224]	@ (8003270 <HAL_DMA_IRQHandler+0x1f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d029      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x166>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a37      	ldr	r2, [pc, #220]	@ (8003274 <HAL_DMA_IRQHandler+0x1f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x162>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a35      	ldr	r2, [pc, #212]	@ (8003278 <HAL_DMA_IRQHandler+0x1f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0x15c>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a34      	ldr	r2, [pc, #208]	@ (800327c <HAL_DMA_IRQHandler+0x1fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d012      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x156>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a32      	ldr	r2, [pc, #200]	@ (8003280 <HAL_DMA_IRQHandler+0x200>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x150>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a31      	ldr	r2, [pc, #196]	@ (8003284 <HAL_DMA_IRQHandler+0x204>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d102      	bne.n	80031ca <HAL_DMA_IRQHandler+0x14a>
 80031c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80031c8:	e00e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031ce:	e00b      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d4:	e008      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031da:	e005      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031e0:	e002      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031e2:	2320      	movs	r3, #32
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_IRQHandler+0x168>
 80031e6:	2302      	movs	r3, #2
 80031e8:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_DMA_IRQHandler+0x208>)
 80031ea:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d034      	beq.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003204:	e02f      	b.n	8003266 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320a:	2208      	movs	r2, #8
 800320c:	409a      	lsls	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d028      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 020e 	bic.w	r2, r2, #14
 800322e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003238:	2101      	movs	r1, #1
 800323a:	fa01 f202 	lsl.w	r2, r1, r2
 800323e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	4798      	blx	r3
    }
  }
  return;
 8003266:	bf00      	nop
 8003268:	bf00      	nop
}
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40020008 	.word	0x40020008
 8003274:	4002001c 	.word	0x4002001c
 8003278:	40020030 	.word	0x40020030
 800327c:	40020044 	.word	0x40020044
 8003280:	40020058 	.word	0x40020058
 8003284:	4002006c 	.word	0x4002006c
 8003288:	40020000 	.word	0x40020000

0800328c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032a2:	2101      	movs	r1, #1
 80032a4:	fa01 f202 	lsl.w	r2, r1, r2
 80032a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d108      	bne.n	80032cc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032ca:	e007      	b.n	80032dc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	60da      	str	r2, [r3, #12]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr
	...

080032e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	@ 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032f2:	2300      	movs	r3, #0
 80032f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80032f6:	2300      	movs	r3, #0
 80032f8:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a96      	ldr	r2, [pc, #600]	@ (8003558 <HAL_GPIO_Init+0x270>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d013      	beq.n	800332a <HAL_GPIO_Init+0x42>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a95      	ldr	r2, [pc, #596]	@ (800355c <HAL_GPIO_Init+0x274>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00f      	beq.n	800332a <HAL_GPIO_Init+0x42>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a94      	ldr	r2, [pc, #592]	@ (8003560 <HAL_GPIO_Init+0x278>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d00b      	beq.n	800332a <HAL_GPIO_Init+0x42>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a93      	ldr	r2, [pc, #588]	@ (8003564 <HAL_GPIO_Init+0x27c>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d007      	beq.n	800332a <HAL_GPIO_Init+0x42>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a92      	ldr	r2, [pc, #584]	@ (8003568 <HAL_GPIO_Init+0x280>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x42>
 8003322:	21bd      	movs	r1, #189	@ 0xbd
 8003324:	4891      	ldr	r0, [pc, #580]	@ (800356c <HAL_GPIO_Init+0x284>)
 8003326:	f7fd fc99 	bl	8000c5c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d004      	beq.n	800333e <HAL_GPIO_Init+0x56>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800333c:	d303      	bcc.n	8003346 <HAL_GPIO_Init+0x5e>
 800333e:	21be      	movs	r1, #190	@ 0xbe
 8003340:	488a      	ldr	r0, [pc, #552]	@ (800356c <HAL_GPIO_Init+0x284>)
 8003342:	f7fd fc8b 	bl	8000c5c <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 821d 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	2b01      	cmp	r3, #1
 8003356:	f000 8218 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b11      	cmp	r3, #17
 8003360:	f000 8213 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b02      	cmp	r3, #2
 800336a:	f000 820e 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b12      	cmp	r3, #18
 8003374:	f000 8209 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a7c      	ldr	r2, [pc, #496]	@ (8003570 <HAL_GPIO_Init+0x288>)
 800337e:	4293      	cmp	r3, r2
 8003380:	f000 8203 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a7a      	ldr	r2, [pc, #488]	@ (8003574 <HAL_GPIO_Init+0x28c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	f000 81fd 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4a78      	ldr	r2, [pc, #480]	@ (8003578 <HAL_GPIO_Init+0x290>)
 8003396:	4293      	cmp	r3, r2
 8003398:	f000 81f7 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a76      	ldr	r2, [pc, #472]	@ (800357c <HAL_GPIO_Init+0x294>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	f000 81f1 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	4a74      	ldr	r2, [pc, #464]	@ (8003580 <HAL_GPIO_Init+0x298>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	f000 81eb 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	4a72      	ldr	r2, [pc, #456]	@ (8003584 <HAL_GPIO_Init+0x29c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	f000 81e5 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	f000 81e0 	beq.w	800378a <HAL_GPIO_Init+0x4a2>
 80033ca:	21bf      	movs	r1, #191	@ 0xbf
 80033cc:	4867      	ldr	r0, [pc, #412]	@ (800356c <HAL_GPIO_Init+0x284>)
 80033ce:	f7fd fc45 	bl	8000c5c <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d2:	e1da      	b.n	800378a <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033d4:	2201      	movs	r2, #1
 80033d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	4013      	ands	r3, r2
 80033e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	f040 81c9 	bne.w	8003784 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a58      	ldr	r2, [pc, #352]	@ (8003558 <HAL_GPIO_Init+0x270>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x13a>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a57      	ldr	r2, [pc, #348]	@ (800355c <HAL_GPIO_Init+0x274>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00f      	beq.n	8003422 <HAL_GPIO_Init+0x13a>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a56      	ldr	r2, [pc, #344]	@ (8003560 <HAL_GPIO_Init+0x278>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00b      	beq.n	8003422 <HAL_GPIO_Init+0x13a>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a55      	ldr	r2, [pc, #340]	@ (8003564 <HAL_GPIO_Init+0x27c>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d007      	beq.n	8003422 <HAL_GPIO_Init+0x13a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a54      	ldr	r2, [pc, #336]	@ (8003568 <HAL_GPIO_Init+0x280>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x13a>
 800341a:	21cd      	movs	r1, #205	@ 0xcd
 800341c:	4853      	ldr	r0, [pc, #332]	@ (800356c <HAL_GPIO_Init+0x284>)
 800341e:	f7fd fc1d 	bl	8000c5c <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4a57      	ldr	r2, [pc, #348]	@ (8003584 <HAL_GPIO_Init+0x29c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	f000 80c2 	beq.w	80035b2 <HAL_GPIO_Init+0x2ca>
 800342e:	4a55      	ldr	r2, [pc, #340]	@ (8003584 <HAL_GPIO_Init+0x29c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	f200 80e8 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003436:	4a50      	ldr	r2, [pc, #320]	@ (8003578 <HAL_GPIO_Init+0x290>)
 8003438:	4293      	cmp	r3, r2
 800343a:	f000 80ba 	beq.w	80035b2 <HAL_GPIO_Init+0x2ca>
 800343e:	4a4e      	ldr	r2, [pc, #312]	@ (8003578 <HAL_GPIO_Init+0x290>)
 8003440:	4293      	cmp	r3, r2
 8003442:	f200 80e0 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003446:	4a4e      	ldr	r2, [pc, #312]	@ (8003580 <HAL_GPIO_Init+0x298>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f000 80b2 	beq.w	80035b2 <HAL_GPIO_Init+0x2ca>
 800344e:	4a4c      	ldr	r2, [pc, #304]	@ (8003580 <HAL_GPIO_Init+0x298>)
 8003450:	4293      	cmp	r3, r2
 8003452:	f200 80d8 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003456:	4a47      	ldr	r2, [pc, #284]	@ (8003574 <HAL_GPIO_Init+0x28c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	f000 80aa 	beq.w	80035b2 <HAL_GPIO_Init+0x2ca>
 800345e:	4a45      	ldr	r2, [pc, #276]	@ (8003574 <HAL_GPIO_Init+0x28c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	f200 80d0 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003466:	4a45      	ldr	r2, [pc, #276]	@ (800357c <HAL_GPIO_Init+0x294>)
 8003468:	4293      	cmp	r3, r2
 800346a:	f000 80a2 	beq.w	80035b2 <HAL_GPIO_Init+0x2ca>
 800346e:	4a43      	ldr	r2, [pc, #268]	@ (800357c <HAL_GPIO_Init+0x294>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f200 80c8 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003476:	2b12      	cmp	r3, #18
 8003478:	d82c      	bhi.n	80034d4 <HAL_GPIO_Init+0x1ec>
 800347a:	2b12      	cmp	r3, #18
 800347c:	f200 80c3 	bhi.w	8003606 <HAL_GPIO_Init+0x31e>
 8003480:	a201      	add	r2, pc, #4	@ (adr r2, 8003488 <HAL_GPIO_Init+0x1a0>)
 8003482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003486:	bf00      	nop
 8003488:	080035b3 	.word	0x080035b3
 800348c:	080034dd 	.word	0x080034dd
 8003490:	0800352f 	.word	0x0800352f
 8003494:	08003601 	.word	0x08003601
 8003498:	08003607 	.word	0x08003607
 800349c:	08003607 	.word	0x08003607
 80034a0:	08003607 	.word	0x08003607
 80034a4:	08003607 	.word	0x08003607
 80034a8:	08003607 	.word	0x08003607
 80034ac:	08003607 	.word	0x08003607
 80034b0:	08003607 	.word	0x08003607
 80034b4:	08003607 	.word	0x08003607
 80034b8:	08003607 	.word	0x08003607
 80034bc:	08003607 	.word	0x08003607
 80034c0:	08003607 	.word	0x08003607
 80034c4:	08003607 	.word	0x08003607
 80034c8:	08003607 	.word	0x08003607
 80034cc:	08003505 	.word	0x08003505
 80034d0:	08003589 	.word	0x08003589
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <HAL_GPIO_Init+0x288>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d06b      	beq.n	80035b2 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80034da:	e094      	b.n	8003606 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d00b      	beq.n	80034fc <HAL_GPIO_Init+0x214>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d007      	beq.n	80034fc <HAL_GPIO_Init+0x214>
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d003      	beq.n	80034fc <HAL_GPIO_Init+0x214>
 80034f4:	21d5      	movs	r1, #213	@ 0xd5
 80034f6:	481d      	ldr	r0, [pc, #116]	@ (800356c <HAL_GPIO_Init+0x284>)
 80034f8:	f7fd fbb0 	bl	8000c5c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	623b      	str	r3, [r7, #32]
          break;
 8003502:	e081      	b.n	8003608 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d00b      	beq.n	8003524 <HAL_GPIO_Init+0x23c>
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d007      	beq.n	8003524 <HAL_GPIO_Init+0x23c>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x23c>
 800351c:	21dc      	movs	r1, #220	@ 0xdc
 800351e:	4813      	ldr	r0, [pc, #76]	@ (800356c <HAL_GPIO_Init+0x284>)
 8003520:	f7fd fb9c 	bl	8000c5c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	3304      	adds	r3, #4
 800352a:	623b      	str	r3, [r7, #32]
          break;
 800352c:	e06c      	b.n	8003608 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	2b02      	cmp	r3, #2
 8003534:	d00b      	beq.n	800354e <HAL_GPIO_Init+0x266>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d007      	beq.n	800354e <HAL_GPIO_Init+0x266>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x266>
 8003546:	21e3      	movs	r1, #227	@ 0xe3
 8003548:	4808      	ldr	r0, [pc, #32]	@ (800356c <HAL_GPIO_Init+0x284>)
 800354a:	f7fd fb87 	bl	8000c5c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	3308      	adds	r3, #8
 8003554:	623b      	str	r3, [r7, #32]
          break;
 8003556:	e057      	b.n	8003608 <HAL_GPIO_Init+0x320>
 8003558:	40010800 	.word	0x40010800
 800355c:	40010c00 	.word	0x40010c00
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	40011800 	.word	0x40011800
 800356c:	080073e8 	.word	0x080073e8
 8003570:	10110000 	.word	0x10110000
 8003574:	10210000 	.word	0x10210000
 8003578:	10310000 	.word	0x10310000
 800357c:	10120000 	.word	0x10120000
 8003580:	10220000 	.word	0x10220000
 8003584:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	2b02      	cmp	r3, #2
 800358e:	d00b      	beq.n	80035a8 <HAL_GPIO_Init+0x2c0>
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d007      	beq.n	80035a8 <HAL_GPIO_Init+0x2c0>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b03      	cmp	r3, #3
 800359e:	d003      	beq.n	80035a8 <HAL_GPIO_Init+0x2c0>
 80035a0:	21ea      	movs	r1, #234	@ 0xea
 80035a2:	4880      	ldr	r0, [pc, #512]	@ (80037a4 <HAL_GPIO_Init+0x4bc>)
 80035a4:	f7fd fb5a 	bl	8000c5c <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	330c      	adds	r3, #12
 80035ae:	623b      	str	r3, [r7, #32]
          break;
 80035b0:	e02a      	b.n	8003608 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_GPIO_Init+0x2ea>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d007      	beq.n	80035d2 <HAL_GPIO_Init+0x2ea>
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d003      	beq.n	80035d2 <HAL_GPIO_Init+0x2ea>
 80035ca:	21f7      	movs	r1, #247	@ 0xf7
 80035cc:	4875      	ldr	r0, [pc, #468]	@ (80037a4 <HAL_GPIO_Init+0x4bc>)
 80035ce:	f7fd fb45 	bl	8000c5c <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80035da:	2304      	movs	r3, #4
 80035dc:	623b      	str	r3, [r7, #32]
          break;
 80035de:	e013      	b.n	8003608 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035e8:	2308      	movs	r3, #8
 80035ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	611a      	str	r2, [r3, #16]
          break;
 80035f2:	e009      	b.n	8003608 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80035f4:	2308      	movs	r3, #8
 80035f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	615a      	str	r2, [r3, #20]
          break;
 80035fe:	e003      	b.n	8003608 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003600:	2300      	movs	r3, #0
 8003602:	623b      	str	r3, [r7, #32]
          break;
 8003604:	e000      	b.n	8003608 <HAL_GPIO_Init+0x320>
          break;
 8003606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	2bff      	cmp	r3, #255	@ 0xff
 800360c:	d801      	bhi.n	8003612 <HAL_GPIO_Init+0x32a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	e001      	b.n	8003616 <HAL_GPIO_Init+0x32e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	3304      	adds	r3, #4
 8003616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2bff      	cmp	r3, #255	@ 0xff
 800361c:	d802      	bhi.n	8003624 <HAL_GPIO_Init+0x33c>
 800361e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	e002      	b.n	800362a <HAL_GPIO_Init+0x342>
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	3b08      	subs	r3, #8
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	210f      	movs	r1, #15
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	43db      	mvns	r3, r3
 800363a:	401a      	ands	r2, r3
 800363c:	6a39      	ldr	r1, [r7, #32]
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	431a      	orrs	r2, r3
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	f000 8096 	beq.w	8003784 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003658:	4b53      	ldr	r3, [pc, #332]	@ (80037a8 <HAL_GPIO_Init+0x4c0>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	4a52      	ldr	r2, [pc, #328]	@ (80037a8 <HAL_GPIO_Init+0x4c0>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6193      	str	r3, [r2, #24]
 8003664:	4b50      	ldr	r3, [pc, #320]	@ (80037a8 <HAL_GPIO_Init+0x4c0>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003670:	4a4e      	ldr	r2, [pc, #312]	@ (80037ac <HAL_GPIO_Init+0x4c4>)
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	089b      	lsrs	r3, r3, #2
 8003676:	3302      	adds	r3, #2
 8003678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	220f      	movs	r2, #15
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	43db      	mvns	r3, r3
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4013      	ands	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a46      	ldr	r2, [pc, #280]	@ (80037b0 <HAL_GPIO_Init+0x4c8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d013      	beq.n	80036c4 <HAL_GPIO_Init+0x3dc>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a45      	ldr	r2, [pc, #276]	@ (80037b4 <HAL_GPIO_Init+0x4cc>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00d      	beq.n	80036c0 <HAL_GPIO_Init+0x3d8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a44      	ldr	r2, [pc, #272]	@ (80037b8 <HAL_GPIO_Init+0x4d0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d007      	beq.n	80036bc <HAL_GPIO_Init+0x3d4>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a43      	ldr	r2, [pc, #268]	@ (80037bc <HAL_GPIO_Init+0x4d4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_GPIO_Init+0x3d0>
 80036b4:	2303      	movs	r3, #3
 80036b6:	e006      	b.n	80036c6 <HAL_GPIO_Init+0x3de>
 80036b8:	2304      	movs	r3, #4
 80036ba:	e004      	b.n	80036c6 <HAL_GPIO_Init+0x3de>
 80036bc:	2302      	movs	r3, #2
 80036be:	e002      	b.n	80036c6 <HAL_GPIO_Init+0x3de>
 80036c0:	2301      	movs	r3, #1
 80036c2:	e000      	b.n	80036c6 <HAL_GPIO_Init+0x3de>
 80036c4:	2300      	movs	r3, #0
 80036c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036c8:	f002 0203 	and.w	r2, r2, #3
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	4093      	lsls	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80036d6:	4935      	ldr	r1, [pc, #212]	@ (80037ac <HAL_GPIO_Init+0x4c4>)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	089b      	lsrs	r3, r3, #2
 80036dc:	3302      	adds	r3, #2
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d006      	beq.n	80036fe <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036f0:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	4932      	ldr	r1, [pc, #200]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	608b      	str	r3, [r1, #8]
 80036fc:	e006      	b.n	800370c <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	43db      	mvns	r3, r3
 8003706:	492e      	ldr	r1, [pc, #184]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003708:	4013      	ands	r3, r2
 800370a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d006      	beq.n	8003726 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003718:	4b29      	ldr	r3, [pc, #164]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4928      	ldr	r1, [pc, #160]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4313      	orrs	r3, r2
 8003722:	60cb      	str	r3, [r1, #12]
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003726:	4b26      	ldr	r3, [pc, #152]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003728:	68da      	ldr	r2, [r3, #12]
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	43db      	mvns	r3, r3
 800372e:	4924      	ldr	r1, [pc, #144]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003730:	4013      	ands	r3, r2
 8003732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003740:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	491e      	ldr	r1, [pc, #120]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
 800374c:	e006      	b.n	800375c <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800374e:	4b1c      	ldr	r3, [pc, #112]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	491a      	ldr	r1, [pc, #104]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003758:	4013      	ands	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	4914      	ldr	r1, [pc, #80]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	e006      	b.n	8003784 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	43db      	mvns	r3, r3
 800377e:	4910      	ldr	r1, [pc, #64]	@ (80037c0 <HAL_GPIO_Init+0x4d8>)
 8003780:	4013      	ands	r3, r2
 8003782:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	3301      	adds	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	fa22 f303 	lsr.w	r3, r2, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	f47f ae1d 	bne.w	80033d4 <HAL_GPIO_Init+0xec>
  }
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	3728      	adds	r7, #40	@ 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	080073e8 	.word	0x080073e8
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40010000 	.word	0x40010000
 80037b0:	40010800 	.word	0x40010800
 80037b4:	40010c00 	.word	0x40010c00
 80037b8:	40011000 	.word	0x40011000
 80037bc:	40011400 	.word	0x40011400
 80037c0:	40010400 	.word	0x40010400

080037c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	807b      	strh	r3, [r7, #2]
 80037d0:	4613      	mov	r3, r2
 80037d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80037d4:	887b      	ldrh	r3, [r7, #2]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d104      	bne.n	80037e4 <HAL_GPIO_WritePin+0x20>
 80037da:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 80037de:	480e      	ldr	r0, [pc, #56]	@ (8003818 <HAL_GPIO_WritePin+0x54>)
 80037e0:	f7fd fa3c 	bl	8000c5c <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80037e4:	787b      	ldrb	r3, [r7, #1]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d007      	beq.n	80037fa <HAL_GPIO_WritePin+0x36>
 80037ea:	787b      	ldrb	r3, [r7, #1]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d004      	beq.n	80037fa <HAL_GPIO_WritePin+0x36>
 80037f0:	f240 11d5 	movw	r1, #469	@ 0x1d5
 80037f4:	4808      	ldr	r0, [pc, #32]	@ (8003818 <HAL_GPIO_WritePin+0x54>)
 80037f6:	f7fd fa31 	bl	8000c5c <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80037fa:	787b      	ldrb	r3, [r7, #1]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003800:	887a      	ldrh	r2, [r7, #2]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003806:	e003      	b.n	8003810 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003808:	887b      	ldrh	r3, [r7, #2]
 800380a:	041a      	lsls	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	611a      	str	r2, [r3, #16]
}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	080073e8 	.word	0x080073e8

0800381c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003826:	4b08      	ldr	r3, [pc, #32]	@ (8003848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003828:	695a      	ldr	r2, [r3, #20]
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	4013      	ands	r3, r2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d006      	beq.n	8003840 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003832:	4a05      	ldr	r2, [pc, #20]	@ (8003848 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003834:	88fb      	ldrh	r3, [r7, #6]
 8003836:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003838:	88fb      	ldrh	r3, [r7, #6]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 f806 	bl	800384c <HAL_GPIO_EXTI_Callback>
  }
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40010400 	.word	0x40010400

0800384c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	4603      	mov	r3, r0
 8003854:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d101      	bne.n	8003872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e1b4      	b.n	8003bdc <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a9b      	ldr	r2, [pc, #620]	@ (8003ae4 <HAL_I2C_Init+0x284>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d009      	beq.n	8003890 <HAL_I2C_Init+0x30>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a99      	ldr	r2, [pc, #612]	@ (8003ae8 <HAL_I2C_Init+0x288>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d004      	beq.n	8003890 <HAL_I2C_Init+0x30>
 8003886:	f240 11db 	movw	r1, #475	@ 0x1db
 800388a:	4898      	ldr	r0, [pc, #608]	@ (8003aec <HAL_I2C_Init+0x28c>)
 800388c:	f7fd f9e6 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d004      	beq.n	80038a2 <HAL_I2C_Init+0x42>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	4a94      	ldr	r2, [pc, #592]	@ (8003af0 <HAL_I2C_Init+0x290>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d904      	bls.n	80038ac <HAL_I2C_Init+0x4c>
 80038a2:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 80038a6:	4891      	ldr	r0, [pc, #580]	@ (8003aec <HAL_I2C_Init+0x28c>)
 80038a8:	f7fd f9d8 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <HAL_I2C_Init+0x68>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038bc:	d004      	beq.n	80038c8 <HAL_I2C_Init+0x68>
 80038be:	f240 11dd 	movw	r1, #477	@ 0x1dd
 80038c2:	488a      	ldr	r0, [pc, #552]	@ (8003aec <HAL_I2C_Init+0x28c>)
 80038c4:	f7fd f9ca 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038d0:	d304      	bcc.n	80038dc <HAL_I2C_Init+0x7c>
 80038d2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80038d6:	4885      	ldr	r0, [pc, #532]	@ (8003aec <HAL_I2C_Init+0x28c>)
 80038d8:	f7fd f9c0 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e4:	d009      	beq.n	80038fa <HAL_I2C_Init+0x9a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80038ee:	d004      	beq.n	80038fa <HAL_I2C_Init+0x9a>
 80038f0:	f240 11df 	movw	r1, #479	@ 0x1df
 80038f4:	487d      	ldr	r0, [pc, #500]	@ (8003aec <HAL_I2C_Init+0x28c>)
 80038f6:	f7fd f9b1 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_I2C_Init+0xb4>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b01      	cmp	r3, #1
 8003908:	d004      	beq.n	8003914 <HAL_I2C_Init+0xb4>
 800390a:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800390e:	4877      	ldr	r0, [pc, #476]	@ (8003aec <HAL_I2C_Init+0x28c>)
 8003910:	f7fd f9a4 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_I2C_Init+0xca>
 8003920:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8003924:	4871      	ldr	r0, [pc, #452]	@ (8003aec <HAL_I2C_Init+0x28c>)
 8003926:	f7fd f999 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d008      	beq.n	8003944 <HAL_I2C_Init+0xe4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2b40      	cmp	r3, #64	@ 0x40
 8003938:	d004      	beq.n	8003944 <HAL_I2C_Init+0xe4>
 800393a:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800393e:	486b      	ldr	r0, [pc, #428]	@ (8003aec <HAL_I2C_Init+0x28c>)
 8003940:	f7fd f98c 	bl	8000c5c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6a1b      	ldr	r3, [r3, #32]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_I2C_Init+0xfe>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	2b80      	cmp	r3, #128	@ 0x80
 8003952:	d004      	beq.n	800395e <HAL_I2C_Init+0xfe>
 8003954:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8003958:	4864      	ldr	r0, [pc, #400]	@ (8003aec <HAL_I2C_Init+0x28c>)
 800395a:	f7fd f97f 	bl	8000c5c <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7fd f888 	bl	8000a88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2224      	movs	r2, #36	@ 0x24
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f022 0201 	bic.w	r2, r2, #1
 800398e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800399e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80039b0:	f000 fe76 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 80039b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	4a4e      	ldr	r2, [pc, #312]	@ (8003af4 <HAL_I2C_Init+0x294>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d807      	bhi.n	80039d0 <HAL_I2C_Init+0x170>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a4d      	ldr	r2, [pc, #308]	@ (8003af8 <HAL_I2C_Init+0x298>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	bf94      	ite	ls
 80039c8:	2301      	movls	r3, #1
 80039ca:	2300      	movhi	r3, #0
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	e006      	b.n	80039de <HAL_I2C_Init+0x17e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	@ (8003afc <HAL_I2C_Init+0x29c>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	bf94      	ite	ls
 80039d8:	2301      	movls	r3, #1
 80039da:	2300      	movhi	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e0fa      	b.n	8003bdc <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	4a45      	ldr	r2, [pc, #276]	@ (8003b00 <HAL_I2C_Init+0x2a0>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0c9b      	lsrs	r3, r3, #18
 80039f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	6a1b      	ldr	r3, [r3, #32]
 8003a0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	4a37      	ldr	r2, [pc, #220]	@ (8003af4 <HAL_I2C_Init+0x294>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d802      	bhi.n	8003a20 <HAL_I2C_Init+0x1c0>
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	3301      	adds	r3, #1
 8003a1e:	e009      	b.n	8003a34 <HAL_I2C_Init+0x1d4>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	4a36      	ldr	r2, [pc, #216]	@ (8003b04 <HAL_I2C_Init+0x2a4>)
 8003a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	3301      	adds	r3, #1
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	430b      	orrs	r3, r1
 8003a3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003a46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4929      	ldr	r1, [pc, #164]	@ (8003af4 <HAL_I2C_Init+0x294>)
 8003a50:	428b      	cmp	r3, r1
 8003a52:	d819      	bhi.n	8003a88 <HAL_I2C_Init+0x228>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	1e59      	subs	r1, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a62:	1c59      	adds	r1, r3, #1
 8003a64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003a68:	400b      	ands	r3, r1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <HAL_I2C_Init+0x224>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e59      	subs	r1, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a82:	e064      	b.n	8003b4e <HAL_I2C_Init+0x2ee>
 8003a84:	2304      	movs	r3, #4
 8003a86:	e062      	b.n	8003b4e <HAL_I2C_Init+0x2ee>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d111      	bne.n	8003ab4 <HAL_I2C_Init+0x254>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1e58      	subs	r0, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6859      	ldr	r1, [r3, #4]
 8003a98:	460b      	mov	r3, r1
 8003a9a:	005b      	lsls	r3, r3, #1
 8003a9c:	440b      	add	r3, r1
 8003a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e012      	b.n	8003ada <HAL_I2C_Init+0x27a>
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	1e58      	subs	r0, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6859      	ldr	r1, [r3, #4]
 8003abc:	460b      	mov	r3, r1
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	0099      	lsls	r1, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003aca:	3301      	adds	r3, #1
 8003acc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d014      	beq.n	8003b08 <HAL_I2C_Init+0x2a8>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e035      	b.n	8003b4e <HAL_I2C_Init+0x2ee>
 8003ae2:	bf00      	nop
 8003ae4:	40005400 	.word	0x40005400
 8003ae8:	40005800 	.word	0x40005800
 8003aec:	08007424 	.word	0x08007424
 8003af0:	00061a80 	.word	0x00061a80
 8003af4:	000186a0 	.word	0x000186a0
 8003af8:	001e847f 	.word	0x001e847f
 8003afc:	003d08ff 	.word	0x003d08ff
 8003b00:	431bde83 	.word	0x431bde83
 8003b04:	10624dd3 	.word	0x10624dd3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10e      	bne.n	8003b2e <HAL_I2C_Init+0x2ce>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	1e58      	subs	r0, r3, #1
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6859      	ldr	r1, [r3, #4]
 8003b18:	460b      	mov	r3, r1
 8003b1a:	005b      	lsls	r3, r3, #1
 8003b1c:	440b      	add	r3, r1
 8003b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b22:	3301      	adds	r3, #1
 8003b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b2c:	e00f      	b.n	8003b4e <HAL_I2C_Init+0x2ee>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e58      	subs	r0, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	460b      	mov	r3, r1
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	440b      	add	r3, r1
 8003b3c:	0099      	lsls	r1, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b44:	3301      	adds	r3, #1
 8003b46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b4a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	6809      	ldr	r1, [r1, #0]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	69da      	ldr	r2, [r3, #28]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003b7c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	6911      	ldr	r1, [r2, #16]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68d2      	ldr	r2, [r2, #12]
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	430b      	orrs	r3, r1
 8003b90:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d101      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e35a      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01c      	beq.n	8003c38 <HAL_RCC_OscConfig+0x54>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x54>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d110      	bne.n	8003c38 <HAL_RCC_OscConfig+0x54>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0308 	and.w	r3, r3, #8
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_RCC_OscConfig+0x54>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0304 	and.w	r3, r3, #4
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d104      	bne.n	8003c38 <HAL_RCC_OscConfig+0x54>
 8003c2e:	f240 1165 	movw	r1, #357	@ 0x165
 8003c32:	488f      	ldr	r0, [pc, #572]	@ (8003e70 <HAL_RCC_OscConfig+0x28c>)
 8003c34:	f7fd f812 	bl	8000c5c <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0301 	and.w	r3, r3, #1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 809a 	beq.w	8003d7a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00e      	beq.n	8003c6c <HAL_RCC_OscConfig+0x88>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c56:	d009      	beq.n	8003c6c <HAL_RCC_OscConfig+0x88>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c60:	d004      	beq.n	8003c6c <HAL_RCC_OscConfig+0x88>
 8003c62:	f240 116b 	movw	r1, #363	@ 0x16b
 8003c66:	4882      	ldr	r0, [pc, #520]	@ (8003e70 <HAL_RCC_OscConfig+0x28c>)
 8003c68:	f7fc fff8 	bl	8000c5c <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c6c:	4b81      	ldr	r3, [pc, #516]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 030c 	and.w	r3, r3, #12
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d00c      	beq.n	8003c92 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c78:	4b7e      	ldr	r3, [pc, #504]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f003 030c 	and.w	r3, r3, #12
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d112      	bne.n	8003caa <HAL_RCC_OscConfig+0xc6>
 8003c84:	4b7b      	ldr	r3, [pc, #492]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c90:	d10b      	bne.n	8003caa <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c92:	4b78      	ldr	r3, [pc, #480]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d06c      	beq.n	8003d78 <HAL_RCC_OscConfig+0x194>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d168      	bne.n	8003d78 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e300      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cb2:	d106      	bne.n	8003cc2 <HAL_RCC_OscConfig+0xde>
 8003cb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a6e      	ldr	r2, [pc, #440]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	6013      	str	r3, [r2, #0]
 8003cc0:	e02e      	b.n	8003d20 <HAL_RCC_OscConfig+0x13c>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x100>
 8003cca:	4b6a      	ldr	r3, [pc, #424]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a69      	ldr	r2, [pc, #420]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	4b67      	ldr	r3, [pc, #412]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a66      	ldr	r2, [pc, #408]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ce0:	6013      	str	r3, [r2, #0]
 8003ce2:	e01d      	b.n	8003d20 <HAL_RCC_OscConfig+0x13c>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cec:	d10c      	bne.n	8003d08 <HAL_RCC_OscConfig+0x124>
 8003cee:	4b61      	ldr	r3, [pc, #388]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a60      	ldr	r2, [pc, #384]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cf4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	4b5e      	ldr	r3, [pc, #376]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e00b      	b.n	8003d20 <HAL_RCC_OscConfig+0x13c>
 8003d08:	4b5a      	ldr	r3, [pc, #360]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a59      	ldr	r2, [pc, #356]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d12:	6013      	str	r3, [r2, #0]
 8003d14:	4b57      	ldr	r3, [pc, #348]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a56      	ldr	r2, [pc, #344]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d013      	beq.n	8003d50 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d28:	f7fd fc96 	bl	8001658 <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d30:	f7fd fc92 	bl	8001658 <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b64      	cmp	r3, #100	@ 0x64
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e2b4      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d42:	4b4c      	ldr	r3, [pc, #304]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x14c>
 8003d4e:	e014      	b.n	8003d7a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d50:	f7fd fc82 	bl	8001658 <HAL_GetTick>
 8003d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d58:	f7fd fc7e 	bl	8001658 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b64      	cmp	r3, #100	@ 0x64
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e2a0      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d6a:	4b42      	ldr	r3, [pc, #264]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x174>
 8003d76:	e000      	b.n	8003d7a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f000 8080 	beq.w	8003e88 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1be>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d004      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1be>
 8003d98:	f240 119f 	movw	r1, #415	@ 0x19f
 8003d9c:	4834      	ldr	r0, [pc, #208]	@ (8003e70 <HAL_RCC_OscConfig+0x28c>)
 8003d9e:	f7fc ff5d 	bl	8000c5c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	695b      	ldr	r3, [r3, #20]
 8003da6:	2b1f      	cmp	r3, #31
 8003da8:	d904      	bls.n	8003db4 <HAL_RCC_OscConfig+0x1d0>
 8003daa:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8003dae:	4830      	ldr	r0, [pc, #192]	@ (8003e70 <HAL_RCC_OscConfig+0x28c>)
 8003db0:	f7fc ff54 	bl	8000c5c <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003db4:	4b2f      	ldr	r3, [pc, #188]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	f003 030c 	and.w	r3, r3, #12
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00b      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003dc0:	4b2c      	ldr	r3, [pc, #176]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 030c 	and.w	r3, r3, #12
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d11c      	bne.n	8003e06 <HAL_RCC_OscConfig+0x222>
 8003dcc:	4b29      	ldr	r3, [pc, #164]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d116      	bne.n	8003e06 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd8:	4b26      	ldr	r3, [pc, #152]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0302 	and.w	r3, r3, #2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x20c>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e25d      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df0:	4b20      	ldr	r3, [pc, #128]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	491d      	ldr	r1, [pc, #116]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e04:	e040      	b.n	8003e88 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d020      	beq.n	8003e50 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8003e78 <HAL_RCC_OscConfig+0x294>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7fd fc20 	bl	8001658 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e1c:	f7fd fc1c 	bl	8001658 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e23e      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2e:	4b11      	ldr	r3, [pc, #68]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	00db      	lsls	r3, r3, #3
 8003e48:	490a      	ldr	r1, [pc, #40]	@ (8003e74 <HAL_RCC_OscConfig+0x290>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	600b      	str	r3, [r1, #0]
 8003e4e:	e01b      	b.n	8003e88 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_OscConfig+0x294>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e56:	f7fd fbff 	bl	8001658 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e5e:	f7fd fbfb 	bl	8001658 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d907      	bls.n	8003e7c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e21d      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
 8003e70:	0800745c 	.word	0x0800745c
 8003e74:	40021000 	.word	0x40021000
 8003e78:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7c:	4b7d      	ldr	r3, [pc, #500]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0302 	and.w	r3, r3, #2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ea      	bne.n	8003e5e <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d040      	beq.n	8003f16 <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d008      	beq.n	8003eae <HAL_RCC_OscConfig+0x2ca>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	699b      	ldr	r3, [r3, #24]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d004      	beq.n	8003eae <HAL_RCC_OscConfig+0x2ca>
 8003ea4:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8003ea8:	4873      	ldr	r0, [pc, #460]	@ (8004078 <HAL_RCC_OscConfig+0x494>)
 8003eaa:	f7fc fed7 	bl	8000c5c <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d019      	beq.n	8003eea <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b71      	ldr	r3, [pc, #452]	@ (800407c <HAL_RCC_OscConfig+0x498>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fbcc 	bl	8001658 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fd fbc8 	bl	8001658 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e1ea      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b67      	ldr	r3, [pc, #412]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003ee2:	2001      	movs	r0, #1
 8003ee4:	f000 fbf0 	bl	80046c8 <RCC_Delay>
 8003ee8:	e015      	b.n	8003f16 <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eea:	4b64      	ldr	r3, [pc, #400]	@ (800407c <HAL_RCC_OscConfig+0x498>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef0:	f7fd fbb2 	bl	8001658 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef8:	f7fd fbae 	bl	8001658 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e1d0      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f0a:	4b5a      	ldr	r3, [pc, #360]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f000 80bf 	beq.w	80040a2 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f24:	2300      	movs	r3, #0
 8003f26:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00c      	beq.n	8003f4a <HAL_RCC_OscConfig+0x366>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d008      	beq.n	8003f4a <HAL_RCC_OscConfig+0x366>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	2b05      	cmp	r3, #5
 8003f3e:	d004      	beq.n	8003f4a <HAL_RCC_OscConfig+0x366>
 8003f40:	f240 210f 	movw	r1, #527	@ 0x20f
 8003f44:	484c      	ldr	r0, [pc, #304]	@ (8004078 <HAL_RCC_OscConfig+0x494>)
 8003f46:	f7fc fe89 	bl	8000c5c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10d      	bne.n	8003f72 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f56:	4b47      	ldr	r3, [pc, #284]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	4a46      	ldr	r2, [pc, #280]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f60:	61d3      	str	r3, [r2, #28]
 8003f62:	4b44      	ldr	r3, [pc, #272]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b43      	ldr	r3, [pc, #268]	@ (8004080 <HAL_RCC_OscConfig+0x49c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b40      	ldr	r3, [pc, #256]	@ (8004080 <HAL_RCC_OscConfig+0x49c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a3f      	ldr	r2, [pc, #252]	@ (8004080 <HAL_RCC_OscConfig+0x49c>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fd fb65 	bl	8001658 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fd fb61 	bl	8001658 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b64      	cmp	r3, #100	@ 0x64
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e183      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b36      	ldr	r3, [pc, #216]	@ (8004080 <HAL_RCC_OscConfig+0x49c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x3e2>
 8003fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6213      	str	r3, [r2, #32]
 8003fc4:	e02d      	b.n	8004022 <HAL_RCC_OscConfig+0x43e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x404>
 8003fce:	4b29      	ldr	r3, [pc, #164]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fd0:	6a1b      	ldr	r3, [r3, #32]
 8003fd2:	4a28      	ldr	r2, [pc, #160]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	6213      	str	r3, [r2, #32]
 8003fda:	4b26      	ldr	r3, [pc, #152]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	4a25      	ldr	r2, [pc, #148]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003fe0:	f023 0304 	bic.w	r3, r3, #4
 8003fe4:	6213      	str	r3, [r2, #32]
 8003fe6:	e01c      	b.n	8004022 <HAL_RCC_OscConfig+0x43e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	2b05      	cmp	r3, #5
 8003fee:	d10c      	bne.n	800400a <HAL_RCC_OscConfig+0x426>
 8003ff0:	4b20      	ldr	r3, [pc, #128]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	6213      	str	r3, [r2, #32]
 8003ffc:	4b1d      	ldr	r3, [pc, #116]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	4a1c      	ldr	r2, [pc, #112]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	6213      	str	r3, [r2, #32]
 8004008:	e00b      	b.n	8004022 <HAL_RCC_OscConfig+0x43e>
 800400a:	4b1a      	ldr	r3, [pc, #104]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 800400c:	6a1b      	ldr	r3, [r3, #32]
 800400e:	4a19      	ldr	r2, [pc, #100]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8004010:	f023 0301 	bic.w	r3, r3, #1
 8004014:	6213      	str	r3, [r2, #32]
 8004016:	4b17      	ldr	r3, [pc, #92]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 8004018:	6a1b      	ldr	r3, [r3, #32]
 800401a:	4a16      	ldr	r2, [pc, #88]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d015      	beq.n	8004056 <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402a:	f7fd fb15 	bl	8001658 <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004030:	e00a      	b.n	8004048 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004032:	f7fd fb11 	bl	8001658 <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004040:	4293      	cmp	r3, r2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e131      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	4b0a      	ldr	r3, [pc, #40]	@ (8004074 <HAL_RCC_OscConfig+0x490>)
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0ee      	beq.n	8004032 <HAL_RCC_OscConfig+0x44e>
 8004054:	e01c      	b.n	8004090 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004056:	f7fd faff 	bl	8001658 <HAL_GetTick>
 800405a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800405c:	e012      	b.n	8004084 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800405e:	f7fd fafb 	bl	8001658 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800406c:	4293      	cmp	r3, r2
 800406e:	d909      	bls.n	8004084 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e11b      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
 8004074:	40021000 	.word	0x40021000
 8004078:	0800745c 	.word	0x0800745c
 800407c:	42420480 	.word	0x42420480
 8004080:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004084:	4b8b      	ldr	r3, [pc, #556]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1e6      	bne.n	800405e <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004090:	7dfb      	ldrb	r3, [r7, #23]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d105      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004096:	4b87      	ldr	r3, [pc, #540]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004098:	69db      	ldr	r3, [r3, #28]
 800409a:	4a86      	ldr	r2, [pc, #536]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 800409c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040a0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b01      	cmp	r3, #1
 80040b0:	d008      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d004      	beq.n	80040c4 <HAL_RCC_OscConfig+0x4e0>
 80040ba:	f240 21ad 	movw	r1, #685	@ 0x2ad
 80040be:	487e      	ldr	r0, [pc, #504]	@ (80042b8 <HAL_RCC_OscConfig+0x6d4>)
 80040c0:	f7fc fdcc 	bl	8000c5c <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	f000 80ee 	beq.w	80042aa <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040ce:	4b79      	ldr	r3, [pc, #484]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f003 030c 	and.w	r3, r3, #12
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	f000 80ce 	beq.w	8004278 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	69db      	ldr	r3, [r3, #28]
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	f040 80b2 	bne.w	800424a <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a1b      	ldr	r3, [r3, #32]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d009      	beq.n	8004102 <HAL_RCC_OscConfig+0x51e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040f6:	d004      	beq.n	8004102 <HAL_RCC_OscConfig+0x51e>
 80040f8:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80040fc:	486e      	ldr	r0, [pc, #440]	@ (80042b8 <HAL_RCC_OscConfig+0x6d4>)
 80040fe:	f7fc fdad 	bl	8000c5c <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d04a      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800410e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004112:	d045      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800411c:	d040      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004122:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004126:	d03b      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004130:	d036      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800413a:	d031      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004140:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8004144:	d02c      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800414e:	d027      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004158:	d022      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800415e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8004162:	d01d      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800416c:	d018      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004172:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004176:	d013      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800417c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004180:	d00e      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004186:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800418a:	d009      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004190:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8004194:	d004      	beq.n	80041a0 <HAL_RCC_OscConfig+0x5bc>
 8004196:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800419a:	4847      	ldr	r0, [pc, #284]	@ (80042b8 <HAL_RCC_OscConfig+0x6d4>)
 800419c:	f7fc fd5e 	bl	8000c5c <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a0:	4b46      	ldr	r3, [pc, #280]	@ (80042bc <HAL_RCC_OscConfig+0x6d8>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a6:	f7fd fa57 	bl	8001658 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ac:	e008      	b.n	80041c0 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041ae:	f7fd fa53 	bl	8001658 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d901      	bls.n	80041c0 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e075      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c0:	4b3c      	ldr	r3, [pc, #240]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1f0      	bne.n	80041ae <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d4:	d116      	bne.n	8004204 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <HAL_RCC_OscConfig+0x60e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041e6:	d004      	beq.n	80041f2 <HAL_RCC_OscConfig+0x60e>
 80041e8:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80041ec:	4832      	ldr	r0, [pc, #200]	@ (80042b8 <HAL_RCC_OscConfig+0x6d4>)
 80041ee:	f7fc fd35 	bl	8000c5c <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80041f2:	4b30      	ldr	r3, [pc, #192]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	492d      	ldr	r1, [pc, #180]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004200:	4313      	orrs	r3, r2
 8004202:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004204:	4b2b      	ldr	r3, [pc, #172]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a19      	ldr	r1, [r3, #32]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	430b      	orrs	r3, r1
 8004216:	4927      	ldr	r1, [pc, #156]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004218:	4313      	orrs	r3, r2
 800421a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800421c:	4b27      	ldr	r3, [pc, #156]	@ (80042bc <HAL_RCC_OscConfig+0x6d8>)
 800421e:	2201      	movs	r2, #1
 8004220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004222:	f7fd fa19 	bl	8001658 <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800422a:	f7fd fa15 	bl	8001658 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e037      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800423c:	4b1d      	ldr	r3, [pc, #116]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x646>
 8004248:	e02f      	b.n	80042aa <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b1c      	ldr	r3, [pc, #112]	@ (80042bc <HAL_RCC_OscConfig+0x6d8>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004250:	f7fd fa02 	bl	8001658 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fd f9fe 	bl	8001658 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e020      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800426a:	4b12      	ldr	r3, [pc, #72]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x674>
 8004276:	e018      	b.n	80042aa <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69db      	ldr	r3, [r3, #28]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e013      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <HAL_RCC_OscConfig+0x6d0>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	429a      	cmp	r2, r3
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	0800745c 	.word	0x0800745c
 80042bc:	42420060 	.word	0x42420060

080042c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d101      	bne.n	80042d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e176      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d116      	bne.n	800430e <HAL_RCC_ClockConfig+0x4e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0302 	and.w	r3, r3, #2
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d110      	bne.n	800430e <HAL_RCC_ClockConfig+0x4e>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0304 	and.w	r3, r3, #4
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10a      	bne.n	800430e <HAL_RCC_ClockConfig+0x4e>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_RCC_ClockConfig+0x4e>
 8004304:	f240 3136 	movw	r1, #822	@ 0x336
 8004308:	4874      	ldr	r0, [pc, #464]	@ (80044dc <HAL_RCC_ClockConfig+0x21c>)
 800430a:	f7fc fca7 	bl	8000c5c <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCC_ClockConfig+0x6a>
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2b01      	cmp	r3, #1
 8004318:	d007      	beq.n	800432a <HAL_RCC_ClockConfig+0x6a>
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d004      	beq.n	800432a <HAL_RCC_ClockConfig+0x6a>
 8004320:	f240 3137 	movw	r1, #823	@ 0x337
 8004324:	486d      	ldr	r0, [pc, #436]	@ (80044dc <HAL_RCC_ClockConfig+0x21c>)
 8004326:	f7fc fc99 	bl	8000c5c <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800432a:	4b6d      	ldr	r3, [pc, #436]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0307 	and.w	r3, r3, #7
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d910      	bls.n	800435a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004338:	4b69      	ldr	r3, [pc, #420]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f023 0207 	bic.w	r2, r3, #7
 8004340:	4967      	ldr	r1, [pc, #412]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	4313      	orrs	r3, r2
 8004346:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004348:	4b65      	ldr	r3, [pc, #404]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	429a      	cmp	r2, r3
 8004354:	d001      	beq.n	800435a <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e133      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	2b00      	cmp	r3, #0
 8004364:	d049      	beq.n	80043fa <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b00      	cmp	r3, #0
 8004370:	d005      	beq.n	800437e <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004372:	4b5c      	ldr	r3, [pc, #368]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4a5b      	ldr	r2, [pc, #364]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 8004378:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800437c:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800438a:	4b56      	ldr	r3, [pc, #344]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	4a55      	ldr	r2, [pc, #340]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 8004390:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004394:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d024      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b80      	cmp	r3, #128	@ 0x80
 80043a4:	d020      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b90      	cmp	r3, #144	@ 0x90
 80043ac:	d01c      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80043b4:	d018      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2bb0      	cmp	r3, #176	@ 0xb0
 80043bc:	d014      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043c4:	d010      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	2bd0      	cmp	r3, #208	@ 0xd0
 80043cc:	d00c      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	2be0      	cmp	r3, #224	@ 0xe0
 80043d4:	d008      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	2bf0      	cmp	r3, #240	@ 0xf0
 80043dc:	d004      	beq.n	80043e8 <HAL_RCC_ClockConfig+0x128>
 80043de:	f240 315d 	movw	r1, #861	@ 0x35d
 80043e2:	483e      	ldr	r0, [pc, #248]	@ (80044dc <HAL_RCC_ClockConfig+0x21c>)
 80043e4:	f7fc fc3a 	bl	8000c5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e8:	4b3e      	ldr	r3, [pc, #248]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	493b      	ldr	r1, [pc, #236]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d051      	beq.n	80044aa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00c      	beq.n	8004428 <HAL_RCC_ClockConfig+0x168>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d008      	beq.n	8004428 <HAL_RCC_ClockConfig+0x168>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d004      	beq.n	8004428 <HAL_RCC_ClockConfig+0x168>
 800441e:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8004422:	482e      	ldr	r0, [pc, #184]	@ (80044dc <HAL_RCC_ClockConfig+0x21c>)
 8004424:	f7fc fc1a 	bl	8000c5c <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004430:	4b2c      	ldr	r3, [pc, #176]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d115      	bne.n	8004468 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e0c0      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d107      	bne.n	8004458 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004448:	4b26      	ldr	r3, [pc, #152]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d109      	bne.n	8004468 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0b4      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004458:	4b22      	ldr	r3, [pc, #136]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e0ac      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004468:	4b1e      	ldr	r3, [pc, #120]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 0203 	bic.w	r2, r3, #3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	491b      	ldr	r1, [pc, #108]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800447a:	f7fd f8ed 	bl	8001658 <HAL_GetTick>
 800447e:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004480:	e00a      	b.n	8004498 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004482:	f7fd f8e9 	bl	8001658 <HAL_GetTick>
 8004486:	4602      	mov	r2, r0
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1ad3      	subs	r3, r2, r3
 800448c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004490:	4293      	cmp	r3, r2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e094      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004498:	4b12      	ldr	r3, [pc, #72]	@ (80044e4 <HAL_RCC_ClockConfig+0x224>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f003 020c 	and.w	r2, r3, #12
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d1eb      	bne.n	8004482 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044aa:	4b0d      	ldr	r3, [pc, #52]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0307 	and.w	r3, r3, #7
 80044b2:	683a      	ldr	r2, [r7, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d217      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b8:	4b09      	ldr	r3, [pc, #36]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f023 0207 	bic.w	r2, r3, #7
 80044c0:	4907      	ldr	r1, [pc, #28]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c8:	4b05      	ldr	r3, [pc, #20]	@ (80044e0 <HAL_RCC_ClockConfig+0x220>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0307 	and.w	r3, r3, #7
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d008      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e073      	b.n	80045c2 <HAL_RCC_ClockConfig+0x302>
 80044da:	bf00      	nop
 80044dc:	0800745c 	.word	0x0800745c
 80044e0:	40022000 	.word	0x40022000
 80044e4:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d025      	beq.n	8004540 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d018      	beq.n	800452e <HAL_RCC_ClockConfig+0x26e>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	d013      	beq.n	800452e <HAL_RCC_ClockConfig+0x26e>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 800450e:	d00e      	beq.n	800452e <HAL_RCC_ClockConfig+0x26e>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004518:	d009      	beq.n	800452e <HAL_RCC_ClockConfig+0x26e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004522:	d004      	beq.n	800452e <HAL_RCC_ClockConfig+0x26e>
 8004524:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8004528:	4828      	ldr	r0, [pc, #160]	@ (80045cc <HAL_RCC_ClockConfig+0x30c>)
 800452a:	f7fc fb97 	bl	8000c5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452e:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_RCC_ClockConfig+0x310>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	4925      	ldr	r1, [pc, #148]	@ (80045d0 <HAL_RCC_ClockConfig+0x310>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0308 	and.w	r3, r3, #8
 8004548:	2b00      	cmp	r3, #0
 800454a:	d026      	beq.n	800459a <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d018      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2c6>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800455c:	d013      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2c6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004566:	d00e      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2c6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004570:	d009      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2c6>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800457a:	d004      	beq.n	8004586 <HAL_RCC_ClockConfig+0x2c6>
 800457c:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8004580:	4812      	ldr	r0, [pc, #72]	@ (80045cc <HAL_RCC_ClockConfig+0x30c>)
 8004582:	f7fc fb6b 	bl	8000c5c <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004586:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCC_ClockConfig+0x310>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	@ (80045d0 <HAL_RCC_ClockConfig+0x310>)
 8004596:	4313      	orrs	r3, r2
 8004598:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	@ (80045d0 <HAL_RCC_ClockConfig+0x310>)
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490a      	ldr	r1, [pc, #40]	@ (80045d4 <HAL_RCC_ClockConfig+0x314>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	@ (80045d8 <HAL_RCC_ClockConfig+0x318>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_RCC_ClockConfig+0x31c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd f80a 	bl	80015d4 <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	0800745c 	.word	0x0800745c
 80045d0:	40021000 	.word	0x40021000
 80045d4:	0800757c 	.word	0x0800757c
 80045d8:	20000000 	.word	0x20000000
 80045dc:	20000004 	.word	0x20000004

080045e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
 80045ee:	2300      	movs	r3, #0
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	2300      	movs	r3, #0
 80045f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045fa:	4b1e      	ldr	r3, [pc, #120]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x94>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 030c 	and.w	r3, r3, #12
 8004606:	2b04      	cmp	r3, #4
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x30>
 800460a:	2b08      	cmp	r3, #8
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x36>
 800460e:	e027      	b.n	8004660 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004610:	4b19      	ldr	r3, [pc, #100]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x98>)
 8004612:	613b      	str	r3, [r7, #16]
      break;
 8004614:	e027      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	0c9b      	lsrs	r3, r3, #18
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a17      	ldr	r2, [pc, #92]	@ (800467c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d010      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800462e:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <HAL_RCC_GetSysClockFreq+0x94>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	0c5b      	lsrs	r3, r3, #17
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	4a11      	ldr	r2, [pc, #68]	@ (8004680 <HAL_RCC_GetSysClockFreq+0xa0>)
 800463a:	5cd3      	ldrb	r3, [r2, r3]
 800463c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a0d      	ldr	r2, [pc, #52]	@ (8004678 <HAL_RCC_GetSysClockFreq+0x98>)
 8004642:	fb03 f202 	mul.w	r2, r3, r2
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	fbb2 f3f3 	udiv	r3, r2, r3
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	e004      	b.n	800465a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a0c      	ldr	r2, [pc, #48]	@ (8004684 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004654:	fb02 f303 	mul.w	r3, r2, r3
 8004658:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	613b      	str	r3, [r7, #16]
      break;
 800465e:	e002      	b.n	8004666 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004660:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_GetSysClockFreq+0xa8>)
 8004662:	613b      	str	r3, [r7, #16]
      break;
 8004664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004666:	693b      	ldr	r3, [r7, #16]
}
 8004668:	4618      	mov	r0, r3
 800466a:	371c      	adds	r7, #28
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000
 8004678:	00f42400 	.word	0x00f42400
 800467c:	08007594 	.word	0x08007594
 8004680:	080075a4 	.word	0x080075a4
 8004684:	003d0900 	.word	0x003d0900
 8004688:	007a1200 	.word	0x007a1200

0800468c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b02      	ldr	r3, [pc, #8]	@ (800469c <HAL_RCC_GetHCLKFreq+0x10>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	20000000 	.word	0x20000000

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff2 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	@ (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	@ (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	0800758c 	.word	0x0800758c

080046c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b085      	sub	sp, #20
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046d0:	4b0a      	ldr	r3, [pc, #40]	@ (80046fc <RCC_Delay+0x34>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a0a      	ldr	r2, [pc, #40]	@ (8004700 <RCC_Delay+0x38>)
 80046d6:	fba2 2303 	umull	r2, r3, r2, r3
 80046da:	0a5b      	lsrs	r3, r3, #9
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80046e4:	bf00      	nop
  }
  while (Delay --);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1e5a      	subs	r2, r3, #1
 80046ea:	60fa      	str	r2, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d1f9      	bne.n	80046e4 <RCC_Delay+0x1c>
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bc80      	pop	{r7}
 80046fa:	4770      	bx	lr
 80046fc:	20000000 	.word	0x20000000
 8004700:	10624dd3 	.word	0x10624dd3

08004704 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b086      	sub	sp, #24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10f      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0302 	and.w	r3, r3, #2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0310 	and.w	r3, r3, #16
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8004738:	216a      	movs	r1, #106	@ 0x6a
 800473a:	4873      	ldr	r0, [pc, #460]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800473c:	f7fc fa8e 	bl	8000c5c <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8095 	beq.w	8004878 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 800474e:	2300      	movs	r3, #0
 8004750:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d012      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004762:	d00d      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800476c:	d008      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004776:	d003      	beq.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004778:	2172      	movs	r1, #114	@ 0x72
 800477a:	4863      	ldr	r0, [pc, #396]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 800477c:	f7fc fa6e 	bl	8000c5c <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004780:	4b62      	ldr	r3, [pc, #392]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10d      	bne.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478c:	4b5f      	ldr	r3, [pc, #380]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800478e:	69db      	ldr	r3, [r3, #28]
 8004790:	4a5e      	ldr	r2, [pc, #376]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004796:	61d3      	str	r3, [r2, #28]
 8004798:	4b5c      	ldr	r3, [pc, #368]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a8:	4b59      	ldr	r3, [pc, #356]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d118      	bne.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047b4:	4b56      	ldr	r3, [pc, #344]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a55      	ldr	r2, [pc, #340]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80047ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c0:	f7fc ff4a 	bl	8001658 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c6:	e008      	b.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c8:	f7fc ff46 	bl	8001658 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	@ 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e092      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047da:	4b4d      	ldr	r3, [pc, #308]	@ (8004910 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047e6:	4b49      	ldr	r3, [pc, #292]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80047e8:	6a1b      	ldr	r3, [r3, #32]
 80047ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d02e      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x150>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	429a      	cmp	r2, r3
 8004802:	d027      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004804:	4b41      	ldr	r3, [pc, #260]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800480e:	4b41      	ldr	r3, [pc, #260]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004810:	2201      	movs	r2, #1
 8004812:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004814:	4b3f      	ldr	r3, [pc, #252]	@ (8004914 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800481a:	4a3c      	ldr	r2, [pc, #240]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d014      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800482a:	f7fc ff15 	bl	8001658 <HAL_GetTick>
 800482e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	e00a      	b.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004832:	f7fc ff11 	bl	8001658 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e05b      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004848:	4b30      	ldr	r3, [pc, #192]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800484a:	6a1b      	ldr	r3, [r3, #32]
 800484c:	f003 0302 	and.w	r3, r3, #2
 8004850:	2b00      	cmp	r3, #0
 8004852:	d0ee      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004854:	4b2d      	ldr	r3, [pc, #180]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	492a      	ldr	r1, [pc, #168]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004862:	4313      	orrs	r3, r2
 8004864:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004866:	7dfb      	ldrb	r3, [r7, #23]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d105      	bne.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486c:	4b27      	ldr	r3, [pc, #156]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	4a26      	ldr	r2, [pc, #152]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8004872:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004876:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01f      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d012      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004894:	d00d      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800489e:	d008      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80048a8:	d003      	beq.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80048aa:	21b7      	movs	r1, #183	@ 0xb7
 80048ac:	4816      	ldr	r0, [pc, #88]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80048ae:	f7fc f9d5 	bl	8000c5c <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048b2:	4b16      	ldr	r3, [pc, #88]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	4913      	ldr	r1, [pc, #76]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d016      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80048d8:	d008      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d004      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048e2:	f240 1113 	movw	r1, #275	@ 0x113
 80048e6:	4808      	ldr	r0, [pc, #32]	@ (8004908 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80048e8:	f7fc f9b8 	bl	8000c5c <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048ec:	4b07      	ldr	r3, [pc, #28]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4904      	ldr	r1, [pc, #16]	@ (800490c <HAL_RCCEx_PeriphCLKConfig+0x208>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3718      	adds	r7, #24
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	08007494 	.word	0x08007494
 800490c:	40021000 	.word	0x40021000
 8004910:	40007000 	.word	0x40007000
 8004914:	42420440 	.word	0x42420440

08004918 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e16d      	b.n	8004c06 <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6b      	ldr	r2, [pc, #428]	@ (8004adc <HAL_SPI_Init+0x1c4>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d009      	beq.n	8004948 <HAL_SPI_Init+0x30>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a69      	ldr	r2, [pc, #420]	@ (8004ae0 <HAL_SPI_Init+0x1c8>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d004      	beq.n	8004948 <HAL_SPI_Init+0x30>
 800493e:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8004942:	4868      	ldr	r0, [pc, #416]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004944:	f7fc f98a 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d009      	beq.n	8004964 <HAL_SPI_Init+0x4c>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004958:	d004      	beq.n	8004964 <HAL_SPI_Init+0x4c>
 800495a:	f240 1157 	movw	r1, #343	@ 0x157
 800495e:	4861      	ldr	r0, [pc, #388]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004960:	f7fc f97c 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00e      	beq.n	800498a <HAL_SPI_Init+0x72>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	d009      	beq.n	800498a <HAL_SPI_Init+0x72>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497e:	d004      	beq.n	800498a <HAL_SPI_Init+0x72>
 8004980:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8004984:	4857      	ldr	r0, [pc, #348]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004986:	f7fc f969 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004992:	d008      	beq.n	80049a6 <HAL_SPI_Init+0x8e>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d004      	beq.n	80049a6 <HAL_SPI_Init+0x8e>
 800499c:	f240 1159 	movw	r1, #345	@ 0x159
 80049a0:	4850      	ldr	r0, [pc, #320]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 80049a2:	f7fc f95b 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049ae:	d00d      	beq.n	80049cc <HAL_SPI_Init+0xb4>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_SPI_Init+0xb4>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80049c0:	d004      	beq.n	80049cc <HAL_SPI_Init+0xb4>
 80049c2:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 80049c6:	4847      	ldr	r0, [pc, #284]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 80049c8:	f7fc f948 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	69db      	ldr	r3, [r3, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d020      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69db      	ldr	r3, [r3, #28]
 80049d8:	2b08      	cmp	r3, #8
 80049da:	d01c      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
 80049e0:	2b10      	cmp	r3, #16
 80049e2:	d018      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	2b18      	cmp	r3, #24
 80049ea:	d014      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	d010      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	69db      	ldr	r3, [r3, #28]
 80049f8:	2b28      	cmp	r3, #40	@ 0x28
 80049fa:	d00c      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	69db      	ldr	r3, [r3, #28]
 8004a00:	2b30      	cmp	r3, #48	@ 0x30
 8004a02:	d008      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b38      	cmp	r3, #56	@ 0x38
 8004a0a:	d004      	beq.n	8004a16 <HAL_SPI_Init+0xfe>
 8004a0c:	f240 115b 	movw	r1, #347	@ 0x15b
 8004a10:	4834      	ldr	r0, [pc, #208]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004a12:	f7fc f923 	bl	8000c5c <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d008      	beq.n	8004a30 <HAL_SPI_Init+0x118>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	2b80      	cmp	r3, #128	@ 0x80
 8004a24:	d004      	beq.n	8004a30 <HAL_SPI_Init+0x118>
 8004a26:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004a2a:	482e      	ldr	r0, [pc, #184]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004a2c:	f7fc f916 	bl	8000c5c <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d004      	beq.n	8004a42 <HAL_SPI_Init+0x12a>
 8004a38:	f240 115f 	movw	r1, #351	@ 0x15f
 8004a3c:	4829      	ldr	r0, [pc, #164]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004a3e:	f7fc f90d 	bl	8000c5c <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d14e      	bne.n	8004ae8 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d008      	beq.n	8004a64 <HAL_SPI_Init+0x14c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d004      	beq.n	8004a64 <HAL_SPI_Init+0x14c>
 8004a5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004a5e:	4821      	ldr	r0, [pc, #132]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004a60:	f7fc f8fc 	bl	8000c5c <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	695b      	ldr	r3, [r3, #20]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <HAL_SPI_Init+0x166>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d004      	beq.n	8004a7e <HAL_SPI_Init+0x166>
 8004a74:	f240 1163 	movw	r1, #355	@ 0x163
 8004a78:	481a      	ldr	r0, [pc, #104]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004a7a:	f7fc f8ef 	bl	8000c5c <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a86:	d125      	bne.n	8004ad4 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	69db      	ldr	r3, [r3, #28]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d056      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	2b08      	cmp	r3, #8
 8004a96:	d052      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	69db      	ldr	r3, [r3, #28]
 8004a9c:	2b10      	cmp	r3, #16
 8004a9e:	d04e      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	2b18      	cmp	r3, #24
 8004aa6:	d04a      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	2b20      	cmp	r3, #32
 8004aae:	d046      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	2b28      	cmp	r3, #40	@ 0x28
 8004ab6:	d042      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	2b30      	cmp	r3, #48	@ 0x30
 8004abe:	d03e      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	69db      	ldr	r3, [r3, #28]
 8004ac4:	2b38      	cmp	r3, #56	@ 0x38
 8004ac6:	d03a      	beq.n	8004b3e <HAL_SPI_Init+0x226>
 8004ac8:	f240 1167 	movw	r1, #359	@ 0x167
 8004acc:	4805      	ldr	r0, [pc, #20]	@ (8004ae4 <HAL_SPI_Init+0x1cc>)
 8004ace:	f7fc f8c5 	bl	8000c5c <assert_failed>
 8004ad2:	e034      	b.n	8004b3e <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	61da      	str	r2, [r3, #28]
 8004ada:	e030      	b.n	8004b3e <HAL_SPI_Init+0x226>
 8004adc:	40013000 	.word	0x40013000
 8004ae0:	40003800 	.word	0x40003800
 8004ae4:	080074d0 	.word	0x080074d0
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d020      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d01c      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	2b10      	cmp	r3, #16
 8004afe:	d018      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	2b18      	cmp	r3, #24
 8004b06:	d014      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d010      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	69db      	ldr	r3, [r3, #28]
 8004b14:	2b28      	cmp	r3, #40	@ 0x28
 8004b16:	d00c      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	2b30      	cmp	r3, #48	@ 0x30
 8004b1e:	d008      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	2b38      	cmp	r3, #56	@ 0x38
 8004b26:	d004      	beq.n	8004b32 <HAL_SPI_Init+0x21a>
 8004b28:	f240 1171 	movw	r1, #369	@ 0x171
 8004b2c:	4838      	ldr	r0, [pc, #224]	@ (8004c10 <HAL_SPI_Init+0x2f8>)
 8004b2e:	f7fc f895 	bl	8000c5c <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7fc f919 	bl	8000d90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b90:	431a      	orrs	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc2:	ea42 0103 	orr.w	r1, r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	0c1a      	lsrs	r2, r3, #16
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f002 0204 	and.w	r2, r2, #4
 8004be4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	080074d0 	.word	0x080074d0

08004c14 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	@ 0x30
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c22:	2301      	movs	r3, #1
 8004c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c26:	2300      	movs	r3, #0
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d004      	beq.n	8004c3e <HAL_SPI_TransmitReceive+0x2a>
 8004c34:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 8004c38:	4886      	ldr	r0, [pc, #536]	@ (8004e54 <HAL_SPI_TransmitReceive+0x240>)
 8004c3a:	f7fc f80f 	bl	8000c5c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_SPI_TransmitReceive+0x38>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e19b      	b.n	8004f84 <HAL_SPI_TransmitReceive+0x370>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c54:	f7fc fd00 	bl	8001658 <HAL_GetTick>
 8004c58:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c6a:	887b      	ldrh	r3, [r7, #2]
 8004c6c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d00f      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x82>
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7c:	d107      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d103      	bne.n	8004c8e <HAL_SPI_TransmitReceive+0x7a>
 8004c86:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c8a:	2b04      	cmp	r3, #4
 8004c8c:	d003      	beq.n	8004c96 <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c94:	e170      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d005      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x94>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_SPI_TransmitReceive+0x94>
 8004ca2:	887b      	ldrh	r3, [r7, #2]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d103      	bne.n	8004cb0 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004cae:	e163      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d003      	beq.n	8004cc4 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	887a      	ldrh	r2, [r7, #2]
 8004cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	887a      	ldrh	r2, [r7, #2]
 8004ce6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	887a      	ldrh	r2, [r7, #2]
 8004cec:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b40      	cmp	r3, #64	@ 0x40
 8004d06:	d007      	beq.n	8004d18 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d20:	d17c      	bne.n	8004e1c <HAL_SPI_TransmitReceive+0x208>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_TransmitReceive+0x11c>
 8004d2a:	8b7b      	ldrh	r3, [r7, #26]
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d16a      	bne.n	8004e06 <HAL_SPI_TransmitReceive+0x1f2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d34:	881a      	ldrh	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d40:	1c9a      	adds	r2, r3, #2
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	3b01      	subs	r3, #1
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d54:	e057      	b.n	8004e06 <HAL_SPI_TransmitReceive+0x1f2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 0302 	and.w	r3, r3, #2
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d11b      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x188>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d016      	beq.n	8004d9c <HAL_SPI_TransmitReceive+0x188>
 8004d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d113      	bne.n	8004d9c <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d84:	1c9a      	adds	r2, r3, #2
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d119      	bne.n	8004dde <HAL_SPI_TransmitReceive+0x1ca>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d014      	beq.n	8004dde <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	b292      	uxth	r2, r2
 8004dc0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc6:	1c9a      	adds	r2, r3, #2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004dde:	f7fc fc3b 	bl	8001658 <HAL_GetTick>
 8004de2:	4602      	mov	r2, r0
 8004de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de6:	1ad3      	subs	r3, r2, r3
 8004de8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d80b      	bhi.n	8004e06 <HAL_SPI_TransmitReceive+0x1f2>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df4:	d007      	beq.n	8004e06 <HAL_SPI_TransmitReceive+0x1f2>
      {
        errorcode = HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004e04:	e0b8      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1a2      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x142>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d19d      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x142>
 8004e1a:	e083      	b.n	8004f24 <HAL_SPI_TransmitReceive+0x310>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <HAL_SPI_TransmitReceive+0x216>
 8004e24:	8b7b      	ldrh	r3, [r7, #26]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d172      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2fc>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	330c      	adds	r3, #12
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3c:	1c5a      	adds	r2, r3, #1
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	b29a      	uxth	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e50:	e05e      	b.n	8004f10 <HAL_SPI_TransmitReceive+0x2fc>
 8004e52:	bf00      	nop
 8004e54:	080074d0 	.word	0x080074d0
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d11c      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x28c>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d017      	beq.n	8004ea0 <HAL_SPI_TransmitReceive+0x28c>
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d114      	bne.n	8004ea0 <HAL_SPI_TransmitReceive+0x28c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	330c      	adds	r3, #12
 8004e80:	7812      	ldrb	r2, [r2, #0]
 8004e82:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e88:	1c5a      	adds	r2, r3, #1
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	3b01      	subs	r3, #1
 8004e96:	b29a      	uxth	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d119      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x2ce>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d014      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x2ce>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ee2:	f7fc fbb9 	bl	8001658 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d803      	bhi.n	8004efa <HAL_SPI_TransmitReceive+0x2e6>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef8:	d102      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x2ec>
 8004efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d107      	bne.n	8004f10 <HAL_SPI_TransmitReceive+0x2fc>
      {
        errorcode = HAL_TIMEOUT;
 8004f00:	2303      	movs	r3, #3
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2201      	movs	r2, #1
 8004f0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004f0e:	e033      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d19e      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x244>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f1e:	b29b      	uxth	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d199      	bne.n	8004e58 <HAL_SPI_TransmitReceive+0x244>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f000 f8b7 	bl	800509c <SPI_EndRxTxTransaction>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d006      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x32e>
  {
    errorcode = HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2220      	movs	r2, #32
 8004f3e:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f40:	e01a      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10a      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x34c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_SPI_TransmitReceive+0x35c>
  {
    errorcode = HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f6e:	e003      	b.n	8004f78 <HAL_SPI_TransmitReceive+0x364>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f80:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	@ 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b088      	sub	sp, #32
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	4613      	mov	r3, r2
 8004f9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f9c:	f7fc fb5c 	bl	8001658 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa4:	1a9b      	subs	r3, r3, r2
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	4413      	add	r3, r2
 8004faa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fac:	f7fc fb54 	bl	8001658 <HAL_GetTick>
 8004fb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004fb2:	4b39      	ldr	r3, [pc, #228]	@ (8005098 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	015b      	lsls	r3, r3, #5
 8004fb8:	0d1b      	lsrs	r3, r3, #20
 8004fba:	69fa      	ldr	r2, [r7, #28]
 8004fbc:	fb02 f303 	mul.w	r3, r2, r3
 8004fc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fc2:	e054      	b.n	800506e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d050      	beq.n	800506e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fcc:	f7fc fb44 	bl	8001658 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	69bb      	ldr	r3, [r7, #24]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d902      	bls.n	8004fe2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d13d      	bne.n	800505e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685a      	ldr	r2, [r3, #4]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004ff0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ffa:	d111      	bne.n	8005020 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005004:	d004      	beq.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500e:	d107      	bne.n	8005020 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800501e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005028:	d10f      	bne.n	800504a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005048:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e017      	b.n	800508e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d101      	bne.n	8005068 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005064:	2300      	movs	r3, #0
 8005066:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3b01      	subs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	689a      	ldr	r2, [r3, #8]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d19b      	bne.n	8004fc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3720      	adds	r7, #32
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000000 	.word	0x20000000

0800509c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b086      	sub	sp, #24
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	9300      	str	r3, [sp, #0]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	2200      	movs	r2, #0
 80050b0:	2180      	movs	r1, #128	@ 0x80
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff ff6a 	bl	8004f8c <SPI_WaitFlagStateUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d007      	beq.n	80050ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050c2:	f043 0220 	orr.w	r2, r3, #32
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e000      	b.n	80050d0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d101      	bne.n	80050ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e0a1      	b.n	800522e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a52      	ldr	r2, [pc, #328]	@ (8005238 <HAL_TIM_Base_Init+0x160>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d013      	beq.n	800511c <HAL_TIM_Base_Init+0x44>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050fc:	d00e      	beq.n	800511c <HAL_TIM_Base_Init+0x44>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a4e      	ldr	r2, [pc, #312]	@ (800523c <HAL_TIM_Base_Init+0x164>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d009      	beq.n	800511c <HAL_TIM_Base_Init+0x44>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a4c      	ldr	r2, [pc, #304]	@ (8005240 <HAL_TIM_Base_Init+0x168>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d004      	beq.n	800511c <HAL_TIM_Base_Init+0x44>
 8005112:	f240 1113 	movw	r1, #275	@ 0x113
 8005116:	484b      	ldr	r0, [pc, #300]	@ (8005244 <HAL_TIM_Base_Init+0x16c>)
 8005118:	f7fb fda0 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d014      	beq.n	800514e <HAL_TIM_Base_Init+0x76>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	2b10      	cmp	r3, #16
 800512a:	d010      	beq.n	800514e <HAL_TIM_Base_Init+0x76>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	2b20      	cmp	r3, #32
 8005132:	d00c      	beq.n	800514e <HAL_TIM_Base_Init+0x76>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	2b40      	cmp	r3, #64	@ 0x40
 800513a:	d008      	beq.n	800514e <HAL_TIM_Base_Init+0x76>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	2b60      	cmp	r3, #96	@ 0x60
 8005142:	d004      	beq.n	800514e <HAL_TIM_Base_Init+0x76>
 8005144:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005148:	483e      	ldr	r0, [pc, #248]	@ (8005244 <HAL_TIM_Base_Init+0x16c>)
 800514a:	f7fb fd87 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00e      	beq.n	8005174 <HAL_TIM_Base_Init+0x9c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800515e:	d009      	beq.n	8005174 <HAL_TIM_Base_Init+0x9c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005168:	d004      	beq.n	8005174 <HAL_TIM_Base_Init+0x9c>
 800516a:	f240 1115 	movw	r1, #277	@ 0x115
 800516e:	4835      	ldr	r0, [pc, #212]	@ (8005244 <HAL_TIM_Base_Init+0x16c>)
 8005170:	f7fb fd74 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d004      	beq.n	8005186 <HAL_TIM_Base_Init+0xae>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005184:	d304      	bcc.n	8005190 <HAL_TIM_Base_Init+0xb8>
 8005186:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800518a:	482e      	ldr	r0, [pc, #184]	@ (8005244 <HAL_TIM_Base_Init+0x16c>)
 800518c:	f7fb fd66 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d008      	beq.n	80051aa <HAL_TIM_Base_Init+0xd2>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	2b80      	cmp	r3, #128	@ 0x80
 800519e:	d004      	beq.n	80051aa <HAL_TIM_Base_Init+0xd2>
 80051a0:	f240 1117 	movw	r1, #279	@ 0x117
 80051a4:	4827      	ldr	r0, [pc, #156]	@ (8005244 <HAL_TIM_Base_Init+0x16c>)
 80051a6:	f7fb fd59 	bl	8000c5c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_Base_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fb ff76 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f001 f90c 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	40012c00 	.word	0x40012c00
 800523c:	40000400 	.word	0x40000400
 8005240:	40000800 	.word	0x40000800
 8005244:	08007508 	.word	0x08007508

08005248 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e0a1      	b.n	800539e <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a52      	ldr	r2, [pc, #328]	@ (80053a8 <HAL_TIM_PWM_Init+0x160>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d013      	beq.n	800528c <HAL_TIM_PWM_Init+0x44>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800526c:	d00e      	beq.n	800528c <HAL_TIM_PWM_Init+0x44>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a4e      	ldr	r2, [pc, #312]	@ (80053ac <HAL_TIM_PWM_Init+0x164>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_TIM_PWM_Init+0x44>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a4c      	ldr	r2, [pc, #304]	@ (80053b0 <HAL_TIM_PWM_Init+0x168>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIM_PWM_Init+0x44>
 8005282:	f240 512c 	movw	r1, #1324	@ 0x52c
 8005286:	484b      	ldr	r0, [pc, #300]	@ (80053b4 <HAL_TIM_PWM_Init+0x16c>)
 8005288:	f7fb fce8 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d014      	beq.n	80052be <HAL_TIM_PWM_Init+0x76>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	2b10      	cmp	r3, #16
 800529a:	d010      	beq.n	80052be <HAL_TIM_PWM_Init+0x76>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b20      	cmp	r3, #32
 80052a2:	d00c      	beq.n	80052be <HAL_TIM_PWM_Init+0x76>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b40      	cmp	r3, #64	@ 0x40
 80052aa:	d008      	beq.n	80052be <HAL_TIM_PWM_Init+0x76>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b60      	cmp	r3, #96	@ 0x60
 80052b2:	d004      	beq.n	80052be <HAL_TIM_PWM_Init+0x76>
 80052b4:	f240 512d 	movw	r1, #1325	@ 0x52d
 80052b8:	483e      	ldr	r0, [pc, #248]	@ (80053b4 <HAL_TIM_PWM_Init+0x16c>)
 80052ba:	f7fb fccf 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <HAL_TIM_PWM_Init+0x9c>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ce:	d009      	beq.n	80052e4 <HAL_TIM_PWM_Init+0x9c>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d8:	d004      	beq.n	80052e4 <HAL_TIM_PWM_Init+0x9c>
 80052da:	f240 512e 	movw	r1, #1326	@ 0x52e
 80052de:	4835      	ldr	r0, [pc, #212]	@ (80053b4 <HAL_TIM_PWM_Init+0x16c>)
 80052e0:	f7fb fcbc 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d004      	beq.n	80052f6 <HAL_TIM_PWM_Init+0xae>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f4:	d304      	bcc.n	8005300 <HAL_TIM_PWM_Init+0xb8>
 80052f6:	f240 512f 	movw	r1, #1327	@ 0x52f
 80052fa:	482e      	ldr	r0, [pc, #184]	@ (80053b4 <HAL_TIM_PWM_Init+0x16c>)
 80052fc:	f7fb fcae 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699b      	ldr	r3, [r3, #24]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d008      	beq.n	800531a <HAL_TIM_PWM_Init+0xd2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b80      	cmp	r3, #128	@ 0x80
 800530e:	d004      	beq.n	800531a <HAL_TIM_PWM_Init+0xd2>
 8005310:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8005314:	4827      	ldr	r0, [pc, #156]	@ (80053b4 <HAL_TIM_PWM_Init+0x16c>)
 8005316:	f7fb fca1 	bl	8000c5c <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <HAL_TIM_PWM_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f842 	bl	80053b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2202      	movs	r2, #2
 8005338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	4610      	mov	r0, r2
 8005348:	f001 f854 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	08007508 	.word	0x08007508

080053b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bc80      	pop	{r7}
 80053c8:	4770      	bx	lr
	...

080053cc <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a8c      	ldr	r2, [pc, #560]	@ (8005614 <HAL_TIM_PWM_Start_DMA+0x248>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d10b      	bne.n	8005400 <HAL_TIM_PWM_Start_DMA+0x34>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d040      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d03d      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b08      	cmp	r3, #8
 80053f8:	d03a      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b0c      	cmp	r3, #12
 80053fe:	d037      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005408:	d10b      	bne.n	8005422 <HAL_TIM_PWM_Start_DMA+0x56>
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d02f      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b04      	cmp	r3, #4
 8005414:	d02c      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d029      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	2b0c      	cmp	r3, #12
 8005420:	d026      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a7c      	ldr	r2, [pc, #496]	@ (8005618 <HAL_TIM_PWM_Start_DMA+0x24c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10b      	bne.n	8005444 <HAL_TIM_PWM_Start_DMA+0x78>
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01e      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d01b      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	2b08      	cmp	r3, #8
 800543c:	d018      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d015      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a74      	ldr	r2, [pc, #464]	@ (800561c <HAL_TIM_PWM_Start_DMA+0x250>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d10b      	bne.n	8005466 <HAL_TIM_PWM_Start_DMA+0x9a>
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00d      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00a      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b08      	cmp	r3, #8
 800545e:	d007      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b0c      	cmp	r3, #12
 8005464:	d004      	beq.n	8005470 <HAL_TIM_PWM_Start_DMA+0xa4>
 8005466:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 800546a:	486d      	ldr	r0, [pc, #436]	@ (8005620 <HAL_TIM_PWM_Start_DMA+0x254>)
 800546c:	f7fb fbf6 	bl	8000c5c <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d109      	bne.n	800548a <HAL_TIM_PWM_Start_DMA+0xbe>
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	bf0c      	ite	eq
 8005482:	2301      	moveq	r3, #1
 8005484:	2300      	movne	r3, #0
 8005486:	b2db      	uxtb	r3, r3
 8005488:	e022      	b.n	80054d0 <HAL_TIM_PWM_Start_DMA+0x104>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d109      	bne.n	80054a4 <HAL_TIM_PWM_Start_DMA+0xd8>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005496:	b2db      	uxtb	r3, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	bf0c      	ite	eq
 800549c:	2301      	moveq	r3, #1
 800549e:	2300      	movne	r3, #0
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	e015      	b.n	80054d0 <HAL_TIM_PWM_Start_DMA+0x104>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b08      	cmp	r3, #8
 80054a8:	d109      	bne.n	80054be <HAL_TIM_PWM_Start_DMA+0xf2>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	bf0c      	ite	eq
 80054b6:	2301      	moveq	r3, #1
 80054b8:	2300      	movne	r3, #0
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	e008      	b.n	80054d0 <HAL_TIM_PWM_Start_DMA+0x104>
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	bf0c      	ite	eq
 80054ca:	2301      	moveq	r3, #1
 80054cc:	2300      	movne	r3, #0
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <HAL_TIM_PWM_Start_DMA+0x10c>
  {
    return HAL_BUSY;
 80054d4:	2302      	movs	r3, #2
 80054d6:	e160      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_TIM_PWM_Start_DMA+0x126>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	bf0c      	ite	eq
 80054ea:	2301      	moveq	r3, #1
 80054ec:	2300      	movne	r3, #0
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	e022      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x16c>
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2b04      	cmp	r3, #4
 80054f6:	d109      	bne.n	800550c <HAL_TIM_PWM_Start_DMA+0x140>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	2b01      	cmp	r3, #1
 8005502:	bf0c      	ite	eq
 8005504:	2301      	moveq	r3, #1
 8005506:	2300      	movne	r3, #0
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e015      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x16c>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d109      	bne.n	8005526 <HAL_TIM_PWM_Start_DMA+0x15a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b01      	cmp	r3, #1
 800551c:	bf0c      	ite	eq
 800551e:	2301      	moveq	r3, #1
 8005520:	2300      	movne	r3, #0
 8005522:	b2db      	uxtb	r3, r3
 8005524:	e008      	b.n	8005538 <HAL_TIM_PWM_Start_DMA+0x16c>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800552c:	b2db      	uxtb	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	bf0c      	ite	eq
 8005532:	2301      	moveq	r3, #1
 8005534:	2300      	movne	r3, #0
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b00      	cmp	r3, #0
 800553a:	d024      	beq.n	8005586 <HAL_TIM_PWM_Start_DMA+0x1ba>
  {
    if ((pData == NULL) || (Length == 0U))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d002      	beq.n	8005548 <HAL_TIM_PWM_Start_DMA+0x17c>
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_TIM_PWM_Start_DMA+0x180>
    {
      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e126      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d104      	bne.n	800555c <HAL_TIM_PWM_Start_DMA+0x190>
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2202      	movs	r2, #2
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800555a:	e016      	b.n	800558a <HAL_TIM_PWM_Start_DMA+0x1be>
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d104      	bne.n	800556c <HAL_TIM_PWM_Start_DMA+0x1a0>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2202      	movs	r2, #2
 8005566:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800556a:	e00e      	b.n	800558a <HAL_TIM_PWM_Start_DMA+0x1be>
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	2b08      	cmp	r3, #8
 8005570:	d104      	bne.n	800557c <HAL_TIM_PWM_Start_DMA+0x1b0>
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2202      	movs	r2, #2
 8005576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800557a:	e006      	b.n	800558a <HAL_TIM_PWM_Start_DMA+0x1be>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005584:	e001      	b.n	800558a <HAL_TIM_PWM_Start_DMA+0x1be>
    }
  }
  else
  {
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e107      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
  }

  switch (Channel)
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	2b0c      	cmp	r3, #12
 800558e:	f200 80bb 	bhi.w	8005708 <HAL_TIM_PWM_Start_DMA+0x33c>
 8005592:	a201      	add	r2, pc, #4	@ (adr r2, 8005598 <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8005594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005598:	080055cd 	.word	0x080055cd
 800559c:	08005709 	.word	0x08005709
 80055a0:	08005709 	.word	0x08005709
 80055a4:	08005709 	.word	0x08005709
 80055a8:	08005631 	.word	0x08005631
 80055ac:	08005709 	.word	0x08005709
 80055b0:	08005709 	.word	0x08005709
 80055b4:	08005709 	.word	0x08005709
 80055b8:	08005679 	.word	0x08005679
 80055bc:	08005709 	.word	0x08005709
 80055c0:	08005709 	.word	0x08005709
 80055c4:	08005709 	.word	0x08005709
 80055c8:	080056c1 	.word	0x080056c1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d0:	4a14      	ldr	r2, [pc, #80]	@ (8005624 <HAL_TIM_PWM_Start_DMA+0x258>)
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	4a13      	ldr	r2, [pc, #76]	@ (8005628 <HAL_TIM_PWM_Start_DMA+0x25c>)
 80055da:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4a12      	ldr	r2, [pc, #72]	@ (800562c <HAL_TIM_PWM_Start_DMA+0x260>)
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80055e8:	6879      	ldr	r1, [r7, #4]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3334      	adds	r3, #52	@ 0x34
 80055f0:	461a      	mov	r2, r3
 80055f2:	887b      	ldrh	r3, [r7, #2]
 80055f4:	f7fd fc5e 	bl	8002eb4 <HAL_DMA_Start_IT>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e0cb      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68da      	ldr	r2, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005610:	60da      	str	r2, [r3, #12]
      break;
 8005612:	e07c      	b.n	800570e <HAL_TIM_PWM_Start_DMA+0x342>
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	08007508 	.word	0x08007508
 8005624:	080062e3 	.word	0x080062e3
 8005628:	0800638b 	.word	0x0800638b
 800562c:	08006251 	.word	0x08006251
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005634:	4a5b      	ldr	r2, [pc, #364]	@ (80057a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005636:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563c:	4a5a      	ldr	r2, [pc, #360]	@ (80057a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800563e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005644:	4a59      	ldr	r2, [pc, #356]	@ (80057ac <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005646:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	3338      	adds	r3, #56	@ 0x38
 8005654:	461a      	mov	r2, r3
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	f7fd fc2c 	bl	8002eb4 <HAL_DMA_Start_IT>
 800565c:	4603      	mov	r3, r0
 800565e:	2b00      	cmp	r3, #0
 8005660:	d001      	beq.n	8005666 <HAL_TIM_PWM_Start_DMA+0x29a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	e099      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005674:	60da      	str	r2, [r3, #12]
      break;
 8005676:	e04a      	b.n	800570e <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567c:	4a49      	ldr	r2, [pc, #292]	@ (80057a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800567e:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	4a48      	ldr	r2, [pc, #288]	@ (80057a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005686:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568c:	4a47      	ldr	r2, [pc, #284]	@ (80057ac <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	333c      	adds	r3, #60	@ 0x3c
 800569c:	461a      	mov	r2, r3
 800569e:	887b      	ldrh	r3, [r7, #2]
 80056a0:	f7fd fc08 	bl	8002eb4 <HAL_DMA_Start_IT>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <HAL_TIM_PWM_Start_DMA+0x2e2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e075      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68da      	ldr	r2, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056bc:	60da      	str	r2, [r3, #12]
      break;
 80056be:	e026      	b.n	800570e <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056c4:	4a37      	ldr	r2, [pc, #220]	@ (80057a4 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80056c6:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056cc:	4a36      	ldr	r2, [pc, #216]	@ (80057a8 <HAL_TIM_PWM_Start_DMA+0x3dc>)
 80056ce:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056d4:	4a35      	ldr	r2, [pc, #212]	@ (80057ac <HAL_TIM_PWM_Start_DMA+0x3e0>)
 80056d6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80056dc:	6879      	ldr	r1, [r7, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3340      	adds	r3, #64	@ 0x40
 80056e4:	461a      	mov	r2, r3
 80056e6:	887b      	ldrh	r3, [r7, #2]
 80056e8:	f7fd fbe4 	bl	8002eb4 <HAL_DMA_Start_IT>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_TIM_PWM_Start_DMA+0x32a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e051      	b.n	800579a <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005704:	60da      	str	r2, [r3, #12]
      break;
 8005706:	e002      	b.n	800570e <HAL_TIM_PWM_Start_DMA+0x342>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
      break;
 800570c:	bf00      	nop
  }

  if (status == HAL_OK)
 800570e:	7dfb      	ldrb	r3, [r7, #23]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d141      	bne.n	8005798 <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2201      	movs	r2, #1
 800571a:	68b9      	ldr	r1, [r7, #8]
 800571c:	4618      	mov	r0, r3
 800571e:	f001 f977 	bl	8006a10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a22      	ldr	r2, [pc, #136]	@ (80057b0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d107      	bne.n	800573c <HAL_TIM_PWM_Start_DMA+0x370>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800573a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	@ (80057b0 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d00e      	beq.n	8005764 <HAL_TIM_PWM_Start_DMA+0x398>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800574e:	d009      	beq.n	8005764 <HAL_TIM_PWM_Start_DMA+0x398>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a17      	ldr	r2, [pc, #92]	@ (80057b4 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d004      	beq.n	8005764 <HAL_TIM_PWM_Start_DMA+0x398>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a16      	ldr	r2, [pc, #88]	@ (80057b8 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d111      	bne.n	8005788 <HAL_TIM_PWM_Start_DMA+0x3bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f003 0307 	and.w	r3, r3, #7
 800576e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	2b06      	cmp	r3, #6
 8005774:	d010      	beq.n	8005798 <HAL_TIM_PWM_Start_DMA+0x3cc>
      {
        __HAL_TIM_ENABLE(htim);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005786:	e007      	b.n	8005798 <HAL_TIM_PWM_Start_DMA+0x3cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005798:	7dfb      	ldrb	r3, [r7, #23]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	080062e3 	.word	0x080062e3
 80057a8:	0800638b 	.word	0x0800638b
 80057ac:	08006251 	.word	0x08006251
 80057b0:	40012c00 	.word	0x40012c00
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800

080057bc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057c6:	2300      	movs	r3, #0
 80057c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a81      	ldr	r2, [pc, #516]	@ (80059d4 <HAL_TIM_PWM_Stop_DMA+0x218>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d10b      	bne.n	80057ec <HAL_TIM_PWM_Stop_DMA+0x30>
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d040      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b04      	cmp	r3, #4
 80057de:	d03d      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	2b08      	cmp	r3, #8
 80057e4:	d03a      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	2b0c      	cmp	r3, #12
 80057ea:	d037      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057f4:	d10b      	bne.n	800580e <HAL_TIM_PWM_Stop_DMA+0x52>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02f      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b04      	cmp	r3, #4
 8005800:	d02c      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b08      	cmp	r3, #8
 8005806:	d029      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	2b0c      	cmp	r3, #12
 800580c:	d026      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a71      	ldr	r2, [pc, #452]	@ (80059d8 <HAL_TIM_PWM_Stop_DMA+0x21c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10b      	bne.n	8005830 <HAL_TIM_PWM_Stop_DMA+0x74>
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01e      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	2b04      	cmp	r3, #4
 8005822:	d01b      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d018      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	2b0c      	cmp	r3, #12
 800582e:	d015      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a69      	ldr	r2, [pc, #420]	@ (80059dc <HAL_TIM_PWM_Stop_DMA+0x220>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d10b      	bne.n	8005852 <HAL_TIM_PWM_Stop_DMA+0x96>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00d      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	2b04      	cmp	r3, #4
 8005844:	d00a      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b08      	cmp	r3, #8
 800584a:	d007      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	2b0c      	cmp	r3, #12
 8005850:	d004      	beq.n	800585c <HAL_TIM_PWM_Stop_DMA+0xa0>
 8005852:	f240 7159 	movw	r1, #1881	@ 0x759
 8005856:	4862      	ldr	r0, [pc, #392]	@ (80059e0 <HAL_TIM_PWM_Stop_DMA+0x224>)
 8005858:	f7fb fa00 	bl	8000c5c <assert_failed>

  switch (Channel)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	2b0c      	cmp	r3, #12
 8005860:	d854      	bhi.n	800590c <HAL_TIM_PWM_Stop_DMA+0x150>
 8005862:	a201      	add	r2, pc, #4	@ (adr r2, 8005868 <HAL_TIM_PWM_Stop_DMA+0xac>)
 8005864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005868:	0800589d 	.word	0x0800589d
 800586c:	0800590d 	.word	0x0800590d
 8005870:	0800590d 	.word	0x0800590d
 8005874:	0800590d 	.word	0x0800590d
 8005878:	080058b9 	.word	0x080058b9
 800587c:	0800590d 	.word	0x0800590d
 8005880:	0800590d 	.word	0x0800590d
 8005884:	0800590d 	.word	0x0800590d
 8005888:	080058d5 	.word	0x080058d5
 800588c:	0800590d 	.word	0x0800590d
 8005890:	0800590d 	.word	0x0800590d
 8005894:	0800590d 	.word	0x0800590d
 8005898:	080058f1 	.word	0x080058f1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80058aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7fd fb6d 	bl	8002f90 <HAL_DMA_Abort_IT>
      break;
 80058b6:	e02c      	b.n	8005912 <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fd fb5f 	bl	8002f90 <HAL_DMA_Abort_IT>
      break;
 80058d2:	e01e      	b.n	8005912 <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68da      	ldr	r2, [r3, #12]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fd fb51 	bl	8002f90 <HAL_DMA_Abort_IT>
      break;
 80058ee:	e010      	b.n	8005912 <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80058fe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005904:	4618      	mov	r0, r3
 8005906:	f7fd fb43 	bl	8002f90 <HAL_DMA_Abort_IT>
      break;
 800590a:	e002      	b.n	8005912 <HAL_TIM_PWM_Stop_DMA+0x156>
    }

    default:
      status = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	73fb      	strb	r3, [r7, #15]
      break;
 8005910:	bf00      	nop
  }

  if (status == HAL_OK)
 8005912:	7bfb      	ldrb	r3, [r7, #15]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d157      	bne.n	80059c8 <HAL_TIM_PWM_Stop_DMA+0x20c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2200      	movs	r2, #0
 800591e:	6839      	ldr	r1, [r7, #0]
 8005920:	4618      	mov	r0, r3
 8005922:	f001 f875 	bl	8006a10 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2a      	ldr	r2, [pc, #168]	@ (80059d4 <HAL_TIM_PWM_Stop_DMA+0x218>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d117      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x1a4>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	6a1a      	ldr	r2, [r3, #32]
 8005936:	f241 1311 	movw	r3, #4369	@ 0x1111
 800593a:	4013      	ands	r3, r2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10f      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x1a4>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	f240 4344 	movw	r3, #1092	@ 0x444
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d107      	bne.n	8005960 <HAL_TIM_PWM_Stop_DMA+0x1a4>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800595e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6a1a      	ldr	r2, [r3, #32]
 8005966:	f241 1311 	movw	r3, #4369	@ 0x1111
 800596a:	4013      	ands	r3, r2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10f      	bne.n	8005990 <HAL_TIM_PWM_Stop_DMA+0x1d4>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a1a      	ldr	r2, [r3, #32]
 8005976:	f240 4344 	movw	r3, #1092	@ 0x444
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d107      	bne.n	8005990 <HAL_TIM_PWM_Stop_DMA+0x1d4>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 0201 	bic.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d104      	bne.n	80059a0 <HAL_TIM_PWM_Stop_DMA+0x1e4>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800599e:	e013      	b.n	80059c8 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d104      	bne.n	80059b0 <HAL_TIM_PWM_Stop_DMA+0x1f4>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059ae:	e00b      	b.n	80059c8 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b08      	cmp	r3, #8
 80059b4:	d104      	bne.n	80059c0 <HAL_TIM_PWM_Stop_DMA+0x204>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80059be:	e003      	b.n	80059c8 <HAL_TIM_PWM_Stop_DMA+0x20c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40000400 	.word	0x40000400
 80059dc:	40000800 	.word	0x40000800
 80059e0:	08007508 	.word	0x08007508

080059e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b086      	sub	sp, #24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d010      	beq.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d00d      	beq.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b08      	cmp	r3, #8
 8005a04:	d00a      	beq.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b0c      	cmp	r3, #12
 8005a0a:	d007      	beq.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b3c      	cmp	r3, #60	@ 0x3c
 8005a10:	d004      	beq.n	8005a1c <HAL_TIM_PWM_ConfigChannel+0x38>
 8005a12:	f241 017e 	movw	r1, #4222	@ 0x107e
 8005a16:	4881      	ldr	r0, [pc, #516]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005a18:	f7fb f920 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b60      	cmp	r3, #96	@ 0x60
 8005a22:	d008      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2b70      	cmp	r3, #112	@ 0x70
 8005a2a:	d004      	beq.n	8005a36 <HAL_TIM_PWM_ConfigChannel+0x52>
 8005a2c:	f241 017f 	movw	r1, #4223	@ 0x107f
 8005a30:	487a      	ldr	r0, [pc, #488]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005a32:	f7fb f913 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d008      	beq.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	2b02      	cmp	r3, #2
 8005a44:	d004      	beq.n	8005a50 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8005a46:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8005a4a:	4874      	ldr	r0, [pc, #464]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005a4c:	f7fb f906 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x86>
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d004      	beq.n	8005a6a <HAL_TIM_PWM_ConfigChannel+0x86>
 8005a60:	f241 0181 	movw	r1, #4225	@ 0x1081
 8005a64:	486d      	ldr	r0, [pc, #436]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005a66:	f7fb f8f9 	bl	8000c5c <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_TIM_PWM_ConfigChannel+0x94>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e11b      	b.n	8005cb0 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	f200 810c 	bhi.w	8005ca0 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8005a88:	a201      	add	r2, pc, #4	@ (adr r2, 8005a90 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8005a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a8e:	bf00      	nop
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ca1 	.word	0x08005ca1
 8005a98:	08005ca1 	.word	0x08005ca1
 8005a9c:	08005ca1 	.word	0x08005ca1
 8005aa0:	08005b37 	.word	0x08005b37
 8005aa4:	08005ca1 	.word	0x08005ca1
 8005aa8:	08005ca1 	.word	0x08005ca1
 8005aac:	08005ca1 	.word	0x08005ca1
 8005ab0:	08005bab 	.word	0x08005bab
 8005ab4:	08005ca1 	.word	0x08005ca1
 8005ab8:	08005ca1 	.word	0x08005ca1
 8005abc:	08005ca1 	.word	0x08005ca1
 8005ac0:	08005c2d 	.word	0x08005c2d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a55      	ldr	r2, [pc, #340]	@ (8005c20 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d013      	beq.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x112>
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ad6:	d00e      	beq.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x112>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a51      	ldr	r2, [pc, #324]	@ (8005c24 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x112>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a50      	ldr	r2, [pc, #320]	@ (8005c28 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIM_PWM_ConfigChannel+0x112>
 8005aec:	f241 018b 	movw	r1, #4235	@ 0x108b
 8005af0:	484a      	ldr	r0, [pc, #296]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005af2:	f7fb f8b3 	bl	8000c5c <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68b9      	ldr	r1, [r7, #8]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fcdb 	bl	80064b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699a      	ldr	r2, [r3, #24]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f042 0208 	orr.w	r2, r2, #8
 8005b10:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	699a      	ldr	r2, [r3, #24]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f022 0204 	bic.w	r2, r2, #4
 8005b20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6999      	ldr	r1, [r3, #24]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	691a      	ldr	r2, [r3, #16]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	619a      	str	r2, [r3, #24]
      break;
 8005b34:	e0b7      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a39      	ldr	r2, [pc, #228]	@ (8005c20 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d013      	beq.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b48:	d00e      	beq.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a35      	ldr	r2, [pc, #212]	@ (8005c24 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d009      	beq.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a33      	ldr	r2, [pc, #204]	@ (8005c28 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d004      	beq.n	8005b68 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005b5e:	f241 019c 	movw	r1, #4252	@ 0x109c
 8005b62:	482e      	ldr	r0, [pc, #184]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005b64:	f7fb f87a 	bl	8000c5c <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68b9      	ldr	r1, [r7, #8]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f000 fd32 	bl	80065d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699a      	ldr	r2, [r3, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6999      	ldr	r1, [r3, #24]
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	021a      	lsls	r2, r3, #8
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	619a      	str	r2, [r3, #24]
      break;
 8005ba8:	e07d      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1c      	ldr	r2, [pc, #112]	@ (8005c20 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a18      	ldr	r2, [pc, #96]	@ (8005c24 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a16      	ldr	r2, [pc, #88]	@ (8005c28 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8005bd2:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 8005bd6:	4811      	ldr	r0, [pc, #68]	@ (8005c1c <HAL_TIM_PWM_ConfigChannel+0x238>)
 8005bd8:	f7fb f840 	bl	8000c5c <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68b9      	ldr	r1, [r7, #8]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fd8c 	bl	8006700 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69da      	ldr	r2, [r3, #28]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f042 0208 	orr.w	r2, r2, #8
 8005bf6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69da      	ldr	r2, [r3, #28]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0204 	bic.w	r2, r2, #4
 8005c06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69d9      	ldr	r1, [r3, #28]
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	61da      	str	r2, [r3, #28]
      break;
 8005c1a:	e044      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8005c1c:	08007508 	.word	0x08007508
 8005c20:	40012c00 	.word	0x40012c00
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a21      	ldr	r2, [pc, #132]	@ (8005cb8 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d013      	beq.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x27a>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c3e:	d00e      	beq.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x27a>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a1d      	ldr	r2, [pc, #116]	@ (8005cbc <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d009      	beq.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x27a>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc0 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d004      	beq.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x27a>
 8005c54:	f241 01be 	movw	r1, #4286	@ 0x10be
 8005c58:	481a      	ldr	r0, [pc, #104]	@ (8005cc4 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8005c5a:	f7fa ffff 	bl	8000c5c <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fddf 	bl	8006828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69da      	ldr	r2, [r3, #28]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	69d9      	ldr	r1, [r3, #28]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	021a      	lsls	r2, r3, #8
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	430a      	orrs	r2, r1
 8005c9c:	61da      	str	r2, [r3, #28]
      break;
 8005c9e:	e002      	b.n	8005ca6 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    default:
      status = HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	75fb      	strb	r3, [r7, #23]
      break;
 8005ca4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3718      	adds	r7, #24
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40012c00 	.word	0x40012c00
 8005cbc:	40000400 	.word	0x40000400
 8005cc0:	40000800 	.word	0x40000800
 8005cc4:	08007508 	.word	0x08007508

08005cc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIM_ConfigClockSource+0x1c>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e296      	b.n	8006212 <HAL_TIM_ConfigClockSource+0x54a>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cfc:	d029      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b70      	cmp	r3, #112	@ 0x70
 8005d04:	d025      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d0e:	d020      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	d01c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b50      	cmp	r3, #80	@ 0x50
 8005d1e:	d018      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b60      	cmp	r3, #96	@ 0x60
 8005d26:	d014      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d00c      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d008      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b30      	cmp	r3, #48	@ 0x30
 8005d46:	d004      	beq.n	8005d52 <HAL_TIM_ConfigClockSource+0x8a>
 8005d48:	f241 41be 	movw	r1, #5310	@ 0x14be
 8005d4c:	486b      	ldr	r0, [pc, #428]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005d4e:	f7fa ff85 	bl	8000c5c <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005d60:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d68:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68ba      	ldr	r2, [r7, #8]
 8005d70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d7a:	f000 80c7 	beq.w	8005f0c <HAL_TIM_ConfigClockSource+0x244>
 8005d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d82:	f200 8239 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8a:	d02d      	beq.n	8005de8 <HAL_TIM_ConfigClockSource+0x120>
 8005d8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d90:	f200 8232 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005d94:	2b70      	cmp	r3, #112	@ 0x70
 8005d96:	d045      	beq.n	8005e24 <HAL_TIM_ConfigClockSource+0x15c>
 8005d98:	2b70      	cmp	r3, #112	@ 0x70
 8005d9a:	f200 822d 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005d9e:	2b60      	cmp	r3, #96	@ 0x60
 8005da0:	f000 8167 	beq.w	8006072 <HAL_TIM_ConfigClockSource+0x3aa>
 8005da4:	2b60      	cmp	r3, #96	@ 0x60
 8005da6:	f200 8227 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005daa:	2b50      	cmp	r3, #80	@ 0x50
 8005dac:	f000 8115 	beq.w	8005fda <HAL_TIM_ConfigClockSource+0x312>
 8005db0:	2b50      	cmp	r3, #80	@ 0x50
 8005db2:	f200 8221 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005db6:	2b40      	cmp	r3, #64	@ 0x40
 8005db8:	f000 81b0 	beq.w	800611c <HAL_TIM_ConfigClockSource+0x454>
 8005dbc:	2b40      	cmp	r3, #64	@ 0x40
 8005dbe:	f200 821b 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005dc2:	2b30      	cmp	r3, #48	@ 0x30
 8005dc4:	f000 81f6 	beq.w	80061b4 <HAL_TIM_ConfigClockSource+0x4ec>
 8005dc8:	2b30      	cmp	r3, #48	@ 0x30
 8005dca:	f200 8215 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	f000 81f0 	beq.w	80061b4 <HAL_TIM_ConfigClockSource+0x4ec>
 8005dd4:	2b20      	cmp	r3, #32
 8005dd6:	f200 820f 	bhi.w	80061f8 <HAL_TIM_ConfigClockSource+0x530>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	f000 81ea 	beq.w	80061b4 <HAL_TIM_ConfigClockSource+0x4ec>
 8005de0:	2b10      	cmp	r3, #16
 8005de2:	f000 81e7 	beq.w	80061b4 <HAL_TIM_ConfigClockSource+0x4ec>
 8005de6:	e207      	b.n	80061f8 <HAL_TIM_ConfigClockSource+0x530>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a44      	ldr	r2, [pc, #272]	@ (8005f00 <HAL_TIM_ConfigClockSource+0x238>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	f000 8205 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x536>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	f000 81ff 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x536>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a3f      	ldr	r2, [pc, #252]	@ (8005f04 <HAL_TIM_ConfigClockSource+0x23c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	f000 81f9 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x536>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a3d      	ldr	r2, [pc, #244]	@ (8005f08 <HAL_TIM_ConfigClockSource+0x240>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	f000 81f3 	beq.w	80061fe <HAL_TIM_ConfigClockSource+0x536>
 8005e18:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8005e1c:	4837      	ldr	r0, [pc, #220]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005e1e:	f7fa ff1d 	bl	8000c5c <assert_failed>
      break;
 8005e22:	e1ec      	b.n	80061fe <HAL_TIM_ConfigClockSource+0x536>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a35      	ldr	r2, [pc, #212]	@ (8005f00 <HAL_TIM_ConfigClockSource+0x238>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d013      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x18e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e36:	d00e      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x18e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a31      	ldr	r2, [pc, #196]	@ (8005f04 <HAL_TIM_ConfigClockSource+0x23c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x18e>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a30      	ldr	r2, [pc, #192]	@ (8005f08 <HAL_TIM_ConfigClockSource+0x240>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x18e>
 8005e4c:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8005e50:	482a      	ldr	r0, [pc, #168]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005e52:	f7fa ff03 	bl	8000c5c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x1be>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x1be>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e70:	d009      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x1be>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIM_ConfigClockSource+0x1be>
 8005e7c:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8005e80:	481e      	ldr	r0, [pc, #120]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005e82:	f7fa feeb 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e8e:	d014      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1f2>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d010      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1f2>
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d00c      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1f2>
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d008      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1f2>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	2b0a      	cmp	r3, #10
 8005eae:	d004      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x1f2>
 8005eb0:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8005eb4:	4811      	ldr	r0, [pc, #68]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005eb6:	f7fa fed1 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2b0f      	cmp	r3, #15
 8005ec0:	d904      	bls.n	8005ecc <HAL_TIM_ConfigClockSource+0x204>
 8005ec2:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8005ec6:	480d      	ldr	r0, [pc, #52]	@ (8005efc <HAL_TIM_ConfigClockSource+0x234>)
 8005ec8:	f7fa fec8 	bl	8000c5c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005edc:	f000 fd79 	bl	80069d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005eee:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	609a      	str	r2, [r3, #8]
      break;
 8005ef8:	e182      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
 8005efa:	bf00      	nop
 8005efc:	08007508 	.word	0x08007508
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40000400 	.word	0x40000400
 8005f08:	40000800 	.word	0x40000800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a7e      	ldr	r2, [pc, #504]	@ (800610c <HAL_TIM_ConfigClockSource+0x444>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x276>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f1e:	d00e      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x276>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a7a      	ldr	r2, [pc, #488]	@ (8006110 <HAL_TIM_ConfigClockSource+0x448>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d009      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x276>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a79      	ldr	r2, [pc, #484]	@ (8006114 <HAL_TIM_ConfigClockSource+0x44c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d004      	beq.n	8005f3e <HAL_TIM_ConfigClockSource+0x276>
 8005f34:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8005f38:	4877      	ldr	r0, [pc, #476]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 8005f3a:	f7fa fe8f 	bl	8000c5c <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d013      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x2a6>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x2a6>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f58:	d009      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x2a6>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005f62:	d004      	beq.n	8005f6e <HAL_TIM_ConfigClockSource+0x2a6>
 8005f64:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8005f68:	486b      	ldr	r0, [pc, #428]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 8005f6a:	f7fa fe77 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f76:	d014      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x2da>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d010      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x2da>
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00c      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x2da>
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	2b02      	cmp	r3, #2
 8005f8e:	d008      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x2da>
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b0a      	cmp	r3, #10
 8005f96:	d004      	beq.n	8005fa2 <HAL_TIM_ConfigClockSource+0x2da>
 8005f98:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8005f9c:	485e      	ldr	r0, [pc, #376]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 8005f9e:	f7fa fe5d 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2b0f      	cmp	r3, #15
 8005fa8:	d904      	bls.n	8005fb4 <HAL_TIM_ConfigClockSource+0x2ec>
 8005faa:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8005fae:	485a      	ldr	r0, [pc, #360]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 8005fb0:	f7fa fe54 	bl	8000c5c <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	f000 fd05 	bl	80069d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd6:	609a      	str	r2, [r3, #8]
      break;
 8005fd8:	e112      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a4b      	ldr	r2, [pc, #300]	@ (800610c <HAL_TIM_ConfigClockSource+0x444>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d013      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x344>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fec:	d00e      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x344>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a47      	ldr	r2, [pc, #284]	@ (8006110 <HAL_TIM_ConfigClockSource+0x448>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d009      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x344>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a45      	ldr	r2, [pc, #276]	@ (8006114 <HAL_TIM_ConfigClockSource+0x44c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <HAL_TIM_ConfigClockSource+0x344>
 8006002:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8006006:	4844      	ldr	r0, [pc, #272]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 8006008:	f7fa fe28 	bl	8000c5c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006014:	d014      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x378>
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d010      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x378>
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00c      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x378>
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b02      	cmp	r3, #2
 800602c:	d008      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x378>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b0a      	cmp	r3, #10
 8006034:	d004      	beq.n	8006040 <HAL_TIM_ConfigClockSource+0x378>
 8006036:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 800603a:	4837      	ldr	r0, [pc, #220]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 800603c:	f7fa fe0e 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	2b0f      	cmp	r3, #15
 8006046:	d904      	bls.n	8006052 <HAL_TIM_ConfigClockSource+0x38a>
 8006048:	f241 5101 	movw	r1, #5377	@ 0x1501
 800604c:	4832      	ldr	r0, [pc, #200]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 800604e:	f7fa fe05 	bl	8000c5c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800605e:	461a      	mov	r2, r3
 8006060:	f000 fc40 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2150      	movs	r1, #80	@ 0x50
 800606a:	4618      	mov	r0, r3
 800606c:	f000 fc97 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 8006070:	e0c6      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a25      	ldr	r2, [pc, #148]	@ (800610c <HAL_TIM_ConfigClockSource+0x444>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d013      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x3dc>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006084:	d00e      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x3dc>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a21      	ldr	r2, [pc, #132]	@ (8006110 <HAL_TIM_ConfigClockSource+0x448>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d009      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x3dc>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a1f      	ldr	r2, [pc, #124]	@ (8006114 <HAL_TIM_ConfigClockSource+0x44c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d004      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0x3dc>
 800609a:	f241 510d 	movw	r1, #5389	@ 0x150d
 800609e:	481e      	ldr	r0, [pc, #120]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 80060a0:	f7fa fddc 	bl	8000c5c <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ac:	d014      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x410>
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x410>
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x410>
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d008      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x410>
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2b0a      	cmp	r3, #10
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_ConfigClockSource+0x410>
 80060ce:	f241 5110 	movw	r1, #5392	@ 0x1510
 80060d2:	4811      	ldr	r0, [pc, #68]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 80060d4:	f7fa fdc2 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	2b0f      	cmp	r3, #15
 80060de:	d904      	bls.n	80060ea <HAL_TIM_ConfigClockSource+0x422>
 80060e0:	f241 5111 	movw	r1, #5393	@ 0x1511
 80060e4:	480c      	ldr	r0, [pc, #48]	@ (8006118 <HAL_TIM_ConfigClockSource+0x450>)
 80060e6:	f7fa fdb9 	bl	8000c5c <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fc22 	bl	8006940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2160      	movs	r1, #96	@ 0x60
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc4b 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 8006108:	e07a      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
 800610a:	bf00      	nop
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40000400 	.word	0x40000400
 8006114:	40000800 	.word	0x40000800
 8006118:	08007508 	.word	0x08007508
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4a3e      	ldr	r2, [pc, #248]	@ (800621c <HAL_TIM_ConfigClockSource+0x554>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d013      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x486>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800612e:	d00e      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x486>
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a3a      	ldr	r2, [pc, #232]	@ (8006220 <HAL_TIM_ConfigClockSource+0x558>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d009      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x486>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a39      	ldr	r2, [pc, #228]	@ (8006224 <HAL_TIM_ConfigClockSource+0x55c>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d004      	beq.n	800614e <HAL_TIM_ConfigClockSource+0x486>
 8006144:	f241 511d 	movw	r1, #5405	@ 0x151d
 8006148:	4837      	ldr	r0, [pc, #220]	@ (8006228 <HAL_TIM_ConfigClockSource+0x560>)
 800614a:	f7fa fd87 	bl	8000c5c <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006156:	d014      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x4ba>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d010      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x4ba>
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x4ba>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2b02      	cmp	r3, #2
 800616e:	d008      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x4ba>
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	2b0a      	cmp	r3, #10
 8006176:	d004      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0x4ba>
 8006178:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 800617c:	482a      	ldr	r0, [pc, #168]	@ (8006228 <HAL_TIM_ConfigClockSource+0x560>)
 800617e:	f7fa fd6d 	bl	8000c5c <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d904      	bls.n	8006194 <HAL_TIM_ConfigClockSource+0x4cc>
 800618a:	f241 5121 	movw	r1, #5409	@ 0x1521
 800618e:	4826      	ldr	r0, [pc, #152]	@ (8006228 <HAL_TIM_ConfigClockSource+0x560>)
 8006190:	f7fa fd64 	bl	8000c5c <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061a0:	461a      	mov	r2, r3
 80061a2:	f000 fb9f 	bl	80068e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2140      	movs	r1, #64	@ 0x40
 80061ac:	4618      	mov	r0, r3
 80061ae:	f000 fbf6 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 80061b2:	e025      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a18      	ldr	r2, [pc, #96]	@ (800621c <HAL_TIM_ConfigClockSource+0x554>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d013      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x51e>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061c6:	d00e      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x51e>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a14      	ldr	r2, [pc, #80]	@ (8006220 <HAL_TIM_ConfigClockSource+0x558>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d009      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x51e>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a13      	ldr	r2, [pc, #76]	@ (8006224 <HAL_TIM_ConfigClockSource+0x55c>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d004      	beq.n	80061e6 <HAL_TIM_ConfigClockSource+0x51e>
 80061dc:	f241 5130 	movw	r1, #5424	@ 0x1530
 80061e0:	4811      	ldr	r0, [pc, #68]	@ (8006228 <HAL_TIM_ConfigClockSource+0x560>)
 80061e2:	f7fa fd3b 	bl	8000c5c <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4619      	mov	r1, r3
 80061f0:	4610      	mov	r0, r2
 80061f2:	f000 fbd4 	bl	800699e <TIM_ITRx_SetConfig>
      break;
 80061f6:	e003      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
    }

    default:
      status = HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	73fb      	strb	r3, [r7, #15]
      break;
 80061fc:	e000      	b.n	8006200 <HAL_TIM_ConfigClockSource+0x538>
      break;
 80061fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006210:	7bfb      	ldrb	r3, [r7, #15]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40000400 	.word	0x40000400
 8006224:	40000800 	.word	0x40000800
 8006228:	08007508 	.word	0x08007508

0800622c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d107      	bne.n	8006278 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2201      	movs	r2, #1
 800626c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006276:	e02a      	b.n	80062ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	429a      	cmp	r2, r3
 8006280:	d107      	bne.n	8006292 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2202      	movs	r2, #2
 8006286:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006290:	e01d      	b.n	80062ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d107      	bne.n	80062ac <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2204      	movs	r2, #4
 80062a0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	2201      	movs	r2, #1
 80062a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062aa:	e010      	b.n	80062ce <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d107      	bne.n	80062c6 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2208      	movs	r2, #8
 80062ba:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80062c4:	e003      	b.n	80062ce <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f7ff ffb5 	bl	800623e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	771a      	strb	r2, [r3, #28]
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d10b      	bne.n	8006312 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2201      	movs	r2, #1
 80062fe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d136      	bne.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006310:	e031      	b.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	429a      	cmp	r2, r3
 800631a:	d10b      	bne.n	8006334 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2202      	movs	r2, #2
 8006320:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d125      	bne.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006332:	e020      	b.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	429a      	cmp	r2, r3
 800633c:	d10b      	bne.n	8006356 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2204      	movs	r2, #4
 8006342:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	699b      	ldr	r3, [r3, #24]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d114      	bne.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006354:	e00f      	b.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d10a      	bne.n	8006376 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2208      	movs	r2, #8
 8006364:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d103      	bne.n	8006376 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006376:	68f8      	ldr	r0, [r7, #12]
 8006378:	f7fa fc5c 	bl	8000c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	771a      	strb	r2, [r3, #28]
}
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d103      	bne.n	80063aa <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	771a      	strb	r2, [r3, #28]
 80063a8:	e019      	b.n	80063de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d103      	bne.n	80063bc <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2202      	movs	r2, #2
 80063b8:	771a      	strb	r2, [r3, #28]
 80063ba:	e010      	b.n	80063de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d103      	bne.n	80063ce <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2204      	movs	r2, #4
 80063ca:	771a      	strb	r2, [r3, #28]
 80063cc:	e007      	b.n	80063de <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d102      	bne.n	80063de <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2208      	movs	r2, #8
 80063dc:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f7ff ff24 	bl	800622c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	771a      	strb	r2, [r3, #28]
}
 80063ea:	bf00      	nop
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
	...

080063f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a29      	ldr	r2, [pc, #164]	@ (80064ac <TIM_Base_SetConfig+0xb8>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d00b      	beq.n	8006424 <TIM_Base_SetConfig+0x30>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006412:	d007      	beq.n	8006424 <TIM_Base_SetConfig+0x30>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a26      	ldr	r2, [pc, #152]	@ (80064b0 <TIM_Base_SetConfig+0xbc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d003      	beq.n	8006424 <TIM_Base_SetConfig+0x30>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a25      	ldr	r2, [pc, #148]	@ (80064b4 <TIM_Base_SetConfig+0xc0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d108      	bne.n	8006436 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800642a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	68fa      	ldr	r2, [r7, #12]
 8006432:	4313      	orrs	r3, r2
 8006434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a1c      	ldr	r2, [pc, #112]	@ (80064ac <TIM_Base_SetConfig+0xb8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d00b      	beq.n	8006456 <TIM_Base_SetConfig+0x62>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006444:	d007      	beq.n	8006456 <TIM_Base_SetConfig+0x62>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a19      	ldr	r2, [pc, #100]	@ (80064b0 <TIM_Base_SetConfig+0xbc>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d003      	beq.n	8006456 <TIM_Base_SetConfig+0x62>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a18      	ldr	r2, [pc, #96]	@ (80064b4 <TIM_Base_SetConfig+0xc0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d108      	bne.n	8006468 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800645c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	4313      	orrs	r3, r2
 8006466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	689a      	ldr	r2, [r3, #8]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a07      	ldr	r2, [pc, #28]	@ (80064ac <TIM_Base_SetConfig+0xb8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d103      	bne.n	800649c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	615a      	str	r2, [r3, #20]
}
 80064a2:	bf00      	nop
 80064a4:	3714      	adds	r7, #20
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bc80      	pop	{r7}
 80064aa:	4770      	bx	lr
 80064ac:	40012c00 	.word	0x40012c00
 80064b0:	40000400 	.word	0x40000400
 80064b4:	40000800 	.word	0x40000800

080064b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b086      	sub	sp, #24
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	f023 0201 	bic.w	r2, r3, #1
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f023 0303 	bic.w	r3, r3, #3
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	4313      	orrs	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f023 0302 	bic.w	r3, r3, #2
 8006500:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	689b      	ldr	r3, [r3, #8]
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a30      	ldr	r2, [pc, #192]	@ (80065d0 <TIM_OC1_SetConfig+0x118>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d119      	bne.n	8006548 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d008      	beq.n	800652e <TIM_OC1_SetConfig+0x76>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d004      	beq.n	800652e <TIM_OC1_SetConfig+0x76>
 8006524:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8006528:	482a      	ldr	r0, [pc, #168]	@ (80065d4 <TIM_OC1_SetConfig+0x11c>)
 800652a:	f7fa fb97 	bl	8000c5c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	f023 0308 	bic.w	r3, r3, #8
 8006534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4313      	orrs	r3, r2
 800653e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f023 0304 	bic.w	r3, r3, #4
 8006546:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	4a21      	ldr	r2, [pc, #132]	@ (80065d0 <TIM_OC1_SetConfig+0x118>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d12d      	bne.n	80065ac <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	699b      	ldr	r3, [r3, #24]
 8006554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006558:	d008      	beq.n	800656c <TIM_OC1_SetConfig+0xb4>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d004      	beq.n	800656c <TIM_OC1_SetConfig+0xb4>
 8006562:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 8006566:	481b      	ldr	r0, [pc, #108]	@ (80065d4 <TIM_OC1_SetConfig+0x11c>)
 8006568:	f7fa fb78 	bl	8000c5c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006574:	d008      	beq.n	8006588 <TIM_OC1_SetConfig+0xd0>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	695b      	ldr	r3, [r3, #20]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d004      	beq.n	8006588 <TIM_OC1_SetConfig+0xd0>
 800657e:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 8006582:	4814      	ldr	r0, [pc, #80]	@ (80065d4 <TIM_OC1_SetConfig+0x11c>)
 8006584:	f7fa fb6a 	bl	8000c5c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800658e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006596:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4313      	orrs	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	621a      	str	r2, [r3, #32]
}
 80065c6:	bf00      	nop
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	40012c00 	.word	0x40012c00
 80065d4:	08007508 	.word	0x08007508

080065d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	f023 0210 	bic.w	r2, r3, #16
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800660e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	021b      	lsls	r3, r3, #8
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	4313      	orrs	r3, r2
 800661a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0320 	bic.w	r3, r3, #32
 8006622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	011b      	lsls	r3, r3, #4
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a31      	ldr	r2, [pc, #196]	@ (80066f8 <TIM_OC2_SetConfig+0x120>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d11a      	bne.n	800666e <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d008      	beq.n	8006652 <TIM_OC2_SetConfig+0x7a>
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	2b08      	cmp	r3, #8
 8006646:	d004      	beq.n	8006652 <TIM_OC2_SetConfig+0x7a>
 8006648:	f641 3110 	movw	r1, #6928	@ 0x1b10
 800664c:	482b      	ldr	r0, [pc, #172]	@ (80066fc <TIM_OC2_SetConfig+0x124>)
 800664e:	f7fa fb05 	bl	8000c5c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	697a      	ldr	r2, [r7, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4a21      	ldr	r2, [pc, #132]	@ (80066f8 <TIM_OC2_SetConfig+0x120>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d12f      	bne.n	80066d6 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800667e:	d008      	beq.n	8006692 <TIM_OC2_SetConfig+0xba>
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d004      	beq.n	8006692 <TIM_OC2_SetConfig+0xba>
 8006688:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 800668c:	481b      	ldr	r0, [pc, #108]	@ (80066fc <TIM_OC2_SetConfig+0x124>)
 800668e:	f7fa fae5 	bl	8000c5c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800669a:	d008      	beq.n	80066ae <TIM_OC2_SetConfig+0xd6>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <TIM_OC2_SetConfig+0xd6>
 80066a4:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 80066a8:	4814      	ldr	r0, [pc, #80]	@ (80066fc <TIM_OC2_SetConfig+0x124>)
 80066aa:	f7fa fad7 	bl	8000c5c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	009b      	lsls	r3, r3, #2
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	697a      	ldr	r2, [r7, #20]
 80066ee:	621a      	str	r2, [r3, #32]
}
 80066f0:	bf00      	nop
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	40012c00 	.word	0x40012c00
 80066fc:	08007508 	.word	0x08007508

08006700 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800672e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006748:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	4313      	orrs	r3, r2
 8006754:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a31      	ldr	r2, [pc, #196]	@ (8006820 <TIM_OC3_SetConfig+0x120>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d11a      	bne.n	8006794 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <TIM_OC3_SetConfig+0x78>
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	2b08      	cmp	r3, #8
 800676c:	d004      	beq.n	8006778 <TIM_OC3_SetConfig+0x78>
 800676e:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 8006772:	482c      	ldr	r0, [pc, #176]	@ (8006824 <TIM_OC3_SetConfig+0x124>)
 8006774:	f7fa fa72 	bl	8000c5c <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800677e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a22      	ldr	r2, [pc, #136]	@ (8006820 <TIM_OC3_SetConfig+0x120>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d12f      	bne.n	80067fc <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067a4:	d008      	beq.n	80067b8 <TIM_OC3_SetConfig+0xb8>
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	699b      	ldr	r3, [r3, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d004      	beq.n	80067b8 <TIM_OC3_SetConfig+0xb8>
 80067ae:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80067b2:	481c      	ldr	r0, [pc, #112]	@ (8006824 <TIM_OC3_SetConfig+0x124>)
 80067b4:	f7fa fa52 	bl	8000c5c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c0:	d008      	beq.n	80067d4 <TIM_OC3_SetConfig+0xd4>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d004      	beq.n	80067d4 <TIM_OC3_SetConfig+0xd4>
 80067ca:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 80067ce:	4815      	ldr	r0, [pc, #84]	@ (8006824 <TIM_OC3_SetConfig+0x124>)
 80067d0:	f7fa fa44 	bl	8000c5c <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80067da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80067e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	695b      	ldr	r3, [r3, #20]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	699b      	ldr	r3, [r3, #24]
 80067f4:	011b      	lsls	r3, r3, #4
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	693a      	ldr	r2, [r7, #16]
 8006800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40012c00 	.word	0x40012c00
 8006824:	08007508 	.word	0x08007508

08006828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6a1b      	ldr	r3, [r3, #32]
 800683c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	69db      	ldr	r3, [r3, #28]
 800684e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006856:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800685e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	021b      	lsls	r3, r3, #8
 8006866:	68fa      	ldr	r2, [r7, #12]
 8006868:	4313      	orrs	r3, r2
 800686a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006872:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a16      	ldr	r2, [pc, #88]	@ (80068dc <TIM_OC4_SetConfig+0xb4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d117      	bne.n	80068b8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006890:	d008      	beq.n	80068a4 <TIM_OC4_SetConfig+0x7c>
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <TIM_OC4_SetConfig+0x7c>
 800689a:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 800689e:	4810      	ldr	r0, [pc, #64]	@ (80068e0 <TIM_OC4_SetConfig+0xb8>)
 80068a0:	f7fa f9dc 	bl	8000c5c <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068ac:	683b      	ldr	r3, [r7, #0]
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	019b      	lsls	r3, r3, #6
 80068b2:	697a      	ldr	r2, [r7, #20]
 80068b4:	4313      	orrs	r3, r2
 80068b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	697a      	ldr	r2, [r7, #20]
 80068bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	685a      	ldr	r2, [r3, #4]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	621a      	str	r2, [r3, #32]
}
 80068d2:	bf00      	nop
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	40012c00 	.word	0x40012c00
 80068e0:	08007508 	.word	0x08007508

080068e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800690e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 030a 	bic.w	r3, r3, #10
 8006920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	bc80      	pop	{r7}
 800693e:	4770      	bx	lr

08006940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006940:	b480      	push	{r7}
 8006942:	b087      	sub	sp, #28
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f023 0210 	bic.w	r2, r3, #16
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800696a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	031b      	lsls	r3, r3, #12
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800697c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	011b      	lsls	r3, r3, #4
 8006982:	697a      	ldr	r2, [r7, #20]
 8006984:	4313      	orrs	r3, r2
 8006986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	693a      	ldr	r2, [r7, #16]
 800698c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	697a      	ldr	r2, [r7, #20]
 8006992:	621a      	str	r2, [r3, #32]
}
 8006994:	bf00      	nop
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800699e:	b480      	push	{r7}
 80069a0:	b085      	sub	sp, #20
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	6078      	str	r0, [r7, #4]
 80069a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	f043 0307 	orr.w	r3, r3, #7
 80069c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	609a      	str	r2, [r3, #8]
}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bc80      	pop	{r7}
 80069d0:	4770      	bx	lr

080069d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b087      	sub	sp, #28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	60f8      	str	r0, [r7, #12]
 80069da:	60b9      	str	r1, [r7, #8]
 80069dc:	607a      	str	r2, [r7, #4]
 80069de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80069ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	021a      	lsls	r2, r3, #8
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	4313      	orrs	r3, r2
 80069fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	609a      	str	r2, [r3, #8]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bc80      	pop	{r7}
 8006a0e:	4770      	bx	lr

08006a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	4a22      	ldr	r2, [pc, #136]	@ (8006aa8 <TIM_CCxChannelCmd+0x98>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d010      	beq.n	8006a46 <TIM_CCxChannelCmd+0x36>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d00c      	beq.n	8006a46 <TIM_CCxChannelCmd+0x36>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8006aac <TIM_CCxChannelCmd+0x9c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d008      	beq.n	8006a46 <TIM_CCxChannelCmd+0x36>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a1e      	ldr	r2, [pc, #120]	@ (8006ab0 <TIM_CCxChannelCmd+0xa0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d004      	beq.n	8006a46 <TIM_CCxChannelCmd+0x36>
 8006a3c:	f641 5192 	movw	r1, #7570	@ 0x1d92
 8006a40:	481c      	ldr	r0, [pc, #112]	@ (8006ab4 <TIM_CCxChannelCmd+0xa4>)
 8006a42:	f7fa f90b 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d010      	beq.n	8006a6e <TIM_CCxChannelCmd+0x5e>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	2b04      	cmp	r3, #4
 8006a50:	d00d      	beq.n	8006a6e <TIM_CCxChannelCmd+0x5e>
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d00a      	beq.n	8006a6e <TIM_CCxChannelCmd+0x5e>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	2b0c      	cmp	r3, #12
 8006a5c:	d007      	beq.n	8006a6e <TIM_CCxChannelCmd+0x5e>
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b3c      	cmp	r3, #60	@ 0x3c
 8006a62:	d004      	beq.n	8006a6e <TIM_CCxChannelCmd+0x5e>
 8006a64:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8006a68:	4812      	ldr	r0, [pc, #72]	@ (8006ab4 <TIM_CCxChannelCmd+0xa4>)
 8006a6a:	f7fa f8f7 	bl	8000c5c <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2201      	movs	r2, #1
 8006a76:	fa02 f303 	lsl.w	r3, r2, r3
 8006a7a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	43db      	mvns	r3, r3
 8006a84:	401a      	ands	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1a      	ldr	r2, [r3, #32]
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	f003 031f 	and.w	r3, r3, #31
 8006a94:	6879      	ldr	r1, [r7, #4]
 8006a96:	fa01 f303 	lsl.w	r3, r1, r3
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	621a      	str	r2, [r3, #32]
}
 8006aa0:	bf00      	nop
 8006aa2:	3718      	adds	r7, #24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	40012c00 	.word	0x40012c00
 8006aac:	40000400 	.word	0x40000400
 8006ab0:	40000800 	.word	0x40000800
 8006ab4:	08007508 	.word	0x08007508

08006ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a4d      	ldr	r2, [pc, #308]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d013      	beq.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ad4:	d00e      	beq.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a49      	ldr	r2, [pc, #292]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d009      	beq.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a47      	ldr	r2, [pc, #284]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d004      	beq.n	8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8006aea:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8006aee:	4846      	ldr	r0, [pc, #280]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8006af0:	f7fa f8b4 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d020      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	2b10      	cmp	r3, #16
 8006b02:	d01c      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d018      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b30      	cmp	r3, #48	@ 0x30
 8006b12:	d014      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b40      	cmp	r3, #64	@ 0x40
 8006b1a:	d010      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b50      	cmp	r3, #80	@ 0x50
 8006b22:	d00c      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b60      	cmp	r3, #96	@ 0x60
 8006b2a:	d008      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b70      	cmp	r3, #112	@ 0x70
 8006b32:	d004      	beq.n	8006b3e <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8006b34:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8006b38:	4833      	ldr	r0, [pc, #204]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8006b3a:	f7fa f88f 	bl	8000c5c <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	2b80      	cmp	r3, #128	@ 0x80
 8006b44:	d008      	beq.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8006b4e:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 8006b52:	482d      	ldr	r0, [pc, #180]	@ (8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8006b54:	f7fa f882 	bl	8000c5c <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b5e:	2b01      	cmp	r3, #1
 8006b60:	d101      	bne.n	8006b66 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8006b62:	2302      	movs	r3, #2
 8006b64:	e046      	b.n	8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b8c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68fa      	ldr	r2, [r7, #12]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a15      	ldr	r2, [pc, #84]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d00e      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bb2:	d009      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a11      	ldr	r2, [pc, #68]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d004      	beq.n	8006bc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a10      	ldr	r2, [pc, #64]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d10c      	bne.n	8006be2 <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40012c00 	.word	0x40012c00
 8006c00:	40000400 	.word	0x40000400
 8006c04:	40000800 	.word	0x40000800
 8006c08:	08007540 	.word	0x08007540

08006c0c <TMC_2590_Init>:
#include "stm32f1xx_tmc_2590.h"

#include <stdlib.h>

TMC_2590_StatusTypeDef TMC_2590_Init(TMC_2590_HandleTypeDef *htmc2590)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d101      	bne.n	8006c1e <TMC_2590_Init+0x12>
    {
        return TMC_2590_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e06b      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_READY)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <TMC_2590_Init+0x22>
    {
        // Peripheral is already initialized
        return TMC_2590_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e063      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d101      	bne.n	8006c3e <TMC_2590_Init+0x32>
    {
        return TMC_2590_BUSY;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e05b      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	2b06      	cmp	r3, #6
 8006c48:	d101      	bne.n	8006c4e <TMC_2590_Init+0x42>
    {
        return TMC_2590_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e053      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }

    if (htmc2590->Init.SPI_HandlerInstance == NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d101      	bne.n	8006c5a <TMC_2590_Init+0x4e>
    {
        return TMC_2590_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e04d      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }

    if (!htmc2590->Init.use_pwm && htmc2590->Init.STEP_Tim == NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d105      	bne.n	8006c70 <TMC_2590_Init+0x64>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d101      	bne.n	8006c70 <TMC_2590_Init+0x64>
    {
        return TMC_2590_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e042      	b.n	8006cf6 <TMC_2590_Init+0xea>
    }
    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // todo throw errors if pins are undefined

    // set st_alone
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6958      	ldr	r0, [r3, #20]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	8b19      	ldrh	r1, [r3, #24]
            htmc2590->Init.ST_ALONE_Pin,
            htmc2590->Init.use_st_alone ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	7c9b      	ldrb	r3, [r3, #18]
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fc fd98 	bl	80037c4 <HAL_GPIO_WritePin>

    // set default pin state. this should actually already be configured by the gpio library
    if (!htmc2590->Init.use_st_alone)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	7c9b      	ldrb	r3, [r3, #18]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <TMC_2590_Init+0xa6>
    {
        // todo check conf registers
        HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6858      	ldr	r0, [r3, #4]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	891b      	ldrh	r3, [r3, #8]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	f7fc fd8c 	bl	80037c4 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
        // write config registers
        __send_conf_registers(htmc2590);
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	f000 f8f0 	bl	8006e92 <__send_conf_registers>
    }
    if (!htmc2590->Init.use_pwm)
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d107      	bne.n	8006ccc <TMC_2590_Init+0xc0>
    {
        // set default step
        HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	f7fc fd7c 	bl	80037c4 <HAL_GPIO_WritePin>
                htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
    }
    // set default dir
    HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	69d8      	ldr	r0, [r3, #28]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	8c1b      	ldrh	r3, [r3, #32]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	f7fc fd74 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    // set enn
    HAL_GPIO_WritePin(htmc2590->Init.ENN_GPIO_Port, htmc2590->Init.ENN_Pin,
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68d8      	ldr	r0, [r3, #12]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8a1b      	ldrh	r3, [r3, #16]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7fc fd6c 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    // set driver state
    htmc2590->State = TMC_2590_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2201      	movs	r2, #1
 8006cf0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // return status
    return TMC_2590_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <TMC_2590_MoveSteps>:
    return TMC_2590_OK;
}

TMC_2590_StatusTypeDef TMC_2590_MoveSteps(TMC_2590_HandleTypeDef *htmc2590,
        int16_t steps)
{
 8006cfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	460b      	mov	r3, r1
 8006d0a:	807b      	strh	r3, [r7, #2]
 8006d0c:	466b      	mov	r3, sp
 8006d0e:	461e      	mov	r6, r3
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <TMC_2590_MoveSteps+0x1c>
    {
        return TMC_2590_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e0a4      	b.n	8006e64 <TMC_2590_MoveSteps+0x166>
    }
    // check driver state
    if (htmc2590->State == TMC_2590_STATE_RESET)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <TMC_2590_MoveSteps+0x2c>
    {
        // Peripheral is not initialized
        return TMC_2590_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e09c      	b.n	8006e64 <TMC_2590_MoveSteps+0x166>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d101      	bne.n	8006d3a <TMC_2590_MoveSteps+0x3c>
    {
        return TMC_2590_BUSY;
 8006d36:	2302      	movs	r3, #2
 8006d38:	e094      	b.n	8006e64 <TMC_2590_MoveSteps+0x166>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b06      	cmp	r3, #6
 8006d44:	d101      	bne.n	8006d4a <TMC_2590_MoveSteps+0x4c>
    {
        return TMC_2590_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e08c      	b.n	8006e64 <TMC_2590_MoveSteps+0x166>
    }

    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2202      	movs	r2, #2
 8006d4e:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // set dir
    if (steps < 0)
 8006d52:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	da08      	bge.n	8006d6c <TMC_2590_MoveSteps+0x6e>
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69d8      	ldr	r0, [r3, #28]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	8c1b      	ldrh	r3, [r3, #32]
 8006d62:	2200      	movs	r2, #0
 8006d64:	4619      	mov	r1, r3
 8006d66:	f7fc fd2d 	bl	80037c4 <HAL_GPIO_WritePin>
 8006d6a:	e007      	b.n	8006d7c <TMC_2590_MoveSteps+0x7e>
                GPIO_PIN_RESET);
    }
    else
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69d8      	ldr	r0, [r3, #28]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	8c1b      	ldrh	r3, [r3, #32]
 8006d74:	2201      	movs	r2, #1
 8006d76:	4619      	mov	r1, r3
 8006d78:	f7fc fd24 	bl	80037c4 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
    }

    if (!htmc2590->Init.use_pwm)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d126      	bne.n	8006dd4 <TMC_2590_MoveSteps+0xd6>
    {
        // pulse step pin with some delay
        for (uint32_t i = 0; i < steps; i++)
 8006d86:	2300      	movs	r3, #0
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e018      	b.n	8006dbe <TMC_2590_MoveSteps+0xc0>
        {
            // TODO set a constant for the delay
            HAL_Delay(1);
 8006d8c:	2001      	movs	r0, #1
 8006d8e:	f7fa fc6d 	bl	800166c <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	f7fc fd11 	bl	80037c4 <HAL_GPIO_WritePin>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_SET);
            // TODO set a constant for the delay
            HAL_Delay(1);
 8006da2:	2001      	movs	r0, #1
 8006da4:	f7fa fc62 	bl	800166c <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db0:	2200      	movs	r2, #0
 8006db2:	4619      	mov	r1, r3
 8006db4:	f7fc fd06 	bl	80037c4 <HAL_GPIO_WritePin>
        for (uint32_t i = 0; i < steps; i++)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dc2:	697a      	ldr	r2, [r7, #20]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d3e1      	bcc.n	8006d8c <TMC_2590_MoveSteps+0x8e>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
        }
        //  set driver state
        htmc2590->State = TMC_2590_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        return TMC_2590_OK;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e047      	b.n	8006e64 <TMC_2590_MoveSteps+0x166>
    }

    // todo callback should move TMC2590 to READY state
    // config timer settings to pulse
    uint16_t pwm_pulses = abs(steps);
 8006dd4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	bfb8      	it	lt
 8006ddc:	425b      	neglt	r3, r3
 8006dde:	823b      	strh	r3, [r7, #16]
    uint16_t pwm_data[pwm_pulses];
 8006de0:	8a39      	ldrh	r1, [r7, #16]
 8006de2:	460b      	mov	r3, r1
 8006de4:	3b01      	subs	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	b28b      	uxth	r3, r1
 8006dea:	2200      	movs	r2, #0
 8006dec:	4698      	mov	r8, r3
 8006dee:	4691      	mov	r9, r2
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8006dfc:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8006e00:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8006e04:	b28b      	uxth	r3, r1
 8006e06:	2200      	movs	r2, #0
 8006e08:	461c      	mov	r4, r3
 8006e0a:	4615      	mov	r5, r2
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	012b      	lsls	r3, r5, #4
 8006e16:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8006e1a:	0122      	lsls	r2, r4, #4
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	3307      	adds	r3, #7
 8006e22:	08db      	lsrs	r3, r3, #3
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	ebad 0d03 	sub.w	sp, sp, r3
 8006e2a:	466b      	mov	r3, sp
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	085b      	lsrs	r3, r3, #1
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = 0; i < pwm_pulses; i++)
 8006e34:	2300      	movs	r3, #0
 8006e36:	827b      	strh	r3, [r7, #18]
 8006e38:	e007      	b.n	8006e4a <TMC_2590_MoveSteps+0x14c>
    {
        pwm_data[i] = 50;
 8006e3a:	8a7a      	ldrh	r2, [r7, #18]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	2132      	movs	r1, #50	@ 0x32
 8006e40:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (uint16_t i = 0; i < pwm_pulses; i++)
 8006e44:	8a7b      	ldrh	r3, [r7, #18]
 8006e46:	3301      	adds	r3, #1
 8006e48:	827b      	strh	r3, [r7, #18]
 8006e4a:	8a7a      	ldrh	r2, [r7, #18]
 8006e4c:	8a3b      	ldrh	r3, [r7, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3f3      	bcc.n	8006e3a <TMC_2590_MoveSteps+0x13c>
    }
    HAL_TIM_PWM_Start_DMA(htmc2590->Init.STEP_Tim, htmc2590->Init.STEP_Channel,
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8006e5a:	8a3b      	ldrh	r3, [r7, #16]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	f7fe fab5 	bl	80053cc <HAL_TIM_PWM_Start_DMA>
            (uint32_t*) pwm_data, pwm_pulses);
    return TMC_2590_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	46b5      	mov	sp, r6
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006e70 <TMC_2590_TIM_PWM_PulseFinishedCallback>:
    return TMC_2590_OK;
}

void TMC_2590_TIM_PWM_PulseFinishedCallback(TMC_2590_HandleTypeDef *htmc2590,
        TIM_HandleTypeDef *htim)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 8006e7a:	2104      	movs	r1, #4
 8006e7c:	6838      	ldr	r0, [r7, #0]
 8006e7e:	f7fe fc9d 	bl	80057bc <HAL_TIM_PWM_Stop_DMA>
    htmc2590->State = TMC_2590_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <__send_conf_registers>:

TMC_2590_StatusTypeDef __send_conf_registers(TMC_2590_HandleTypeDef *htmc2590)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
    uint32_t SPImsg = 0;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	60fb      	str	r3, [r7, #12]
    uint8_t SPI_read_bytes[3];

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCONF; // DRVCONF
 8006e9e:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8006ea2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.tst << 16);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.slp << 11);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb8:	02db      	lsls	r3, r3, #11
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	4313      	orrs	r3, r2
 8006ebe:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.dis_s2g << 10);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ec6:	029b      	lsls	r3, r3, #10
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.ts2g << 8);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006ed4:	021b      	lsls	r3, r3, #8
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.sdoff << 7);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006ee2:	01db      	lsls	r3, r3, #7
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.vsense << 6);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef0:	019b      	lsls	r3, r3, #6
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	4313      	orrs	r3, r2
 8006ef6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.rdsel << 4);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006efe:	011b      	lsls	r3, r3, #4
 8006f00:	68fa      	ldr	r2, [r7, #12]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.otsens << 3);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006f0c:	00db      	lsls	r3, r3, #3
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.shrtsens << 2);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_pfd << 1);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f28:	005b      	lsls	r3, r3, #1
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_s2vs << 0);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8006f36:	461a      	mov	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
    // write new registers
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8006f3e:	f107 0308 	add.w	r3, r7, #8
 8006f42:	461a      	mov	r2, r3
 8006f44:	68f9      	ldr	r1, [r7, #12]
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f910 	bl	800716c <__send_spi_packet>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <__send_conf_registers+0xc4>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e0d7      	b.n	8007106 <__send_conf_registers+0x274>
    }
    // SPI_read_bytes to DRVSTATUS
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8006f56:	f107 0308 	add.w	r3, r7, #8
 8006f5a:	4619      	mov	r1, r3
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f000 f933 	bl	80071c8 <__set_drvstatus_struct>

    // set rest of the registers
    SPImsg = __TMC_2590_ConfRegister_Header_SGCSCONF;
 8006f62:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8006f66:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sfilt << 16);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8006f6e:	041b      	lsls	r3, r3, #16
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sgt << 8);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.cs << 0);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8006f92:	f107 0308 	add.w	r3, r7, #8
 8006f96:	461a      	mov	r2, r3
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f8e6 	bl	800716c <__send_spi_packet>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d001      	beq.n	8006faa <__send_conf_registers+0x118>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8006fa6:	2301      	movs	r3, #1
 8006fa8:	e0ad      	b.n	8007106 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8006faa:	f107 0308 	add.w	r3, r7, #8
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 f909 	bl	80071c8 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_SMARTEN;
 8006fb6:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 8006fba:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seimin << 15);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8006fc2:	03db      	lsls	r3, r3, #15
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.sedn << 13);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006fd0:	035b      	lsls	r3, r3, #13
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semax << 8);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006fde:	021b      	lsls	r3, r3, #8
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seup << 5);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006fec:	015b      	lsls	r3, r3, #5
 8006fee:	68fa      	ldr	r2, [r7, #12]
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semin << 0);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8007002:	f107 0308 	add.w	r3, r7, #8
 8007006:	461a      	mov	r2, r3
 8007008:	68f9      	ldr	r1, [r7, #12]
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f8ae 	bl	800716c <__send_spi_packet>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <__send_conf_registers+0x188>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e075      	b.n	8007106 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 800701a:	f107 0308 	add.w	r3, r7, #8
 800701e:	4619      	mov	r1, r3
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 f8d1 	bl	80071c8 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_CHOPCONF;
 8007026:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800702a:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.tbl << 15);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8007032:	03db      	lsls	r3, r3, #15
 8007034:	68fa      	ldr	r2, [r7, #12]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.chm << 14);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007040:	039b      	lsls	r3, r3, #14
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.rndtf << 13);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800704e:	035b      	lsls	r3, r3, #13
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hdec << 11);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800705c:	02db      	lsls	r3, r3, #11
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hend << 7);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 800706a:	01db      	lsls	r3, r3, #7
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hstrt << 4);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8007078:	011b      	lsls	r3, r3, #4
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.toff << 0);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8007086:	461a      	mov	r2, r3
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 800708e:	f107 0308 	add.w	r3, r7, #8
 8007092:	461a      	mov	r2, r3
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f868 	bl	800716c <__send_spi_packet>
 800709c:	4603      	mov	r3, r0
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d001      	beq.n	80070a6 <__send_conf_registers+0x214>
    {
        // todo handle error
        return TMC_2590_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e02f      	b.n	8007106 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 80070a6:	f107 0308 	add.w	r3, r7, #8
 80070aa:	4619      	mov	r1, r3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f000 f88b 	bl	80071c8 <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCTRL;
 80070b2:	2300      	movs	r3, #0
 80070b4:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.intpol << 9);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80070bc:	025b      	lsls	r3, r3, #9
 80070be:	68fa      	ldr	r2, [r7, #12]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.dedge << 8);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 80070ca:	021b      	lsls	r3, r3, #8
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.mres << 0);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80070d8:	461a      	mov	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4313      	orrs	r3, r2
 80070de:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 80070e0:	f107 0308 	add.w	r3, r7, #8
 80070e4:	461a      	mov	r2, r3
 80070e6:	68f9      	ldr	r1, [r7, #12]
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f83f 	bl	800716c <__send_spi_packet>
 80070ee:	4603      	mov	r3, r0
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d001      	beq.n	80070f8 <__send_conf_registers+0x266>
    {
        // todo handle error
        return TMC_2590_ERROR;
 80070f4:	2301      	movs	r3, #1
 80070f6:	e006      	b.n	8007106 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 80070f8:	f107 0308 	add.w	r3, r7, #8
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f000 f862 	bl	80071c8 <__set_drvstatus_struct>
    return TMC_2590_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}

0800710e <__word_to_spi_order_buffer>:

void __word_to_spi_order_buffer(uint32_t word, uint8_t *buff)
{
 800710e:	b480      	push	{r7}
 8007110:	b083      	sub	sp, #12
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
 8007116:	6039      	str	r1, [r7, #0]
    // convert to big endian
    buff[2] = (uint8_t) (word & 0xFF);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	3302      	adds	r3, #2
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	b2d2      	uxtb	r2, r2
 8007120:	701a      	strb	r2, [r3, #0]
    buff[1] = (uint8_t) ((word & 0xFF00) >> 8);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	0a1a      	lsrs	r2, r3, #8
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	3301      	adds	r3, #1
 800712a:	b2d2      	uxtb	r2, r2
 800712c:	701a      	strb	r2, [r3, #0]
    buff[0] = (uint8_t) ((word & 0xFF0000) >> 16);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0c1b      	lsrs	r3, r3, #16
 8007132:	b2da      	uxtb	r2, r3
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	701a      	strb	r2, [r3, #0]
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	bc80      	pop	{r7}
 8007140:	4770      	bx	lr

08007142 <__spi_order_buffer_to_word>:

uint32_t __spi_order_buffer_to_word(uint8_t *buff)
{
 8007142:	b480      	push	{r7}
 8007144:	b083      	sub	sp, #12
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
    return ((uint32_t) buff[0] << 16) | ((uint32_t) buff[1] << 8)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	041a      	lsls	r2, r3, #16
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	3301      	adds	r3, #1
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	4313      	orrs	r3, r2
            | (uint32_t) buff[2];
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	3202      	adds	r2, #2
 800715e:	7812      	ldrb	r2, [r2, #0]
 8007160:	4313      	orrs	r3, r2
}
 8007162:	4618      	mov	r0, r3
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	bc80      	pop	{r7}
 800716a:	4770      	bx	lr

0800716c <__send_spi_packet>:

HAL_StatusTypeDef __send_spi_packet(TMC_2590_HandleTypeDef *htmc2590,
        uint32_t SPImsg, uint8_t *SPI_read_bytes)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af02      	add	r7, sp, #8
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	607a      	str	r2, [r7, #4]
    uint8_t SPImsg_bytes[3];
    __word_to_spi_order_buffer(SPImsg, SPImsg_bytes);
 8007178:	f107 0314 	add.w	r3, r7, #20
 800717c:	4619      	mov	r1, r3
 800717e:	68b8      	ldr	r0, [r7, #8]
 8007180:	f7ff ffc5 	bl	800710e <__word_to_spi_order_buffer>
    // write new registers
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6858      	ldr	r0, [r3, #4]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	891b      	ldrh	r3, [r3, #8]
 800718c:	2200      	movs	r2, #0
 800718e:	4619      	mov	r1, r3
 8007190:	f7fc fb18 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6818      	ldr	r0, [r3, #0]
 8007198:	f107 0114 	add.w	r1, r7, #20
 800719c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80071a0:	9300      	str	r3, [sp, #0]
 80071a2:	2303      	movs	r3, #3
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	f7fd fd35 	bl	8004c14 <HAL_SPI_TransmitReceive>
 80071aa:	4603      	mov	r3, r0
 80071ac:	75fb      	strb	r3, [r7, #23]
            htmc2590->Init.SPI_HandlerInstance, SPImsg_bytes, SPI_read_bytes, 3,
            1000);
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6858      	ldr	r0, [r3, #4]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	891b      	ldrh	r3, [r3, #8]
 80071b6:	2201      	movs	r2, #1
 80071b8:	4619      	mov	r1, r3
 80071ba:	f7fc fb03 	bl	80037c4 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);
    return spi_status;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <__set_drvstatus_struct>:

void __set_drvstatus_struct(TMC_2590_HandleTypeDef *htmc2590, uint8_t *status)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
    uint32_t status_word = __spi_order_buffer_to_word(status);
 80071d2:	6838      	ldr	r0, [r7, #0]
 80071d4:	f7ff ffb5 	bl	8007142 <__spi_order_buffer_to_word>
 80071d8:	60f8      	str	r0, [r7, #12]

    htmc2590->DrvStatus.sg = status_word & 0x0001;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0301 	and.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    htmc2590->DrvStatus.ot = (status_word >> 1) & 0x0001;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	085b      	lsrs	r3, r3, #1
 80071ee:	b2db      	uxtb	r3, r3
 80071f0:	f003 0301 	and.w	r3, r3, #1
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    htmc2590->DrvStatus.otpw = (status_word >> 2) & 0x0001;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	089b      	lsrs	r3, r3, #2
 8007200:	b2db      	uxtb	r3, r3
 8007202:	f003 0301 	and.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    htmc2590->DrvStatus.shorta = (status_word >> 3) & 0x0001;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	08db      	lsrs	r3, r3, #3
 8007212:	b2db      	uxtb	r3, r3
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	b2da      	uxtb	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    htmc2590->DrvStatus.shortb = (status_word >> 4) & 0x0001;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	091b      	lsrs	r3, r3, #4
 8007224:	b2db      	uxtb	r3, r3
 8007226:	f003 0301 	and.w	r3, r3, #1
 800722a:	b2da      	uxtb	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    htmc2590->DrvStatus.ola = (status_word >> 5) & 0x0001;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	095b      	lsrs	r3, r3, #5
 8007236:	b2db      	uxtb	r3, r3
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	b2da      	uxtb	r2, r3
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    htmc2590->DrvStatus.olb = (status_word >> 6) & 0x0001;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	099b      	lsrs	r3, r3, #6
 8007248:	b2db      	uxtb	r3, r3
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    htmc2590->DrvStatus.stst = (status_word >> 7) & 0x0001;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	b2db      	uxtb	r3, r3
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	b2da      	uxtb	r2, r3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    htmc2590->DrvStatus.unused_bits = (status_word >> 8) & 0x0003;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0a1b      	lsrs	r3, r3, #8
 800726c:	b2db      	uxtb	r3, r3
 800726e:	f003 0303 	and.w	r3, r3, #3
 8007272:	b2da      	uxtb	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	0a9b      	lsrs	r3, r3, #10
            & 0x03FF;
 800727e:	b29b      	uxth	r3, r3
 8007280:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007284:	b29a      	uxth	r2, r3
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
}
 800728c:	bf00      	nop
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <memset>:
 8007294:	4603      	mov	r3, r0
 8007296:	4402      	add	r2, r0
 8007298:	4293      	cmp	r3, r2
 800729a:	d100      	bne.n	800729e <memset+0xa>
 800729c:	4770      	bx	lr
 800729e:	f803 1b01 	strb.w	r1, [r3], #1
 80072a2:	e7f9      	b.n	8007298 <memset+0x4>

080072a4 <__libc_init_array>:
 80072a4:	b570      	push	{r4, r5, r6, lr}
 80072a6:	2600      	movs	r6, #0
 80072a8:	4d0c      	ldr	r5, [pc, #48]	@ (80072dc <__libc_init_array+0x38>)
 80072aa:	4c0d      	ldr	r4, [pc, #52]	@ (80072e0 <__libc_init_array+0x3c>)
 80072ac:	1b64      	subs	r4, r4, r5
 80072ae:	10a4      	asrs	r4, r4, #2
 80072b0:	42a6      	cmp	r6, r4
 80072b2:	d109      	bne.n	80072c8 <__libc_init_array+0x24>
 80072b4:	f000 f81a 	bl	80072ec <_init>
 80072b8:	2600      	movs	r6, #0
 80072ba:	4d0a      	ldr	r5, [pc, #40]	@ (80072e4 <__libc_init_array+0x40>)
 80072bc:	4c0a      	ldr	r4, [pc, #40]	@ (80072e8 <__libc_init_array+0x44>)
 80072be:	1b64      	subs	r4, r4, r5
 80072c0:	10a4      	asrs	r4, r4, #2
 80072c2:	42a6      	cmp	r6, r4
 80072c4:	d105      	bne.n	80072d2 <__libc_init_array+0x2e>
 80072c6:	bd70      	pop	{r4, r5, r6, pc}
 80072c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072cc:	4798      	blx	r3
 80072ce:	3601      	adds	r6, #1
 80072d0:	e7ee      	b.n	80072b0 <__libc_init_array+0xc>
 80072d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072d6:	4798      	blx	r3
 80072d8:	3601      	adds	r6, #1
 80072da:	e7f2      	b.n	80072c2 <__libc_init_array+0x1e>
 80072dc:	080075a8 	.word	0x080075a8
 80072e0:	080075a8 	.word	0x080075a8
 80072e4:	080075a8 	.word	0x080075a8
 80072e8:	080075ac 	.word	0x080075ac

080072ec <_init>:
 80072ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ee:	bf00      	nop
 80072f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072f2:	bc08      	pop	{r3}
 80072f4:	469e      	mov	lr, r3
 80072f6:	4770      	bx	lr

080072f8 <_fini>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr
