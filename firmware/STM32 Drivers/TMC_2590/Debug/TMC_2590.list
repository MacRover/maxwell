
TMC_2590.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08005cf8  08005cf8  00006cf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f9c  08005f9c  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005f9c  08005f9c  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f9c  08005f9c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f9c  08005f9c  00006f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005fa0  08005fa0  00006fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005fa4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08005fb0  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08005fb0  00007278  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013c00  00000000  00000000  00007035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f2  00000000  00000000  0001ac35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  0001e228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ebc  00000000  00000000  0001f518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195cf  00000000  00000000  000203d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b356  00000000  00000000  000399a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093f41  00000000  00000000  00054cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8c3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004df0  00000000  00000000  000e8c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000eda70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005ce0 	.word	0x08005ce0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08005ce0 	.word	0x08005ce0

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]
 8000160:	611a      	str	r2, [r3, #16]
 8000162:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000164:	1d3b      	adds	r3, r7, #4
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016e:	4b23      	ldr	r3, [pc, #140]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000170:	4a23      	ldr	r2, [pc, #140]	@ (8000200 <MX_ADC1_Init+0xb4>)
 8000172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000174:	4b21      	ldr	r3, [pc, #132]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000176:	2200      	movs	r2, #0
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b20      	ldr	r3, [pc, #128]	@ (80001fc <MX_ADC1_Init+0xb0>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b1e      	ldr	r3, [pc, #120]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b1d      	ldr	r3, [pc, #116]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000194:	4b19      	ldr	r3, [pc, #100]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000196:	2201      	movs	r2, #1
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4818      	ldr	r0, [pc, #96]	@ (80001fc <MX_ADC1_Init+0xb0>)
 800019c:	f000 ff16 	bl	8000fcc <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80001a6:	f000 fbd9 	bl	800095c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80001aa:	4b16      	ldr	r3, [pc, #88]	@ (8000204 <MX_ADC1_Init+0xb8>)
 80001ac:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80001b6:	2302      	movs	r3, #2
 80001b8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	4619      	mov	r1, r3
 80001c4:	480d      	ldr	r0, [pc, #52]	@ (80001fc <MX_ADC1_Init+0xb0>)
 80001c6:	f001 fb2f 	bl	8001828 <HAL_ADC_AnalogWDGConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80001d0:	f000 fbc4 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d4:	2302      	movs	r3, #2
 80001d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4805      	ldr	r0, [pc, #20]	@ (80001fc <MX_ADC1_Init+0xb0>)
 80001e6:	f001 f95b 	bl	80014a0 <HAL_ADC_ConfigChannel>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80001f0:	f000 fbb4 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	3728      	adds	r7, #40	@ 0x28
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000028 	.word	0x20000028
 8000200:	40012400 	.word	0x40012400
 8000204:	00800200 	.word	0x00800200

08000208 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b08a      	sub	sp, #40	@ 0x28
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
 800021e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800022a:	4b23      	ldr	r3, [pc, #140]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800022c:	4a23      	ldr	r2, [pc, #140]	@ (80002bc <MX_ADC2_Init+0xb4>)
 800022e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000230:	4b21      	ldr	r3, [pc, #132]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000236:	4b20      	ldr	r3, [pc, #128]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000238:	2200      	movs	r2, #0
 800023a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800023c:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800023e:	2200      	movs	r2, #0
 8000240:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000242:	4b1d      	ldr	r3, [pc, #116]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000244:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000248:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800024c:	2200      	movs	r2, #0
 800024e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000250:	4b19      	ldr	r3, [pc, #100]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000252:	2201      	movs	r2, #1
 8000254:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000256:	4818      	ldr	r0, [pc, #96]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000258:	f000 feb8 	bl	8000fcc <HAL_ADC_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8000262:	f000 fb7b 	bl	800095c <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <MX_ADC2_Init+0xb8>)
 8000268:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8000272:	2303      	movs	r3, #3
 8000274:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000276:	2300      	movs	r3, #0
 8000278:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	4619      	mov	r1, r3
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000282:	f001 fad1 	bl	8001828 <HAL_ADC_AnalogWDGConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800028c:	f000 fb66 	bl	800095c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000290:	2303      	movs	r3, #3
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 80002a2:	f001 f8fd 	bl	80014a0 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 80002ac:	f000 fb56 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	@ 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	20000058 	.word	0x20000058
 80002bc:	40012800 	.word	0x40012800
 80002c0:	00800200 	.word	0x00800200

080002c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	@ 0x28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a30      	ldr	r2, [pc, #192]	@ (80003a0 <HAL_ADC_MspInit+0xdc>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d12a      	bne.n	800033a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e4:	4b2f      	ldr	r3, [pc, #188]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2e      	ldr	r2, [pc, #184]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b2c      	ldr	r3, [pc, #176]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	613b      	str	r3, [r7, #16]
 8000312:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FSR_1_Pin;
 8000314:	2304      	movs	r3, #4
 8000316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000318:	2303      	movs	r3, #3
 800031a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_1_GPIO_Port, &GPIO_InitStruct);
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4619      	mov	r1, r3
 8000322:	4821      	ldr	r0, [pc, #132]	@ (80003a8 <HAL_ADC_MspInit+0xe4>)
 8000324:	f002 f9ee 	bl	8002704 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	2100      	movs	r1, #0
 800032c:	2012      	movs	r0, #18
 800032e:	f002 f8fd 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000332:	2012      	movs	r0, #18
 8000334:	f002 f926 	bl	8002584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000338:	e02e      	b.n	8000398 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1b      	ldr	r2, [pc, #108]	@ (80003ac <HAL_ADC_MspInit+0xe8>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d129      	bne.n	8000398 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800034a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a10      	ldr	r2, [pc, #64]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FSR_2_Pin;
 8000374:	2308      	movs	r3, #8
 8000376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_2_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4619      	mov	r1, r3
 8000382:	4809      	ldr	r0, [pc, #36]	@ (80003a8 <HAL_ADC_MspInit+0xe4>)
 8000384:	f002 f9be 	bl	8002704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2012      	movs	r0, #18
 800038e:	f002 f8cd 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000392:	2012      	movs	r0, #18
 8000394:	f002 f8f6 	bl	8002584 <HAL_NVIC_EnableIRQ>
}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	@ 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40012400 	.word	0x40012400
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40012800 	.word	0x40012800

080003b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_CAN_Init+0x68>)
 80003b6:	4a19      	ldr	r2, [pc, #100]	@ (800041c <MX_CAN_Init+0x6c>)
 80003b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <MX_CAN_Init+0x68>)
 80003bc:	2202      	movs	r2, #2
 80003be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_CAN_Init+0x68>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_CAN_Init+0x68>)
 80003c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80003cc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_CAN_Init+0x68>)
 80003d0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <MX_CAN_Init+0x68>)
 80003d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003dc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_CAN_Init+0x68>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_CAN_Init+0x68>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_CAN_Init+0x68>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_CAN_Init+0x68>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_CAN_Init+0x68>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_CAN_Init+0x68>)
 80003fe:	2200      	movs	r2, #0
 8000400:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_CAN_Init+0x68>)
 8000404:	f001 fb62 	bl	8001acc <HAL_CAN_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800040e:	f000 faa5 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	20000088 	.word	0x20000088
 800041c:	40006400 	.word	0x40006400

08000420 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a20      	ldr	r2, [pc, #128]	@ (80004bc <HAL_CAN_MspInit+0x9c>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d139      	bne.n	80004b4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a1e      	ldr	r2, [pc, #120]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800044a:	61d3      	str	r3, [r2, #28]
 800044c:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a18      	ldr	r2, [pc, #96]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <HAL_CAN_MspInit+0xa4>)
 8000486:	f002 f93d 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800048a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000490:	2302      	movs	r3, #2
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000494:	2303      	movs	r3, #3
 8000496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <HAL_CAN_MspInit+0xa4>)
 80004a0:	f002 f930 	bl	8002704 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2102      	movs	r1, #2
 80004a8:	2014      	movs	r0, #20
 80004aa:	f002 f83f 	bl	800252c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004ae:	2014      	movs	r0, #20
 80004b0:	f002 f868 	bl	8002584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40006400 	.word	0x40006400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010800 	.word	0x40010800

080004c8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b088      	sub	sp, #32
 80004cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ce:	f107 0310 	add.w	r3, r7, #16
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	605a      	str	r2, [r3, #4]
 80004d8:	609a      	str	r2, [r3, #8]
 80004da:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004dc:	4b53      	ldr	r3, [pc, #332]	@ (800062c <MX_GPIO_Init+0x164>)
 80004de:	699b      	ldr	r3, [r3, #24]
 80004e0:	4a52      	ldr	r2, [pc, #328]	@ (800062c <MX_GPIO_Init+0x164>)
 80004e2:	f043 0310 	orr.w	r3, r3, #16
 80004e6:	6193      	str	r3, [r2, #24]
 80004e8:	4b50      	ldr	r3, [pc, #320]	@ (800062c <MX_GPIO_Init+0x164>)
 80004ea:	699b      	ldr	r3, [r3, #24]
 80004ec:	f003 0310 	and.w	r3, r3, #16
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f4:	4b4d      	ldr	r3, [pc, #308]	@ (800062c <MX_GPIO_Init+0x164>)
 80004f6:	699b      	ldr	r3, [r3, #24]
 80004f8:	4a4c      	ldr	r2, [pc, #304]	@ (800062c <MX_GPIO_Init+0x164>)
 80004fa:	f043 0320 	orr.w	r3, r3, #32
 80004fe:	6193      	str	r3, [r2, #24]
 8000500:	4b4a      	ldr	r3, [pc, #296]	@ (800062c <MX_GPIO_Init+0x164>)
 8000502:	699b      	ldr	r3, [r3, #24]
 8000504:	f003 0320 	and.w	r3, r3, #32
 8000508:	60bb      	str	r3, [r7, #8]
 800050a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050c:	4b47      	ldr	r3, [pc, #284]	@ (800062c <MX_GPIO_Init+0x164>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a46      	ldr	r2, [pc, #280]	@ (800062c <MX_GPIO_Init+0x164>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b44      	ldr	r3, [pc, #272]	@ (800062c <MX_GPIO_Init+0x164>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f003 0304 	and.w	r3, r3, #4
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000524:	4b41      	ldr	r3, [pc, #260]	@ (800062c <MX_GPIO_Init+0x164>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a40      	ldr	r2, [pc, #256]	@ (800062c <MX_GPIO_Init+0x164>)
 800052a:	f043 0308 	orr.w	r3, r3, #8
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b3e      	ldr	r3, [pc, #248]	@ (800062c <MX_GPIO_Init+0x164>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0308 	and.w	r3, r3, #8
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f248 4110 	movw	r1, #33808	@ 0x8410
 8000542:	483b      	ldr	r0, [pc, #236]	@ (8000630 <MX_GPIO_Init+0x168>)
 8000544:	f002 fb6c 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f241 0114 	movw	r1, #4116	@ 0x1014
 800054e:	4839      	ldr	r0, [pc, #228]	@ (8000634 <MX_GPIO_Init+0x16c>)
 8000550:	f002 fb66 	bl	8002c20 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000554:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000558:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055a:	2303      	movs	r3, #3
 800055c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4834      	ldr	r0, [pc, #208]	@ (8000638 <MX_GPIO_Init+0x170>)
 8000566:	f002 f8cd 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LS_1_Pin|LS_2_Pin;
 800056a:	2303      	movs	r3, #3
 800056c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800056e:	4b33      	ldr	r3, [pc, #204]	@ (800063c <MX_GPIO_Init+0x174>)
 8000570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000576:	f107 0310 	add.w	r3, r7, #16
 800057a:	4619      	mov	r1, r3
 800057c:	482c      	ldr	r0, [pc, #176]	@ (8000630 <MX_GPIO_Init+0x168>)
 800057e:	f002 f8c1 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin;
 8000582:	f248 4310 	movw	r3, #33808	@ 0x8410
 8000586:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	2301      	movs	r3, #1
 800058a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058c:	2300      	movs	r3, #0
 800058e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000590:	2302      	movs	r3, #2
 8000592:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4619      	mov	r1, r3
 800059a:	4825      	ldr	r0, [pc, #148]	@ (8000630 <MX_GPIO_Init+0x168>)
 800059c:	f002 f8b2 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80005a0:	f640 7323 	movw	r3, #3875	@ 0xf23
 80005a4:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005a6:	2303      	movs	r3, #3
 80005a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005aa:	f107 0310 	add.w	r3, r7, #16
 80005ae:	4619      	mov	r1, r3
 80005b0:	4820      	ldr	r0, [pc, #128]	@ (8000634 <MX_GPIO_Init+0x16c>)
 80005b2:	f002 f8a7 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin;
 80005b6:	f241 0314 	movw	r3, #4116	@ 0x1014
 80005ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005bc:	2301      	movs	r3, #1
 80005be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c4:	2302      	movs	r3, #2
 80005c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c8:	f107 0310 	add.w	r3, r7, #16
 80005cc:	4619      	mov	r1, r3
 80005ce:	4819      	ldr	r0, [pc, #100]	@ (8000634 <MX_GPIO_Init+0x16c>)
 80005d0:	f002 f898 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80005d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005da:	2303      	movs	r3, #3
 80005dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0310 	add.w	r3, r7, #16
 80005e2:	4619      	mov	r1, r3
 80005e4:	4812      	ldr	r0, [pc, #72]	@ (8000630 <MX_GPIO_Init+0x168>)
 80005e6:	f002 f88d 	bl	8002704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVER_SG_TEST_Pin;
 80005ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVER_SG_TEST_GPIO_Port, &GPIO_InitStruct);
 80005f8:	f107 0310 	add.w	r3, r7, #16
 80005fc:	4619      	mov	r1, r3
 80005fe:	480c      	ldr	r0, [pc, #48]	@ (8000630 <MX_GPIO_Init+0x168>)
 8000600:	f002 f880 	bl	8002704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2101      	movs	r1, #1
 8000608:	2006      	movs	r0, #6
 800060a:	f001 ff8f 	bl	800252c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800060e:	2006      	movs	r0, #6
 8000610:	f001 ffb8 	bl	8002584 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000614:	2200      	movs	r2, #0
 8000616:	2101      	movs	r1, #1
 8000618:	2007      	movs	r0, #7
 800061a:	f001 ff87 	bl	800252c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800061e:	2007      	movs	r0, #7
 8000620:	f001 ffb0 	bl	8002584 <HAL_NVIC_EnableIRQ>

}
 8000624:	bf00      	nop
 8000626:	3720      	adds	r7, #32
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800
 8000634:	40010c00 	.word	0x40010c00
 8000638:	40011000 	.word	0x40011000
 800063c:	10310000 	.word	0x10310000

08000640 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */

// PUBLIC FUNCTIONS --------------------------------
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	80fb      	strh	r3, [r7, #6]

  static LS_NUMBER pin;
  pin = (GPIO_Pin == LS_1_Pin) ? LS_1 : LS_2;
 800064a:	88fb      	ldrh	r3, [r7, #6]
 800064c:	2b01      	cmp	r3, #1
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	461a      	mov	r2, r3
 8000658:	4b0b      	ldr	r3, [pc, #44]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x48>)
 800065a:	701a      	strb	r2, [r3, #0]

  if (HAL_GPIO_ReadPin(LS_1_GPIO_Port, GPIO_Pin) == GPIO_PIN_SET)
 800065c:	88fb      	ldrh	r3, [r7, #6]
 800065e:	4619      	mov	r1, r3
 8000660:	480a      	ldr	r0, [pc, #40]	@ (800068c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000662:	f002 fabd 	bl	8002be0 <HAL_GPIO_ReadPin>
 8000666:	4603      	mov	r3, r0
 8000668:	2b01      	cmp	r3, #1
 800066a:	d104      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x36>
  {
    (*callback_pressed)(&pin);
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_GPIO_EXTI_Callback+0x50>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4805      	ldr	r0, [pc, #20]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x48>)
 8000672:	4798      	blx	r3
  }
  else
  {
    (*callback_released)(&pin);
  }
}
 8000674:	e003      	b.n	800067e <HAL_GPIO_EXTI_Callback+0x3e>
    (*callback_released)(&pin);
 8000676:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <HAL_GPIO_EXTI_Callback+0x54>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <HAL_GPIO_EXTI_Callback+0x48>)
 800067c:	4798      	blx	r3
}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	200000b9 	.word	0x200000b9
 800068c:	40010800 	.word	0x40010800
 8000690:	200000b0 	.word	0x200000b0
 8000694:	200000b4 	.word	0x200000b4

08000698 <LS_Initialize>:


LS_STATUS LS_Initialize() {
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0

	//MX_GPIO_Init();

	initialized_limitswitch = 1;
 800069c:	4b03      	ldr	r3, [pc, #12]	@ (80006ac <LS_Initialize+0x14>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]

	return LS_OK;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bc80      	pop	{r7}
 80006aa:	4770      	bx	lr
 80006ac:	200000b8 	.word	0x200000b8

080006b0 <LS_RegisterPressedCallback>:

	return LS_OK;

}

LS_STATUS LS_RegisterPressedCallback(void (*fcn)(LS_NUMBER *num)) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

	if (!initialized_limitswitch) {
 80006b8:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <LS_RegisterPressedCallback+0x30>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d101      	bne.n	80006c4 <LS_RegisterPressedCallback+0x14>
		return LS_ERROR_NOT_INITIALIZED;
 80006c0:	2301      	movs	r3, #1
 80006c2:	e008      	b.n	80006d6 <LS_RegisterPressedCallback+0x26>
	}

	if (!fcn)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <LS_RegisterPressedCallback+0x1e>
	{
		return LS_ERROR_INVALID_ARGUMENT;
 80006ca:	2304      	movs	r3, #4
 80006cc:	e003      	b.n	80006d6 <LS_RegisterPressedCallback+0x26>
	}

	callback_pressed = fcn;
 80006ce:	4a05      	ldr	r2, [pc, #20]	@ (80006e4 <LS_RegisterPressedCallback+0x34>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6013      	str	r3, [r2, #0]

	return LS_OK;
 80006d4:	2300      	movs	r3, #0

}
 80006d6:	4618      	mov	r0, r3
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	200000b8 	.word	0x200000b8
 80006e4:	200000b0 	.word	0x200000b0

080006e8 <LS_RegisterReleasedCallback>:


LS_STATUS LS_RegisterReleasedCallback(void (*fcn)(LS_NUMBER *num)) {
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

	if (!initialized_limitswitch) {
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <LS_RegisterReleasedCallback+0x30>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d101      	bne.n	80006fc <LS_RegisterReleasedCallback+0x14>
		return LS_ERROR_NOT_INITIALIZED;
 80006f8:	2301      	movs	r3, #1
 80006fa:	e008      	b.n	800070e <LS_RegisterReleasedCallback+0x26>
	}

	if (!fcn)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <LS_RegisterReleasedCallback+0x1e>
	{
		return LS_ERROR_INVALID_ARGUMENT;
 8000702:	2304      	movs	r3, #4
 8000704:	e003      	b.n	800070e <LS_RegisterReleasedCallback+0x26>
	}

	callback_released = fcn;
 8000706:	4a05      	ldr	r2, [pc, #20]	@ (800071c <LS_RegisterReleasedCallback+0x34>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6013      	str	r3, [r2, #0]

	return LS_OK;
 800070c:	2300      	movs	r3, #0

}
 800070e:	4618      	mov	r0, r3
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr
 8000718:	200000b8 	.word	0x200000b8
 800071c:	200000b4 	.word	0x200000b4

08000720 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000724:	4b12      	ldr	r3, [pc, #72]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000726:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_I2C1_Init+0x54>)
 8000728:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800072a:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_I2C1_Init+0x50>)
 800072c:	4a12      	ldr	r2, [pc, #72]	@ (8000778 <MX_I2C1_Init+0x58>)
 800072e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_I2C1_Init+0x50>)
 800073e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000742:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000744:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000746:	2200      	movs	r2, #0
 8000748:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_I2C1_Init+0x50>)
 800074c:	2200      	movs	r2, #0
 800074e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000750:	4b07      	ldr	r3, [pc, #28]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_I2C1_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800075c:	4804      	ldr	r0, [pc, #16]	@ (8000770 <MX_I2C1_Init+0x50>)
 800075e:	f002 faa3 	bl	8002ca8 <HAL_I2C_Init>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000768:	f000 f8f8 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	200000bc 	.word	0x200000bc
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0310 	add.w	r3, r7, #16
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <HAL_I2C_MspInit+0x70>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d123      	bne.n	80007e4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079c:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4a13      	ldr	r2, [pc, #76]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007a2:	f043 0308 	orr.w	r3, r3, #8
 80007a6:	6193      	str	r3, [r2, #24]
 80007a8:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	f003 0308 	and.w	r3, r3, #8
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007b4:	23c0      	movs	r3, #192	@ 0xc0
 80007b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007b8:	2312      	movs	r3, #18
 80007ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	4619      	mov	r1, r3
 80007c6:	480b      	ldr	r0, [pc, #44]	@ (80007f4 <HAL_I2C_MspInit+0x78>)
 80007c8:	f001 ff9c 	bl	8002704 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007cc:	4b08      	ldr	r3, [pc, #32]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007ce:	69db      	ldr	r3, [r3, #28]
 80007d0:	4a07      	ldr	r2, [pc, #28]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d6:	61d3      	str	r3, [r2, #28]
 80007d8:	4b05      	ldr	r3, [pc, #20]	@ (80007f0 <HAL_I2C_MspInit+0x74>)
 80007da:	69db      	ldr	r3, [r3, #28]
 80007dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007e4:	bf00      	nop
 80007e6:	3720      	adds	r7, #32
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40005400 	.word	0x40005400
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010c00 	.word	0x40010c00

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fb5f 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f82f 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f7ff fe5f 	bl	80004c8 <MX_GPIO_Init>
  MX_CAN_Init();
 800080a:	f7ff fdd1 	bl	80003b0 <MX_CAN_Init>
  MX_I2C1_Init();
 800080e:	f7ff ff87 	bl	8000720 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000812:	f000 f8b3 	bl	800097c <MX_SPI1_Init>
  MX_SPI2_Init();
 8000816:	f000 f8e7 	bl	80009e8 <MX_SPI2_Init>
  MX_ADC1_Init();
 800081a:	f7ff fc97 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 800081e:	f7ff fcf3 	bl	8000208 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000822:	f000 fa27 	bl	8000c74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
    MX_TMC_2590_1_Init();
 8000826:	f000 fadd 	bl	8000de4 <MX_TMC_2590_1_Init>
    LS_Initialize();
 800082a:	f7ff ff35 	bl	8000698 <LS_Initialize>

    uint8_t callbacksSet = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        TMC_2590_MoveSteps(&tmc_2590_1, 100);
 8000832:	2164      	movs	r1, #100	@ 0x64
 8000834:	4808      	ldr	r0, [pc, #32]	@ (8000858 <main+0x60>)
 8000836:	f004 ff70 	bl	800571a <TMC_2590_MoveSteps>
        HAL_Delay(100);
 800083a:	2064      	movs	r0, #100	@ 0x64
 800083c:	f000 fba2 	bl	8000f84 <HAL_Delay>

        //UNCOMMENT BELOW FOR LS TEST - INTERRUPT BASED

        if (!callbacksSet)
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f5      	bne.n	8000832 <main+0x3a>
        {
            //make this only happen once
            LS_RegisterPressedCallback(&LS_Pressed_Callback);
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <main+0x64>)
 8000848:	f7ff ff32 	bl	80006b0 <LS_RegisterPressedCallback>
            LS_RegisterReleasedCallback(&LS_Released_Callback);
 800084c:	4804      	ldr	r0, [pc, #16]	@ (8000860 <main+0x68>)
 800084e:	f7ff ff4b 	bl	80006e8 <LS_RegisterReleasedCallback>
            callbacksSet = 1;
 8000852:	2301      	movs	r3, #1
 8000854:	71fb      	strb	r3, [r7, #7]
        TMC_2590_MoveSteps(&tmc_2590_1, 100);
 8000856:	e7ec      	b.n	8000832 <main+0x3a>
 8000858:	20000208 	.word	0x20000208
 800085c:	0800091d 	.word	0x0800091d
 8000860:	0800093d 	.word	0x0800093d

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b094      	sub	sp, #80	@ 0x50
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800086e:	2228      	movs	r2, #40	@ 0x28
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f005 fa07 	bl	8005c86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000894:	2301      	movs	r3, #1
 8000896:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000898:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800089e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80008a2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a4:	2301      	movs	r3, #1
 80008a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a8:	2302      	movs	r3, #2
 80008aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008b2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008bc:	4618      	mov	r0, r3
 80008be:	f002 fbb5 	bl	800302c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80008c8:	f000 f848 	bl	800095c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008cc:	230f      	movs	r3, #15
 80008ce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d4:	2300      	movs	r3, #0
 80008d6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e2:	f107 0314 	add.w	r3, r7, #20
 80008e6:	2102      	movs	r1, #2
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 ff0d 	bl	8003708 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008f4:	f000 f832 	bl	800095c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008f8:	2302      	movs	r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000900:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	4618      	mov	r0, r3
 8000906:	f003 f921 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000910:	f000 f824 	bl	800095c <Error_Handler>
  }
}
 8000914:	bf00      	nop
 8000916:	3750      	adds	r7, #80	@ 0x50
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <LS_Pressed_Callback>:

/* USER CODE BEGIN 4 */

void LS_Pressed_Callback(LS_NUMBER *num)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	2104      	movs	r1, #4
 8000928:	4803      	ldr	r0, [pc, #12]	@ (8000938 <LS_Pressed_Callback+0x1c>)
 800092a:	f002 f979 	bl	8002c20 <HAL_GPIO_WritePin>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40010c00 	.word	0x40010c00

0800093c <LS_Released_Callback>:

void LS_Released_Callback(LS_NUMBER *num)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	2104      	movs	r1, #4
 8000948:	4803      	ldr	r0, [pc, #12]	@ (8000958 <LS_Released_Callback+0x1c>)
 800094a:	f002 f969 	bl	8002c20 <HAL_GPIO_WritePin>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010c00 	.word	0x40010c00

0800095c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000960:	b672      	cpsid	i
}
 8000962:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000964:	bf00      	nop
 8000966:	e7fd      	b.n	8000964 <Error_Handler+0x8>

08000968 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000982:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <MX_SPI1_Init+0x68>)
 8000984:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b16      	ldr	r3, [pc, #88]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <MX_SPI1_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099a:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_SPI1_Init+0x64>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009ae:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009b0:	2220      	movs	r2, #32
 80009b2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b4:	4b0a      	ldr	r3, [pc, #40]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ba:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c0:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80009c6:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009c8:	220a      	movs	r2, #10
 80009ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009cc:	4804      	ldr	r0, [pc, #16]	@ (80009e0 <MX_SPI1_Init+0x64>)
 80009ce:	f003 f9c7 	bl	8003d60 <HAL_SPI_Init>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009d8:	f7ff ffc0 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000110 	.word	0x20000110
 80009e4:	40013000 	.word	0x40013000

080009e8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80009ec:	4b17      	ldr	r3, [pc, #92]	@ (8000a4c <MX_SPI2_Init+0x64>)
 80009ee:	4a18      	ldr	r2, [pc, #96]	@ (8000a50 <MX_SPI2_Init+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_SPI2_Init+0x64>)
 80009f4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009f8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009fa:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_SPI2_Init+0x64>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a00:	4b12      	ldr	r3, [pc, #72]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a06:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a0e:	2201      	movs	r2, #1
 8000a10:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a18:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a1c:	2208      	movs	r2, #8
 8000a1e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a26:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a2c:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a34:	220a      	movs	r2, #10
 8000a36:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a38:	4804      	ldr	r0, [pc, #16]	@ (8000a4c <MX_SPI2_Init+0x64>)
 8000a3a:	f003 f991 	bl	8003d60 <HAL_SPI_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000a44:	f7ff ff8a 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000168 	.word	0x20000168
 8000a50:	40003800 	.word	0x40003800

08000a54 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08a      	sub	sp, #40	@ 0x28
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5c:	f107 0318 	add.w	r3, r7, #24
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
 8000a64:	605a      	str	r2, [r3, #4]
 8000a66:	609a      	str	r2, [r3, #8]
 8000a68:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a37      	ldr	r2, [pc, #220]	@ (8000b4c <HAL_SPI_MspInit+0xf8>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d130      	bne.n	8000ad6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a74:	4b36      	ldr	r3, [pc, #216]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a35      	ldr	r2, [pc, #212]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b30      	ldr	r3, [pc, #192]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	4a2f      	ldr	r2, [pc, #188]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6193      	str	r3, [r2, #24]
 8000a98:	4b2d      	ldr	r3, [pc, #180]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000a9a:	699b      	ldr	r3, [r3, #24]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SCK_Pin|DRIVER_MOSI_Pin;
 8000aa4:	23a0      	movs	r3, #160	@ 0xa0
 8000aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0318 	add.w	r3, r7, #24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4827      	ldr	r0, [pc, #156]	@ (8000b54 <HAL_SPI_MspInit+0x100>)
 8000ab8:	f001 fe24 	bl	8002704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_MISO_Pin;
 8000abc:	2340      	movs	r3, #64	@ 0x40
 8000abe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DRIVER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	f107 0318 	add.w	r3, r7, #24
 8000acc:	4619      	mov	r1, r3
 8000ace:	4821      	ldr	r0, [pc, #132]	@ (8000b54 <HAL_SPI_MspInit+0x100>)
 8000ad0:	f001 fe18 	bl	8002704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000ad4:	e036      	b.n	8000b44 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	@ (8000b58 <HAL_SPI_MspInit+0x104>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d131      	bne.n	8000b44 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000ae6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aea:	61d3      	str	r3, [r2, #28]
 8000aec:	4b18      	ldr	r3, [pc, #96]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000aee:	69db      	ldr	r3, [r3, #28]
 8000af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a14      	ldr	r2, [pc, #80]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000afe:	f043 0308 	orr.w	r3, r3, #8
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_SPI_MspInit+0xfc>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0308 	and.w	r3, r3, #8
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_SCK_Pin|ENCODER_MOSI_Pin;
 8000b10:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b1a:	2303      	movs	r3, #3
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1e:	f107 0318 	add.w	r3, r7, #24
 8000b22:	4619      	mov	r1, r3
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <HAL_SPI_MspInit+0x108>)
 8000b26:	f001 fded 	bl	8002704 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_MISO_Pin;
 8000b2a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b30:	2300      	movs	r3, #0
 8000b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4807      	ldr	r0, [pc, #28]	@ (8000b5c <HAL_SPI_MspInit+0x108>)
 8000b40:	f001 fde0 	bl	8002704 <HAL_GPIO_Init>
}
 8000b44:	bf00      	nop
 8000b46:	3728      	adds	r7, #40	@ 0x28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	40013000 	.word	0x40013000
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40003800 	.word	0x40003800
 8000b5c:	40010c00 	.word	0x40010c00

08000b60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	4a14      	ldr	r2, [pc, #80]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6193      	str	r3, [r2, #24]
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	4a0e      	ldr	r2, [pc, #56]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b88:	61d3      	str	r3, [r2, #28]
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <HAL_MspInit+0x5c>)
 8000b8c:	69db      	ldr	r3, [r3, #28]
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_MspInit+0x60>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_MspInit+0x60>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bc80      	pop	{r7}
 8000bba:	4770      	bx	lr
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr

08000bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr

08000c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c14:	f000 f99a 	bl	8000f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f002 f829 	bl	8002c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f002 f822 	bl	8002c78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000c3c:	4803      	ldr	r0, [pc, #12]	@ (8000c4c <ADC1_2_IRQHandler+0x14>)
 8000c3e:	f000 fb2f 	bl	80012a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000c42:	4803      	ldr	r0, [pc, #12]	@ (8000c50 <ADC1_2_IRQHandler+0x18>)
 8000c44:	f000 fb2c 	bl	80012a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000028 	.word	0x20000028
 8000c50:	20000058 	.word	0x20000058

08000c54 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c58:	4802      	ldr	r0, [pc, #8]	@ (8000c64 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c5a:	f001 f94f 	bl	8001efc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000088 	.word	0x20000088

08000c68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08a      	sub	sp, #40	@ 0x28
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c7a:	f107 0320 	add.w	r3, r7, #32
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
 8000c92:	615a      	str	r2, [r3, #20]
 8000c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c96:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000c98:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000cac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cbe:	4818      	ldr	r0, [pc, #96]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000cc0:	f003 fc2e 	bl	8004520 <HAL_TIM_PWM_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000cca:	f7ff fe47 	bl	800095c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd6:	f107 0320 	add.w	r3, r7, #32
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4810      	ldr	r0, [pc, #64]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000cde:	f004 fbf9 	bl	80054d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000ce8:	f7ff fe38 	bl	800095c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cec:	2360      	movs	r3, #96	@ 0x60
 8000cee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2204      	movs	r2, #4
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000d04:	f003 febc 	bl	8004a80 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000d0e:	f7ff fe25 	bl	800095c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d12:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <MX_TIM2_Init+0xac>)
 8000d14:	f000 f822 	bl	8000d5c <HAL_TIM_MspPostInit>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	@ 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001c0 	.word	0x200001c0

08000d24 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d34:	d10b      	bne.n	8000d4e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x34>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x34>)
 8000d3c:	f043 0301 	orr.w	r3, r3, #1
 8000d40:	61d3      	str	r3, [r2, #28]
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <HAL_TIM_PWM_MspInit+0x34>)
 8000d44:	69db      	ldr	r3, [r3, #28]
 8000d46:	f003 0301 	and.w	r3, r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bc80      	pop	{r7}
 8000d56:	4770      	bx	lr
 8000d58:	40021000 	.word	0x40021000

08000d5c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b088      	sub	sp, #32
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d7a:	d129      	bne.n	8000dd0 <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b16      	ldr	r3, [pc, #88]	@ (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	4a15      	ldr	r2, [pc, #84]	@ (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d82:	f043 0308 	orr.w	r3, r3, #8
 8000d86:	6193      	str	r3, [r2, #24]
 8000d88:	4b13      	ldr	r3, [pc, #76]	@ (8000dd8 <HAL_TIM_MspPostInit+0x7c>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	f003 0308 	and.w	r3, r3, #8
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DRIVER_STEP_PWM_Pin;
 8000d94:	2308      	movs	r3, #8
 8000d96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DRIVER_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	4619      	mov	r1, r3
 8000da6:	480d      	ldr	r0, [pc, #52]	@ (8000ddc <HAL_TIM_MspPostInit+0x80>)
 8000da8:	f001 fcac 	bl	8002704 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_TIM_MspPostInit+0x84>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000db8:	61fb      	str	r3, [r7, #28]
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dc0:	61fb      	str	r3, [r7, #28]
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dc8:	61fb      	str	r3, [r7, #28]
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <HAL_TIM_MspPostInit+0x84>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3720      	adds	r7, #32
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	40010c00 	.word	0x40010c00
 8000de0:	40010000 	.word	0x40010000

08000de4 <MX_TMC_2590_1_Init>:
#include "tim.h"

TMC_2590_HandleTypeDef tmc_2590_1;

void MX_TMC_2590_1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
    tmc_2590_1.Init.SPI_HandlerInstance = &hspi1;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	@ (8000e64 <MX_TMC_2590_1_Init+0x80>)
 8000dec:	601a      	str	r2, [r3, #0]
    tmc_2590_1.Init.CS_GPIO_Port = DRIVER_CS_GPIO_Port;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000df0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <MX_TMC_2590_1_Init+0x84>)
 8000df2:	605a      	str	r2, [r3, #4]
    tmc_2590_1.Init.CS_Pin = DRIVER_CS_Pin;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000df6:	2210      	movs	r2, #16
 8000df8:	811a      	strh	r2, [r3, #8]
    tmc_2590_1.Init.ENN_GPIO_Port = DRIVER_ENN_GPIO_Port;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000dfc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <MX_TMC_2590_1_Init+0x84>)
 8000dfe:	60da      	str	r2, [r3, #12]
    tmc_2590_1.Init.ENN_Pin = DRIVER_ENN_Pin;
 8000e00:	4b17      	ldr	r3, [pc, #92]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e06:	821a      	strh	r2, [r3, #16]
    tmc_2590_1.Init.use_st_alone = 0;
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	749a      	strb	r2, [r3, #18]
    tmc_2590_1.Init.ST_ALONE_GPIO_Port = DRIVER_ST_ALONE_GPIO_Port;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e10:	4a15      	ldr	r2, [pc, #84]	@ (8000e68 <MX_TMC_2590_1_Init+0x84>)
 8000e12:	615a      	str	r2, [r3, #20]
    tmc_2590_1.Init.ST_ALONE_Pin = DRIVER_ST_ALONE_Pin;
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e16:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000e1a:	831a      	strh	r2, [r3, #24]
    tmc_2590_1.Init.DIR_GPIO_Port = DRIVER_DIR_GPIO_Port;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e1e:	4a13      	ldr	r2, [pc, #76]	@ (8000e6c <MX_TMC_2590_1_Init+0x88>)
 8000e20:	61da      	str	r2, [r3, #28]
    tmc_2590_1.Init.DIR_Pin = DRIVER_DIR_Pin;
 8000e22:	4b0f      	ldr	r3, [pc, #60]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e24:	2210      	movs	r2, #16
 8000e26:	841a      	strh	r2, [r3, #32]
    tmc_2590_1.Init.use_pwm = 1;
 8000e28:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
//    tmc_2590_1.Init.STEP_GPIO_Port = ;
//    tmc_2590_1.Init.STEP_Pin = ;
    tmc_2590_1.Init.STEP_Tim = &htim2;
 8000e30:	4b0b      	ldr	r3, [pc, #44]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e32:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <MX_TMC_2590_1_Init+0x8c>)
 8000e34:	62da      	str	r2, [r3, #44]	@ 0x2c
    tmc_2590_1.Init.STEP_Channel = TIM_CHANNEL_2;
 8000e36:	4b0a      	ldr	r3, [pc, #40]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	631a      	str	r2, [r3, #48]	@ 0x30
    tmc_2590_1.Init.SG_TST_GPIO_Port = DRIVER_SG_TEST_GPIO_Port;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <MX_TMC_2590_1_Init+0x84>)
 8000e40:	635a      	str	r2, [r3, #52]	@ 0x34
    tmc_2590_1.Init.SG_TST_Pin = DRIVER_SG_TEST_Pin;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e48:	871a      	strh	r2, [r3, #56]	@ 0x38

//    TMC_2590_ConfRegisters_TypeDef tmc_2590_confRegisters;
//    // this data should stored in EEPROM
//    tmc_2590_1.ConfRegisters = tmc_2590_confRegisters;

    if (TMC_2590_Init(&tmc_2590_1) != TMC_2590_OK)
 8000e4a:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_TMC_2590_1_Init+0x7c>)
 8000e4c:	f004 fbec 	bl	8005628 <TMC_2590_Init>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TMC_2590_1_Init+0x76>
    {
        Error_Handler();
 8000e56:	f7ff fd81 	bl	800095c <Error_Handler>
    }
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000208 	.word	0x20000208
 8000e64:	20000110 	.word	0x20000110
 8000e68:	40010800 	.word	0x40010800
 8000e6c:	40010c00 	.word	0x40010c00
 8000e70:	200001c0 	.word	0x200001c0

08000e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e74:	f7ff fef8 	bl	8000c68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e78:	480b      	ldr	r0, [pc, #44]	@ (8000ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e7a:	490c      	ldr	r1, [pc, #48]	@ (8000eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8000eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e90:	4c09      	ldr	r4, [pc, #36]	@ (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e9e:	f004 fefb 	bl	8005c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ea2:	f7ff fca9 	bl	80007f8 <main>
  bx lr
 8000ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eac:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000eb0:	08005fa4 	.word	0x08005fa4
  ldr r2, =_sbss
 8000eb4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000eb8:	20000278 	.word	0x20000278

08000ebc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ebc:	e7fe      	b.n	8000ebc <CAN1_RX1_IRQHandler>
	...

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec4:	4b08      	ldr	r3, [pc, #32]	@ (8000ee8 <HAL_Init+0x28>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a07      	ldr	r2, [pc, #28]	@ (8000ee8 <HAL_Init+0x28>)
 8000eca:	f043 0310 	orr.w	r3, r3, #16
 8000ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed0:	2003      	movs	r0, #3
 8000ed2:	f001 fb0b 	bl	80024ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed6:	200f      	movs	r0, #15
 8000ed8:	f000 f808 	bl	8000eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000edc:	f7ff fe40 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40022000 	.word	0x40022000

08000eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <HAL_InitTick+0x54>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x58>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f001 fb52 	bl	80025b4 <HAL_SYSTICK_Config>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00e      	b.n	8000f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2b0f      	cmp	r3, #15
 8000f1e:	d80a      	bhi.n	8000f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f20:	2200      	movs	r2, #0
 8000f22:	6879      	ldr	r1, [r7, #4]
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f001 fb00 	bl	800252c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f2c:	4a06      	ldr	r2, [pc, #24]	@ (8000f48 <HAL_InitTick+0x5c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	e000      	b.n	8000f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3708      	adds	r7, #8
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000000 	.word	0x20000000
 8000f44:	20000008 	.word	0x20000008
 8000f48:	20000004 	.word	0x20000004

08000f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_IncTick+0x1c>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	461a      	mov	r2, r3
 8000f56:	4b05      	ldr	r3, [pc, #20]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	4a03      	ldr	r2, [pc, #12]	@ (8000f6c <HAL_IncTick+0x20>)
 8000f5e:	6013      	str	r3, [r2, #0]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000274 	.word	0x20000274

08000f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return uwTick;
 8000f74:	4b02      	ldr	r3, [pc, #8]	@ (8000f80 <HAL_GetTick+0x10>)
 8000f76:	681b      	ldr	r3, [r3, #0]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	20000274 	.word	0x20000274

08000f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f8c:	f7ff fff0 	bl	8000f70 <HAL_GetTick>
 8000f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f9c:	d005      	beq.n	8000faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <HAL_Delay+0x44>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000faa:	bf00      	nop
 8000fac:	f7ff ffe0 	bl	8000f70 <HAL_GetTick>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	1ad3      	subs	r3, r2, r3
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d8f7      	bhi.n	8000fac <HAL_Delay+0x28>
  {
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e154      	b.n	8001298 <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a97      	ldr	r2, [pc, #604]	@ (8001250 <HAL_ADC_Init+0x284>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d009      	beq.n	800100c <HAL_ADC_Init+0x40>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a95      	ldr	r2, [pc, #596]	@ (8001254 <HAL_ADC_Init+0x288>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d004      	beq.n	800100c <HAL_ADC_Init+0x40>
 8001002:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001006:	4894      	ldr	r0, [pc, #592]	@ (8001258 <HAL_ADC_Init+0x28c>)
 8001008:	f7ff fcae 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d009      	beq.n	8001028 <HAL_ADC_Init+0x5c>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800101c:	d004      	beq.n	8001028 <HAL_ADC_Init+0x5c>
 800101e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001022:	488d      	ldr	r0, [pc, #564]	@ (8001258 <HAL_ADC_Init+0x28c>)
 8001024:	f7ff fca0 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d009      	beq.n	8001044 <HAL_ADC_Init+0x78>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001038:	d004      	beq.n	8001044 <HAL_ADC_Init+0x78>
 800103a:	f240 11ab 	movw	r1, #427	@ 0x1ab
 800103e:	4886      	ldr	r0, [pc, #536]	@ (8001258 <HAL_ADC_Init+0x28c>)
 8001040:	f7ff fc92 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	7b1b      	ldrb	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d008      	beq.n	800105e <HAL_ADC_Init+0x92>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7b1b      	ldrb	r3, [r3, #12]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d004      	beq.n	800105e <HAL_ADC_Init+0x92>
 8001054:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001058:	487f      	ldr	r0, [pc, #508]	@ (8001258 <HAL_ADC_Init+0x28c>)
 800105a:	f7ff fc85 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d022      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69db      	ldr	r3, [r3, #28]
 800106a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800106e:	d01d      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	69db      	ldr	r3, [r3, #28]
 8001074:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001078:	d018      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001082:	d013      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69db      	ldr	r3, [r3, #28]
 8001088:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 800108c:	d00e      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001096:	d009      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69db      	ldr	r3, [r3, #28]
 800109c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80010a0:	d004      	beq.n	80010ac <HAL_ADC_Init+0xe0>
 80010a2:	f240 11ad 	movw	r1, #429	@ 0x1ad
 80010a6:	486c      	ldr	r0, [pc, #432]	@ (8001258 <HAL_ADC_Init+0x28c>)
 80010a8:	f7ff fc5e 	bl	8000968 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d02a      	beq.n	800110a <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	691b      	ldr	r3, [r3, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <HAL_ADC_Init+0xf8>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d904      	bls.n	80010ce <HAL_ADC_Init+0x102>
 80010c4:	f240 11b1 	movw	r1, #433	@ 0x1b1
 80010c8:	4863      	ldr	r0, [pc, #396]	@ (8001258 <HAL_ADC_Init+0x28c>)
 80010ca:	f7ff fc4d 	bl	8000968 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	7d1b      	ldrb	r3, [r3, #20]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d008      	beq.n	80010e8 <HAL_ADC_Init+0x11c>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7d1b      	ldrb	r3, [r3, #20]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d004      	beq.n	80010e8 <HAL_ADC_Init+0x11c>
 80010de:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80010e2:	485d      	ldr	r0, [pc, #372]	@ (8001258 <HAL_ADC_Init+0x28c>)
 80010e4:	f7ff fc40 	bl	8000968 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	7d1b      	ldrb	r3, [r3, #20]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d00c      	beq.n	800110a <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_ADC_Init+0x134>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d904      	bls.n	800110a <HAL_ADC_Init+0x13e>
 8001100:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8001104:	4854      	ldr	r0, [pc, #336]	@ (8001258 <HAL_ADC_Init+0x28c>)
 8001106:	f7ff fc2f 	bl	8000968 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff f8cf 	bl	80002c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f000 fc86 	bl	8001a38 <ADC_ConversionStop_Disable>
 800112c:	4603      	mov	r3, r0
 800112e:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001134:	f003 0310 	and.w	r3, r3, #16
 8001138:	2b00      	cmp	r3, #0
 800113a:	f040 80a4 	bne.w	8001286 <HAL_ADC_Init+0x2ba>
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	2b00      	cmp	r3, #0
 8001142:	f040 80a0 	bne.w	8001286 <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800114a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800114e:	f023 0302 	bic.w	r3, r3, #2
 8001152:	f043 0202 	orr.w	r2, r3, #2
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001162:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7b1b      	ldrb	r3, [r3, #12]
 8001168:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800116a:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	4313      	orrs	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117a:	d003      	beq.n	8001184 <HAL_ADC_Init+0x1b8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <HAL_ADC_Init+0x1be>
 8001184:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001188:	e000      	b.n	800118c <HAL_ADC_Init+0x1c0>
 800118a:	2300      	movs	r3, #0
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	7d1b      	ldrb	r3, [r3, #20]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d119      	bne.n	80011ce <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7b1b      	ldrb	r3, [r3, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	035a      	lsls	r2, r3, #13
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	e00b      	b.n	80011ce <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	f043 0220 	orr.w	r2, r3, #32
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011c6:	f043 0201 	orr.w	r2, r3, #1
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	430a      	orrs	r2, r1
 80011e0:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	4b1c      	ldr	r3, [pc, #112]	@ (800125c <HAL_ADC_Init+0x290>)
 80011ea:	4013      	ands	r3, r2
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6812      	ldr	r2, [r2, #0]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	430b      	orrs	r3, r1
 80011f4:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011fe:	d003      	beq.n	8001208 <HAL_ADC_Init+0x23c>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	691b      	ldr	r3, [r3, #16]
 800120c:	3b01      	subs	r3, #1
 800120e:	051b      	lsls	r3, r3, #20
 8001210:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001218:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	430a      	orrs	r2, r1
 8001224:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <HAL_ADC_Init+0x294>)
 800122e:	4013      	ands	r3, r2
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	429a      	cmp	r2, r3
 8001234:	d116      	bne.n	8001264 <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001240:	f023 0303 	bic.w	r3, r3, #3
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800124c:	e023      	b.n	8001296 <HAL_ADC_Init+0x2ca>
 800124e:	bf00      	nop
 8001250:	40012400 	.word	0x40012400
 8001254:	40012800 	.word	0x40012800
 8001258:	08005cf8 	.word	0x08005cf8
 800125c:	ffe1f7fd 	.word	0xffe1f7fd
 8001260:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001268:	f023 0312 	bic.w	r3, r3, #18
 800126c:	f043 0210 	orr.w	r2, r3, #16
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001278:	f043 0201 	orr.w	r2, r3, #1
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001284:	e007      	b.n	8001296 <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800128a:	f043 0210 	orr.w	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001296:	7dfb      	ldrb	r3, [r7, #23]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3718      	adds	r7, #24
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a6c      	ldr	r2, [pc, #432]	@ (8001470 <HAL_ADC_IRQHandler+0x1d0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d009      	beq.n	80012d6 <HAL_ADC_IRQHandler+0x36>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6b      	ldr	r2, [pc, #428]	@ (8001474 <HAL_ADC_IRQHandler+0x1d4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d004      	beq.n	80012d6 <HAL_ADC_IRQHandler+0x36>
 80012cc:	f240 61f9 	movw	r1, #1785	@ 0x6f9
 80012d0:	4869      	ldr	r0, [pc, #420]	@ (8001478 <HAL_ADC_IRQHandler+0x1d8>)
 80012d2:	f7ff fb49 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7b1b      	ldrb	r3, [r3, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d008      	beq.n	80012f0 <HAL_ADC_IRQHandler+0x50>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7b1b      	ldrb	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d004      	beq.n	80012f0 <HAL_ADC_IRQHandler+0x50>
 80012e6:	f240 61fa 	movw	r1, #1786	@ 0x6fa
 80012ea:	4863      	ldr	r0, [pc, #396]	@ (8001478 <HAL_ADC_IRQHandler+0x1d8>)
 80012ec:	f7ff fb3c 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691b      	ldr	r3, [r3, #16]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_ADC_IRQHandler+0x60>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	691b      	ldr	r3, [r3, #16]
 80012fc:	2b10      	cmp	r3, #16
 80012fe:	d904      	bls.n	800130a <HAL_ADC_IRQHandler+0x6a>
 8001300:	f240 61fb 	movw	r1, #1787	@ 0x6fb
 8001304:	485c      	ldr	r0, [pc, #368]	@ (8001478 <HAL_ADC_IRQHandler+0x1d8>)
 8001306:	f7ff fb2f 	bl	8000968 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	f003 0320 	and.w	r3, r3, #32
 8001310:	2b00      	cmp	r3, #0
 8001312:	d03e      	beq.n	8001392 <HAL_ADC_IRQHandler+0xf2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d039      	beq.n	8001392 <HAL_ADC_IRQHandler+0xf2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	2b00      	cmp	r3, #0
 8001328:	d105      	bne.n	8001336 <HAL_ADC_IRQHandler+0x96>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800132e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001340:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001344:	d11d      	bne.n	8001382 <HAL_ADC_IRQHandler+0xe2>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800134a:	2b00      	cmp	r3, #0
 800134c:	d119      	bne.n	8001382 <HAL_ADC_IRQHandler+0xe2>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0220 	bic.w	r2, r2, #32
 800135c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001362:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800136e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d105      	bne.n	8001382 <HAL_ADC_IRQHandler+0xe2>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f000 f87a 	bl	800147c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f06f 0212 	mvn.w	r2, #18
 8001390:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001398:	2b00      	cmp	r3, #0
 800139a:	d04d      	beq.n	8001438 <HAL_ADC_IRQHandler+0x198>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d048      	beq.n	8001438 <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80013c8:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80013cc:	d012      	beq.n	80013f4 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d125      	bne.n	8001428 <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013e6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013ea:	d11d      	bne.n	8001428 <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d119      	bne.n	8001428 <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001402:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001408:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001414:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001418:	2b00      	cmp	r3, #0
 800141a:	d105      	bne.n	8001428 <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	f043 0201 	orr.w	r2, r3, #1
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fb46 	bl	8001aba <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f06f 020c 	mvn.w	r2, #12
 8001436:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d012      	beq.n	8001468 <HAL_ADC_IRQHandler+0x1c8>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d00d      	beq.n	8001468 <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001450:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f818 	bl	800148e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f06f 0201 	mvn.w	r2, #1
 8001466:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8001468:	bf00      	nop
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40012400 	.word	0x40012400
 8001474:	40012800 	.word	0x40012800
 8001478:	08005cf8 	.word	0x08005cf8

0800147c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800148e:	b480      	push	{r7}
 8001490:	b083      	sub	sp, #12
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a88      	ldr	r2, [pc, #544]	@ (80016d8 <HAL_ADC_ConfigChannel+0x238>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d009      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x30>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a86      	ldr	r2, [pc, #536]	@ (80016dc <HAL_ADC_ConfigChannel+0x23c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d004      	beq.n	80014d0 <HAL_ADC_ConfigChannel+0x30>
 80014c6:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 80014ca:	4885      	ldr	r0, [pc, #532]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 80014cc:	f7ff fa4c 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d048      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d044      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d040      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d03c      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2b04      	cmp	r3, #4
 80014f6:	d038      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d034      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b06      	cmp	r3, #6
 8001506:	d030      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b07      	cmp	r3, #7
 800150e:	d02c      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d028      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b09      	cmp	r3, #9
 800151e:	d024      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b0a      	cmp	r3, #10
 8001526:	d020      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b0b      	cmp	r3, #11
 800152e:	d01c      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d018      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b0d      	cmp	r3, #13
 800153e:	d014      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b0e      	cmp	r3, #14
 8001546:	d010      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d00c      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b10      	cmp	r3, #16
 8001556:	d008      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b11      	cmp	r3, #17
 800155e:	d004      	beq.n	800156a <HAL_ADC_ConfigChannel+0xca>
 8001560:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8001564:	485e      	ldr	r0, [pc, #376]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 8001566:	f7ff f9ff 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	2b01      	cmp	r3, #1
 8001570:	d040      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b02      	cmp	r3, #2
 8001578:	d03c      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2b03      	cmp	r3, #3
 8001580:	d038      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b04      	cmp	r3, #4
 8001588:	d034      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d030      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b06      	cmp	r3, #6
 8001598:	d02c      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	2b07      	cmp	r3, #7
 80015a0:	d028      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d024      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b09      	cmp	r3, #9
 80015b0:	d020      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b0a      	cmp	r3, #10
 80015b8:	d01c      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b0b      	cmp	r3, #11
 80015c0:	d018      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d014      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	2b0d      	cmp	r3, #13
 80015d0:	d010      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b0e      	cmp	r3, #14
 80015d8:	d00c      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b0f      	cmp	r3, #15
 80015e0:	d008      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d004      	beq.n	80015f4 <HAL_ADC_ConfigChannel+0x154>
 80015ea:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 80015ee:	483c      	ldr	r0, [pc, #240]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 80015f0:	f7ff f9ba 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d020      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	2b01      	cmp	r3, #1
 8001602:	d01c      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d018      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b03      	cmp	r3, #3
 8001612:	d014      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b04      	cmp	r3, #4
 800161a:	d010      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b05      	cmp	r3, #5
 8001622:	d00c      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b06      	cmp	r3, #6
 800162a:	d008      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b07      	cmp	r3, #7
 8001632:	d004      	beq.n	800163e <HAL_ADC_ConfigChannel+0x19e>
 8001634:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 8001638:	4829      	ldr	r0, [pc, #164]	@ (80016e0 <HAL_ADC_ConfigChannel+0x240>)
 800163a:	f7ff f995 	bl	8000968 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_ADC_ConfigChannel+0x1ac>
 8001648:	2302      	movs	r3, #2
 800164a:	e0e2      	b.n	8001812 <HAL_ADC_ConfigChannel+0x372>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2201      	movs	r2, #1
 8001650:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b06      	cmp	r3, #6
 800165a:	d81c      	bhi.n	8001696 <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685a      	ldr	r2, [r3, #4]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	3b05      	subs	r3, #5
 800166e:	221f      	movs	r2, #31
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	4019      	ands	r1, r3
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	6818      	ldr	r0, [r3, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	4613      	mov	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	4413      	add	r3, r2
 8001686:	3b05      	subs	r3, #5
 8001688:	fa00 f203 	lsl.w	r2, r0, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	@ 0x34
 8001694:	e042      	b.n	800171c <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d822      	bhi.n	80016e4 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	4613      	mov	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4413      	add	r3, r2
 80016ae:	3b23      	subs	r3, #35	@ 0x23
 80016b0:	221f      	movs	r2, #31
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	4019      	ands	r1, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6818      	ldr	r0, [r3, #0]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	3b23      	subs	r3, #35	@ 0x23
 80016ca:	fa00 f203 	lsl.w	r2, r0, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80016d6:	e021      	b.n	800171c <HAL_ADC_ConfigChannel+0x27c>
 80016d8:	40012400 	.word	0x40012400
 80016dc:	40012800 	.word	0x40012800
 80016e0:	08005cf8 	.word	0x08005cf8
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b41      	subs	r3, #65	@ 0x41
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4019      	ands	r1, r3
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b41      	subs	r3, #65	@ 0x41
 8001710:	fa00 f203 	lsl.w	r2, r0, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2b09      	cmp	r3, #9
 8001722:	d91c      	bls.n	800175e <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68d9      	ldr	r1, [r3, #12]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	3b1e      	subs	r3, #30
 8001736:	2207      	movs	r2, #7
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	4019      	ands	r1, r3
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	6898      	ldr	r0, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	3b1e      	subs	r3, #30
 8001750:	fa00 f203 	lsl.w	r2, r0, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	e019      	b.n	8001792 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6919      	ldr	r1, [r3, #16]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	2207      	movs	r2, #7
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	4019      	ands	r1, r3
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	6898      	ldr	r0, [r3, #8]
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2b10      	cmp	r3, #16
 8001798:	d003      	beq.n	80017a2 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800179e:	2b11      	cmp	r3, #17
 80017a0:	d132      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a1d      	ldr	r2, [pc, #116]	@ (800181c <HAL_ADC_ConfigChannel+0x37c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d125      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d126      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017c8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	d11a      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017d2:	4b13      	ldr	r3, [pc, #76]	@ (8001820 <HAL_ADC_ConfigChannel+0x380>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a13      	ldr	r2, [pc, #76]	@ (8001824 <HAL_ADC_ConfigChannel+0x384>)
 80017d8:	fba2 2303 	umull	r2, r3, r2, r3
 80017dc:	0c9a      	lsrs	r2, r3, #18
 80017de:	4613      	mov	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4413      	add	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017e8:	e002      	b.n	80017f0 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f9      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x34a>
 80017f6:	e007      	b.n	8001808 <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017fc:	f043 0220 	orr.w	r2, r3, #32
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2200      	movs	r2, #0
 800180c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40012400 	.word	0x40012400
 8001820:	20000000 	.word	0x20000000
 8001824:	431bde83 	.word	0x431bde83

08001828 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a79      	ldr	r2, [pc, #484]	@ (8001a1c <HAL_ADC_AnalogWDGConfig+0x1f4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d009      	beq.n	8001850 <HAL_ADC_AnalogWDGConfig+0x28>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a77      	ldr	r2, [pc, #476]	@ (8001a20 <HAL_ADC_AnalogWDGConfig+0x1f8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d004      	beq.n	8001850 <HAL_ADC_AnalogWDGConfig+0x28>
 8001846:	f640 0141 	movw	r1, #2113	@ 0x841
 800184a:	4876      	ldr	r0, [pc, #472]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800184c:	f7ff f88c 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d022      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a72      	ldr	r2, [pc, #456]	@ (8001a28 <HAL_ADC_AnalogWDGConfig+0x200>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d01d      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a71      	ldr	r2, [pc, #452]	@ (8001a2c <HAL_ADC_AnalogWDGConfig+0x204>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d018      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6f      	ldr	r2, [pc, #444]	@ (8001a30 <HAL_ADC_AnalogWDGConfig+0x208>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d013      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800187e:	d00e      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001888:	d009      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001892:	d004      	beq.n	800189e <HAL_ADC_AnalogWDGConfig+0x76>
 8001894:	f640 0142 	movw	r1, #2114	@ 0x842
 8001898:	4862      	ldr	r0, [pc, #392]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800189a:	f7ff f865 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	7a1b      	ldrb	r3, [r3, #8]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <HAL_ADC_AnalogWDGConfig+0x90>
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	7a1b      	ldrb	r3, [r3, #8]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d004      	beq.n	80018b8 <HAL_ADC_AnalogWDGConfig+0x90>
 80018ae:	f640 0143 	movw	r1, #2115	@ 0x843
 80018b2:	485c      	ldr	r0, [pc, #368]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80018b4:	f7ff f858 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018c0:	d304      	bcc.n	80018cc <HAL_ADC_AnalogWDGConfig+0xa4>
 80018c2:	f640 0144 	movw	r1, #2116	@ 0x844
 80018c6:	4857      	ldr	r0, [pc, #348]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80018c8:	f7ff f84e 	bl	8000968 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018d4:	d304      	bcc.n	80018e0 <HAL_ADC_AnalogWDGConfig+0xb8>
 80018d6:	f640 0145 	movw	r1, #2117	@ 0x845
 80018da:	4852      	ldr	r0, [pc, #328]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80018dc:	f7ff f844 	bl	8000968 <assert_failed>
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a50      	ldr	r2, [pc, #320]	@ (8001a28 <HAL_ADC_AnalogWDGConfig+0x200>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d009      	beq.n	80018fe <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80018ee:	4a4f      	ldr	r2, [pc, #316]	@ (8001a2c <HAL_ADC_AnalogWDGConfig+0x204>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d004      	beq.n	80018fe <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80018f8:	4a4d      	ldr	r2, [pc, #308]	@ (8001a30 <HAL_ADC_AnalogWDGConfig+0x208>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d14c      	bne.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d048      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d044      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d040      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d03c      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	2b04      	cmp	r3, #4
 8001924:	d038      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d034      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b06      	cmp	r3, #6
 8001934:	d030      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b07      	cmp	r3, #7
 800193c:	d02c      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b08      	cmp	r3, #8
 8001944:	d028      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b09      	cmp	r3, #9
 800194c:	d024      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2b0a      	cmp	r3, #10
 8001954:	d020      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b0b      	cmp	r3, #11
 800195c:	d01c      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d018      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	2b0d      	cmp	r3, #13
 800196c:	d014      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b0e      	cmp	r3, #14
 8001974:	d010      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	d00c      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d008      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b11      	cmp	r3, #17
 800198c:	d004      	beq.n	8001998 <HAL_ADC_AnalogWDGConfig+0x170>
 800198e:	f640 014b 	movw	r1, #2123	@ 0x84b
 8001992:	4824      	ldr	r0, [pc, #144]	@ (8001a24 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001994:	f7fe ffe8 	bl	8000968 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d101      	bne.n	80019a6 <HAL_ADC_AnalogWDGConfig+0x17e>
 80019a2:	2302      	movs	r3, #2
 80019a4:	e035      	b.n	8001a12 <HAL_ADC_AnalogWDGConfig+0x1ea>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	7a1b      	ldrb	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_ADC_AnalogWDGConfig+0x1a0>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	e007      	b.n	80019d8 <HAL_ADC_AnalogWDGConfig+0x1b0>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019d6:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	4b15      	ldr	r3, [pc, #84]	@ (8001a34 <HAL_ADC_AnalogWDGConfig+0x20c>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	6811      	ldr	r1, [r2, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6852      	ldr	r2, [r2, #4]
 80019ea:	4311      	orrs	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	68d2      	ldr	r2, [r2, #12]
 80019fc:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	6912      	ldr	r2, [r2, #16]
 8001a06:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40012400 	.word	0x40012400
 8001a20:	40012800 	.word	0x40012800
 8001a24:	08005cf8 	.word	0x08005cf8
 8001a28:	00800200 	.word	0x00800200
 8001a2c:	00400200 	.word	0x00400200
 8001a30:	00c00200 	.word	0x00c00200
 8001a34:	ff3ffde0 	.word	0xff3ffde0

08001a38 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b084      	sub	sp, #16
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d12e      	bne.n	8001ab0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a62:	f7ff fa85 	bl	8000f70 <HAL_GetTick>
 8001a66:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a68:	e01b      	b.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a6a:	f7ff fa81 	bl	8000f70 <HAL_GetTick>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	1ad3      	subs	r3, r2, r3
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d914      	bls.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d10d      	bne.n	8001aa2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a8a:	f043 0210 	orr.w	r2, r3, #16
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	f043 0201 	orr.w	r2, r3, #1
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e007      	b.n	8001ab2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d0dc      	beq.n	8001a6a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001ac2:	bf00      	nop
 8001ac4:	370c      	adds	r7, #12
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr

08001acc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d101      	bne.n	8001ade <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e209      	b.n	8001ef2 <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a8f      	ldr	r2, [pc, #572]	@ (8001d20 <HAL_CAN_Init+0x254>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d004      	beq.n	8001af2 <HAL_CAN_Init+0x26>
 8001ae8:	f240 111d 	movw	r1, #285	@ 0x11d
 8001aec:	488d      	ldr	r0, [pc, #564]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001aee:	f7fe ff3b 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e1b      	ldrb	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d008      	beq.n	8001b0c <HAL_CAN_Init+0x40>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	7e1b      	ldrb	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d004      	beq.n	8001b0c <HAL_CAN_Init+0x40>
 8001b02:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8001b06:	4887      	ldr	r0, [pc, #540]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b08:	f7fe ff2e 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7e5b      	ldrb	r3, [r3, #25]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d008      	beq.n	8001b26 <HAL_CAN_Init+0x5a>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e5b      	ldrb	r3, [r3, #25]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d004      	beq.n	8001b26 <HAL_CAN_Init+0x5a>
 8001b1c:	f240 111f 	movw	r1, #287	@ 0x11f
 8001b20:	4880      	ldr	r0, [pc, #512]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b22:	f7fe ff21 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	7e9b      	ldrb	r3, [r3, #26]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d008      	beq.n	8001b40 <HAL_CAN_Init+0x74>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	7e9b      	ldrb	r3, [r3, #26]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d004      	beq.n	8001b40 <HAL_CAN_Init+0x74>
 8001b36:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001b3a:	487a      	ldr	r0, [pc, #488]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b3c:	f7fe ff14 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7edb      	ldrb	r3, [r3, #27]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d008      	beq.n	8001b5a <HAL_CAN_Init+0x8e>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	7edb      	ldrb	r3, [r3, #27]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d004      	beq.n	8001b5a <HAL_CAN_Init+0x8e>
 8001b50:	f240 1121 	movw	r1, #289	@ 0x121
 8001b54:	4873      	ldr	r0, [pc, #460]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b56:	f7fe ff07 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	7f1b      	ldrb	r3, [r3, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d008      	beq.n	8001b74 <HAL_CAN_Init+0xa8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	7f1b      	ldrb	r3, [r3, #28]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d004      	beq.n	8001b74 <HAL_CAN_Init+0xa8>
 8001b6a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001b6e:	486d      	ldr	r0, [pc, #436]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b70:	f7fe fefa 	bl	8000968 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	7f5b      	ldrb	r3, [r3, #29]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_CAN_Init+0xc2>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	7f5b      	ldrb	r3, [r3, #29]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_Init+0xc2>
 8001b84:	f240 1123 	movw	r1, #291	@ 0x123
 8001b88:	4866      	ldr	r0, [pc, #408]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001b8a:	f7fe feed 	bl	8000968 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d013      	beq.n	8001bbe <HAL_CAN_Init+0xf2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b9e:	d00e      	beq.n	8001bbe <HAL_CAN_Init+0xf2>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001ba8:	d009      	beq.n	8001bbe <HAL_CAN_Init+0xf2>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001bb2:	d004      	beq.n	8001bbe <HAL_CAN_Init+0xf2>
 8001bb4:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001bb8:	485a      	ldr	r0, [pc, #360]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001bba:	f7fe fed5 	bl	8000968 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d013      	beq.n	8001bee <HAL_CAN_Init+0x122>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bce:	d00e      	beq.n	8001bee <HAL_CAN_Init+0x122>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bd8:	d009      	beq.n	8001bee <HAL_CAN_Init+0x122>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001be2:	d004      	beq.n	8001bee <HAL_CAN_Init+0x122>
 8001be4:	f240 1125 	movw	r1, #293	@ 0x125
 8001be8:	484e      	ldr	r0, [pc, #312]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001bea:	f7fe febd 	bl	8000968 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d04f      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bfe:	d04a      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001c08:	d045      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001c12:	d040      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691b      	ldr	r3, [r3, #16]
 8001c18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c1c:	d03b      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c26:	d036      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001c30:	d031      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8001c3a:	d02c      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c44:	d027      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8001c4e:	d022      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001c58:	d01d      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8001c62:	d018      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c6c:	d013      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001c76:	d00e      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c80:	d009      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8001c8a:	d004      	beq.n	8001c96 <HAL_CAN_Init+0x1ca>
 8001c8c:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001c90:	4824      	ldr	r0, [pc, #144]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001c92:	f7fe fe69 	bl	8000968 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d027      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001ca6:	d022      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	695b      	ldr	r3, [r3, #20]
 8001cac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001cb0:	d01d      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001cba:	d018      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001cc4:	d013      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001cce:	d00e      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001cd8:	d009      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001ce2:	d004      	beq.n	8001cee <HAL_CAN_Init+0x222>
 8001ce4:	f240 1127 	movw	r1, #295	@ 0x127
 8001ce8:	480e      	ldr	r0, [pc, #56]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001cea:	f7fe fe3d 	bl	8000968 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <HAL_CAN_Init+0x234>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001cfe:	d904      	bls.n	8001d0a <HAL_CAN_Init+0x23e>
 8001d00:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001d04:	4807      	ldr	r0, [pc, #28]	@ (8001d24 <HAL_CAN_Init+0x258>)
 8001d06:	f7fe fe2f 	bl	8000968 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d108      	bne.n	8001d28 <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f7fe fb82 	bl	8000420 <HAL_CAN_MspInit>
 8001d1c:	e004      	b.n	8001d28 <HAL_CAN_Init+0x25c>
 8001d1e:	bf00      	nop
 8001d20:	40006400 	.word	0x40006400
 8001d24:	08005d30 	.word	0x08005d30
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d38:	f7ff f91a 	bl	8000f70 <HAL_GetTick>
 8001d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d3e:	e012      	b.n	8001d66 <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d40:	f7ff f916 	bl	8000f70 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b0a      	cmp	r3, #10
 8001d4c:	d90b      	bls.n	8001d66 <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2205      	movs	r2, #5
 8001d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e0c5      	b.n	8001ef2 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0e5      	beq.n	8001d40 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f022 0202 	bic.w	r2, r2, #2
 8001d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d84:	f7ff f8f4 	bl	8000f70 <HAL_GetTick>
 8001d88:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d8a:	e012      	b.n	8001db2 <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d8c:	f7ff f8f0 	bl	8000f70 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b0a      	cmp	r3, #10
 8001d98:	d90b      	bls.n	8001db2 <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2205      	movs	r2, #5
 8001daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e09f      	b.n	8001ef2 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1e5      	bne.n	8001d8c <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7e1b      	ldrb	r3, [r3, #24]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d108      	bne.n	8001dda <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e007      	b.n	8001dea <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7e5b      	ldrb	r3, [r3, #25]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d108      	bne.n	8001e04 <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	e007      	b.n	8001e14 <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	7e9b      	ldrb	r3, [r3, #26]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d108      	bne.n	8001e2e <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0220 	orr.w	r2, r2, #32
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	e007      	b.n	8001e3e <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0220 	bic.w	r2, r2, #32
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7edb      	ldrb	r3, [r3, #27]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d108      	bne.n	8001e58 <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0210 	bic.w	r2, r2, #16
 8001e54:	601a      	str	r2, [r3, #0]
 8001e56:	e007      	b.n	8001e68 <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f042 0210 	orr.w	r2, r2, #16
 8001e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7f1b      	ldrb	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d108      	bne.n	8001e82 <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f042 0208 	orr.w	r2, r2, #8
 8001e7e:	601a      	str	r2, [r3, #0]
 8001e80:	e007      	b.n	8001e92 <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0208 	bic.w	r2, r2, #8
 8001e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7f5b      	ldrb	r3, [r3, #29]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d108      	bne.n	8001eac <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f042 0204 	orr.w	r2, r2, #4
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	e007      	b.n	8001ebc <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f022 0204 	bic.w	r2, r2, #4
 8001eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	691b      	ldr	r3, [r3, #16]
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	ea42 0103 	orr.w	r1, r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	@ 0x28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d07c      	beq.n	800203c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d023      	beq.n	8001f94 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f983 	bl	800226a <HAL_CAN_TxMailbox0CompleteCallback>
 8001f64:	e016      	b.n	8001f94 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	f003 0304 	and.w	r3, r3, #4
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f78:	e00c      	b.n	8001f94 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8c:	e002      	b.n	8001f94 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f986 	bl	80022a0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d024      	beq.n	8001fe8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f962 	bl	800227c <HAL_CAN_TxMailbox1CompleteCallback>
 8001fb8:	e016      	b.n	8001fe8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d004      	beq.n	8001fce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fcc:	e00c      	b.n	8001fe8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fe0:	e002      	b.n	8001fe8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f965 	bl	80022b2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d024      	beq.n	800203c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ffa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f941 	bl	800228e <HAL_CAN_TxMailbox2CompleteCallback>
 800200c:	e016      	b.n	800203c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d004      	beq.n	8002022 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002020:	e00c      	b.n	800203c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d004      	beq.n	8002036 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
 8002034:	e002      	b.n	800203c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f944 	bl	80022c4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800203c:	6a3b      	ldr	r3, [r7, #32]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00c      	beq.n	8002060 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002056:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2210      	movs	r2, #16
 800205e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2208      	movs	r2, #8
 800207a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f933 	bl	80022e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	2b00      	cmp	r3, #0
 800208a:	d009      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f003 0303 	and.w	r3, r3, #3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f91b 	bl	80022d6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020a0:	6a3b      	ldr	r3, [r7, #32]
 80020a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00c      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	f003 0310 	and.w	r3, r3, #16
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2210      	movs	r2, #16
 80020c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2208      	movs	r2, #8
 80020de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f913 	bl	800230c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d009      	beq.n	8002104 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f8fb 	bl	80022fa <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002104:	6a3b      	ldr	r3, [r7, #32]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d006      	beq.n	8002126 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2210      	movs	r2, #16
 800211e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f000 f8fc 	bl	800231e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002126:	6a3b      	ldr	r3, [r7, #32]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00b      	beq.n	8002148 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d006      	beq.n	8002148 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2208      	movs	r2, #8
 8002140:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	f000 f8f4 	bl	8002330 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002148:	6a3b      	ldr	r3, [r7, #32]
 800214a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d07b      	beq.n	800224a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d072      	beq.n	8002242 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800219a:	2b00      	cmp	r3, #0
 800219c:	d008      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021b0:	6a3b      	ldr	r3, [r7, #32]
 80021b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d043      	beq.n	8002242 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d03e      	beq.n	8002242 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ca:	2b60      	cmp	r3, #96	@ 0x60
 80021cc:	d02b      	beq.n	8002226 <HAL_CAN_IRQHandler+0x32a>
 80021ce:	2b60      	cmp	r3, #96	@ 0x60
 80021d0:	d82e      	bhi.n	8002230 <HAL_CAN_IRQHandler+0x334>
 80021d2:	2b50      	cmp	r3, #80	@ 0x50
 80021d4:	d022      	beq.n	800221c <HAL_CAN_IRQHandler+0x320>
 80021d6:	2b50      	cmp	r3, #80	@ 0x50
 80021d8:	d82a      	bhi.n	8002230 <HAL_CAN_IRQHandler+0x334>
 80021da:	2b40      	cmp	r3, #64	@ 0x40
 80021dc:	d019      	beq.n	8002212 <HAL_CAN_IRQHandler+0x316>
 80021de:	2b40      	cmp	r3, #64	@ 0x40
 80021e0:	d826      	bhi.n	8002230 <HAL_CAN_IRQHandler+0x334>
 80021e2:	2b30      	cmp	r3, #48	@ 0x30
 80021e4:	d010      	beq.n	8002208 <HAL_CAN_IRQHandler+0x30c>
 80021e6:	2b30      	cmp	r3, #48	@ 0x30
 80021e8:	d822      	bhi.n	8002230 <HAL_CAN_IRQHandler+0x334>
 80021ea:	2b10      	cmp	r3, #16
 80021ec:	d002      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x2f8>
 80021ee:	2b20      	cmp	r3, #32
 80021f0:	d005      	beq.n	80021fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021f2:	e01d      	b.n	8002230 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fc:	e019      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	f043 0310 	orr.w	r3, r3, #16
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002206:	e014      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	f043 0320 	orr.w	r3, r3, #32
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002210:	e00f      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800221a:	e00a      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800221c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002224:	e005      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800222e:	e000      	b.n	8002232 <HAL_CAN_IRQHandler+0x336>
            break;
 8002230:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002240:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2204      	movs	r2, #4
 8002248:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800224a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	f000 f870 	bl	8002342 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002262:	bf00      	nop
 8002264:	3728      	adds	r7, #40	@ 0x28
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	bc80      	pop	{r7}
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	bc80      	pop	{r7}
 800228c:	4770      	bx	lr

0800228e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b083      	sub	sp, #12
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022de:	bf00      	nop
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr

080022e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bc80      	pop	{r7}
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr

0800230c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800231e:	b480      	push	{r7}
 8002320:	b083      	sub	sp, #12
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0c      	ldr	r3, [pc, #48]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800237c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002386:	4a04      	ldr	r2, [pc, #16]	@ (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	60d3      	str	r3, [r2, #12]
}
 800238c:	bf00      	nop
 800238e:	3714      	adds	r7, #20
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	@ (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4906      	ldr	r1, [pc, #24]	@ (80023ec <__NVIC_EnableIRQ+0x34>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr
 80023ec:	e000e100 	.word	0xe000e100

080023f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	6039      	str	r1, [r7, #0]
 80023fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	db0a      	blt.n	800241a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	b2da      	uxtb	r2, r3
 8002408:	490c      	ldr	r1, [pc, #48]	@ (800243c <__NVIC_SetPriority+0x4c>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	0112      	lsls	r2, r2, #4
 8002410:	b2d2      	uxtb	r2, r2
 8002412:	440b      	add	r3, r1
 8002414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002418:	e00a      	b.n	8002430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2da      	uxtb	r2, r3
 800241e:	4908      	ldr	r1, [pc, #32]	@ (8002440 <__NVIC_SetPriority+0x50>)
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3b04      	subs	r3, #4
 8002428:	0112      	lsls	r2, r2, #4
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	440b      	add	r3, r1
 800242e:	761a      	strb	r2, [r3, #24]
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	bc80      	pop	{r7}
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	e000e100 	.word	0xe000e100
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002444:	b480      	push	{r7}
 8002446:	b089      	sub	sp, #36	@ 0x24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	f1c3 0307 	rsb	r3, r3, #7
 800245e:	2b04      	cmp	r3, #4
 8002460:	bf28      	it	cs
 8002462:	2304      	movcs	r3, #4
 8002464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	3304      	adds	r3, #4
 800246a:	2b06      	cmp	r3, #6
 800246c:	d902      	bls.n	8002474 <NVIC_EncodePriority+0x30>
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	3b03      	subs	r3, #3
 8002472:	e000      	b.n	8002476 <NVIC_EncodePriority+0x32>
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	f04f 32ff 	mov.w	r2, #4294967295
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43da      	mvns	r2, r3
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	401a      	ands	r2, r3
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800248c:	f04f 31ff 	mov.w	r1, #4294967295
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	fa01 f303 	lsl.w	r3, r1, r3
 8002496:	43d9      	mvns	r1, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800249c:	4313      	orrs	r3, r2
         );
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3724      	adds	r7, #36	@ 0x24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024b8:	d301      	bcc.n	80024be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00f      	b.n	80024de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024be:	4a0a      	ldr	r2, [pc, #40]	@ (80024e8 <SysTick_Config+0x40>)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c6:	210f      	movs	r1, #15
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f7ff ff90 	bl	80023f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	@ (80024e8 <SysTick_Config+0x40>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	@ (80024e8 <SysTick_Config+0x40>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b07      	cmp	r3, #7
 80024f8:	d00f      	beq.n	800251a <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b06      	cmp	r3, #6
 80024fe:	d00c      	beq.n	800251a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b05      	cmp	r3, #5
 8002504:	d009      	beq.n	800251a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d006      	beq.n	800251a <HAL_NVIC_SetPriorityGrouping+0x2e>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d003      	beq.n	800251a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002512:	2191      	movs	r1, #145	@ 0x91
 8002514:	4804      	ldr	r0, [pc, #16]	@ (8002528 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002516:	f7fe fa27 	bl	8000968 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff1a 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	08005d68 	.word	0x08005d68

0800252c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252c:	b580      	push	{r7, lr}
 800252e:	b086      	sub	sp, #24
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2b0f      	cmp	r3, #15
 8002542:	d903      	bls.n	800254c <HAL_NVIC_SetPriority+0x20>
 8002544:	21a9      	movs	r1, #169	@ 0xa9
 8002546:	480e      	ldr	r0, [pc, #56]	@ (8002580 <HAL_NVIC_SetPriority+0x54>)
 8002548:	f7fe fa0e 	bl	8000968 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b0f      	cmp	r3, #15
 8002550:	d903      	bls.n	800255a <HAL_NVIC_SetPriority+0x2e>
 8002552:	21aa      	movs	r1, #170	@ 0xaa
 8002554:	480a      	ldr	r0, [pc, #40]	@ (8002580 <HAL_NVIC_SetPriority+0x54>)
 8002556:	f7fe fa07 	bl	8000968 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800255a:	f7ff ff1f 	bl	800239c <__NVIC_GetPriorityGrouping>
 800255e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7ff ff6d 	bl	8002444 <NVIC_EncodePriority>
 800256a:	4602      	mov	r2, r0
 800256c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff3c 	bl	80023f0 <__NVIC_SetPriority>
}
 8002578:	bf00      	nop
 800257a:	3718      	adds	r7, #24
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	08005d68 	.word	0x08005d68

08002584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	da03      	bge.n	800259e <HAL_NVIC_EnableIRQ+0x1a>
 8002596:	21bd      	movs	r1, #189	@ 0xbd
 8002598:	4805      	ldr	r0, [pc, #20]	@ (80025b0 <HAL_NVIC_EnableIRQ+0x2c>)
 800259a:	f7fe f9e5 	bl	8000968 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff08 	bl	80023b8 <__NVIC_EnableIRQ>
}
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	08005d68 	.word	0x08005d68

080025b4 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff73 	bl	80024a8 <SysTick_Config>
 80025c2:	4603      	mov	r3, r0
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d003      	beq.n	80025ec <HAL_DMA_Start_IT+0x20>
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ea:	d304      	bcc.n	80025f6 <HAL_DMA_Start_IT+0x2a>
 80025ec:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 80025f0:	482c      	ldr	r0, [pc, #176]	@ (80026a4 <HAL_DMA_Start_IT+0xd8>)
 80025f2:	f7fe f9b9 	bl	8000968 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdma);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d101      	bne.n	8002604 <HAL_DMA_Start_IT+0x38>
 8002600:	2302      	movs	r3, #2
 8002602:	e04b      	b.n	800269c <HAL_DMA_Start_IT+0xd0>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002612:	b2db      	uxtb	r3, r3
 8002614:	2b01      	cmp	r3, #1
 8002616:	d13a      	bne.n	800268e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2202      	movs	r2, #2
 800261c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2200      	movs	r2, #0
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	68b9      	ldr	r1, [r7, #8]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	f000 f833 	bl	80026a8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_DMA_Start_IT+0x90>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 020e 	orr.w	r2, r2, #14
 8002658:	601a      	str	r2, [r3, #0]
 800265a:	e00f      	b.n	800267c <HAL_DMA_Start_IT+0xb0>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 0204 	bic.w	r2, r2, #4
 800266a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 020a 	orr.w	r2, r2, #10
 800267a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <HAL_DMA_Start_IT+0xce>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	08005da4 	.word	0x08005da4

080026a8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	607a      	str	r2, [r7, #4]
 80026b4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f202 	lsl.w	r2, r1, r2
 80026c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b10      	cmp	r3, #16
 80026d4:	d108      	bne.n	80026e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80026e6:	e007      	b.n	80026f8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
	...

08002704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002712:	2300      	movs	r3, #0
 8002714:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a96      	ldr	r2, [pc, #600]	@ (8002974 <HAL_GPIO_Init+0x270>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d013      	beq.n	8002746 <HAL_GPIO_Init+0x42>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a95      	ldr	r2, [pc, #596]	@ (8002978 <HAL_GPIO_Init+0x274>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d00f      	beq.n	8002746 <HAL_GPIO_Init+0x42>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a94      	ldr	r2, [pc, #592]	@ (800297c <HAL_GPIO_Init+0x278>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00b      	beq.n	8002746 <HAL_GPIO_Init+0x42>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a93      	ldr	r2, [pc, #588]	@ (8002980 <HAL_GPIO_Init+0x27c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d007      	beq.n	8002746 <HAL_GPIO_Init+0x42>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a92      	ldr	r2, [pc, #584]	@ (8002984 <HAL_GPIO_Init+0x280>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x42>
 800273e:	21bd      	movs	r1, #189	@ 0xbd
 8002740:	4891      	ldr	r0, [pc, #580]	@ (8002988 <HAL_GPIO_Init+0x284>)
 8002742:	f7fe f911 	bl	8000968 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	d004      	beq.n	800275a <HAL_GPIO_Init+0x56>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002758:	d303      	bcc.n	8002762 <HAL_GPIO_Init+0x5e>
 800275a:	21be      	movs	r1, #190	@ 0xbe
 800275c:	488a      	ldr	r0, [pc, #552]	@ (8002988 <HAL_GPIO_Init+0x284>)
 800275e:	f7fe f903 	bl	8000968 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 821d 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	f000 8218 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	2b11      	cmp	r3, #17
 800277c:	f000 8213 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b02      	cmp	r3, #2
 8002786:	f000 820e 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b12      	cmp	r3, #18
 8002790:	f000 8209 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	4a7c      	ldr	r2, [pc, #496]	@ (800298c <HAL_GPIO_Init+0x288>)
 800279a:	4293      	cmp	r3, r2
 800279c:	f000 8203 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a7a      	ldr	r2, [pc, #488]	@ (8002990 <HAL_GPIO_Init+0x28c>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	f000 81fd 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a78      	ldr	r2, [pc, #480]	@ (8002994 <HAL_GPIO_Init+0x290>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	f000 81f7 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4a76      	ldr	r2, [pc, #472]	@ (8002998 <HAL_GPIO_Init+0x294>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	f000 81f1 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a74      	ldr	r2, [pc, #464]	@ (800299c <HAL_GPIO_Init+0x298>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f000 81eb 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	4a72      	ldr	r2, [pc, #456]	@ (80029a0 <HAL_GPIO_Init+0x29c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	f000 81e5 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	2b03      	cmp	r3, #3
 80027e2:	f000 81e0 	beq.w	8002ba6 <HAL_GPIO_Init+0x4a2>
 80027e6:	21bf      	movs	r1, #191	@ 0xbf
 80027e8:	4867      	ldr	r0, [pc, #412]	@ (8002988 <HAL_GPIO_Init+0x284>)
 80027ea:	f7fe f8bd 	bl	8000968 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027ee:	e1da      	b.n	8002ba6 <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027f0:	2201      	movs	r2, #1
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	429a      	cmp	r2, r3
 800280a:	f040 81c9 	bne.w	8002ba0 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a58      	ldr	r2, [pc, #352]	@ (8002974 <HAL_GPIO_Init+0x270>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d013      	beq.n	800283e <HAL_GPIO_Init+0x13a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <HAL_GPIO_Init+0x274>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d00f      	beq.n	800283e <HAL_GPIO_Init+0x13a>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a56      	ldr	r2, [pc, #344]	@ (800297c <HAL_GPIO_Init+0x278>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <HAL_GPIO_Init+0x13a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <HAL_GPIO_Init+0x27c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x13a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a54      	ldr	r2, [pc, #336]	@ (8002984 <HAL_GPIO_Init+0x280>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x13a>
 8002836:	21cd      	movs	r1, #205	@ 0xcd
 8002838:	4853      	ldr	r0, [pc, #332]	@ (8002988 <HAL_GPIO_Init+0x284>)
 800283a:	f7fe f895 	bl	8000968 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	4a57      	ldr	r2, [pc, #348]	@ (80029a0 <HAL_GPIO_Init+0x29c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	f000 80c2 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
 800284a:	4a55      	ldr	r2, [pc, #340]	@ (80029a0 <HAL_GPIO_Init+0x29c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	f200 80e8 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 8002852:	4a50      	ldr	r2, [pc, #320]	@ (8002994 <HAL_GPIO_Init+0x290>)
 8002854:	4293      	cmp	r3, r2
 8002856:	f000 80ba 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
 800285a:	4a4e      	ldr	r2, [pc, #312]	@ (8002994 <HAL_GPIO_Init+0x290>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f200 80e0 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 8002862:	4a4e      	ldr	r2, [pc, #312]	@ (800299c <HAL_GPIO_Init+0x298>)
 8002864:	4293      	cmp	r3, r2
 8002866:	f000 80b2 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
 800286a:	4a4c      	ldr	r2, [pc, #304]	@ (800299c <HAL_GPIO_Init+0x298>)
 800286c:	4293      	cmp	r3, r2
 800286e:	f200 80d8 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 8002872:	4a47      	ldr	r2, [pc, #284]	@ (8002990 <HAL_GPIO_Init+0x28c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	f000 80aa 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
 800287a:	4a45      	ldr	r2, [pc, #276]	@ (8002990 <HAL_GPIO_Init+0x28c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f200 80d0 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 8002882:	4a45      	ldr	r2, [pc, #276]	@ (8002998 <HAL_GPIO_Init+0x294>)
 8002884:	4293      	cmp	r3, r2
 8002886:	f000 80a2 	beq.w	80029ce <HAL_GPIO_Init+0x2ca>
 800288a:	4a43      	ldr	r2, [pc, #268]	@ (8002998 <HAL_GPIO_Init+0x294>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f200 80c8 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 8002892:	2b12      	cmp	r3, #18
 8002894:	d82c      	bhi.n	80028f0 <HAL_GPIO_Init+0x1ec>
 8002896:	2b12      	cmp	r3, #18
 8002898:	f200 80c3 	bhi.w	8002a22 <HAL_GPIO_Init+0x31e>
 800289c:	a201      	add	r2, pc, #4	@ (adr r2, 80028a4 <HAL_GPIO_Init+0x1a0>)
 800289e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028a2:	bf00      	nop
 80028a4:	080029cf 	.word	0x080029cf
 80028a8:	080028f9 	.word	0x080028f9
 80028ac:	0800294b 	.word	0x0800294b
 80028b0:	08002a1d 	.word	0x08002a1d
 80028b4:	08002a23 	.word	0x08002a23
 80028b8:	08002a23 	.word	0x08002a23
 80028bc:	08002a23 	.word	0x08002a23
 80028c0:	08002a23 	.word	0x08002a23
 80028c4:	08002a23 	.word	0x08002a23
 80028c8:	08002a23 	.word	0x08002a23
 80028cc:	08002a23 	.word	0x08002a23
 80028d0:	08002a23 	.word	0x08002a23
 80028d4:	08002a23 	.word	0x08002a23
 80028d8:	08002a23 	.word	0x08002a23
 80028dc:	08002a23 	.word	0x08002a23
 80028e0:	08002a23 	.word	0x08002a23
 80028e4:	08002a23 	.word	0x08002a23
 80028e8:	08002921 	.word	0x08002921
 80028ec:	080029a5 	.word	0x080029a5
 80028f0:	4a26      	ldr	r2, [pc, #152]	@ (800298c <HAL_GPIO_Init+0x288>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d06b      	beq.n	80029ce <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80028f6:	e094      	b.n	8002a22 <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d00b      	beq.n	8002918 <HAL_GPIO_Init+0x214>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d007      	beq.n	8002918 <HAL_GPIO_Init+0x214>
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b03      	cmp	r3, #3
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x214>
 8002910:	21d5      	movs	r1, #213	@ 0xd5
 8002912:	481d      	ldr	r0, [pc, #116]	@ (8002988 <HAL_GPIO_Init+0x284>)
 8002914:	f7fe f828 	bl	8000968 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	623b      	str	r3, [r7, #32]
          break;
 800291e:	e081      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d00b      	beq.n	8002940 <HAL_GPIO_Init+0x23c>
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x23c>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x23c>
 8002938:	21dc      	movs	r1, #220	@ 0xdc
 800293a:	4813      	ldr	r0, [pc, #76]	@ (8002988 <HAL_GPIO_Init+0x284>)
 800293c:	f7fe f814 	bl	8000968 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	3304      	adds	r3, #4
 8002946:	623b      	str	r3, [r7, #32]
          break;
 8002948:	e06c      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d00b      	beq.n	800296a <HAL_GPIO_Init+0x266>
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x266>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b03      	cmp	r3, #3
 8002960:	d003      	beq.n	800296a <HAL_GPIO_Init+0x266>
 8002962:	21e3      	movs	r1, #227	@ 0xe3
 8002964:	4808      	ldr	r0, [pc, #32]	@ (8002988 <HAL_GPIO_Init+0x284>)
 8002966:	f7fd ffff 	bl	8000968 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	3308      	adds	r3, #8
 8002970:	623b      	str	r3, [r7, #32]
          break;
 8002972:	e057      	b.n	8002a24 <HAL_GPIO_Init+0x320>
 8002974:	40010800 	.word	0x40010800
 8002978:	40010c00 	.word	0x40010c00
 800297c:	40011000 	.word	0x40011000
 8002980:	40011400 	.word	0x40011400
 8002984:	40011800 	.word	0x40011800
 8002988:	08005ddc 	.word	0x08005ddc
 800298c:	10110000 	.word	0x10110000
 8002990:	10210000 	.word	0x10210000
 8002994:	10310000 	.word	0x10310000
 8002998:	10120000 	.word	0x10120000
 800299c:	10220000 	.word	0x10220000
 80029a0:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d00b      	beq.n	80029c4 <HAL_GPIO_Init+0x2c0>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x2c0>
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b03      	cmp	r3, #3
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x2c0>
 80029bc:	21ea      	movs	r1, #234	@ 0xea
 80029be:	4880      	ldr	r0, [pc, #512]	@ (8002bc0 <HAL_GPIO_Init+0x4bc>)
 80029c0:	f7fd ffd2 	bl	8000968 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	330c      	adds	r3, #12
 80029ca:	623b      	str	r3, [r7, #32]
          break;
 80029cc:	e02a      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_GPIO_Init+0x2ea>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d007      	beq.n	80029ee <HAL_GPIO_Init+0x2ea>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x2ea>
 80029e6:	21f7      	movs	r1, #247	@ 0xf7
 80029e8:	4875      	ldr	r0, [pc, #468]	@ (8002bc0 <HAL_GPIO_Init+0x4bc>)
 80029ea:	f7fd ffbd 	bl	8000968 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029f6:	2304      	movs	r3, #4
 80029f8:	623b      	str	r3, [r7, #32]
          break;
 80029fa:	e013      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a04:	2308      	movs	r3, #8
 8002a06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	611a      	str	r2, [r3, #16]
          break;
 8002a0e:	e009      	b.n	8002a24 <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a10:	2308      	movs	r3, #8
 8002a12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	615a      	str	r2, [r3, #20]
          break;
 8002a1a:	e003      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
          break;
 8002a20:	e000      	b.n	8002a24 <HAL_GPIO_Init+0x320>
          break;
 8002a22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	2bff      	cmp	r3, #255	@ 0xff
 8002a28:	d801      	bhi.n	8002a2e <HAL_GPIO_Init+0x32a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	e001      	b.n	8002a32 <HAL_GPIO_Init+0x32e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2bff      	cmp	r3, #255	@ 0xff
 8002a38:	d802      	bhi.n	8002a40 <HAL_GPIO_Init+0x33c>
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	e002      	b.n	8002a46 <HAL_GPIO_Init+0x342>
 8002a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a42:	3b08      	subs	r3, #8
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	210f      	movs	r1, #15
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	401a      	ands	r2, r3
 8002a58:	6a39      	ldr	r1, [r7, #32]
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8096 	beq.w	8002ba0 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a74:	4b53      	ldr	r3, [pc, #332]	@ (8002bc4 <HAL_GPIO_Init+0x4c0>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	4a52      	ldr	r2, [pc, #328]	@ (8002bc4 <HAL_GPIO_Init+0x4c0>)
 8002a7a:	f043 0301 	orr.w	r3, r3, #1
 8002a7e:	6193      	str	r3, [r2, #24]
 8002a80:	4b50      	ldr	r3, [pc, #320]	@ (8002bc4 <HAL_GPIO_Init+0x4c0>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60bb      	str	r3, [r7, #8]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8002bc8 <HAL_GPIO_Init+0x4c4>)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	089b      	lsrs	r3, r3, #2
 8002a92:	3302      	adds	r3, #2
 8002a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	220f      	movs	r2, #15
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4013      	ands	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a46      	ldr	r2, [pc, #280]	@ (8002bcc <HAL_GPIO_Init+0x4c8>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_GPIO_Init+0x3dc>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a45      	ldr	r2, [pc, #276]	@ (8002bd0 <HAL_GPIO_Init+0x4cc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00d      	beq.n	8002adc <HAL_GPIO_Init+0x3d8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a44      	ldr	r2, [pc, #272]	@ (8002bd4 <HAL_GPIO_Init+0x4d0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d007      	beq.n	8002ad8 <HAL_GPIO_Init+0x3d4>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a43      	ldr	r2, [pc, #268]	@ (8002bd8 <HAL_GPIO_Init+0x4d4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d101      	bne.n	8002ad4 <HAL_GPIO_Init+0x3d0>
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e006      	b.n	8002ae2 <HAL_GPIO_Init+0x3de>
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	e004      	b.n	8002ae2 <HAL_GPIO_Init+0x3de>
 8002ad8:	2302      	movs	r3, #2
 8002ada:	e002      	b.n	8002ae2 <HAL_GPIO_Init+0x3de>
 8002adc:	2301      	movs	r3, #1
 8002ade:	e000      	b.n	8002ae2 <HAL_GPIO_Init+0x3de>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	f002 0203 	and.w	r2, r2, #3
 8002ae8:	0092      	lsls	r2, r2, #2
 8002aea:	4093      	lsls	r3, r2
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002af2:	4935      	ldr	r1, [pc, #212]	@ (8002bc8 <HAL_GPIO_Init+0x4c4>)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af6:	089b      	lsrs	r3, r3, #2
 8002af8:	3302      	adds	r3, #2
 8002afa:	68fa      	ldr	r2, [r7, #12]
 8002afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d006      	beq.n	8002b1a <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b0c:	4b33      	ldr	r3, [pc, #204]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	4932      	ldr	r1, [pc, #200]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	608b      	str	r3, [r1, #8]
 8002b18:	e006      	b.n	8002b28 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b1a:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	43db      	mvns	r3, r3
 8002b22:	492e      	ldr	r1, [pc, #184]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d006      	beq.n	8002b42 <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b34:	4b29      	ldr	r3, [pc, #164]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	4928      	ldr	r1, [pc, #160]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	60cb      	str	r3, [r1, #12]
 8002b40:	e006      	b.n	8002b50 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b42:	4b26      	ldr	r3, [pc, #152]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	4924      	ldr	r1, [pc, #144]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	491e      	ldr	r1, [pc, #120]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	43db      	mvns	r3, r3
 8002b72:	491a      	ldr	r1, [pc, #104]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d006      	beq.n	8002b92 <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b84:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4914      	ldr	r1, [pc, #80]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	600b      	str	r3, [r1, #0]
 8002b90:	e006      	b.n	8002ba0 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b92:	4b12      	ldr	r3, [pc, #72]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	69bb      	ldr	r3, [r7, #24]
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	4910      	ldr	r1, [pc, #64]	@ (8002bdc <HAL_GPIO_Init+0x4d8>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bac:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f47f ae1d 	bne.w	80027f0 <HAL_GPIO_Init+0xec>
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	bf00      	nop
 8002bba:	3728      	adds	r7, #40	@ 0x28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	08005ddc 	.word	0x08005ddc
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	40010000 	.word	0x40010000
 8002bcc:	40010800 	.word	0x40010800
 8002bd0:	40010c00 	.word	0x40010c00
 8002bd4:	40011000 	.word	0x40011000
 8002bd8:	40011400 	.word	0x40011400
 8002bdc:	40010400 	.word	0x40010400

08002be0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002bec:	887b      	ldrh	r3, [r7, #2]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d104      	bne.n	8002bfc <HAL_GPIO_ReadPin+0x1c>
 8002bf2:	f44f 71da 	mov.w	r1, #436	@ 0x1b4
 8002bf6:	4809      	ldr	r0, [pc, #36]	@ (8002c1c <HAL_GPIO_ReadPin+0x3c>)
 8002bf8:	f7fd feb6 	bl	8000968 <assert_failed>

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d002      	beq.n	8002c0e <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
 8002c0c:	e001      	b.n	8002c12 <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	08005ddc 	.word	0x08005ddc

08002c20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
 8002c28:	460b      	mov	r3, r1
 8002c2a:	807b      	strh	r3, [r7, #2]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002c30:	887b      	ldrh	r3, [r7, #2]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_GPIO_WritePin+0x20>
 8002c36:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002c3a:	480e      	ldr	r0, [pc, #56]	@ (8002c74 <HAL_GPIO_WritePin+0x54>)
 8002c3c:	f7fd fe94 	bl	8000968 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002c40:	787b      	ldrb	r3, [r7, #1]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_GPIO_WritePin+0x36>
 8002c46:	787b      	ldrb	r3, [r7, #1]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d004      	beq.n	8002c56 <HAL_GPIO_WritePin+0x36>
 8002c4c:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8002c50:	4808      	ldr	r0, [pc, #32]	@ (8002c74 <HAL_GPIO_WritePin+0x54>)
 8002c52:	f7fd fe89 	bl	8000968 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002c56:	787b      	ldrb	r3, [r7, #1]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c62:	e003      	b.n	8002c6c <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c64:	887b      	ldrh	r3, [r7, #2]
 8002c66:	041a      	lsls	r2, r3, #16
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	611a      	str	r2, [r3, #16]
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	08005ddc 	.word	0x08005ddc

08002c78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c82:	4b08      	ldr	r3, [pc, #32]	@ (8002ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c84:	695a      	ldr	r2, [r3, #20]
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c8e:	4a05      	ldr	r2, [pc, #20]	@ (8002ca4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c90:	88fb      	ldrh	r3, [r7, #6]
 8002c92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c94:	88fb      	ldrh	r3, [r7, #6]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fd fcd2 	bl	8000640 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e1b4      	b.n	8003024 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a9b      	ldr	r2, [pc, #620]	@ (8002f2c <HAL_I2C_Init+0x284>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d009      	beq.n	8002cd8 <HAL_I2C_Init+0x30>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a99      	ldr	r2, [pc, #612]	@ (8002f30 <HAL_I2C_Init+0x288>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d004      	beq.n	8002cd8 <HAL_I2C_Init+0x30>
 8002cce:	f240 11db 	movw	r1, #475	@ 0x1db
 8002cd2:	4898      	ldr	r0, [pc, #608]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002cd4:	f7fd fe48 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <HAL_I2C_Init+0x42>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a94      	ldr	r2, [pc, #592]	@ (8002f38 <HAL_I2C_Init+0x290>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d904      	bls.n	8002cf4 <HAL_I2C_Init+0x4c>
 8002cea:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8002cee:	4891      	ldr	r0, [pc, #580]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002cf0:	f7fd fe3a 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d009      	beq.n	8002d10 <HAL_I2C_Init+0x68>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d04:	d004      	beq.n	8002d10 <HAL_I2C_Init+0x68>
 8002d06:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8002d0a:	488a      	ldr	r0, [pc, #552]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d0c:	f7fd fe2c 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d18:	d304      	bcc.n	8002d24 <HAL_I2C_Init+0x7c>
 8002d1a:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8002d1e:	4885      	ldr	r0, [pc, #532]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d20:	f7fd fe22 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d2c:	d009      	beq.n	8002d42 <HAL_I2C_Init+0x9a>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002d36:	d004      	beq.n	8002d42 <HAL_I2C_Init+0x9a>
 8002d38:	f240 11df 	movw	r1, #479	@ 0x1df
 8002d3c:	487d      	ldr	r0, [pc, #500]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d3e:	f7fd fe13 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d008      	beq.n	8002d5c <HAL_I2C_Init+0xb4>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d004      	beq.n	8002d5c <HAL_I2C_Init+0xb4>
 8002d52:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002d56:	4877      	ldr	r0, [pc, #476]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d58:	f7fd fe06 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d004      	beq.n	8002d72 <HAL_I2C_Init+0xca>
 8002d68:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8002d6c:	4871      	ldr	r0, [pc, #452]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d6e:	f7fd fdfb 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d008      	beq.n	8002d8c <HAL_I2C_Init+0xe4>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b40      	cmp	r3, #64	@ 0x40
 8002d80:	d004      	beq.n	8002d8c <HAL_I2C_Init+0xe4>
 8002d82:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8002d86:	486b      	ldr	r0, [pc, #428]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002d88:	f7fd fdee 	bl	8000968 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a1b      	ldr	r3, [r3, #32]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d008      	beq.n	8002da6 <HAL_I2C_Init+0xfe>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	2b80      	cmp	r3, #128	@ 0x80
 8002d9a:	d004      	beq.n	8002da6 <HAL_I2C_Init+0xfe>
 8002d9c:	f240 11e3 	movw	r1, #483	@ 0x1e3
 8002da0:	4864      	ldr	r0, [pc, #400]	@ (8002f34 <HAL_I2C_Init+0x28c>)
 8002da2:	f7fd fde1 	bl	8000968 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f7fd fcde 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	@ 0x24
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002de6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002df8:	f000 fe76 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8002dfc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <HAL_I2C_Init+0x294>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d807      	bhi.n	8002e18 <HAL_I2C_Init+0x170>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f40 <HAL_I2C_Init+0x298>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	bf94      	ite	ls
 8002e10:	2301      	movls	r3, #1
 8002e12:	2300      	movhi	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e006      	b.n	8002e26 <HAL_I2C_Init+0x17e>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f44 <HAL_I2C_Init+0x29c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	bf94      	ite	ls
 8002e20:	2301      	movls	r3, #1
 8002e22:	2300      	movhi	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e0fa      	b.n	8003024 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a45      	ldr	r2, [pc, #276]	@ (8002f48 <HAL_I2C_Init+0x2a0>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0c9b      	lsrs	r3, r3, #18
 8002e38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4a37      	ldr	r2, [pc, #220]	@ (8002f3c <HAL_I2C_Init+0x294>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d802      	bhi.n	8002e68 <HAL_I2C_Init+0x1c0>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3301      	adds	r3, #1
 8002e66:	e009      	b.n	8002e7c <HAL_I2C_Init+0x1d4>
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002e6e:	fb02 f303 	mul.w	r3, r2, r3
 8002e72:	4a36      	ldr	r2, [pc, #216]	@ (8002f4c <HAL_I2C_Init+0x2a4>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	430b      	orrs	r3, r1
 8002e82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002e8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	4929      	ldr	r1, [pc, #164]	@ (8002f3c <HAL_I2C_Init+0x294>)
 8002e98:	428b      	cmp	r3, r1
 8002e9a:	d819      	bhi.n	8002ed0 <HAL_I2C_Init+0x228>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	1e59      	subs	r1, r3, #1
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	005b      	lsls	r3, r3, #1
 8002ea6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eaa:	1c59      	adds	r1, r3, #1
 8002eac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002eb0:	400b      	ands	r3, r1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_I2C_Init+0x224>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1e59      	subs	r1, r3, #1
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	e064      	b.n	8002f96 <HAL_I2C_Init+0x2ee>
 8002ecc:	2304      	movs	r3, #4
 8002ece:	e062      	b.n	8002f96 <HAL_I2C_Init+0x2ee>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d111      	bne.n	8002efc <HAL_I2C_Init+0x254>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	1e58      	subs	r0, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6859      	ldr	r1, [r3, #4]
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	005b      	lsls	r3, r3, #1
 8002ee4:	440b      	add	r3, r1
 8002ee6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eea:	3301      	adds	r3, #1
 8002eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf0c      	ite	eq
 8002ef4:	2301      	moveq	r3, #1
 8002ef6:	2300      	movne	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e012      	b.n	8002f22 <HAL_I2C_Init+0x27a>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e58      	subs	r0, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6859      	ldr	r1, [r3, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	0099      	lsls	r1, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f12:	3301      	adds	r3, #1
 8002f14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	bf0c      	ite	eq
 8002f1c:	2301      	moveq	r3, #1
 8002f1e:	2300      	movne	r3, #0
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d014      	beq.n	8002f50 <HAL_I2C_Init+0x2a8>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e035      	b.n	8002f96 <HAL_I2C_Init+0x2ee>
 8002f2a:	bf00      	nop
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	40005800 	.word	0x40005800
 8002f34:	08005e18 	.word	0x08005e18
 8002f38:	00061a80 	.word	0x00061a80
 8002f3c:	000186a0 	.word	0x000186a0
 8002f40:	001e847f 	.word	0x001e847f
 8002f44:	003d08ff 	.word	0x003d08ff
 8002f48:	431bde83 	.word	0x431bde83
 8002f4c:	10624dd3 	.word	0x10624dd3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d10e      	bne.n	8002f76 <HAL_I2C_Init+0x2ce>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	1e58      	subs	r0, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6859      	ldr	r1, [r3, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	440b      	add	r3, r1
 8002f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002f74:	e00f      	b.n	8002f96 <HAL_I2C_Init+0x2ee>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	1e58      	subs	r0, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6859      	ldr	r1, [r3, #4]
 8002f7e:	460b      	mov	r3, r1
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	0099      	lsls	r1, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	6809      	ldr	r1, [r1, #0]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002fc4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	6911      	ldr	r1, [r2, #16]
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	68d2      	ldr	r2, [r2, #12]
 8002fd0:	4311      	orrs	r1, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	430b      	orrs	r3, r1
 8002fd8:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f042 0201 	orr.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b086      	sub	sp, #24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e35a      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_RCC_OscConfig+0x54>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d110      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <HAL_RCC_OscConfig+0x54>
 8003076:	f240 1165 	movw	r1, #357	@ 0x165
 800307a:	488f      	ldr	r0, [pc, #572]	@ (80032b8 <HAL_RCC_OscConfig+0x28c>)
 800307c:	f7fd fc74 	bl	8000968 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 809a 	beq.w	80031c2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00e      	beq.n	80030b4 <HAL_RCC_OscConfig+0x88>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d009      	beq.n	80030b4 <HAL_RCC_OscConfig+0x88>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a8:	d004      	beq.n	80030b4 <HAL_RCC_OscConfig+0x88>
 80030aa:	f240 116b 	movw	r1, #363	@ 0x16b
 80030ae:	4882      	ldr	r0, [pc, #520]	@ (80032b8 <HAL_RCC_OscConfig+0x28c>)
 80030b0:	f7fd fc5a 	bl	8000968 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80030b4:	4b81      	ldr	r3, [pc, #516]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 030c 	and.w	r3, r3, #12
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d00c      	beq.n	80030da <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80030c0:	4b7e      	ldr	r3, [pc, #504]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 030c 	and.w	r3, r3, #12
 80030c8:	2b08      	cmp	r3, #8
 80030ca:	d112      	bne.n	80030f2 <HAL_RCC_OscConfig+0xc6>
 80030cc:	4b7b      	ldr	r3, [pc, #492]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030d8:	d10b      	bne.n	80030f2 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030da:	4b78      	ldr	r3, [pc, #480]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d06c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x194>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d168      	bne.n	80031c0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e300      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0xde>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6e      	ldr	r2, [pc, #440]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003102:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	e02e      	b.n	8003168 <HAL_RCC_OscConfig+0x13c>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x100>
 8003112:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a69      	ldr	r2, [pc, #420]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003118:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b67      	ldr	r3, [pc, #412]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a66      	ldr	r2, [pc, #408]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003124:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0x13c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x124>
 8003136:	4b61      	ldr	r3, [pc, #388]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a60      	ldr	r2, [pc, #384]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b5e      	ldr	r3, [pc, #376]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a5d      	ldr	r2, [pc, #372]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x13c>
 8003150:	4b5a      	ldr	r3, [pc, #360]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a59      	ldr	r2, [pc, #356]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b57      	ldr	r3, [pc, #348]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a56      	ldr	r2, [pc, #344]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003166:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d013      	beq.n	8003198 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003170:	f7fd fefe 	bl	8000f70 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003178:	f7fd fefa 	bl	8000f70 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b64      	cmp	r3, #100	@ 0x64
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e2b4      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800318a:	4b4c      	ldr	r3, [pc, #304]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d0f0      	beq.n	8003178 <HAL_RCC_OscConfig+0x14c>
 8003196:	e014      	b.n	80031c2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fd feea 	bl	8000f70 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7fd fee6 	bl	8000f70 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e2a0      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031b2:	4b42      	ldr	r3, [pc, #264]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x174>
 80031be:	e000      	b.n	80031c2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	f000 8080 	beq.w	80032d0 <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d008      	beq.n	80031ea <HAL_RCC_OscConfig+0x1be>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d004      	beq.n	80031ea <HAL_RCC_OscConfig+0x1be>
 80031e0:	f240 119f 	movw	r1, #415	@ 0x19f
 80031e4:	4834      	ldr	r0, [pc, #208]	@ (80032b8 <HAL_RCC_OscConfig+0x28c>)
 80031e6:	f7fd fbbf 	bl	8000968 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	2b1f      	cmp	r3, #31
 80031f0:	d904      	bls.n	80031fc <HAL_RCC_OscConfig+0x1d0>
 80031f2:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80031f6:	4830      	ldr	r0, [pc, #192]	@ (80032b8 <HAL_RCC_OscConfig+0x28c>)
 80031f8:	f7fd fbb6 	bl	8000968 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031fc:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00b      	beq.n	8003220 <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003208:	4b2c      	ldr	r3, [pc, #176]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 030c 	and.w	r3, r3, #12
 8003210:	2b08      	cmp	r3, #8
 8003212:	d11c      	bne.n	800324e <HAL_RCC_OscConfig+0x222>
 8003214:	4b29      	ldr	r3, [pc, #164]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d116      	bne.n	800324e <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003220:	4b26      	ldr	r3, [pc, #152]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x20c>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d001      	beq.n	8003238 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e25d      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003238:	4b20      	ldr	r3, [pc, #128]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	00db      	lsls	r3, r3, #3
 8003246:	491d      	ldr	r1, [pc, #116]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800324c:	e040      	b.n	80032d0 <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d020      	beq.n	8003298 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003256:	4b1a      	ldr	r3, [pc, #104]	@ (80032c0 <HAL_RCC_OscConfig+0x294>)
 8003258:	2201      	movs	r2, #1
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7fd fe88 	bl	8000f70 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fd fe84 	bl	8000f70 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e23e      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003276:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d0f0      	beq.n	8003264 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b0e      	ldr	r3, [pc, #56]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	490a      	ldr	r1, [pc, #40]	@ (80032bc <HAL_RCC_OscConfig+0x290>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
 8003296:	e01b      	b.n	80032d0 <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_RCC_OscConfig+0x294>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fd fe67 	bl	8000f70 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032a4:	e00e      	b.n	80032c4 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a6:	f7fd fe63 	bl	8000f70 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d907      	bls.n	80032c4 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e21d      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
 80032b8:	08005e50 	.word	0x08005e50
 80032bc:	40021000 	.word	0x40021000
 80032c0:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032c4:	4b7d      	ldr	r3, [pc, #500]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0302 	and.w	r3, r3, #2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1ea      	bne.n	80032a6 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d040      	beq.n	800335e <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d008      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2ca>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d004      	beq.n	80032f6 <HAL_RCC_OscConfig+0x2ca>
 80032ec:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80032f0:	4873      	ldr	r0, [pc, #460]	@ (80034c0 <HAL_RCC_OscConfig+0x494>)
 80032f2:	f7fd fb39 	bl	8000968 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d019      	beq.n	8003332 <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b71      	ldr	r3, [pc, #452]	@ (80034c4 <HAL_RCC_OscConfig+0x498>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7fd fe34 	bl	8000f70 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330c:	f7fd fe30 	bl	8000f70 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1ea      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b67      	ldr	r3, [pc, #412]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800332a:	2001      	movs	r0, #1
 800332c:	f000 fbf0 	bl	8003b10 <RCC_Delay>
 8003330:	e015      	b.n	800335e <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003332:	4b64      	ldr	r3, [pc, #400]	@ (80034c4 <HAL_RCC_OscConfig+0x498>)
 8003334:	2200      	movs	r2, #0
 8003336:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003338:	f7fd fe1a 	bl	8000f70 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003340:	f7fd fe16 	bl	8000f70 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b02      	cmp	r3, #2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1d0      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003352:	4b5a      	ldr	r3, [pc, #360]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	f003 0302 	and.w	r3, r3, #2
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0304 	and.w	r3, r3, #4
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80bf 	beq.w	80034ea <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 800336c:	2300      	movs	r3, #0
 800336e:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00c      	beq.n	8003392 <HAL_RCC_OscConfig+0x366>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d008      	beq.n	8003392 <HAL_RCC_OscConfig+0x366>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	2b05      	cmp	r3, #5
 8003386:	d004      	beq.n	8003392 <HAL_RCC_OscConfig+0x366>
 8003388:	f240 210f 	movw	r1, #527	@ 0x20f
 800338c:	484c      	ldr	r0, [pc, #304]	@ (80034c0 <HAL_RCC_OscConfig+0x494>)
 800338e:	f7fd faeb 	bl	8000968 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003392:	4b4a      	ldr	r3, [pc, #296]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10d      	bne.n	80033ba <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800339e:	4b47      	ldr	r3, [pc, #284]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 80033a0:	69db      	ldr	r3, [r3, #28]
 80033a2:	4a46      	ldr	r2, [pc, #280]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033a8:	61d3      	str	r3, [r2, #28]
 80033aa:	4b44      	ldr	r3, [pc, #272]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033b6:	2301      	movs	r3, #1
 80033b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ba:	4b43      	ldr	r3, [pc, #268]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d118      	bne.n	80033f8 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033c6:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a3f      	ldr	r2, [pc, #252]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033d2:	f7fd fdcd 	bl	8000f70 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d8:	e008      	b.n	80033ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033da:	f7fd fdc9 	bl	8000f70 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b64      	cmp	r3, #100	@ 0x64
 80033e6:	d901      	bls.n	80033ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e183      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ec:	4b36      	ldr	r3, [pc, #216]	@ (80034c8 <HAL_RCC_OscConfig+0x49c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d0f0      	beq.n	80033da <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d106      	bne.n	800340e <HAL_RCC_OscConfig+0x3e2>
 8003400:	4b2e      	ldr	r3, [pc, #184]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4a2d      	ldr	r2, [pc, #180]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6213      	str	r3, [r2, #32]
 800340c:	e02d      	b.n	800346a <HAL_RCC_OscConfig+0x43e>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10c      	bne.n	8003430 <HAL_RCC_OscConfig+0x404>
 8003416:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	4a28      	ldr	r2, [pc, #160]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 800341c:	f023 0301 	bic.w	r3, r3, #1
 8003420:	6213      	str	r3, [r2, #32]
 8003422:	4b26      	ldr	r3, [pc, #152]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	4a25      	ldr	r2, [pc, #148]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003428:	f023 0304 	bic.w	r3, r3, #4
 800342c:	6213      	str	r3, [r2, #32]
 800342e:	e01c      	b.n	800346a <HAL_RCC_OscConfig+0x43e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b05      	cmp	r3, #5
 8003436:	d10c      	bne.n	8003452 <HAL_RCC_OscConfig+0x426>
 8003438:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 800343e:	f043 0304 	orr.w	r3, r3, #4
 8003442:	6213      	str	r3, [r2, #32]
 8003444:	4b1d      	ldr	r3, [pc, #116]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	4a1c      	ldr	r2, [pc, #112]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 800344a:	f043 0301 	orr.w	r3, r3, #1
 800344e:	6213      	str	r3, [r2, #32]
 8003450:	e00b      	b.n	800346a <HAL_RCC_OscConfig+0x43e>
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	4a19      	ldr	r2, [pc, #100]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003458:	f023 0301 	bic.w	r3, r3, #1
 800345c:	6213      	str	r3, [r2, #32]
 800345e:	4b17      	ldr	r3, [pc, #92]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003460:	6a1b      	ldr	r3, [r3, #32]
 8003462:	4a16      	ldr	r2, [pc, #88]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003464:	f023 0304 	bic.w	r3, r3, #4
 8003468:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d015      	beq.n	800349e <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003472:	f7fd fd7d 	bl	8000f70 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	e00a      	b.n	8003490 <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fd fd79 	bl	8000f70 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003488:	4293      	cmp	r3, r2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e131      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	4b0a      	ldr	r3, [pc, #40]	@ (80034bc <HAL_RCC_OscConfig+0x490>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0ee      	beq.n	800347a <HAL_RCC_OscConfig+0x44e>
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fd fd67 	bl	8000f70 <HAL_GetTick>
 80034a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	e012      	b.n	80034cc <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a6:	f7fd fd63 	bl	8000f70 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d909      	bls.n	80034cc <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e11b      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
 80034bc:	40021000 	.word	0x40021000
 80034c0:	08005e50 	.word	0x08005e50
 80034c4:	42420480 	.word	0x42420480
 80034c8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b8b      	ldr	r3, [pc, #556]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e6      	bne.n	80034a6 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b87      	ldr	r3, [pc, #540]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a86      	ldr	r2, [pc, #536]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00c      	beq.n	800350c <HAL_RCC_OscConfig+0x4e0>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d008      	beq.n	800350c <HAL_RCC_OscConfig+0x4e0>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d004      	beq.n	800350c <HAL_RCC_OscConfig+0x4e0>
 8003502:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8003506:	487e      	ldr	r0, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x6d4>)
 8003508:	f7fd fa2e 	bl	8000968 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80ee 	beq.w	80036f2 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003516:	4b79      	ldr	r3, [pc, #484]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	f000 80ce 	beq.w	80036c0 <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	69db      	ldr	r3, [r3, #28]
 8003528:	2b02      	cmp	r3, #2
 800352a:	f040 80b2 	bne.w	8003692 <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d009      	beq.n	800354a <HAL_RCC_OscConfig+0x51e>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353e:	d004      	beq.n	800354a <HAL_RCC_OscConfig+0x51e>
 8003540:	f240 21b6 	movw	r1, #694	@ 0x2b6
 8003544:	486e      	ldr	r0, [pc, #440]	@ (8003700 <HAL_RCC_OscConfig+0x6d4>)
 8003546:	f7fd fa0f 	bl	8000968 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354e:	2b00      	cmp	r3, #0
 8003550:	d04a      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003556:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800355a:	d045      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003564:	d040      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800356e:	d03b      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003574:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003578:	d036      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003582:	d031      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800358c:	d02c      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003592:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003596:	d027      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a0:	d022      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80035aa:	d01d      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80035b4:	d018      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ba:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80035be:	d013      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035c8:	d00e      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 80035d2:	d009      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d8:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 80035dc:	d004      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5bc>
 80035de:	f240 21b7 	movw	r1, #695	@ 0x2b7
 80035e2:	4847      	ldr	r0, [pc, #284]	@ (8003700 <HAL_RCC_OscConfig+0x6d4>)
 80035e4:	f7fd f9c0 	bl	8000968 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e8:	4b46      	ldr	r3, [pc, #280]	@ (8003704 <HAL_RCC_OscConfig+0x6d8>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fd fcbf 	bl	8000f70 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fd fcbb 	bl	8000f70 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e075      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003608:	4b3c      	ldr	r3, [pc, #240]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f0      	bne.n	80035f6 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a1b      	ldr	r3, [r3, #32]
 8003618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800361c:	d116      	bne.n	800364c <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <HAL_RCC_OscConfig+0x60e>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800362e:	d004      	beq.n	800363a <HAL_RCC_OscConfig+0x60e>
 8003630:	f240 21cd 	movw	r1, #717	@ 0x2cd
 8003634:	4832      	ldr	r0, [pc, #200]	@ (8003700 <HAL_RCC_OscConfig+0x6d4>)
 8003636:	f7fd f997 	bl	8000968 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800363a:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	492d      	ldr	r1, [pc, #180]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 8003648:	4313      	orrs	r3, r2
 800364a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a19      	ldr	r1, [r3, #32]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365c:	430b      	orrs	r3, r1
 800365e:	4927      	ldr	r1, [pc, #156]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003664:	4b27      	ldr	r3, [pc, #156]	@ (8003704 <HAL_RCC_OscConfig+0x6d8>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fd fc81 	bl	8000f70 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003672:	f7fd fc7d 	bl	8000f70 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e037      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003684:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x646>
 8003690:	e02f      	b.n	80036f2 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003692:	4b1c      	ldr	r3, [pc, #112]	@ (8003704 <HAL_RCC_OscConfig+0x6d8>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fd fc6a 	bl	8000f70 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a0:	f7fd fc66 	bl	8000f70 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e020      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036b2:	4b12      	ldr	r3, [pc, #72]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1f0      	bne.n	80036a0 <HAL_RCC_OscConfig+0x674>
 80036be:	e018      	b.n	80036f2 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e013      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036cc:	4b0b      	ldr	r3, [pc, #44]	@ (80036fc <HAL_RCC_OscConfig+0x6d0>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d106      	bne.n	80036ee <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3718      	adds	r7, #24
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40021000 	.word	0x40021000
 8003700:	08005e50 	.word	0x08005e50
 8003704:	42420060 	.word	0x42420060

08003708 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d101      	bne.n	800371c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	e176      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d116      	bne.n	8003756 <HAL_RCC_ClockConfig+0x4e>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d110      	bne.n	8003756 <HAL_RCC_ClockConfig+0x4e>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10a      	bne.n	8003756 <HAL_RCC_ClockConfig+0x4e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d104      	bne.n	8003756 <HAL_RCC_ClockConfig+0x4e>
 800374c:	f240 3136 	movw	r1, #822	@ 0x336
 8003750:	4874      	ldr	r0, [pc, #464]	@ (8003924 <HAL_RCC_ClockConfig+0x21c>)
 8003752:	f7fd f909 	bl	8000968 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00a      	beq.n	8003772 <HAL_RCC_ClockConfig+0x6a>
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d007      	beq.n	8003772 <HAL_RCC_ClockConfig+0x6a>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b02      	cmp	r3, #2
 8003766:	d004      	beq.n	8003772 <HAL_RCC_ClockConfig+0x6a>
 8003768:	f240 3137 	movw	r1, #823	@ 0x337
 800376c:	486d      	ldr	r0, [pc, #436]	@ (8003924 <HAL_RCC_ClockConfig+0x21c>)
 800376e:	f7fd f8fb 	bl	8000968 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003772:	4b6d      	ldr	r3, [pc, #436]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d910      	bls.n	80037a2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003780:	4b69      	ldr	r3, [pc, #420]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 0207 	bic.w	r2, r3, #7
 8003788:	4967      	ldr	r1, [pc, #412]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003790:	4b65      	ldr	r3, [pc, #404]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d001      	beq.n	80037a2 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e133      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d049      	beq.n	8003842 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0304 	and.w	r3, r3, #4
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037ba:	4b5c      	ldr	r3, [pc, #368]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4a5b      	ldr	r2, [pc, #364]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80037c0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037c4:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037d2:	4b56      	ldr	r3, [pc, #344]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4a55      	ldr	r2, [pc, #340]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80037d8:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80037dc:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d024      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b80      	cmp	r3, #128	@ 0x80
 80037ec:	d020      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	2b90      	cmp	r3, #144	@ 0x90
 80037f4:	d01c      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2ba0      	cmp	r3, #160	@ 0xa0
 80037fc:	d018      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	2bb0      	cmp	r3, #176	@ 0xb0
 8003804:	d014      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	2bc0      	cmp	r3, #192	@ 0xc0
 800380c:	d010      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	2bd0      	cmp	r3, #208	@ 0xd0
 8003814:	d00c      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2be0      	cmp	r3, #224	@ 0xe0
 800381c:	d008      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2bf0      	cmp	r3, #240	@ 0xf0
 8003824:	d004      	beq.n	8003830 <HAL_RCC_ClockConfig+0x128>
 8003826:	f240 315d 	movw	r1, #861	@ 0x35d
 800382a:	483e      	ldr	r0, [pc, #248]	@ (8003924 <HAL_RCC_ClockConfig+0x21c>)
 800382c:	f7fd f89c 	bl	8000968 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003830:	4b3e      	ldr	r3, [pc, #248]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	493b      	ldr	r1, [pc, #236]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 800383e:	4313      	orrs	r3, r2
 8003840:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d051      	beq.n	80038f2 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00c      	beq.n	8003870 <HAL_RCC_ClockConfig+0x168>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b01      	cmp	r3, #1
 800385c:	d008      	beq.n	8003870 <HAL_RCC_ClockConfig+0x168>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d004      	beq.n	8003870 <HAL_RCC_ClockConfig+0x168>
 8003866:	f44f 7159 	mov.w	r1, #868	@ 0x364
 800386a:	482e      	ldr	r0, [pc, #184]	@ (8003924 <HAL_RCC_ClockConfig+0x21c>)
 800386c:	f7fd f87c 	bl	8000968 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d107      	bne.n	8003888 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003878:	4b2c      	ldr	r3, [pc, #176]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d115      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0c0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003890:	4b26      	ldr	r3, [pc, #152]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d109      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0b4      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a0:	4b22      	ldr	r3, [pc, #136]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0302 	and.w	r3, r3, #2
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ac      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b0:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 0203 	bic.w	r2, r3, #3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	491b      	ldr	r1, [pc, #108]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c2:	f7fd fb55 	bl	8000f70 <HAL_GetTick>
 80038c6:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ca:	f7fd fb51 	bl	8000f70 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e094      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e0:	4b12      	ldr	r3, [pc, #72]	@ (800392c <HAL_RCC_ClockConfig+0x224>)
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 020c 	and.w	r2, r3, #12
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d1eb      	bne.n	80038ca <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	683a      	ldr	r2, [r7, #0]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d217      	bcs.n	8003930 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003900:	4b09      	ldr	r3, [pc, #36]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f023 0207 	bic.w	r2, r3, #7
 8003908:	4907      	ldr	r1, [pc, #28]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003910:	4b05      	ldr	r3, [pc, #20]	@ (8003928 <HAL_RCC_ClockConfig+0x220>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d008      	beq.n	8003930 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x302>
 8003922:	bf00      	nop
 8003924:	08005e50 	.word	0x08005e50
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	2b00      	cmp	r3, #0
 800393a:	d025      	beq.n	8003988 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d018      	beq.n	8003976 <HAL_RCC_ClockConfig+0x26e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394c:	d013      	beq.n	8003976 <HAL_RCC_ClockConfig+0x26e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003956:	d00e      	beq.n	8003976 <HAL_RCC_ClockConfig+0x26e>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003960:	d009      	beq.n	8003976 <HAL_RCC_ClockConfig+0x26e>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800396a:	d004      	beq.n	8003976 <HAL_RCC_ClockConfig+0x26e>
 800396c:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8003970:	4828      	ldr	r0, [pc, #160]	@ (8003a14 <HAL_RCC_ClockConfig+0x30c>)
 8003972:	f7fc fff9 	bl	8000968 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003976:	4b28      	ldr	r3, [pc, #160]	@ (8003a18 <HAL_RCC_ClockConfig+0x310>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	4925      	ldr	r1, [pc, #148]	@ (8003a18 <HAL_RCC_ClockConfig+0x310>)
 8003984:	4313      	orrs	r3, r2
 8003986:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0308 	and.w	r3, r3, #8
 8003990:	2b00      	cmp	r3, #0
 8003992:	d026      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d018      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2c6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	691b      	ldr	r3, [r3, #16]
 80039a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a4:	d013      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2c6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80039ae:	d00e      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2c6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80039b8:	d009      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2c6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039c2:	d004      	beq.n	80039ce <HAL_RCC_ClockConfig+0x2c6>
 80039c4:	f240 31a9 	movw	r1, #937	@ 0x3a9
 80039c8:	4812      	ldr	r0, [pc, #72]	@ (8003a14 <HAL_RCC_ClockConfig+0x30c>)
 80039ca:	f7fc ffcd 	bl	8000968 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4b12      	ldr	r3, [pc, #72]	@ (8003a18 <HAL_RCC_ClockConfig+0x310>)
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	490e      	ldr	r1, [pc, #56]	@ (8003a18 <HAL_RCC_ClockConfig+0x310>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4602      	mov	r2, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a18 <HAL_RCC_ClockConfig+0x310>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	490a      	ldr	r1, [pc, #40]	@ (8003a1c <HAL_RCC_ClockConfig+0x314>)
 80039f4:	5ccb      	ldrb	r3, [r1, r3]
 80039f6:	fa22 f303 	lsr.w	r3, r2, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <HAL_RCC_ClockConfig+0x318>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x31c>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fd fa72 	bl	8000eec <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	08005e50 	.word	0x08005e50
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08005f70 	.word	0x08005f70
 8003a20:	20000000 	.word	0x20000000
 8003a24:	20000004 	.word	0x20000004

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]
 8003a32:	2300      	movs	r3, #0
 8003a34:	60bb      	str	r3, [r7, #8]
 8003a36:	2300      	movs	r3, #0
 8003a38:	617b      	str	r3, [r7, #20]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a42:	4b1e      	ldr	r3, [pc, #120]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x30>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x36>
 8003a56:	e027      	b.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5a:	613b      	str	r3, [r7, #16]
      break;
 8003a5c:	e027      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	4a17      	ldr	r2, [pc, #92]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a68:	5cd3      	ldrb	r3, [r2, r3]
 8003a6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d010      	beq.n	8003a98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a76:	4b11      	ldr	r3, [pc, #68]	@ (8003abc <HAL_RCC_GetSysClockFreq+0x94>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	0c5b      	lsrs	r3, r3, #17
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a82:	5cd3      	ldrb	r3, [r2, r3]
 8003a84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8a:	fb03 f202 	mul.w	r2, r3, r2
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a94:	617b      	str	r3, [r7, #20]
 8003a96:	e004      	b.n	8003aa2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a9c:	fb02 f303 	mul.w	r3, r2, r3
 8003aa0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	613b      	str	r3, [r7, #16]
      break;
 8003aa6:	e002      	b.n	8003aae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aa8:	4b09      	ldr	r3, [pc, #36]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xa8>)
 8003aaa:	613b      	str	r3, [r7, #16]
      break;
 8003aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aae:	693b      	ldr	r3, [r7, #16]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	00f42400 	.word	0x00f42400
 8003ac4:	08005f88 	.word	0x08005f88
 8003ac8:	08005f98 	.word	0x08005f98
 8003acc:	003d0900 	.word	0x003d0900
 8003ad0:	007a1200 	.word	0x007a1200

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	20000000 	.word	0x20000000

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff2 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	08005f80 	.word	0x08005f80

08003b10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b18:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <RCC_Delay+0x34>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <RCC_Delay+0x38>)
 8003b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b22:	0a5b      	lsrs	r3, r3, #9
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b2c:	bf00      	nop
  }
  while (Delay --);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	60fa      	str	r2, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d1f9      	bne.n	8003b2c <RCC_Delay+0x1c>
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3714      	adds	r7, #20
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bc80      	pop	{r7}
 8003b42:	4770      	bx	lr
 8003b44:	20000000 	.word	0x20000000
 8003b48:	10624dd3 	.word	0x10624dd3

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10f      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0302 	and.w	r3, r3, #2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d109      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d103      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003b80:	216a      	movs	r1, #106	@ 0x6a
 8003b82:	4873      	ldr	r0, [pc, #460]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003b84:	f7fc fef0 	bl	8000968 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 8095 	beq.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b96:	2300      	movs	r3, #0
 8003b98:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d012      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bb4:	d008      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bbe:	d003      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003bc0:	2172      	movs	r1, #114	@ 0x72
 8003bc2:	4863      	ldr	r0, [pc, #396]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003bc4:	f7fc fed0 	bl	8000968 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bc8:	4b62      	ldr	r3, [pc, #392]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bca:	69db      	ldr	r3, [r3, #28]
 8003bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10d      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bd6:	69db      	ldr	r3, [r3, #28]
 8003bd8:	4a5e      	ldr	r2, [pc, #376]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bde:	61d3      	str	r3, [r2, #28]
 8003be0:	4b5c      	ldr	r3, [pc, #368]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003be2:	69db      	ldr	r3, [r3, #28]
 8003be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bec:	2301      	movs	r3, #1
 8003bee:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	4b59      	ldr	r3, [pc, #356]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d118      	bne.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bfc:	4b56      	ldr	r3, [pc, #344]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a55      	ldr	r2, [pc, #340]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c08:	f7fd f9b2 	bl	8000f70 <HAL_GetTick>
 8003c0c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	e008      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fd f9ae 	bl	8000f70 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b64      	cmp	r3, #100	@ 0x64
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e092      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c22:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d0f0      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c2e:	4b49      	ldr	r3, [pc, #292]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c36:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02e      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d027      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c4c:	4b41      	ldr	r3, [pc, #260]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c54:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c5c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c62:	4a3c      	ldr	r2, [pc, #240]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d014      	beq.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7fd f97d 	bl	8000f70 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	e00a      	b.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c7a:	f7fd f979 	bl	8000f70 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e05b      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	4b30      	ldr	r3, [pc, #192]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0ee      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	492a      	ldr	r1, [pc, #168]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003caa:	4313      	orrs	r3, r2
 8003cac:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d105      	bne.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cb4:	4b27      	ldr	r3, [pc, #156]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	4a26      	ldr	r2, [pc, #152]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cbe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d01f      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d012      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003cdc:	d00d      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ce6:	d008      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003cf0:	d003      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003cf2:	21b7      	movs	r1, #183	@ 0xb7
 8003cf4:	4816      	ldr	r0, [pc, #88]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003cf6:	f7fc fe37 	bl	8000968 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cfa:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	4913      	ldr	r1, [pc, #76]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0310 	and.w	r3, r3, #16
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d016      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d20:	d008      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d2a:	f240 1113 	movw	r1, #275	@ 0x113
 8003d2e:	4808      	ldr	r0, [pc, #32]	@ (8003d50 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003d30:	f7fc fe1a 	bl	8000968 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d34:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	4904      	ldr	r1, [pc, #16]	@ (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3718      	adds	r7, #24
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	08005e88 	.word	0x08005e88
 8003d54:	40021000 	.word	0x40021000
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	42420440 	.word	0x42420440

08003d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e16d      	b.n	800404e <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a6b      	ldr	r2, [pc, #428]	@ (8003f24 <HAL_SPI_Init+0x1c4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_SPI_Init+0x30>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a69      	ldr	r2, [pc, #420]	@ (8003f28 <HAL_SPI_Init+0x1c8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_SPI_Init+0x30>
 8003d86:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8003d8a:	4868      	ldr	r0, [pc, #416]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003d8c:	f7fc fdec 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d009      	beq.n	8003dac <HAL_SPI_Init+0x4c>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003da0:	d004      	beq.n	8003dac <HAL_SPI_Init+0x4c>
 8003da2:	f240 1157 	movw	r1, #343	@ 0x157
 8003da6:	4861      	ldr	r0, [pc, #388]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003da8:	f7fc fdde 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00e      	beq.n	8003dd2 <HAL_SPI_Init+0x72>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dbc:	d009      	beq.n	8003dd2 <HAL_SPI_Init+0x72>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc6:	d004      	beq.n	8003dd2 <HAL_SPI_Init+0x72>
 8003dc8:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8003dcc:	4857      	ldr	r0, [pc, #348]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003dce:	f7fc fdcb 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dda:	d008      	beq.n	8003dee <HAL_SPI_Init+0x8e>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d004      	beq.n	8003dee <HAL_SPI_Init+0x8e>
 8003de4:	f240 1159 	movw	r1, #345	@ 0x159
 8003de8:	4850      	ldr	r0, [pc, #320]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003dea:	f7fc fdbd 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003df6:	d00d      	beq.n	8003e14 <HAL_SPI_Init+0xb4>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <HAL_SPI_Init+0xb4>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e08:	d004      	beq.n	8003e14 <HAL_SPI_Init+0xb4>
 8003e0a:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8003e0e:	4847      	ldr	r0, [pc, #284]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003e10:	f7fc fdaa 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d020      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b08      	cmp	r3, #8
 8003e22:	d01c      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	69db      	ldr	r3, [r3, #28]
 8003e28:	2b10      	cmp	r3, #16
 8003e2a:	d018      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	69db      	ldr	r3, [r3, #28]
 8003e30:	2b18      	cmp	r3, #24
 8003e32:	d014      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b20      	cmp	r3, #32
 8003e3a:	d010      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	69db      	ldr	r3, [r3, #28]
 8003e40:	2b28      	cmp	r3, #40	@ 0x28
 8003e42:	d00c      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b30      	cmp	r3, #48	@ 0x30
 8003e4a:	d008      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	69db      	ldr	r3, [r3, #28]
 8003e50:	2b38      	cmp	r3, #56	@ 0x38
 8003e52:	d004      	beq.n	8003e5e <HAL_SPI_Init+0xfe>
 8003e54:	f240 115b 	movw	r1, #347	@ 0x15b
 8003e58:	4834      	ldr	r0, [pc, #208]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003e5a:	f7fc fd85 	bl	8000968 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d008      	beq.n	8003e78 <HAL_SPI_Init+0x118>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d004      	beq.n	8003e78 <HAL_SPI_Init+0x118>
 8003e6e:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003e72:	482e      	ldr	r0, [pc, #184]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003e74:	f7fc fd78 	bl	8000968 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d004      	beq.n	8003e8a <HAL_SPI_Init+0x12a>
 8003e80:	f240 115f 	movw	r1, #351	@ 0x15f
 8003e84:	4829      	ldr	r0, [pc, #164]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003e86:	f7fc fd6f 	bl	8000968 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d14e      	bne.n	8003f30 <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d008      	beq.n	8003eac <HAL_SPI_Init+0x14c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d004      	beq.n	8003eac <HAL_SPI_Init+0x14c>
 8003ea2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003ea6:	4821      	ldr	r0, [pc, #132]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003ea8:	f7fc fd5e 	bl	8000968 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_SPI_Init+0x166>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	695b      	ldr	r3, [r3, #20]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d004      	beq.n	8003ec6 <HAL_SPI_Init+0x166>
 8003ebc:	f240 1163 	movw	r1, #355	@ 0x163
 8003ec0:	481a      	ldr	r0, [pc, #104]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003ec2:	f7fc fd51 	bl	8000968 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ece:	d125      	bne.n	8003f1c <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d056      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	2b08      	cmp	r3, #8
 8003ede:	d052      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2b10      	cmp	r3, #16
 8003ee6:	d04e      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	2b18      	cmp	r3, #24
 8003eee:	d04a      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	69db      	ldr	r3, [r3, #28]
 8003ef4:	2b20      	cmp	r3, #32
 8003ef6:	d046      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	2b28      	cmp	r3, #40	@ 0x28
 8003efe:	d042      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	2b30      	cmp	r3, #48	@ 0x30
 8003f06:	d03e      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	2b38      	cmp	r3, #56	@ 0x38
 8003f0e:	d03a      	beq.n	8003f86 <HAL_SPI_Init+0x226>
 8003f10:	f240 1167 	movw	r1, #359	@ 0x167
 8003f14:	4805      	ldr	r0, [pc, #20]	@ (8003f2c <HAL_SPI_Init+0x1cc>)
 8003f16:	f7fc fd27 	bl	8000968 <assert_failed>
 8003f1a:	e034      	b.n	8003f86 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	61da      	str	r2, [r3, #28]
 8003f22:	e030      	b.n	8003f86 <HAL_SPI_Init+0x226>
 8003f24:	40013000 	.word	0x40013000
 8003f28:	40003800 	.word	0x40003800
 8003f2c:	08005ec4 	.word	0x08005ec4
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d020      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	2b08      	cmp	r3, #8
 8003f3e:	d01c      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	2b10      	cmp	r3, #16
 8003f46:	d018      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	2b18      	cmp	r3, #24
 8003f4e:	d014      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	69db      	ldr	r3, [r3, #28]
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	d010      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b28      	cmp	r3, #40	@ 0x28
 8003f5e:	d00c      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
 8003f64:	2b30      	cmp	r3, #48	@ 0x30
 8003f66:	d008      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	69db      	ldr	r3, [r3, #28]
 8003f6c:	2b38      	cmp	r3, #56	@ 0x38
 8003f6e:	d004      	beq.n	8003f7a <HAL_SPI_Init+0x21a>
 8003f70:	f240 1171 	movw	r1, #369	@ 0x171
 8003f74:	4838      	ldr	r0, [pc, #224]	@ (8004058 <HAL_SPI_Init+0x2f8>)
 8003f76:	f7fc fcf7 	bl	8000968 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fc fd57 	bl	8000a54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0302 	and.w	r3, r3, #2
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ff6:	431a      	orrs	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	69db      	ldr	r3, [r3, #28]
 8003ffc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004000:	431a      	orrs	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	ea42 0103 	orr.w	r1, r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	0c1a      	lsrs	r2, r3, #16
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f002 0204 	and.w	r2, r2, #4
 800402c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	69da      	ldr	r2, [r3, #28]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800403c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	08005ec4 	.word	0x08005ec4

0800405c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b08c      	sub	sp, #48	@ 0x30
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
 8004068:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800406a:	2301      	movs	r3, #1
 800406c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d004      	beq.n	8004086 <HAL_SPI_TransmitReceive+0x2a>
 800407c:	f240 41ae 	movw	r1, #1198	@ 0x4ae
 8004080:	4886      	ldr	r0, [pc, #536]	@ (800429c <HAL_SPI_TransmitReceive+0x240>)
 8004082:	f7fc fc71 	bl	8000968 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x38>
 8004090:	2302      	movs	r3, #2
 8004092:	e19b      	b.n	80043cc <HAL_SPI_TransmitReceive+0x370>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800409c:	f7fc ff68 	bl	8000f70 <HAL_GetTick>
 80040a0:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80040b2:	887b      	ldrh	r3, [r7, #2]
 80040b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d00f      	beq.n	80040de <HAL_SPI_TransmitReceive+0x82>
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80040c4:	d107      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_SPI_TransmitReceive+0x7a>
 80040ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d003      	beq.n	80040de <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
 80040d8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80040dc:	e170      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x94>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_TransmitReceive+0x94>
 80040ea:	887b      	ldrh	r3, [r7, #2]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d103      	bne.n	80040f8 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80040f6:	e163      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b04      	cmp	r3, #4
 8004102:	d003      	beq.n	800410c <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2205      	movs	r2, #5
 8004108:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	887a      	ldrh	r2, [r7, #2]
 800411c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	887a      	ldrh	r2, [r7, #2]
 8004122:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68ba      	ldr	r2, [r7, #8]
 8004128:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	887a      	ldrh	r2, [r7, #2]
 800412e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	887a      	ldrh	r2, [r7, #2]
 8004134:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2200      	movs	r2, #0
 8004140:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414c:	2b40      	cmp	r3, #64	@ 0x40
 800414e:	d007      	beq.n	8004160 <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800415e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004168:	d17c      	bne.n	8004264 <HAL_SPI_TransmitReceive+0x208>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x11c>
 8004172:	8b7b      	ldrh	r3, [r7, #26]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d16a      	bne.n	800424e <HAL_SPI_TransmitReceive+0x1f2>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004188:	1c9a      	adds	r2, r3, #2
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004192:	b29b      	uxth	r3, r3
 8004194:	3b01      	subs	r3, #1
 8004196:	b29a      	uxth	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419c:	e057      	b.n	800424e <HAL_SPI_TransmitReceive+0x1f2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d11b      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x188>
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d016      	beq.n	80041e4 <HAL_SPI_TransmitReceive+0x188>
 80041b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d113      	bne.n	80041e4 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041cc:	1c9a      	adds	r2, r3, #2
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	3b01      	subs	r3, #1
 80041da:	b29a      	uxth	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d119      	bne.n	8004226 <HAL_SPI_TransmitReceive+0x1ca>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d014      	beq.n	8004226 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004206:	b292      	uxth	r2, r2
 8004208:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420e:	1c9a      	adds	r2, r3, #2
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004218:	b29b      	uxth	r3, r3
 800421a:	3b01      	subs	r3, #1
 800421c:	b29a      	uxth	r2, r3
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004222:	2301      	movs	r3, #1
 8004224:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004226:	f7fc fea3 	bl	8000f70 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004232:	429a      	cmp	r2, r3
 8004234:	d80b      	bhi.n	800424e <HAL_SPI_TransmitReceive+0x1f2>
 8004236:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004238:	f1b3 3fff 	cmp.w	r3, #4294967295
 800423c:	d007      	beq.n	800424e <HAL_SPI_TransmitReceive+0x1f2>
      {
        errorcode = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800424c:	e0b8      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004252:	b29b      	uxth	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d1a2      	bne.n	800419e <HAL_SPI_TransmitReceive+0x142>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d19d      	bne.n	800419e <HAL_SPI_TransmitReceive+0x142>
 8004262:	e083      	b.n	800436c <HAL_SPI_TransmitReceive+0x310>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d002      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x216>
 800426c:	8b7b      	ldrh	r3, [r7, #26]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d172      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x2fc>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	7812      	ldrb	r2, [r2, #0]
 800427e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004298:	e05e      	b.n	8004358 <HAL_SPI_TransmitReceive+0x2fc>
 800429a:	bf00      	nop
 800429c:	08005ec4 	.word	0x08005ec4
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d11c      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x28c>
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d017      	beq.n	80042e8 <HAL_SPI_TransmitReceive+0x28c>
 80042b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d114      	bne.n	80042e8 <HAL_SPI_TransmitReceive+0x28c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	330c      	adds	r3, #12
 80042c8:	7812      	ldrb	r2, [r2, #0]
 80042ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042da:	b29b      	uxth	r3, r3
 80042dc:	3b01      	subs	r3, #1
 80042de:	b29a      	uxth	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0301 	and.w	r3, r3, #1
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d119      	bne.n	800432a <HAL_SPI_TransmitReceive+0x2ce>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d014      	beq.n	800432a <HAL_SPI_TransmitReceive+0x2ce>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004312:	1c5a      	adds	r2, r3, #1
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800431c:	b29b      	uxth	r3, r3
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004326:	2301      	movs	r3, #1
 8004328:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800432a:	f7fc fe21 	bl	8000f70 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004336:	429a      	cmp	r2, r3
 8004338:	d803      	bhi.n	8004342 <HAL_SPI_TransmitReceive+0x2e6>
 800433a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800433c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004340:	d102      	bne.n	8004348 <HAL_SPI_TransmitReceive+0x2ec>
 8004342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004344:	2b00      	cmp	r3, #0
 8004346:	d107      	bne.n	8004358 <HAL_SPI_TransmitReceive+0x2fc>
      {
        errorcode = HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004356:	e033      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d19e      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x244>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004366:	b29b      	uxth	r3, r3
 8004368:	2b00      	cmp	r3, #0
 800436a:	d199      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x244>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800436c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f8b7 	bl	80044e4 <SPI_EndRxTxTransaction>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d006      	beq.n	800438a <HAL_SPI_TransmitReceive+0x32e>
  {
    errorcode = HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2220      	movs	r2, #32
 8004386:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004388:	e01a      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10a      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x34c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	617b      	str	r3, [r7, #20]
 80043a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_SPI_TransmitReceive+0x35c>
  {
    errorcode = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80043b6:	e003      	b.n	80043c0 <HAL_SPI_TransmitReceive+0x364>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80043c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3730      	adds	r7, #48	@ 0x30
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043e4:	f7fc fdc4 	bl	8000f70 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	4413      	add	r3, r2
 80043f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043f4:	f7fc fdbc 	bl	8000f70 <HAL_GetTick>
 80043f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043fa:	4b39      	ldr	r3, [pc, #228]	@ (80044e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	015b      	lsls	r3, r3, #5
 8004400:	0d1b      	lsrs	r3, r3, #20
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	fb02 f303 	mul.w	r3, r2, r3
 8004408:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800440a:	e054      	b.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004412:	d050      	beq.n	80044b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004414:	f7fc fdac 	bl	8000f70 <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	69fa      	ldr	r2, [r7, #28]
 8004420:	429a      	cmp	r2, r3
 8004422:	d902      	bls.n	800442a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13d      	bne.n	80044a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004438:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004442:	d111      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800444c:	d004      	beq.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004456:	d107      	bne.n	8004468 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004466:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800446c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004470:	d10f      	bne.n	8004492 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004490:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2201      	movs	r2, #1
 8004496:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e017      	b.n	80044d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	4013      	ands	r3, r2
 80044c0:	68ba      	ldr	r2, [r7, #8]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	bf0c      	ite	eq
 80044c6:	2301      	moveq	r3, #1
 80044c8:	2300      	movne	r3, #0
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	461a      	mov	r2, r3
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d19b      	bne.n	800440c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000000 	.word	0x20000000

080044e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af02      	add	r7, sp, #8
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	60b9      	str	r1, [r7, #8]
 80044ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	2200      	movs	r2, #0
 80044f8:	2180      	movs	r1, #128	@ 0x80
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ff6a 	bl	80043d4 <SPI_WaitFlagStateUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d007      	beq.n	8004516 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	f043 0220 	orr.w	r2, r3, #32
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e000      	b.n	8004518 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e0a1      	b.n	8004676 <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a52      	ldr	r2, [pc, #328]	@ (8004680 <HAL_TIM_PWM_Init+0x160>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d013      	beq.n	8004564 <HAL_TIM_PWM_Init+0x44>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004544:	d00e      	beq.n	8004564 <HAL_TIM_PWM_Init+0x44>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a4e      	ldr	r2, [pc, #312]	@ (8004684 <HAL_TIM_PWM_Init+0x164>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d009      	beq.n	8004564 <HAL_TIM_PWM_Init+0x44>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a4c      	ldr	r2, [pc, #304]	@ (8004688 <HAL_TIM_PWM_Init+0x168>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d004      	beq.n	8004564 <HAL_TIM_PWM_Init+0x44>
 800455a:	f240 512c 	movw	r1, #1324	@ 0x52c
 800455e:	484b      	ldr	r0, [pc, #300]	@ (800468c <HAL_TIM_PWM_Init+0x16c>)
 8004560:	f7fc fa02 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d014      	beq.n	8004596 <HAL_TIM_PWM_Init+0x76>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	2b10      	cmp	r3, #16
 8004572:	d010      	beq.n	8004596 <HAL_TIM_PWM_Init+0x76>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	2b20      	cmp	r3, #32
 800457a:	d00c      	beq.n	8004596 <HAL_TIM_PWM_Init+0x76>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b40      	cmp	r3, #64	@ 0x40
 8004582:	d008      	beq.n	8004596 <HAL_TIM_PWM_Init+0x76>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b60      	cmp	r3, #96	@ 0x60
 800458a:	d004      	beq.n	8004596 <HAL_TIM_PWM_Init+0x76>
 800458c:	f240 512d 	movw	r1, #1325	@ 0x52d
 8004590:	483e      	ldr	r0, [pc, #248]	@ (800468c <HAL_TIM_PWM_Init+0x16c>)
 8004592:	f7fc f9e9 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00e      	beq.n	80045bc <HAL_TIM_PWM_Init+0x9c>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045a6:	d009      	beq.n	80045bc <HAL_TIM_PWM_Init+0x9c>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045b0:	d004      	beq.n	80045bc <HAL_TIM_PWM_Init+0x9c>
 80045b2:	f240 512e 	movw	r1, #1326	@ 0x52e
 80045b6:	4835      	ldr	r0, [pc, #212]	@ (800468c <HAL_TIM_PWM_Init+0x16c>)
 80045b8:	f7fc f9d6 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d004      	beq.n	80045ce <HAL_TIM_PWM_Init+0xae>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045cc:	d304      	bcc.n	80045d8 <HAL_TIM_PWM_Init+0xb8>
 80045ce:	f240 512f 	movw	r1, #1327	@ 0x52f
 80045d2:	482e      	ldr	r0, [pc, #184]	@ (800468c <HAL_TIM_PWM_Init+0x16c>)
 80045d4:	f7fc f9c8 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_TIM_PWM_Init+0xd2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b80      	cmp	r3, #128	@ 0x80
 80045e6:	d004      	beq.n	80045f2 <HAL_TIM_PWM_Init+0xd2>
 80045e8:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 80045ec:	4827      	ldr	r0, [pc, #156]	@ (800468c <HAL_TIM_PWM_Init+0x16c>)
 80045ee:	f7fc f9bb 	bl	8000968 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_TIM_PWM_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fb8c 	bl	8000d24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3304      	adds	r3, #4
 800461c:	4619      	mov	r1, r3
 800461e:	4610      	mov	r0, r2
 8004620:	f000 fc8c 	bl	8004f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3708      	adds	r7, #8
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	08005efc 	.word	0x08005efc

08004690 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a8c      	ldr	r2, [pc, #560]	@ (80048d8 <HAL_TIM_PWM_Start_DMA+0x248>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d10b      	bne.n	80046c4 <HAL_TIM_PWM_Start_DMA+0x34>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d040      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d03d      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d03a      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b0c      	cmp	r3, #12
 80046c2:	d037      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046cc:	d10b      	bne.n	80046e6 <HAL_TIM_PWM_Start_DMA+0x56>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02f      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d02c      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d029      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d026      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a7c      	ldr	r2, [pc, #496]	@ (80048dc <HAL_TIM_PWM_Start_DMA+0x24c>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d10b      	bne.n	8004708 <HAL_TIM_PWM_Start_DMA+0x78>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01e      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b04      	cmp	r3, #4
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b08      	cmp	r3, #8
 8004700:	d018      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d015      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a74      	ldr	r2, [pc, #464]	@ (80048e0 <HAL_TIM_PWM_Start_DMA+0x250>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d10b      	bne.n	800472a <HAL_TIM_PWM_Start_DMA+0x9a>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b04      	cmp	r3, #4
 800471c:	d00a      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b08      	cmp	r3, #8
 8004722:	d007      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b0c      	cmp	r3, #12
 8004728:	d004      	beq.n	8004734 <HAL_TIM_PWM_Start_DMA+0xa4>
 800472a:	f44f 61d7 	mov.w	r1, #1720	@ 0x6b8
 800472e:	486d      	ldr	r0, [pc, #436]	@ (80048e4 <HAL_TIM_PWM_Start_DMA+0x254>)
 8004730:	f7fc f91a 	bl	8000968 <assert_failed>

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start_DMA+0xbe>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	bf0c      	ite	eq
 8004746:	2301      	moveq	r3, #1
 8004748:	2300      	movne	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e022      	b.n	8004794 <HAL_TIM_PWM_Start_DMA+0x104>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b04      	cmp	r3, #4
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start_DMA+0xd8>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	bf0c      	ite	eq
 8004760:	2301      	moveq	r3, #1
 8004762:	2300      	movne	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e015      	b.n	8004794 <HAL_TIM_PWM_Start_DMA+0x104>
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b08      	cmp	r3, #8
 800476c:	d109      	bne.n	8004782 <HAL_TIM_PWM_Start_DMA+0xf2>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	bf0c      	ite	eq
 800477a:	2301      	moveq	r3, #1
 800477c:	2300      	movne	r3, #0
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e008      	b.n	8004794 <HAL_TIM_PWM_Start_DMA+0x104>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b02      	cmp	r3, #2
 800478c:	bf0c      	ite	eq
 800478e:	2301      	moveq	r3, #1
 8004790:	2300      	movne	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <HAL_TIM_PWM_Start_DMA+0x10c>
  {
    return HAL_BUSY;
 8004798:	2302      	movs	r3, #2
 800479a:	e160      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d109      	bne.n	80047b6 <HAL_TIM_PWM_Start_DMA+0x126>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	bf0c      	ite	eq
 80047ae:	2301      	moveq	r3, #1
 80047b0:	2300      	movne	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	e022      	b.n	80047fc <HAL_TIM_PWM_Start_DMA+0x16c>
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	2b04      	cmp	r3, #4
 80047ba:	d109      	bne.n	80047d0 <HAL_TIM_PWM_Start_DMA+0x140>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	bf0c      	ite	eq
 80047c8:	2301      	moveq	r3, #1
 80047ca:	2300      	movne	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e015      	b.n	80047fc <HAL_TIM_PWM_Start_DMA+0x16c>
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	2b08      	cmp	r3, #8
 80047d4:	d109      	bne.n	80047ea <HAL_TIM_PWM_Start_DMA+0x15a>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b01      	cmp	r3, #1
 80047e0:	bf0c      	ite	eq
 80047e2:	2301      	moveq	r3, #1
 80047e4:	2300      	movne	r3, #0
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	e008      	b.n	80047fc <HAL_TIM_PWM_Start_DMA+0x16c>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	bf0c      	ite	eq
 80047f6:	2301      	moveq	r3, #1
 80047f8:	2300      	movne	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d024      	beq.n	800484a <HAL_TIM_PWM_Start_DMA+0x1ba>
  {
    if ((pData == NULL) || (Length == 0U))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d002      	beq.n	800480c <HAL_TIM_PWM_Start_DMA+0x17c>
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_PWM_Start_DMA+0x180>
    {
      return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e126      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d104      	bne.n	8004820 <HAL_TIM_PWM_Start_DMA+0x190>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2202      	movs	r2, #2
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800481e:	e016      	b.n	800484e <HAL_TIM_PWM_Start_DMA+0x1be>
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	2b04      	cmp	r3, #4
 8004824:	d104      	bne.n	8004830 <HAL_TIM_PWM_Start_DMA+0x1a0>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2202      	movs	r2, #2
 800482a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800482e:	e00e      	b.n	800484e <HAL_TIM_PWM_Start_DMA+0x1be>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	2b08      	cmp	r3, #8
 8004834:	d104      	bne.n	8004840 <HAL_TIM_PWM_Start_DMA+0x1b0>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2202      	movs	r2, #2
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800483e:	e006      	b.n	800484e <HAL_TIM_PWM_Start_DMA+0x1be>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004848:	e001      	b.n	800484e <HAL_TIM_PWM_Start_DMA+0x1be>
    }
  }
  else
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e107      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
  }

  switch (Channel)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	f200 80bb 	bhi.w	80049cc <HAL_TIM_PWM_Start_DMA+0x33c>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <HAL_TIM_PWM_Start_DMA+0x1cc>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004891 	.word	0x08004891
 8004860:	080049cd 	.word	0x080049cd
 8004864:	080049cd 	.word	0x080049cd
 8004868:	080049cd 	.word	0x080049cd
 800486c:	080048f5 	.word	0x080048f5
 8004870:	080049cd 	.word	0x080049cd
 8004874:	080049cd 	.word	0x080049cd
 8004878:	080049cd 	.word	0x080049cd
 800487c:	0800493d 	.word	0x0800493d
 8004880:	080049cd 	.word	0x080049cd
 8004884:	080049cd 	.word	0x080049cd
 8004888:	080049cd 	.word	0x080049cd
 800488c:	08004985 	.word	0x08004985
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004894:	4a14      	ldr	r2, [pc, #80]	@ (80048e8 <HAL_TIM_PWM_Start_DMA+0x258>)
 8004896:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800489c:	4a13      	ldr	r2, [pc, #76]	@ (80048ec <HAL_TIM_PWM_Start_DMA+0x25c>)
 800489e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	4a12      	ldr	r2, [pc, #72]	@ (80048f0 <HAL_TIM_PWM_Start_DMA+0x260>)
 80048a6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3334      	adds	r3, #52	@ 0x34
 80048b4:	461a      	mov	r2, r3
 80048b6:	887b      	ldrh	r3, [r7, #2]
 80048b8:	f7fd fe88 	bl	80025cc <HAL_DMA_Start_IT>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d001      	beq.n	80048c6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e0cb      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68da      	ldr	r2, [r3, #12]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048d4:	60da      	str	r2, [r3, #12]
      break;
 80048d6:	e07c      	b.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x342>
 80048d8:	40012c00 	.word	0x40012c00
 80048dc:	40000400 	.word	0x40000400
 80048e0:	40000800 	.word	0x40000800
 80048e4:	08005efc 	.word	0x08005efc
 80048e8:	08004e2d 	.word	0x08004e2d
 80048ec:	08004ed5 	.word	0x08004ed5
 80048f0:	08004d9b 	.word	0x08004d9b
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	4a5b      	ldr	r2, [pc, #364]	@ (8004a68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 80048fa:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	4a5a      	ldr	r2, [pc, #360]	@ (8004a6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004902:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	4a59      	ldr	r2, [pc, #356]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800490a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8004910:	6879      	ldr	r1, [r7, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3338      	adds	r3, #56	@ 0x38
 8004918:	461a      	mov	r2, r3
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	f7fd fe56 	bl	80025cc <HAL_DMA_Start_IT>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_TIM_PWM_Start_DMA+0x29a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e099      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004938:	60da      	str	r2, [r3, #12]
      break;
 800493a:	e04a      	b.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004940:	4a49      	ldr	r2, [pc, #292]	@ (8004a68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004942:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004948:	4a48      	ldr	r2, [pc, #288]	@ (8004a6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 800494a:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	4a47      	ldr	r2, [pc, #284]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004952:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	333c      	adds	r3, #60	@ 0x3c
 8004960:	461a      	mov	r2, r3
 8004962:	887b      	ldrh	r3, [r7, #2]
 8004964:	f7fd fe32 	bl	80025cc <HAL_DMA_Start_IT>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <HAL_TIM_PWM_Start_DMA+0x2e2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e075      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68da      	ldr	r2, [r3, #12]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004980:	60da      	str	r2, [r3, #12]
      break;
 8004982:	e026      	b.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x342>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004988:	4a37      	ldr	r2, [pc, #220]	@ (8004a68 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 800498a:	629a      	str	r2, [r3, #40]	@ 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004990:	4a36      	ldr	r2, [pc, #216]	@ (8004a6c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004992:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	4a35      	ldr	r2, [pc, #212]	@ (8004a70 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 800499a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3340      	adds	r3, #64	@ 0x40
 80049a8:	461a      	mov	r2, r3
 80049aa:	887b      	ldrh	r3, [r7, #2]
 80049ac:	f7fd fe0e 	bl	80025cc <HAL_DMA_Start_IT>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_TIM_PWM_Start_DMA+0x32a>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e051      	b.n	8004a5e <HAL_TIM_PWM_Start_DMA+0x3ce>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80049c8:	60da      	str	r2, [r3, #12]
      break;
 80049ca:	e002      	b.n	80049d2 <HAL_TIM_PWM_Start_DMA+0x342>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	75fb      	strb	r3, [r7, #23]
      break;
 80049d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80049d2:	7dfb      	ldrb	r3, [r7, #23]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d141      	bne.n	8004a5c <HAL_TIM_PWM_Start_DMA+0x3cc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	2201      	movs	r2, #1
 80049de:	68b9      	ldr	r1, [r7, #8]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 fd23 	bl	800542c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a22      	ldr	r2, [pc, #136]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d107      	bne.n	8004a00 <HAL_TIM_PWM_Start_DMA+0x370>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049fe:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1b      	ldr	r2, [pc, #108]	@ (8004a74 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_TIM_PWM_Start_DMA+0x398>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a12:	d009      	beq.n	8004a28 <HAL_TIM_PWM_Start_DMA+0x398>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_TIM_PWM_Start_DMA+0x398>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_TIM_PWM_Start_DMA+0x3bc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d010      	beq.n	8004a5c <HAL_TIM_PWM_Start_DMA+0x3cc>
      {
        __HAL_TIM_ENABLE(htim);
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	e007      	b.n	8004a5c <HAL_TIM_PWM_Start_DMA+0x3cc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3718      	adds	r7, #24
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	08004e2d 	.word	0x08004e2d
 8004a6c:	08004ed5 	.word	0x08004ed5
 8004a70:	08004d9b 	.word	0x08004d9b
 8004a74:	40012c00 	.word	0x40012c00
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800

08004a80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d010      	beq.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d00d      	beq.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b08      	cmp	r3, #8
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2b0c      	cmp	r3, #12
 8004aa6:	d007      	beq.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b3c      	cmp	r3, #60	@ 0x3c
 8004aac:	d004      	beq.n	8004ab8 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004aae:	f241 017e 	movw	r1, #4222	@ 0x107e
 8004ab2:	4881      	ldr	r0, [pc, #516]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004ab4:	f7fb ff58 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b60      	cmp	r3, #96	@ 0x60
 8004abe:	d008      	beq.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2b70      	cmp	r3, #112	@ 0x70
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x52>
 8004ac8:	f241 017f 	movw	r1, #4223	@ 0x107f
 8004acc:	487a      	ldr	r0, [pc, #488]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004ace:	f7fb ff4b 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d004      	beq.n	8004aec <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004ae2:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8004ae6:	4874      	ldr	r0, [pc, #464]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004ae8:	f7fb ff3e 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d004      	beq.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004afc:	f241 0181 	movw	r1, #4225	@ 0x1081
 8004b00:	486d      	ldr	r0, [pc, #436]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004b02:	f7fb ff31 	bl	8000968 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d101      	bne.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x94>
 8004b10:	2302      	movs	r3, #2
 8004b12:	e11b      	b.n	8004d4c <HAL_TIM_PWM_ConfigChannel+0x2cc>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	f200 810c 	bhi.w	8004d3c <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004b24:	a201      	add	r2, pc, #4	@ (adr r2, 8004b2c <HAL_TIM_PWM_ConfigChannel+0xac>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b61 	.word	0x08004b61
 8004b30:	08004d3d 	.word	0x08004d3d
 8004b34:	08004d3d 	.word	0x08004d3d
 8004b38:	08004d3d 	.word	0x08004d3d
 8004b3c:	08004bd3 	.word	0x08004bd3
 8004b40:	08004d3d 	.word	0x08004d3d
 8004b44:	08004d3d 	.word	0x08004d3d
 8004b48:	08004d3d 	.word	0x08004d3d
 8004b4c:	08004c47 	.word	0x08004c47
 8004b50:	08004d3d 	.word	0x08004d3d
 8004b54:	08004d3d 	.word	0x08004d3d
 8004b58:	08004d3d 	.word	0x08004d3d
 8004b5c:	08004cc9 	.word	0x08004cc9
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a55      	ldr	r2, [pc, #340]	@ (8004cbc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d013      	beq.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x112>
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b72:	d00e      	beq.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x112>
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a51      	ldr	r2, [pc, #324]	@ (8004cc0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d009      	beq.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x112>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a50      	ldr	r2, [pc, #320]	@ (8004cc4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d004      	beq.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x112>
 8004b88:	f241 018b 	movw	r1, #4235	@ 0x108b
 8004b8c:	484a      	ldr	r0, [pc, #296]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004b8e:	f7fb feeb 	bl	8000968 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 fa31 	bl	8005000 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f042 0208 	orr.w	r2, r2, #8
 8004bac:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	699a      	ldr	r2, [r3, #24]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0204 	bic.w	r2, r2, #4
 8004bbc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6999      	ldr	r1, [r3, #24]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	691a      	ldr	r2, [r3, #16]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	430a      	orrs	r2, r1
 8004bce:	619a      	str	r2, [r3, #24]
      break;
 8004bd0:	e0b7      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a39      	ldr	r2, [pc, #228]	@ (8004cbc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be4:	d00e      	beq.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a35      	ldr	r2, [pc, #212]	@ (8004cc0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a33      	ldr	r2, [pc, #204]	@ (8004cc4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004bfa:	f241 019c 	movw	r1, #4252	@ 0x109c
 8004bfe:	482e      	ldr	r0, [pc, #184]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004c00:	f7fb feb2 	bl	8000968 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fa88 	bl	8005120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	699a      	ldr	r2, [r3, #24]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	699a      	ldr	r2, [r3, #24]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6999      	ldr	r1, [r3, #24]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	021a      	lsls	r2, r3, #8
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	619a      	str	r2, [r3, #24]
      break;
 8004c44:	e07d      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8004cbc <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c58:	d00e      	beq.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a18      	ldr	r2, [pc, #96]	@ (8004cc0 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a16      	ldr	r2, [pc, #88]	@ (8004cc4 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8004c6e:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 8004c72:	4811      	ldr	r0, [pc, #68]	@ (8004cb8 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004c74:	f7fb fe78 	bl	8000968 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fae2 	bl	8005248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69da      	ldr	r2, [r3, #28]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f042 0208 	orr.w	r2, r2, #8
 8004c92:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69da      	ldr	r2, [r3, #28]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f022 0204 	bic.w	r2, r2, #4
 8004ca2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	69d9      	ldr	r1, [r3, #28]
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	61da      	str	r2, [r3, #28]
      break;
 8004cb6:	e044      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8004cb8:	08005efc 	.word	0x08005efc
 8004cbc:	40012c00 	.word	0x40012c00
 8004cc0:	40000400 	.word	0x40000400
 8004cc4:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	@ (8004d54 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cda:	d00e      	beq.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004cf0:	f241 01be 	movw	r1, #4286	@ 0x10be
 8004cf4:	481a      	ldr	r0, [pc, #104]	@ (8004d60 <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8004cf6:	f7fb fe37 	bl	8000968 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fb35 	bl	8005370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	69da      	ldr	r2, [r3, #28]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69da      	ldr	r2, [r3, #28]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69d9      	ldr	r1, [r3, #28]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	021a      	lsls	r2, r3, #8
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	61da      	str	r2, [r3, #28]
      break;
 8004d3a:	e002      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    default:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3718      	adds	r7, #24
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40012c00 	.word	0x40012c00
 8004d58:	40000400 	.word	0x40000400
 8004d5c:	40000800 	.word	0x40000800
 8004d60:	08005efc 	.word	0x08005efc

08004d64 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bc80      	pop	{r7}
 8004d74:	4770      	bx	lr

08004d76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b083      	sub	sp, #12
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004d7e:	bf00      	nop
 8004d80:	370c      	adds	r7, #12
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bc80      	pop	{r7}
 8004d86:	4770      	bx	lr

08004d88 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr

08004d9a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b084      	sub	sp, #16
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d107      	bne.n	8004dc2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc0:	e02a      	b.n	8004e18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d107      	bne.n	8004ddc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dda:	e01d      	b.n	8004e18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d107      	bne.n	8004df6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2204      	movs	r2, #4
 8004dea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004df4:	e010      	b.n	8004e18 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d107      	bne.n	8004e10 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2208      	movs	r2, #8
 8004e04:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2201      	movs	r2, #1
 8004e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e0e:	e003      	b.n	8004e18 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ffb5 	bl	8004d88 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d10b      	bne.n	8004e5c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2201      	movs	r2, #1
 8004e48:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d136      	bne.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e5a:	e031      	b.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d10b      	bne.n	8004e7e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d125      	bne.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e7c:	e020      	b.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d10b      	bne.n	8004ea0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2204      	movs	r2, #4
 8004e8c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d114      	bne.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e9e:	e00f      	b.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d10a      	bne.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2208      	movs	r2, #8
 8004eae:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ff4f 	bl	8004d64 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d103      	bne.n	8004ef4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	771a      	strb	r2, [r3, #28]
 8004ef2:	e019      	b.n	8004f28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d103      	bne.n	8004f06 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2202      	movs	r2, #2
 8004f02:	771a      	strb	r2, [r3, #28]
 8004f04:	e010      	b.n	8004f28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d103      	bne.n	8004f18 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2204      	movs	r2, #4
 8004f14:	771a      	strb	r2, [r3, #28]
 8004f16:	e007      	b.n	8004f28 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d102      	bne.n	8004f28 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2208      	movs	r2, #8
 8004f26:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004f28:	68f8      	ldr	r0, [r7, #12]
 8004f2a:	f7ff ff24 	bl	8004d76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	771a      	strb	r2, [r3, #28]
}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a29      	ldr	r2, [pc, #164]	@ (8004ff4 <TIM_Base_SetConfig+0xb8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0x30>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0x30>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a26      	ldr	r2, [pc, #152]	@ (8004ff8 <TIM_Base_SetConfig+0xbc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x30>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <TIM_Base_SetConfig+0xc0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a1c      	ldr	r2, [pc, #112]	@ (8004ff4 <TIM_Base_SetConfig+0xb8>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d00b      	beq.n	8004f9e <TIM_Base_SetConfig+0x62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d007      	beq.n	8004f9e <TIM_Base_SetConfig+0x62>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a19      	ldr	r2, [pc, #100]	@ (8004ff8 <TIM_Base_SetConfig+0xbc>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d003      	beq.n	8004f9e <TIM_Base_SetConfig+0x62>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a18      	ldr	r2, [pc, #96]	@ (8004ffc <TIM_Base_SetConfig+0xc0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	695b      	ldr	r3, [r3, #20]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <TIM_Base_SetConfig+0xb8>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d103      	bne.n	8004fe4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691a      	ldr	r2, [r3, #16]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	615a      	str	r2, [r3, #20]
}
 8004fea:	bf00      	nop
 8004fec:	3714      	adds	r7, #20
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800

08005000 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
 800500e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	f023 0201 	bic.w	r2, r3, #1
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800502e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4313      	orrs	r3, r2
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f023 0302 	bic.w	r3, r3, #2
 8005048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	697a      	ldr	r2, [r7, #20]
 8005050:	4313      	orrs	r3, r2
 8005052:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a30      	ldr	r2, [pc, #192]	@ (8005118 <TIM_OC1_SetConfig+0x118>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d119      	bne.n	8005090 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <TIM_OC1_SetConfig+0x76>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d004      	beq.n	8005076 <TIM_OC1_SetConfig+0x76>
 800506c:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8005070:	482a      	ldr	r0, [pc, #168]	@ (800511c <TIM_OC1_SetConfig+0x11c>)
 8005072:	f7fb fc79 	bl	8000968 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f023 0308 	bic.w	r3, r3, #8
 800507c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0304 	bic.w	r3, r3, #4
 800508e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a21      	ldr	r2, [pc, #132]	@ (8005118 <TIM_OC1_SetConfig+0x118>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d12d      	bne.n	80050f4 <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050a0:	d008      	beq.n	80050b4 <TIM_OC1_SetConfig+0xb4>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d004      	beq.n	80050b4 <TIM_OC1_SetConfig+0xb4>
 80050aa:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 80050ae:	481b      	ldr	r0, [pc, #108]	@ (800511c <TIM_OC1_SetConfig+0x11c>)
 80050b0:	f7fb fc5a 	bl	8000968 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050bc:	d008      	beq.n	80050d0 <TIM_OC1_SetConfig+0xd0>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <TIM_OC1_SetConfig+0xd0>
 80050c6:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 80050ca:	4814      	ldr	r0, [pc, #80]	@ (800511c <TIM_OC1_SetConfig+0x11c>)
 80050cc:	f7fb fc4c 	bl	8000968 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	693a      	ldr	r2, [r7, #16]
 80050f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68fa      	ldr	r2, [r7, #12]
 80050fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	621a      	str	r2, [r3, #32]
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	40012c00 	.word	0x40012c00
 800511c:	08005efc 	.word	0x08005efc

08005120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a1b      	ldr	r3, [r3, #32]
 8005134:	f023 0210 	bic.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005156:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	021b      	lsls	r3, r3, #8
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	f023 0320 	bic.w	r3, r3, #32
 800516a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	011b      	lsls	r3, r3, #4
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	4313      	orrs	r3, r2
 8005176:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a31      	ldr	r2, [pc, #196]	@ (8005240 <TIM_OC2_SetConfig+0x120>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d11a      	bne.n	80051b6 <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <TIM_OC2_SetConfig+0x7a>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	2b08      	cmp	r3, #8
 800518e:	d004      	beq.n	800519a <TIM_OC2_SetConfig+0x7a>
 8005190:	f641 3110 	movw	r1, #6928	@ 0x1b10
 8005194:	482b      	ldr	r0, [pc, #172]	@ (8005244 <TIM_OC2_SetConfig+0x124>)
 8005196:	f7fb fbe7 	bl	8000968 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b4:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	4a21      	ldr	r2, [pc, #132]	@ (8005240 <TIM_OC2_SetConfig+0x120>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d12f      	bne.n	800521e <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c6:	d008      	beq.n	80051da <TIM_OC2_SetConfig+0xba>
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <TIM_OC2_SetConfig+0xba>
 80051d0:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 80051d4:	481b      	ldr	r0, [pc, #108]	@ (8005244 <TIM_OC2_SetConfig+0x124>)
 80051d6:	f7fb fbc7 	bl	8000968 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051e2:	d008      	beq.n	80051f6 <TIM_OC2_SetConfig+0xd6>
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	695b      	ldr	r3, [r3, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d004      	beq.n	80051f6 <TIM_OC2_SetConfig+0xd6>
 80051ec:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 80051f0:	4814      	ldr	r0, [pc, #80]	@ (8005244 <TIM_OC2_SetConfig+0x124>)
 80051f2:	f7fb fbb9 	bl	8000968 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	4313      	orrs	r3, r2
 800521c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	bf00      	nop
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40012c00 	.word	0x40012c00
 8005244:	08005efc 	.word	0x08005efc

08005248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f023 0303 	bic.w	r3, r3, #3
 800527e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	021b      	lsls	r3, r3, #8
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	4313      	orrs	r3, r2
 800529c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a31      	ldr	r2, [pc, #196]	@ (8005368 <TIM_OC3_SetConfig+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d11a      	bne.n	80052dc <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d008      	beq.n	80052c0 <TIM_OC3_SetConfig+0x78>
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	2b08      	cmp	r3, #8
 80052b4:	d004      	beq.n	80052c0 <TIM_OC3_SetConfig+0x78>
 80052b6:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 80052ba:	482c      	ldr	r0, [pc, #176]	@ (800536c <TIM_OC3_SetConfig+0x124>)
 80052bc:	f7fb fb54 	bl	8000968 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80052c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	021b      	lsls	r3, r3, #8
 80052ce:	697a      	ldr	r2, [r7, #20]
 80052d0:	4313      	orrs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80052da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a22      	ldr	r2, [pc, #136]	@ (8005368 <TIM_OC3_SetConfig+0x120>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d12f      	bne.n	8005344 <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ec:	d008      	beq.n	8005300 <TIM_OC3_SetConfig+0xb8>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d004      	beq.n	8005300 <TIM_OC3_SetConfig+0xb8>
 80052f6:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80052fa:	481c      	ldr	r0, [pc, #112]	@ (800536c <TIM_OC3_SetConfig+0x124>)
 80052fc:	f7fb fb34 	bl	8000968 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005308:	d008      	beq.n	800531c <TIM_OC3_SetConfig+0xd4>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d004      	beq.n	800531c <TIM_OC3_SetConfig+0xd4>
 8005312:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 8005316:	4815      	ldr	r0, [pc, #84]	@ (800536c <TIM_OC3_SetConfig+0x124>)
 8005318:	f7fb fb26 	bl	8000968 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005322:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800532a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695b      	ldr	r3, [r3, #20]
 8005330:	011b      	lsls	r3, r3, #4
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	4313      	orrs	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	011b      	lsls	r3, r3, #4
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68fa      	ldr	r2, [r7, #12]
 800534e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	40012c00 	.word	0x40012c00
 800536c:	08005efc 	.word	0x08005efc

08005370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a1b      	ldr	r3, [r3, #32]
 8005384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	69db      	ldr	r3, [r3, #28]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	031b      	lsls	r3, r3, #12
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a16      	ldr	r2, [pc, #88]	@ (8005424 <TIM_OC4_SetConfig+0xb4>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d117      	bne.n	8005400 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d8:	d008      	beq.n	80053ec <TIM_OC4_SetConfig+0x7c>
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	695b      	ldr	r3, [r3, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d004      	beq.n	80053ec <TIM_OC4_SetConfig+0x7c>
 80053e2:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 80053e6:	4810      	ldr	r0, [pc, #64]	@ (8005428 <TIM_OC4_SetConfig+0xb8>)
 80053e8:	f7fb fabe 	bl	8000968 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	695b      	ldr	r3, [r3, #20]
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	685a      	ldr	r2, [r3, #4]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	693a      	ldr	r2, [r7, #16]
 8005418:	621a      	str	r2, [r3, #32]
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40012c00 	.word	0x40012c00
 8005428:	08005efc 	.word	0x08005efc

0800542c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b086      	sub	sp, #24
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	4a22      	ldr	r2, [pc, #136]	@ (80054c4 <TIM_CCxChannelCmd+0x98>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d010      	beq.n	8005462 <TIM_CCxChannelCmd+0x36>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005446:	d00c      	beq.n	8005462 <TIM_CCxChannelCmd+0x36>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	4a1f      	ldr	r2, [pc, #124]	@ (80054c8 <TIM_CCxChannelCmd+0x9c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d008      	beq.n	8005462 <TIM_CCxChannelCmd+0x36>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a1e      	ldr	r2, [pc, #120]	@ (80054cc <TIM_CCxChannelCmd+0xa0>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d004      	beq.n	8005462 <TIM_CCxChannelCmd+0x36>
 8005458:	f641 5192 	movw	r1, #7570	@ 0x1d92
 800545c:	481c      	ldr	r0, [pc, #112]	@ (80054d0 <TIM_CCxChannelCmd+0xa4>)
 800545e:	f7fb fa83 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <TIM_CCxChannelCmd+0x5e>
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d00d      	beq.n	800548a <TIM_CCxChannelCmd+0x5e>
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d00a      	beq.n	800548a <TIM_CCxChannelCmd+0x5e>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b0c      	cmp	r3, #12
 8005478:	d007      	beq.n	800548a <TIM_CCxChannelCmd+0x5e>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b3c      	cmp	r3, #60	@ 0x3c
 800547e:	d004      	beq.n	800548a <TIM_CCxChannelCmd+0x5e>
 8005480:	f641 5193 	movw	r1, #7571	@ 0x1d93
 8005484:	4812      	ldr	r0, [pc, #72]	@ (80054d0 <TIM_CCxChannelCmd+0xa4>)
 8005486:	f7fb fa6f 	bl	8000968 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	2201      	movs	r2, #1
 8005492:	fa02 f303 	lsl.w	r3, r2, r3
 8005496:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6a1a      	ldr	r2, [r3, #32]
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	43db      	mvns	r3, r3
 80054a0:	401a      	ands	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 031f 	and.w	r3, r3, #31
 80054b0:	6879      	ldr	r1, [r7, #4]
 80054b2:	fa01 f303 	lsl.w	r3, r1, r3
 80054b6:	431a      	orrs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40000400 	.word	0x40000400
 80054cc:	40000800 	.word	0x40000800
 80054d0:	08005efc 	.word	0x08005efc

080054d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4d      	ldr	r2, [pc, #308]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d013      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d00e      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a49      	ldr	r2, [pc, #292]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d009      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a47      	ldr	r2, [pc, #284]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d004      	beq.n	8005510 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005506:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 800550a:	4846      	ldr	r0, [pc, #280]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 800550c:	f7fb fa2c 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b10      	cmp	r3, #16
 800551e:	d01c      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2b20      	cmp	r3, #32
 8005526:	d018      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	2b30      	cmp	r3, #48	@ 0x30
 800552e:	d014      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b40      	cmp	r3, #64	@ 0x40
 8005536:	d010      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2b50      	cmp	r3, #80	@ 0x50
 800553e:	d00c      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b60      	cmp	r3, #96	@ 0x60
 8005546:	d008      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b70      	cmp	r3, #112	@ 0x70
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005550:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 8005554:	4833      	ldr	r0, [pc, #204]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8005556:	f7fb fa07 	bl	8000968 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	2b80      	cmp	r3, #128	@ 0x80
 8005560:	d008      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d004      	beq.n	8005574 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 800556a:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 800556e:	482d      	ldr	r0, [pc, #180]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8005570:	f7fb f9fa 	bl	8000968 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800557e:	2302      	movs	r3, #2
 8005580:	e046      	b.n	8005610 <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a15      	ldr	r2, [pc, #84]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d00e      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ce:	d009      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a11      	ldr	r2, [pc, #68]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a10      	ldr	r2, [pc, #64]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d10c      	bne.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2200      	movs	r2, #0
 800560a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40012c00 	.word	0x40012c00
 800561c:	40000400 	.word	0x40000400
 8005620:	40000800 	.word	0x40000800
 8005624:	08005f34 	.word	0x08005f34

08005628 <TMC_2590_Init>:
#include "stm32f1xx_tmc_2590.h"

#include <stdlib.h>

TMC_2590_StatusTypeDef TMC_2590_Init(TMC_2590_HandleTypeDef *htmc2590)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <TMC_2590_Init+0x12>
    {
        return TMC_2590_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06b      	b.n	8005712 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_READY)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b01      	cmp	r3, #1
 8005644:	d101      	bne.n	800564a <TMC_2590_Init+0x22>
    {
        // Peripheral is already initialized
        return TMC_2590_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e063      	b.n	8005712 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d101      	bne.n	800565a <TMC_2590_Init+0x32>
    {
        return TMC_2590_BUSY;
 8005656:	2302      	movs	r3, #2
 8005658:	e05b      	b.n	8005712 <TMC_2590_Init+0xea>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8005660:	b2db      	uxtb	r3, r3
 8005662:	2b06      	cmp	r3, #6
 8005664:	d101      	bne.n	800566a <TMC_2590_Init+0x42>
    {
        return TMC_2590_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	e053      	b.n	8005712 <TMC_2590_Init+0xea>
    }

    if (htmc2590->Init.SPI_HandlerInstance == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <TMC_2590_Init+0x4e>
    {
        return TMC_2590_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e04d      	b.n	8005712 <TMC_2590_Init+0xea>
    }

    if (!htmc2590->Init.use_pwm && htmc2590->Init.STEP_Tim == NULL)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800567c:	2b00      	cmp	r3, #0
 800567e:	d105      	bne.n	800568c <TMC_2590_Init+0x64>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <TMC_2590_Init+0x64>
    {
        return TMC_2590_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e042      	b.n	8005712 <TMC_2590_Init+0xea>
    }
    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // todo throw errors if pins are undefined

    // set st_alone
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6958      	ldr	r0, [r3, #20]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	8b19      	ldrh	r1, [r3, #24]
            htmc2590->Init.ST_ALONE_Pin,
            htmc2590->Init.use_st_alone ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	7c9b      	ldrb	r3, [r3, #18]
    HAL_GPIO_WritePin(htmc2590->Init.ST_ALONE_GPIO_Port,
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	461a      	mov	r2, r3
 80056ac:	f7fd fab8 	bl	8002c20 <HAL_GPIO_WritePin>

    // set default pin state. this should actually already be configured by the gpio library
    if (!htmc2590->Init.use_st_alone)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	7c9b      	ldrb	r3, [r3, #18]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10a      	bne.n	80056ce <TMC_2590_Init+0xa6>
    {
        // todo check conf registers
        HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6858      	ldr	r0, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	891b      	ldrh	r3, [r3, #8]
 80056c0:	2201      	movs	r2, #1
 80056c2:	4619      	mov	r1, r3
 80056c4:	f7fd faac 	bl	8002c20 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
        // write config registers
        __send_conf_registers(htmc2590);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8db 	bl	8005884 <__send_conf_registers>
    }
    if (htmc2590->Init.use_pwm)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d007      	beq.n	80056e8 <TMC_2590_Init+0xc0>
    {
        // set default step
        HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056e0:	2200      	movs	r2, #0
 80056e2:	4619      	mov	r1, r3
 80056e4:	f7fd fa9c 	bl	8002c20 <HAL_GPIO_WritePin>
                htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
    }
    // set default dir
    HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	69d8      	ldr	r0, [r3, #28]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8c1b      	ldrh	r3, [r3, #32]
 80056f0:	2200      	movs	r2, #0
 80056f2:	4619      	mov	r1, r3
 80056f4:	f7fd fa94 	bl	8002c20 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);

    // set enn
    HAL_GPIO_WritePin(htmc2590->Init.ENN_GPIO_Port, htmc2590->Init.ENN_Pin,
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	68d8      	ldr	r0, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	8a1b      	ldrh	r3, [r3, #16]
 8005700:	2200      	movs	r2, #0
 8005702:	4619      	mov	r1, r3
 8005704:	f7fd fa8c 	bl	8002c20 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    // set driver state
    htmc2590->State = TMC_2590_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // return status
    return TMC_2590_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <TMC_2590_MoveSteps>:
    return TMC_2590_OK;
}

TMC_2590_StatusTypeDef TMC_2590_MoveSteps(TMC_2590_HandleTypeDef *htmc2590,
        int16_t steps)
{
 800571a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	460b      	mov	r3, r1
 8005726:	807b      	strh	r3, [r7, #2]
 8005728:	466b      	mov	r3, sp
 800572a:	461e      	mov	r6, r3
    // check tmc2590 handle allocation
    if (htmc2590 == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <TMC_2590_MoveSteps+0x1c>
    {
        return TMC_2590_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e0a0      	b.n	8005878 <TMC_2590_MoveSteps+0x15e>
    }
    // check driver state
    if (htmc2590->State == TMC_2590_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <TMC_2590_MoveSteps+0x2c>
    {
        // Peripheral is not initialized
        return TMC_2590_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e098      	b.n	8005878 <TMC_2590_MoveSteps+0x15e>
    }

    if (htmc2590->State == TMC_2590_STATE_BUSY)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b02      	cmp	r3, #2
 8005750:	d101      	bne.n	8005756 <TMC_2590_MoveSteps+0x3c>
    {
        return TMC_2590_BUSY;
 8005752:	2302      	movs	r3, #2
 8005754:	e090      	b.n	8005878 <TMC_2590_MoveSteps+0x15e>
    }

    if (htmc2590->State == TMC_2590_STATE_ERROR)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b06      	cmp	r3, #6
 8005760:	d101      	bne.n	8005766 <TMC_2590_MoveSteps+0x4c>
    {
        return TMC_2590_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e088      	b.n	8005878 <TMC_2590_MoveSteps+0x15e>
    }

    // set driver state
    htmc2590->State = TMC_2590_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66

    // set dir
    if (steps < 0)
 800576e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005772:	2b00      	cmp	r3, #0
 8005774:	da08      	bge.n	8005788 <TMC_2590_MoveSteps+0x6e>
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69d8      	ldr	r0, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8c1b      	ldrh	r3, [r3, #32]
 800577e:	2200      	movs	r2, #0
 8005780:	4619      	mov	r1, r3
 8005782:	f7fd fa4d 	bl	8002c20 <HAL_GPIO_WritePin>
 8005786:	e007      	b.n	8005798 <TMC_2590_MoveSteps+0x7e>
                GPIO_PIN_RESET);
    }
    else
    {
        HAL_GPIO_WritePin(htmc2590->Init.DIR_GPIO_Port, htmc2590->Init.DIR_Pin,
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	69d8      	ldr	r0, [r3, #28]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	8c1b      	ldrh	r3, [r3, #32]
 8005790:	2201      	movs	r2, #1
 8005792:	4619      	mov	r1, r3
 8005794:	f7fd fa44 	bl	8002c20 <HAL_GPIO_WritePin>
                GPIO_PIN_SET);
    }

    if (htmc2590->Init.use_pwm)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d026      	beq.n	80057f0 <TMC_2590_MoveSteps+0xd6>
    {
        // pulse step pin with some delay
        for (uint32_t i = 0; i < steps; i++)
 80057a2:	2300      	movs	r3, #0
 80057a4:	617b      	str	r3, [r7, #20]
 80057a6:	e018      	b.n	80057da <TMC_2590_MoveSteps+0xc0>
        {
            // TODO set a constant for the delay
            HAL_Delay(1);
 80057a8:	2001      	movs	r0, #1
 80057aa:	f7fb fbeb 	bl	8000f84 <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057b6:	2201      	movs	r2, #1
 80057b8:	4619      	mov	r1, r3
 80057ba:	f7fd fa31 	bl	8002c20 <HAL_GPIO_WritePin>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_SET);
            // TODO set a constant for the delay
            HAL_Delay(1);
 80057be:	2001      	movs	r0, #1
 80057c0:	f7fb fbe0 	bl	8000f84 <HAL_Delay>
            HAL_GPIO_WritePin(htmc2590->Init.STEP_GPIO_Port,
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057cc:	2200      	movs	r2, #0
 80057ce:	4619      	mov	r1, r3
 80057d0:	f7fd fa26 	bl	8002c20 <HAL_GPIO_WritePin>
        for (uint32_t i = 0; i < steps; i++)
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	3301      	adds	r3, #1
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d3e1      	bcc.n	80057a8 <TMC_2590_MoveSteps+0x8e>
                    htmc2590->Init.STEP_Pin, GPIO_PIN_RESET);
        }
        //  set driver state
        htmc2590->State = TMC_2590_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
        return TMC_2590_OK;
 80057ec:	2300      	movs	r3, #0
 80057ee:	e043      	b.n	8005878 <TMC_2590_MoveSteps+0x15e>
    }

    // todo callback should move TMC2590 to READY state
    // config timer settings to pulse
    uint16_t pwm_pulses = abs(steps);
 80057f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bfb8      	it	lt
 80057f8:	425b      	neglt	r3, r3
 80057fa:	823b      	strh	r3, [r7, #16]
    uint8_t pwm_data[pwm_pulses];
 80057fc:	8a39      	ldrh	r1, [r7, #16]
 80057fe:	460b      	mov	r3, r1
 8005800:	3b01      	subs	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	b28b      	uxth	r3, r1
 8005806:	2200      	movs	r2, #0
 8005808:	4698      	mov	r8, r3
 800580a:	4691      	mov	r9, r2
 800580c:	f04f 0200 	mov.w	r2, #0
 8005810:	f04f 0300 	mov.w	r3, #0
 8005814:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005818:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800581c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005820:	b28b      	uxth	r3, r1
 8005822:	2200      	movs	r2, #0
 8005824:	461c      	mov	r4, r3
 8005826:	4615      	mov	r5, r2
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	00eb      	lsls	r3, r5, #3
 8005832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005836:	00e2      	lsls	r2, r4, #3
 8005838:	460b      	mov	r3, r1
 800583a:	3307      	adds	r3, #7
 800583c:	08db      	lsrs	r3, r3, #3
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	ebad 0d03 	sub.w	sp, sp, r3
 8005844:	466b      	mov	r3, sp
 8005846:	3300      	adds	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
    for (uint16_t i = 0; i < pwm_pulses; i++)
 800584a:	2300      	movs	r3, #0
 800584c:	827b      	strh	r3, [r7, #18]
 800584e:	e006      	b.n	800585e <TMC_2590_MoveSteps+0x144>
    {
        pwm_data[i] = 50;
 8005850:	8a7b      	ldrh	r3, [r7, #18]
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	2132      	movs	r1, #50	@ 0x32
 8005856:	54d1      	strb	r1, [r2, r3]
    for (uint16_t i = 0; i < pwm_pulses; i++)
 8005858:	8a7b      	ldrh	r3, [r7, #18]
 800585a:	3301      	adds	r3, #1
 800585c:	827b      	strh	r3, [r7, #18]
 800585e:	8a7a      	ldrh	r2, [r7, #18]
 8005860:	8a3b      	ldrh	r3, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d3f4      	bcc.n	8005850 <TMC_2590_MoveSteps+0x136>
    }
    HAL_TIM_PWM_Start_DMA(htmc2590->Init.STEP_Tim, htmc2590->Init.STEP_Channel,
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800586e:	8a3b      	ldrh	r3, [r7, #16]
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	f7fe ff0d 	bl	8004690 <HAL_TIM_PWM_Start_DMA>
            (uint32_t*) pwm_data, pwm_pulses);
    return TMC_2590_OK;
 8005876:	2300      	movs	r3, #0
 8005878:	46b5      	mov	sp, r6
}
 800587a:	4618      	mov	r0, r3
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005884 <__send_conf_registers>:
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
    htmc2590->State = TMC_2590_STATE_READY;
}

TMC_2590_StatusTypeDef __send_conf_registers(TMC_2590_HandleTypeDef *htmc2590)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
    uint32_t SPImsg = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
    uint8_t SPI_read_bytes[3];

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCONF; // DRVCONF
 8005890:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
 8005894:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.tst << 16);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800589c:	041b      	lsls	r3, r3, #16
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.slp << 11);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058aa:	02db      	lsls	r3, r3, #11
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.dis_s2g << 10);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80058b8:	029b      	lsls	r3, r3, #10
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.ts2g << 8);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80058c6:	021b      	lsls	r3, r3, #8
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.sdoff << 7);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058d4:	01db      	lsls	r3, r3, #7
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.vsense << 6);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e2:	019b      	lsls	r3, r3, #6
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	4313      	orrs	r3, r2
 80058e8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.rdsel << 4);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	68fa      	ldr	r2, [r7, #12]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.otsens << 3);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	4313      	orrs	r3, r2
 8005904:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.shrtsens << 2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_pfd << 1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800591a:	005b      	lsls	r3, r3, #1
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCONF.en_s2vs << 0);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005928:	461a      	mov	r2, r3
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
    // write new registers
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8005930:	f107 0308 	add.w	r3, r7, #8
 8005934:	461a      	mov	r2, r3
 8005936:	68f9      	ldr	r1, [r7, #12]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f910 	bl	8005b5e <__send_spi_packet>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <__send_conf_registers+0xc4>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0d7      	b.n	8005af8 <__send_conf_registers+0x274>
    }
    // SPI_read_bytes to DRVSTATUS
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8005948:	f107 0308 	add.w	r3, r7, #8
 800594c:	4619      	mov	r1, r3
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 f933 	bl	8005bba <__set_drvstatus_struct>

    // set rest of the registers
    SPImsg = __TMC_2590_ConfRegister_Header_SGCSCONF;
 8005954:	f44f 2340 	mov.w	r3, #786432	@ 0xc0000
 8005958:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sfilt << 16);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	4313      	orrs	r3, r2
 8005966:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.sgt << 8);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 800596e:	021b      	lsls	r3, r3, #8
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SGCSCONF.cs << 0);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800597c:	461a      	mov	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4313      	orrs	r3, r2
 8005982:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8005984:	f107 0308 	add.w	r3, r7, #8
 8005988:	461a      	mov	r2, r3
 800598a:	68f9      	ldr	r1, [r7, #12]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8e6 	bl	8005b5e <__send_spi_packet>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <__send_conf_registers+0x118>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e0ad      	b.n	8005af8 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 800599c:	f107 0308 	add.w	r3, r7, #8
 80059a0:	4619      	mov	r1, r3
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f909 	bl	8005bba <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_SMARTEN;
 80059a8:	f44f 2320 	mov.w	r3, #655360	@ 0xa0000
 80059ac:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seimin << 15);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80059b4:	03db      	lsls	r3, r3, #15
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.sedn << 13);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80059c2:	035b      	lsls	r3, r3, #13
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semax << 8);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.seup << 5);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80059de:	015b      	lsls	r3, r3, #5
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.SMARTEN.semin << 0);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80059ec:	461a      	mov	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 80059f4:	f107 0308 	add.w	r3, r7, #8
 80059f8:	461a      	mov	r2, r3
 80059fa:	68f9      	ldr	r1, [r7, #12]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 f8ae 	bl	8005b5e <__send_spi_packet>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d001      	beq.n	8005a0c <__send_conf_registers+0x188>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	e075      	b.n	8005af8 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8005a0c:	f107 0308 	add.w	r3, r7, #8
 8005a10:	4619      	mov	r1, r3
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8d1 	bl	8005bba <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_CHOPCONF;
 8005a18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005a1c:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.tbl << 15);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 304f 	ldrb.w	r3, [r3, #79]	@ 0x4f
 8005a24:	03db      	lsls	r3, r3, #15
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.chm << 14);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a32:	039b      	lsls	r3, r3, #14
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.rndtf << 13);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a40:	035b      	lsls	r3, r3, #13
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hdec << 11);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8005a4e:	02db      	lsls	r3, r3, #11
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hend << 7);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3053 	ldrb.w	r3, [r3, #83]	@ 0x53
 8005a5c:	01db      	lsls	r3, r3, #7
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.hstrt << 4);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.CHOPCONF.toff << 0);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005a78:	461a      	mov	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8005a80:	f107 0308 	add.w	r3, r7, #8
 8005a84:	461a      	mov	r2, r3
 8005a86:	68f9      	ldr	r1, [r7, #12]
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f868 	bl	8005b5e <__send_spi_packet>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <__send_conf_registers+0x214>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e02f      	b.n	8005af8 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8005a98:	f107 0308 	add.w	r3, r7, #8
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f88b 	bl	8005bba <__set_drvstatus_struct>

    SPImsg = __TMC_2590_ConfRegister_Header_DRVCTRL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.intpol << 9);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8005aae:	025b      	lsls	r3, r3, #9
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.dedge << 8);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3057 	ldrb.w	r3, [r3, #87]	@ 0x57
 8005abc:	021b      	lsls	r3, r3, #8
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
    SPImsg |= (htmc2590->ConfRegisters.DRVCTRL.mres << 0);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005aca:	461a      	mov	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	60fb      	str	r3, [r7, #12]
    if (__send_spi_packet(htmc2590, SPImsg, SPI_read_bytes) != HAL_OK)
 8005ad2:	f107 0308 	add.w	r3, r7, #8
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	68f9      	ldr	r1, [r7, #12]
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f83f 	bl	8005b5e <__send_spi_packet>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d001      	beq.n	8005aea <__send_conf_registers+0x266>
    {
        // todo handle error
        return TMC_2590_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e006      	b.n	8005af8 <__send_conf_registers+0x274>
    }
    __set_drvstatus_struct(htmc2590, SPI_read_bytes);
 8005aea:	f107 0308 	add.w	r3, r7, #8
 8005aee:	4619      	mov	r1, r3
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 f862 	bl	8005bba <__set_drvstatus_struct>
    return TMC_2590_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <__word_to_spi_order_buffer>:

void __word_to_spi_order_buffer(uint32_t word, uint8_t *buff)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
    // convert to big endian
    buff[2] = (uint8_t) (word & 0xFF);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	3302      	adds	r3, #2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	b2d2      	uxtb	r2, r2
 8005b12:	701a      	strb	r2, [r3, #0]
    buff[1] = (uint8_t) ((word & 0xFF00) >> 8);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	0a1a      	lsrs	r2, r3, #8
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
    buff[0] = (uint8_t) ((word & 0xFF0000) >> 16);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	0c1b      	lsrs	r3, r3, #16
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	701a      	strb	r2, [r3, #0]
}
 8005b2a:	bf00      	nop
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bc80      	pop	{r7}
 8005b32:	4770      	bx	lr

08005b34 <__spi_order_buffer_to_word>:

uint32_t __spi_order_buffer_to_word(uint8_t *buff)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
    return ((uint32_t) buff[0] << 16) | ((uint32_t) buff[1] << 8)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	041a      	lsls	r2, r3, #16
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	3301      	adds	r3, #1
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	021b      	lsls	r3, r3, #8
 8005b4a:	4313      	orrs	r3, r2
            | (uint32_t) buff[2];
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	3202      	adds	r2, #2
 8005b50:	7812      	ldrb	r2, [r2, #0]
 8005b52:	4313      	orrs	r3, r2
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bc80      	pop	{r7}
 8005b5c:	4770      	bx	lr

08005b5e <__send_spi_packet>:

HAL_StatusTypeDef __send_spi_packet(TMC_2590_HandleTypeDef *htmc2590,
        uint32_t SPImsg, uint8_t *SPI_read_bytes)
{
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b088      	sub	sp, #32
 8005b62:	af02      	add	r7, sp, #8
 8005b64:	60f8      	str	r0, [r7, #12]
 8005b66:	60b9      	str	r1, [r7, #8]
 8005b68:	607a      	str	r2, [r7, #4]
    uint8_t SPImsg_bytes[3];
    __word_to_spi_order_buffer(SPImsg, SPImsg_bytes);
 8005b6a:	f107 0314 	add.w	r3, r7, #20
 8005b6e:	4619      	mov	r1, r3
 8005b70:	68b8      	ldr	r0, [r7, #8]
 8005b72:	f7ff ffc5 	bl	8005b00 <__word_to_spi_order_buffer>
    // write new registers
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6858      	ldr	r0, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	891b      	ldrh	r3, [r3, #8]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4619      	mov	r1, r3
 8005b82:	f7fd f84d 	bl	8002c20 <HAL_GPIO_WritePin>
            GPIO_PIN_RESET);
    HAL_StatusTypeDef spi_status = HAL_SPI_TransmitReceive(
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	6818      	ldr	r0, [r3, #0]
 8005b8a:	f107 0114 	add.w	r1, r7, #20
 8005b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2303      	movs	r3, #3
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	f7fe fa60 	bl	800405c <HAL_SPI_TransmitReceive>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	75fb      	strb	r3, [r7, #23]
            htmc2590->Init.SPI_HandlerInstance, SPImsg_bytes, SPI_read_bytes, 3,
            1000);
    HAL_GPIO_WritePin(htmc2590->Init.CS_GPIO_Port, htmc2590->Init.CS_Pin,
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6858      	ldr	r0, [r3, #4]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	891b      	ldrh	r3, [r3, #8]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	4619      	mov	r1, r3
 8005bac:	f7fd f838 	bl	8002c20 <HAL_GPIO_WritePin>
            GPIO_PIN_SET);
    return spi_status;
 8005bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3718      	adds	r7, #24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <__set_drvstatus_struct>:

void __set_drvstatus_struct(TMC_2590_HandleTypeDef *htmc2590, uint8_t *status)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
 8005bc2:	6039      	str	r1, [r7, #0]
    uint32_t status_word = __spi_order_buffer_to_word(status);
 8005bc4:	6838      	ldr	r0, [r7, #0]
 8005bc6:	f7ff ffb5 	bl	8005b34 <__spi_order_buffer_to_word>
 8005bca:	60f8      	str	r0, [r7, #12]

    htmc2590->DrvStatus.sg = status_word & 0x0001;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	f003 0301 	and.w	r3, r3, #1
 8005bd4:	b2da      	uxtb	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f883 205a 	strb.w	r2, [r3, #90]	@ 0x5a
    htmc2590->DrvStatus.ot = (status_word >> 1) & 0x0001;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f883 205b 	strb.w	r2, [r3, #91]	@ 0x5b
    htmc2590->DrvStatus.otpw = (status_word >> 2) & 0x0001;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	089b      	lsrs	r3, r3, #2
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    htmc2590->DrvStatus.shorta = (status_word >> 3) & 0x0001;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	08db      	lsrs	r3, r3, #3
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    htmc2590->DrvStatus.shortb = (status_word >> 4) & 0x0001;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	091b      	lsrs	r3, r3, #4
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	f003 0301 	and.w	r3, r3, #1
 8005c1c:	b2da      	uxtb	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f883 205e 	strb.w	r2, [r3, #94]	@ 0x5e
    htmc2590->DrvStatus.ola = (status_word >> 5) & 0x0001;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	095b      	lsrs	r3, r3, #5
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	b2da      	uxtb	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f883 205f 	strb.w	r2, [r3, #95]	@ 0x5f
    htmc2590->DrvStatus.olb = (status_word >> 6) & 0x0001;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	099b      	lsrs	r3, r3, #6
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    htmc2590->DrvStatus.stst = (status_word >> 7) & 0x0001;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	09db      	lsrs	r3, r3, #7
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	b2da      	uxtb	r2, r3
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    htmc2590->DrvStatus.unused_bits = (status_word >> 8) & 0x0003;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	0a1b      	lsrs	r3, r3, #8
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f003 0303 	and.w	r3, r3, #3
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
            & 0x03FF;
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c76:	b29a      	uxth	r2, r3
    htmc2590->DrvStatus.mstep_SGCS_status_diagnostic = (status_word >> 10)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}

08005c86 <memset>:
 8005c86:	4603      	mov	r3, r0
 8005c88:	4402      	add	r2, r0
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d100      	bne.n	8005c90 <memset+0xa>
 8005c8e:	4770      	bx	lr
 8005c90:	f803 1b01 	strb.w	r1, [r3], #1
 8005c94:	e7f9      	b.n	8005c8a <memset+0x4>
	...

08005c98 <__libc_init_array>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	4d0c      	ldr	r5, [pc, #48]	@ (8005cd0 <__libc_init_array+0x38>)
 8005c9e:	4c0d      	ldr	r4, [pc, #52]	@ (8005cd4 <__libc_init_array+0x3c>)
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	42a6      	cmp	r6, r4
 8005ca6:	d109      	bne.n	8005cbc <__libc_init_array+0x24>
 8005ca8:	f000 f81a 	bl	8005ce0 <_init>
 8005cac:	2600      	movs	r6, #0
 8005cae:	4d0a      	ldr	r5, [pc, #40]	@ (8005cd8 <__libc_init_array+0x40>)
 8005cb0:	4c0a      	ldr	r4, [pc, #40]	@ (8005cdc <__libc_init_array+0x44>)
 8005cb2:	1b64      	subs	r4, r4, r5
 8005cb4:	10a4      	asrs	r4, r4, #2
 8005cb6:	42a6      	cmp	r6, r4
 8005cb8:	d105      	bne.n	8005cc6 <__libc_init_array+0x2e>
 8005cba:	bd70      	pop	{r4, r5, r6, pc}
 8005cbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc0:	4798      	blx	r3
 8005cc2:	3601      	adds	r6, #1
 8005cc4:	e7ee      	b.n	8005ca4 <__libc_init_array+0xc>
 8005cc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cca:	4798      	blx	r3
 8005ccc:	3601      	adds	r6, #1
 8005cce:	e7f2      	b.n	8005cb6 <__libc_init_array+0x1e>
 8005cd0:	08005f9c 	.word	0x08005f9c
 8005cd4:	08005f9c 	.word	0x08005f9c
 8005cd8:	08005f9c 	.word	0x08005f9c
 8005cdc:	08005fa0 	.word	0x08005fa0

08005ce0 <_init>:
 8005ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce2:	bf00      	nop
 8005ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce6:	bc08      	pop	{r3}
 8005ce8:	469e      	mov	lr, r3
 8005cea:	4770      	bx	lr

08005cec <_fini>:
 8005cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cee:	bf00      	nop
 8005cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cf2:	bc08      	pop	{r3}
 8005cf4:	469e      	mov	lr, r3
 8005cf6:	4770      	bx	lr
