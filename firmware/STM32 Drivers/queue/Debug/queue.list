
queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005880  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  0800598c  0800598c  0000698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c30  08005c30  0000705c  2**0
                  CONTENTS
  4 .ARM          00000000  08005c30  08005c30  0000705c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005c30  08005c30  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c30  08005c30  00006c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c34  08005c34  00006c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005c38  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000384  2000005c  08005c94  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08005c94  000073e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a5  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000333c  00000000  00000000  0001852a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  0001b868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e99  00000000  00000000  0001cb20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a159  00000000  00000000  0001d9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aefc  00000000  00000000  00037b12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093dd7  00000000  00000000  00052a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e67e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe8  00000000  00000000  000e6828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000eb810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005974 	.word	0x08005974

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005974 	.word	0x08005974

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08a      	sub	sp, #40	@ 0x28
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]
 8000160:	611a      	str	r2, [r3, #16]
 8000162:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000164:	1d3b      	adds	r3, r7, #4
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800016e:	4b23      	ldr	r3, [pc, #140]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000170:	4a23      	ldr	r2, [pc, #140]	@ (8000200 <MX_ADC1_Init+0xb4>)
 8000172:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000174:	4b21      	ldr	r3, [pc, #132]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000176:	2200      	movs	r2, #0
 8000178:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800017a:	4b20      	ldr	r3, [pc, #128]	@ (80001fc <MX_ADC1_Init+0xb0>)
 800017c:	2200      	movs	r2, #0
 800017e:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000180:	4b1e      	ldr	r3, [pc, #120]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000182:	2200      	movs	r2, #0
 8000184:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000186:	4b1d      	ldr	r3, [pc, #116]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000188:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800018c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800018e:	4b1b      	ldr	r3, [pc, #108]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000190:	2200      	movs	r2, #0
 8000192:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000194:	4b19      	ldr	r3, [pc, #100]	@ (80001fc <MX_ADC1_Init+0xb0>)
 8000196:	2201      	movs	r2, #1
 8000198:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800019a:	4818      	ldr	r0, [pc, #96]	@ (80001fc <MX_ADC1_Init+0xb0>)
 800019c:	f000 ff08 	bl	8000fb0 <HAL_ADC_Init>
 80001a0:	4603      	mov	r3, r0
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d001      	beq.n	80001aa <MX_ADC1_Init+0x5e>
  {
    Error_Handler();
 80001a6:	f000 fba7 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80001aa:	4b16      	ldr	r3, [pc, #88]	@ (8000204 <MX_ADC1_Init+0xb8>)
 80001ac:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 80001ae:	2300      	movs	r3, #0
 80001b0:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 80001b2:	2300      	movs	r3, #0
 80001b4:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80001b6:	2302      	movs	r3, #2
 80001b8:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 80001ba:	2300      	movs	r3, #0
 80001bc:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80001be:	f107 0310 	add.w	r3, r7, #16
 80001c2:	4619      	mov	r1, r3
 80001c4:	480d      	ldr	r0, [pc, #52]	@ (80001fc <MX_ADC1_Init+0xb0>)
 80001c6:	f001 fb21 	bl	800180c <HAL_ADC_AnalogWDGConfig>
 80001ca:	4603      	mov	r3, r0
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d001      	beq.n	80001d4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80001d0:	f000 fb92 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80001d4:	2302      	movs	r3, #2
 80001d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80001d8:	2301      	movs	r3, #1
 80001da:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001e0:	1d3b      	adds	r3, r7, #4
 80001e2:	4619      	mov	r1, r3
 80001e4:	4805      	ldr	r0, [pc, #20]	@ (80001fc <MX_ADC1_Init+0xb0>)
 80001e6:	f001 f94d 	bl	8001484 <HAL_ADC_ConfigChannel>
 80001ea:	4603      	mov	r3, r0
 80001ec:	2b00      	cmp	r3, #0
 80001ee:	d001      	beq.n	80001f4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80001f0:	f000 fb82 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001f4:	bf00      	nop
 80001f6:	3728      	adds	r7, #40	@ 0x28
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bd80      	pop	{r7, pc}
 80001fc:	20000078 	.word	0x20000078
 8000200:	40012400 	.word	0x40012400
 8000204:	00800200 	.word	0x00800200

08000208 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b08a      	sub	sp, #40	@ 0x28
 800020c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800020e:	f107 0310 	add.w	r3, r7, #16
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
 8000216:	605a      	str	r2, [r3, #4]
 8000218:	609a      	str	r2, [r3, #8]
 800021a:	60da      	str	r2, [r3, #12]
 800021c:	611a      	str	r2, [r3, #16]
 800021e:	615a      	str	r2, [r3, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800022a:	4b23      	ldr	r3, [pc, #140]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800022c:	4a23      	ldr	r2, [pc, #140]	@ (80002bc <MX_ADC2_Init+0xb4>)
 800022e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000230:	4b21      	ldr	r3, [pc, #132]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000232:	2200      	movs	r2, #0
 8000234:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000236:	4b20      	ldr	r3, [pc, #128]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000238:	2200      	movs	r2, #0
 800023a:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800023c:	4b1e      	ldr	r3, [pc, #120]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800023e:	2200      	movs	r2, #0
 8000240:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000242:	4b1d      	ldr	r3, [pc, #116]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000244:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000248:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b1b      	ldr	r3, [pc, #108]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 800024c:	2200      	movs	r2, #0
 800024e:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000250:	4b19      	ldr	r3, [pc, #100]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000252:	2201      	movs	r2, #1
 8000254:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000256:	4818      	ldr	r0, [pc, #96]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000258:	f000 feaa 	bl	8000fb0 <HAL_ADC_Init>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <MX_ADC2_Init+0x5e>
  {
    Error_Handler();
 8000262:	f000 fb49 	bl	80008f8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8000266:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <MX_ADC2_Init+0xb8>)
 8000268:	613b      	str	r3, [r7, #16]
  AnalogWDGConfig.HighThreshold = 0;
 800026a:	2300      	movs	r3, #0
 800026c:	61fb      	str	r3, [r7, #28]
  AnalogWDGConfig.LowThreshold = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.Channel = ADC_CHANNEL_3;
 8000272:	2303      	movs	r3, #3
 8000274:	617b      	str	r3, [r7, #20]
  AnalogWDGConfig.ITMode = DISABLE;
 8000276:	2300      	movs	r3, #0
 8000278:	763b      	strb	r3, [r7, #24]
  if (HAL_ADC_AnalogWDGConfig(&hadc2, &AnalogWDGConfig) != HAL_OK)
 800027a:	f107 0310 	add.w	r3, r7, #16
 800027e:	4619      	mov	r1, r3
 8000280:	480d      	ldr	r0, [pc, #52]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 8000282:	f001 fac3 	bl	800180c <HAL_ADC_AnalogWDGConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800028c:	f000 fb34 	bl	80008f8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000290:	2303      	movs	r3, #3
 8000292:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000294:	2301      	movs	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000298:	2300      	movs	r3, #0
 800029a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	4619      	mov	r1, r3
 80002a0:	4805      	ldr	r0, [pc, #20]	@ (80002b8 <MX_ADC2_Init+0xb0>)
 80002a2:	f001 f8ef 	bl	8001484 <HAL_ADC_ConfigChannel>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC2_Init+0xa8>
  {
    Error_Handler();
 80002ac:	f000 fb24 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80002b0:	bf00      	nop
 80002b2:	3728      	adds	r7, #40	@ 0x28
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	200000a8 	.word	0x200000a8
 80002bc:	40012800 	.word	0x40012800
 80002c0:	00800200 	.word	0x00800200

080002c4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	@ 0x28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002cc:	f107 0318 	add.w	r3, r7, #24
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a30      	ldr	r2, [pc, #192]	@ (80003a0 <HAL_ADC_MspInit+0xdc>)
 80002e0:	4293      	cmp	r3, r2
 80002e2:	d12a      	bne.n	800033a <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80002e4:	4b2f      	ldr	r3, [pc, #188]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	4a2e      	ldr	r2, [pc, #184]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80002ee:	6193      	str	r3, [r2, #24]
 80002f0:	4b2c      	ldr	r3, [pc, #176]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002f8:	617b      	str	r3, [r7, #20]
 80002fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80002fc:	4b29      	ldr	r3, [pc, #164]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	4a28      	ldr	r2, [pc, #160]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000302:	f043 0304 	orr.w	r3, r3, #4
 8000306:	6193      	str	r3, [r2, #24]
 8000308:	4b26      	ldr	r3, [pc, #152]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	f003 0304 	and.w	r3, r3, #4
 8000310:	613b      	str	r3, [r7, #16]
 8000312:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = FSR_1_Pin;
 8000314:	2304      	movs	r3, #4
 8000316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000318:	2303      	movs	r3, #3
 800031a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_1_GPIO_Port, &GPIO_InitStruct);
 800031c:	f107 0318 	add.w	r3, r7, #24
 8000320:	4619      	mov	r1, r3
 8000322:	4821      	ldr	r0, [pc, #132]	@ (80003a8 <HAL_ADC_MspInit+0xe4>)
 8000324:	f002 fb4a 	bl	80029bc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000328:	2200      	movs	r2, #0
 800032a:	2100      	movs	r1, #0
 800032c:	2012      	movs	r0, #18
 800032e:	f002 f8ef 	bl	8002510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000332:	2012      	movs	r0, #18
 8000334:	f002 f918 	bl	8002568 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000338:	e02e      	b.n	8000398 <HAL_ADC_MspInit+0xd4>
  else if(adcHandle->Instance==ADC2)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	4a1b      	ldr	r2, [pc, #108]	@ (80003ac <HAL_ADC_MspInit+0xe8>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d129      	bne.n	8000398 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000344:	4b17      	ldr	r3, [pc, #92]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a16      	ldr	r2, [pc, #88]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800034a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b14      	ldr	r3, [pc, #80]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b11      	ldr	r3, [pc, #68]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a10      	ldr	r2, [pc, #64]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b0e      	ldr	r3, [pc, #56]	@ (80003a4 <HAL_ADC_MspInit+0xe0>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	60bb      	str	r3, [r7, #8]
 8000372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FSR_2_Pin;
 8000374:	2308      	movs	r3, #8
 8000376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000378:	2303      	movs	r3, #3
 800037a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FSR_2_GPIO_Port, &GPIO_InitStruct);
 800037c:	f107 0318 	add.w	r3, r7, #24
 8000380:	4619      	mov	r1, r3
 8000382:	4809      	ldr	r0, [pc, #36]	@ (80003a8 <HAL_ADC_MspInit+0xe4>)
 8000384:	f002 fb1a 	bl	80029bc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000388:	2200      	movs	r2, #0
 800038a:	2100      	movs	r1, #0
 800038c:	2012      	movs	r0, #18
 800038e:	f002 f8bf 	bl	8002510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000392:	2012      	movs	r0, #18
 8000394:	f002 f8e8 	bl	8002568 <HAL_NVIC_EnableIRQ>
}
 8000398:	bf00      	nop
 800039a:	3728      	adds	r7, #40	@ 0x28
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	40012400 	.word	0x40012400
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40012800 	.word	0x40012800

080003b0 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <MX_CAN_Init+0x68>)
 80003b6:	4a19      	ldr	r2, [pc, #100]	@ (800041c <MX_CAN_Init+0x6c>)
 80003b8:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 80003ba:	4b17      	ldr	r3, [pc, #92]	@ (8000418 <MX_CAN_Init+0x68>)
 80003bc:	2202      	movs	r2, #2
 80003be:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <MX_CAN_Init+0x68>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80003c6:	4b14      	ldr	r3, [pc, #80]	@ (8000418 <MX_CAN_Init+0x68>)
 80003c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80003cc:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80003ce:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <MX_CAN_Init+0x68>)
 80003d0:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80003d4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80003d6:	4b10      	ldr	r3, [pc, #64]	@ (8000418 <MX_CAN_Init+0x68>)
 80003d8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80003dc:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003de:	4b0e      	ldr	r3, [pc, #56]	@ (8000418 <MX_CAN_Init+0x68>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000418 <MX_CAN_Init+0x68>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000418 <MX_CAN_Init+0x68>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <MX_CAN_Init+0x68>)
 80003f2:	2201      	movs	r2, #1
 80003f4:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003f6:	4b08      	ldr	r3, [pc, #32]	@ (8000418 <MX_CAN_Init+0x68>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003fc:	4b06      	ldr	r3, [pc, #24]	@ (8000418 <MX_CAN_Init+0x68>)
 80003fe:	2200      	movs	r2, #0
 8000400:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000402:	4805      	ldr	r0, [pc, #20]	@ (8000418 <MX_CAN_Init+0x68>)
 8000404:	f001 fb54 	bl	8001ab0 <HAL_CAN_Init>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 800040e:	f000 fa73 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	200000d8 	.word	0x200000d8
 800041c:	40006400 	.word	0x40006400

08000420 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	2200      	movs	r2, #0
 800042e:	601a      	str	r2, [r3, #0]
 8000430:	605a      	str	r2, [r3, #4]
 8000432:	609a      	str	r2, [r3, #8]
 8000434:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	4a20      	ldr	r2, [pc, #128]	@ (80004bc <HAL_CAN_MspInit+0x9c>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d139      	bne.n	80004b4 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000440:	4b1f      	ldr	r3, [pc, #124]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000442:	69db      	ldr	r3, [r3, #28]
 8000444:	4a1e      	ldr	r2, [pc, #120]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800044a:	61d3      	str	r3, [r2, #28]
 800044c:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800044e:	69db      	ldr	r3, [r3, #28]
 8000450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000458:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a18      	ldr	r2, [pc, #96]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 800045e:	f043 0304 	orr.w	r3, r3, #4
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b16      	ldr	r3, [pc, #88]	@ (80004c0 <HAL_CAN_MspInit+0xa0>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0304 	and.w	r3, r3, #4
 800046c:	60bb      	str	r3, [r7, #8]
 800046e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000474:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000476:	2300      	movs	r3, #0
 8000478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800047e:	f107 0310 	add.w	r3, r7, #16
 8000482:	4619      	mov	r1, r3
 8000484:	480f      	ldr	r0, [pc, #60]	@ (80004c4 <HAL_CAN_MspInit+0xa4>)
 8000486:	f002 fa99 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800048a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800048e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000490:	2302      	movs	r3, #2
 8000492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000494:	2303      	movs	r3, #3
 8000496:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	4619      	mov	r1, r3
 800049e:	4809      	ldr	r0, [pc, #36]	@ (80004c4 <HAL_CAN_MspInit+0xa4>)
 80004a0:	f002 fa8c 	bl	80029bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2102      	movs	r1, #2
 80004a8:	2014      	movs	r0, #20
 80004aa:	f002 f831 	bl	8002510 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80004ae:	2014      	movs	r0, #20
 80004b0:	f002 f85a 	bl	8002568 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80004b4:	bf00      	nop
 80004b6:	3720      	adds	r7, #32
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40006400 	.word	0x40006400
 80004c0:	40021000 	.word	0x40021000
 80004c4:	40010800 	.word	0x40010800

080004c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <MX_DMA_Init+0x38>)
 80004d0:	695b      	ldr	r3, [r3, #20]
 80004d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000500 <MX_DMA_Init+0x38>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6153      	str	r3, [r2, #20]
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <MX_DMA_Init+0x38>)
 80004dc:	695b      	ldr	r3, [r3, #20]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2011      	movs	r0, #17
 80004ec:	f002 f810 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80004f0:	2011      	movs	r0, #17
 80004f2:	f002 f839 	bl	8002568 <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40021000 	.word	0x40021000

08000504 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b088      	sub	sp, #32
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0310 	add.w	r3, r7, #16
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000518:	4b53      	ldr	r3, [pc, #332]	@ (8000668 <MX_GPIO_Init+0x164>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a52      	ldr	r2, [pc, #328]	@ (8000668 <MX_GPIO_Init+0x164>)
 800051e:	f043 0310 	orr.w	r3, r3, #16
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b50      	ldr	r3, [pc, #320]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f003 0310 	and.w	r3, r3, #16
 800052c:	60fb      	str	r3, [r7, #12]
 800052e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000530:	4b4d      	ldr	r3, [pc, #308]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a4c      	ldr	r2, [pc, #304]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000536:	f043 0320 	orr.w	r3, r3, #32
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b4a      	ldr	r3, [pc, #296]	@ (8000668 <MX_GPIO_Init+0x164>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f003 0320 	and.w	r3, r3, #32
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b47      	ldr	r3, [pc, #284]	@ (8000668 <MX_GPIO_Init+0x164>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a46      	ldr	r2, [pc, #280]	@ (8000668 <MX_GPIO_Init+0x164>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b44      	ldr	r3, [pc, #272]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000560:	4b41      	ldr	r3, [pc, #260]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000562:	699b      	ldr	r3, [r3, #24]
 8000564:	4a40      	ldr	r2, [pc, #256]	@ (8000668 <MX_GPIO_Init+0x164>)
 8000566:	f043 0308 	orr.w	r3, r3, #8
 800056a:	6193      	str	r3, [r2, #24]
 800056c:	4b3e      	ldr	r3, [pc, #248]	@ (8000668 <MX_GPIO_Init+0x164>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	f003 0308 	and.w	r3, r3, #8
 8000574:	603b      	str	r3, [r7, #0]
 8000576:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f248 4110 	movw	r1, #33808	@ 0x8410
 800057e:	483b      	ldr	r0, [pc, #236]	@ (800066c <MX_GPIO_Init+0x168>)
 8000580:	f002 fc8a 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	f241 0114 	movw	r1, #4116	@ 0x1014
 800058a:	4839      	ldr	r0, [pc, #228]	@ (8000670 <MX_GPIO_Init+0x16c>)
 800058c:	f002 fc84 	bl	8002e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000590:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000594:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000596:	2303      	movs	r3, #3
 8000598:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800059a:	f107 0310 	add.w	r3, r7, #16
 800059e:	4619      	mov	r1, r3
 80005a0:	4834      	ldr	r0, [pc, #208]	@ (8000674 <MX_GPIO_Init+0x170>)
 80005a2:	f002 fa0b 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LS_1_Pin|LS_2_Pin;
 80005a6:	2303      	movs	r3, #3
 80005a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005aa:	4b33      	ldr	r3, [pc, #204]	@ (8000678 <MX_GPIO_Init+0x174>)
 80005ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ae:	2300      	movs	r3, #0
 80005b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b2:	f107 0310 	add.w	r3, r7, #16
 80005b6:	4619      	mov	r1, r3
 80005b8:	482c      	ldr	r0, [pc, #176]	@ (800066c <MX_GPIO_Init+0x168>)
 80005ba:	f002 f9ff 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DRIVER_CS_Pin|DRIVER_ENN_Pin|DRIVER_ST_ALONE_Pin;
 80005be:	f248 4310 	movw	r3, #33808	@ 0x8410
 80005c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c4:	2301      	movs	r3, #1
 80005c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c8:	2300      	movs	r3, #0
 80005ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005cc:	2302      	movs	r3, #2
 80005ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d0:	f107 0310 	add.w	r3, r7, #16
 80005d4:	4619      	mov	r1, r3
 80005d6:	4825      	ldr	r0, [pc, #148]	@ (800066c <MX_GPIO_Init+0x168>)
 80005d8:	f002 f9f0 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB5 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80005dc:	f640 7323 	movw	r3, #3875	@ 0xf23
 80005e0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005e2:	2303      	movs	r3, #3
 80005e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e6:	f107 0310 	add.w	r3, r7, #16
 80005ea:	4619      	mov	r1, r3
 80005ec:	4820      	ldr	r0, [pc, #128]	@ (8000670 <MX_GPIO_Init+0x16c>)
 80005ee:	f002 f9e5 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|ENCODER_CS_Pin|DRIVER_DIR_Pin;
 80005f2:	f241 0314 	movw	r3, #4116	@ 0x1014
 80005f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2302      	movs	r3, #2
 8000602:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4819      	ldr	r0, [pc, #100]	@ (8000670 <MX_GPIO_Init+0x16c>)
 800060c:	f002 f9d6 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000610:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000616:	2303      	movs	r3, #3
 8000618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0310 	add.w	r3, r7, #16
 800061e:	4619      	mov	r1, r3
 8000620:	4812      	ldr	r0, [pc, #72]	@ (800066c <MX_GPIO_Init+0x168>)
 8000622:	f002 f9cb 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DRIVER_SG_TEST_Pin;
 8000626:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800062a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DRIVER_SG_TEST_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	4619      	mov	r1, r3
 800063a:	480c      	ldr	r0, [pc, #48]	@ (800066c <MX_GPIO_Init+0x168>)
 800063c:	f002 f9be 	bl	80029bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2101      	movs	r1, #1
 8000644:	2006      	movs	r0, #6
 8000646:	f001 ff63 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064a:	2006      	movs	r0, #6
 800064c:	f001 ff8c 	bl	8002568 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2101      	movs	r1, #1
 8000654:	2007      	movs	r0, #7
 8000656:	f001 ff5b 	bl	8002510 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800065a:	2007      	movs	r0, #7
 800065c:	f001 ff84 	bl	8002568 <HAL_NVIC_EnableIRQ>

}
 8000660:	bf00      	nop
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000
 800066c:	40010800 	.word	0x40010800
 8000670:	40010c00 	.word	0x40010c00
 8000674:	40011000 	.word	0x40011000
 8000678:	10310000 	.word	0x10310000

0800067c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000682:	4a13      	ldr	r2, [pc, #76]	@ (80006d0 <MX_I2C1_Init+0x54>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000688:	4a12      	ldr	r2, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x58>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <MX_I2C1_Init+0x50>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <MX_I2C1_Init+0x50>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <MX_I2C1_Init+0x50>)
 800069a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	@ (80006cc <MX_I2C1_Init+0x50>)
 80006ba:	f002 fc3b 	bl	8002f34 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f918 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000100 	.word	0x20000100
 80006d0:	40005400 	.word	0x40005400
 80006d4:	000186a0 	.word	0x000186a0

080006d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e0:	f107 0310 	add.w	r3, r7, #16
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a15      	ldr	r2, [pc, #84]	@ (8000748 <HAL_I2C_MspInit+0x70>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d123      	bne.n	8000740 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f8:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_I2C_MspInit+0x74>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a13      	ldr	r2, [pc, #76]	@ (800074c <HAL_I2C_MspInit+0x74>)
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b11      	ldr	r3, [pc, #68]	@ (800074c <HAL_I2C_MspInit+0x74>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0308 	and.w	r3, r3, #8
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000710:	23c0      	movs	r3, #192	@ 0xc0
 8000712:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000714:	2312      	movs	r3, #18
 8000716:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000718:	2303      	movs	r3, #3
 800071a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	f107 0310 	add.w	r3, r7, #16
 8000720:	4619      	mov	r1, r3
 8000722:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_I2C_MspInit+0x78>)
 8000724:	f002 f94a 	bl	80029bc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0x74>)
 800072a:	69db      	ldr	r3, [r3, #28]
 800072c:	4a07      	ldr	r2, [pc, #28]	@ (800074c <HAL_I2C_MspInit+0x74>)
 800072e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000732:	61d3      	str	r3, [r2, #28]
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_I2C_MspInit+0x74>)
 8000736:	69db      	ldr	r3, [r3, #28]
 8000738:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073c:	60bb      	str	r3, [r7, #8]
 800073e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000740:	bf00      	nop
 8000742:	3720      	adds	r7, #32
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	40010c00 	.word	0x40010c00

08000754 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 800075a:	f000 fbc7 	bl	8000eec <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 800075e:	f000 f86f 	bl	8000840 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000762:	f7ff fecf 	bl	8000504 <MX_GPIO_Init>
    MX_DMA_Init();
 8000766:	f7ff feaf 	bl	80004c8 <MX_DMA_Init>
    MX_CAN_Init();
 800076a:	f7ff fe21 	bl	80003b0 <MX_CAN_Init>
    MX_I2C1_Init();
 800076e:	f7ff ff85 	bl	800067c <MX_I2C1_Init>
    MX_SPI1_Init();
 8000772:	f000 f8d1 	bl	8000918 <MX_SPI1_Init>
    MX_SPI2_Init();
 8000776:	f000 f905 	bl	8000984 <MX_SPI2_Init>
    MX_ADC1_Init();
 800077a:	f7ff fce7 	bl	800014c <MX_ADC1_Init>
    MX_ADC2_Init();
 800077e:	f7ff fd43 	bl	8000208 <MX_ADC2_Init>
    MX_TIM2_Init();
 8000782:	f000 fa85 	bl	8000c90 <MX_TIM2_Init>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    Queue_TypeDef queue_1 = *create_queue();
 8000786:	f004 ff05 	bl	8005594 <create_queue>
 800078a:	4602      	mov	r2, r0
 800078c:	463b      	mov	r3, r7
 800078e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000792:	e883 0003 	stmia.w	r3, {r0, r1}

    for (uint32_t i = 0; i < 1000000000; i++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e03e      	b.n	800081a <main+0xc6>
    {
        uint32_t *dummy1 = malloc(sizeof(uint32_t));
 800079c:	2004      	movs	r0, #4
 800079e:	f004 ff9f 	bl	80056e0 <malloc>
 80007a2:	4603      	mov	r3, r0
 80007a4:	613b      	str	r3, [r7, #16]
        if (dummy1 == NULL)
 80007a6:	693b      	ldr	r3, [r7, #16]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d03b      	beq.n	8000824 <main+0xd0>
        {
            break;
        }
        *dummy1 = (uint32_t) i;
 80007ac:	693b      	ldr	r3, [r7, #16]
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	601a      	str	r2, [r3, #0]

        uint32_t *dummy2 = malloc(sizeof(uint32_t));
 80007b2:	2004      	movs	r0, #4
 80007b4:	f004 ff94 	bl	80056e0 <malloc>
 80007b8:	4603      	mov	r3, r0
 80007ba:	60fb      	str	r3, [r7, #12]
        if (dummy2 == NULL)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d032      	beq.n	8000828 <main+0xd4>
        {
            break;
        }
        *dummy2 = (uint32_t) i;
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	601a      	str	r2, [r3, #0]

        uint32_t *dummy3 = malloc(sizeof(uint32_t));
 80007c8:	2004      	movs	r0, #4
 80007ca:	f004 ff89 	bl	80056e0 <malloc>
 80007ce:	4603      	mov	r3, r0
 80007d0:	60bb      	str	r3, [r7, #8]
        if (dummy3 == NULL)
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d029      	beq.n	800082c <main+0xd8>
        {
            break;
        }
        *dummy3 = (uint32_t) i;
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	697a      	ldr	r2, [r7, #20]
 80007dc:	601a      	str	r2, [r3, #0]

        queue_enqueue(&queue_1, dummy1);
 80007de:	463b      	mov	r3, r7
 80007e0:	6939      	ldr	r1, [r7, #16]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 ff15 	bl	8005612 <queue_enqueue>
        queue_enqueue(&queue_1, dummy2);
 80007e8:	463b      	mov	r3, r7
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 ff10 	bl	8005612 <queue_enqueue>
        queue_enqueue(&queue_1, dummy3);
 80007f2:	463b      	mov	r3, r7
 80007f4:	68b9      	ldr	r1, [r7, #8]
 80007f6:	4618      	mov	r0, r3
 80007f8:	f004 ff0b 	bl	8005612 <queue_enqueue>

        queue_dequeue(&queue_1);
 80007fc:	463b      	mov	r3, r7
 80007fe:	4618      	mov	r0, r3
 8000800:	f004 ff4a 	bl	8005698 <queue_dequeue>
        queue_dequeue(&queue_1);
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f004 ff46 	bl	8005698 <queue_dequeue>
        queue_dequeue(&queue_1);
 800080c:	463b      	mov	r3, r7
 800080e:	4618      	mov	r0, r3
 8000810:	f004 ff42 	bl	8005698 <queue_dequeue>
    for (uint32_t i = 0; i < 1000000000; i++)
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	3301      	adds	r3, #1
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4a07      	ldr	r2, [pc, #28]	@ (800083c <main+0xe8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d9bc      	bls.n	800079c <main+0x48>
 8000822:	e004      	b.n	800082e <main+0xda>
            break;
 8000824:	bf00      	nop
 8000826:	e002      	b.n	800082e <main+0xda>
            break;
 8000828:	bf00      	nop
 800082a:	e000      	b.n	800082e <main+0xda>
            break;
 800082c:	bf00      	nop
    }

    destroy_queue(&queue_1);
 800082e:	463b      	mov	r3, r7
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fec7 	bl	80055c4 <destroy_queue>

    while (1)
 8000836:	bf00      	nop
 8000838:	e7fd      	b.n	8000836 <main+0xe2>
 800083a:	bf00      	nop
 800083c:	3b9ac9ff 	.word	0x3b9ac9ff

08000840 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	@ 0x50
 8000844:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct =
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2228      	movs	r2, #40	@ 0x28
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 f804 	bl	800585c <memset>
    { 0 };
    RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8000854:	f107 0314 	add.w	r3, r7, #20
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
    { 0 };
    RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
    { 0 };

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000870:	2301      	movs	r3, #1
 8000872:	62bb      	str	r3, [r7, #40]	@ 0x28
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000874:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000878:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 800087a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800087e:	633b      	str	r3, [r7, #48]	@ 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000880:	2301      	movs	r3, #1
 8000882:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000884:	2302      	movs	r3, #2
 8000886:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800088c:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800088e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000892:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000894:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000898:	4618      	mov	r0, r3
 800089a:	f002 fd0d 	bl	80032b8 <HAL_RCC_OscConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x68>
    {
        Error_Handler();
 80008a4:	f000 f828 	bl	80008f8 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	617b      	str	r3, [r7, #20]
            | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008b8:	623b      	str	r3, [r7, #32]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2102      	movs	r1, #2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f865 	bl	8003994 <HAL_RCC_ClockConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
    {
        Error_Handler();
 80008d0:	f000 f812 	bl	80008f8 <Error_Handler>
    }
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008d4:	2302      	movs	r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
    PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80008dc:	60fb      	str	r3, [r7, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	4618      	mov	r0, r3
 80008e2:	f003 fa79 	bl	8003dd8 <HAL_RCCEx_PeriphCLKConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb0>
    {
        Error_Handler();
 80008ec:	f000 f804 	bl	80008f8 <Error_Handler>
    }
}
 80008f0:	bf00      	nop
 80008f2:	3750      	adds	r7, #80	@ 0x50
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}

080008f8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <assert_failed>:
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
 800090c:	6039      	str	r1, [r7, #0]
    /* USER CODE BEGIN 6 */
    /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
    /* USER CODE END 6 */
}
 800090e:	bf00      	nop
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800091c:	4b17      	ldr	r3, [pc, #92]	@ (800097c <MX_SPI1_Init+0x64>)
 800091e:	4a18      	ldr	r2, [pc, #96]	@ (8000980 <MX_SPI1_Init+0x68>)
 8000920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000922:	4b16      	ldr	r3, [pc, #88]	@ (800097c <MX_SPI1_Init+0x64>)
 8000924:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092a:	4b14      	ldr	r3, [pc, #80]	@ (800097c <MX_SPI1_Init+0x64>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000930:	4b12      	ldr	r3, [pc, #72]	@ (800097c <MX_SPI1_Init+0x64>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000936:	4b11      	ldr	r3, [pc, #68]	@ (800097c <MX_SPI1_Init+0x64>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	@ (800097c <MX_SPI1_Init+0x64>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000942:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <MX_SPI1_Init+0x64>)
 8000944:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000948:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800094a:	4b0c      	ldr	r3, [pc, #48]	@ (800097c <MX_SPI1_Init+0x64>)
 800094c:	2220      	movs	r2, #32
 800094e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000950:	4b0a      	ldr	r3, [pc, #40]	@ (800097c <MX_SPI1_Init+0x64>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000956:	4b09      	ldr	r3, [pc, #36]	@ (800097c <MX_SPI1_Init+0x64>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800095c:	4b07      	ldr	r3, [pc, #28]	@ (800097c <MX_SPI1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000962:	4b06      	ldr	r3, [pc, #24]	@ (800097c <MX_SPI1_Init+0x64>)
 8000964:	220a      	movs	r2, #10
 8000966:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000968:	4804      	ldr	r0, [pc, #16]	@ (800097c <MX_SPI1_Init+0x64>)
 800096a:	f003 fb3f 	bl	8003fec <HAL_SPI_Init>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000974:	f7ff ffc0 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000154 	.word	0x20000154
 8000980:	40013000 	.word	0x40013000

08000984 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000988:	4b17      	ldr	r3, [pc, #92]	@ (80009e8 <MX_SPI2_Init+0x64>)
 800098a:	4a18      	ldr	r2, [pc, #96]	@ (80009ec <MX_SPI2_Init+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800098e:	4b16      	ldr	r3, [pc, #88]	@ (80009e8 <MX_SPI2_Init+0x64>)
 8000990:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000994:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000996:	4b14      	ldr	r3, [pc, #80]	@ (80009e8 <MX_SPI2_Init+0x64>)
 8000998:	2200      	movs	r2, #0
 800099a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <MX_SPI2_Init+0x64>)
 800099e:	2200      	movs	r2, #0
 80009a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009a2:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80009b6:	4b0c      	ldr	r3, [pc, #48]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009b8:	2220      	movs	r2, #32
 80009ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009be:	2200      	movs	r2, #0
 80009c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c8:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009d0:	220a      	movs	r2, #10
 80009d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009d4:	4804      	ldr	r0, [pc, #16]	@ (80009e8 <MX_SPI2_Init+0x64>)
 80009d6:	f003 fb09 	bl	8003fec <HAL_SPI_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80009e0:	f7ff ff8a 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200001ac 	.word	0x200001ac
 80009ec:	40003800 	.word	0x40003800

080009f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	@ 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f8:	f107 0318 	add.w	r3, r7, #24
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4a37      	ldr	r2, [pc, #220]	@ (8000ae8 <HAL_SPI_MspInit+0xf8>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d130      	bne.n	8000a72 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a10:	4b36      	ldr	r3, [pc, #216]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a35      	ldr	r2, [pc, #212]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a16:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b33      	ldr	r3, [pc, #204]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b30      	ldr	r3, [pc, #192]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a2f      	ldr	r2, [pc, #188]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b2d      	ldr	r3, [pc, #180]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = DRIVER_SCK_Pin|DRIVER_MOSI_Pin;
 8000a40:	23a0      	movs	r3, #160	@ 0xa0
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	f107 0318 	add.w	r3, r7, #24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <HAL_SPI_MspInit+0x100>)
 8000a54:	f001 ffb2 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRIVER_MISO_Pin;
 8000a58:	2340      	movs	r3, #64	@ 0x40
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(DRIVER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4821      	ldr	r0, [pc, #132]	@ (8000af0 <HAL_SPI_MspInit+0x100>)
 8000a6c:	f001 ffa6 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a70:	e036      	b.n	8000ae0 <HAL_SPI_MspInit+0xf0>
  else if(spiHandle->Instance==SPI2)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <HAL_SPI_MspInit+0x104>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d131      	bne.n	8000ae0 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a7e:	69db      	ldr	r3, [r3, #28]
 8000a80:	4a1a      	ldr	r2, [pc, #104]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a86:	61d3      	str	r3, [r2, #28]
 8000a88:	4b18      	ldr	r3, [pc, #96]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a14      	ldr	r2, [pc, #80]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000a9a:	f043 0308 	orr.w	r3, r3, #8
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_SPI_MspInit+0xfc>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0308 	and.w	r3, r3, #8
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_SCK_Pin|ENCODER_MOSI_Pin;
 8000aac:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0318 	add.w	r3, r7, #24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <HAL_SPI_MspInit+0x108>)
 8000ac2:	f001 ff7b 	bl	80029bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_MISO_Pin;
 8000ac6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(ENCODER_MISO_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	f107 0318 	add.w	r3, r7, #24
 8000ad8:	4619      	mov	r1, r3
 8000ada:	4807      	ldr	r0, [pc, #28]	@ (8000af8 <HAL_SPI_MspInit+0x108>)
 8000adc:	f001 ff6e 	bl	80029bc <HAL_GPIO_Init>
}
 8000ae0:	bf00      	nop
 8000ae2:	3728      	adds	r7, #40	@ 0x28
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	40013000 	.word	0x40013000
 8000aec:	40021000 	.word	0x40021000
 8000af0:	40010800 	.word	0x40010800
 8000af4:	40003800 	.word	0x40003800
 8000af8:	40010c00 	.word	0x40010c00

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b02:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4a14      	ldr	r2, [pc, #80]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6193      	str	r3, [r2, #24]
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b1c:	69db      	ldr	r3, [r3, #28]
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	61d3      	str	r3, [r2, #28]
 8000b26:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <HAL_MspInit+0x5c>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_MspInit+0x60>)
 8000b34:	685b      	ldr	r3, [r3, #4]
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	4a04      	ldr	r2, [pc, #16]	@ (8000b5c <HAL_MspInit+0x60>)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	3714      	adds	r7, #20
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40021000 	.word	0x40021000
 8000b5c:	40010000 	.word	0x40010000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b64:	bf00      	nop
 8000b66:	e7fd      	b.n	8000b64 <NMI_Handler+0x4>

08000b68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6c:	bf00      	nop
 8000b6e:	e7fd      	b.n	8000b6c <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <MemManage_Handler+0x4>

08000b78 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7c:	bf00      	nop
 8000b7e:	e7fd      	b.n	8000b7c <BusFault_Handler+0x4>

08000b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <UsageFault_Handler+0x4>

08000b88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr

08000ba0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 f9e2 	bl	8000f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_1_Pin);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f002 f997 	bl	8002ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LS_2_Pin);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f002 f990 	bl	8002ef0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch2_ch4);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <DMA1_Channel7_IRQHandler+0x10>)
 8000bda:	f001 fde9 	bl	80027b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000250 	.word	0x20000250

08000be8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000bec:	4803      	ldr	r0, [pc, #12]	@ (8000bfc <ADC1_2_IRQHandler+0x14>)
 8000bee:	f000 fb49 	bl	8001284 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8000bf2:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <ADC1_2_IRQHandler+0x18>)
 8000bf4:	f000 fb46 	bl	8001284 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	20000078 	.word	0x20000078
 8000c00:	200000a8 	.word	0x200000a8

08000c04 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c08:	4802      	ldr	r0, [pc, #8]	@ (8000c14 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c0a:	f001 f969 	bl	8001ee0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	200000d8 	.word	0x200000d8

08000c18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b086      	sub	sp, #24
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c20:	4a14      	ldr	r2, [pc, #80]	@ (8000c74 <_sbrk+0x5c>)
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <_sbrk+0x60>)
 8000c24:	1ad3      	subs	r3, r2, r3
 8000c26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c2c:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <_sbrk+0x64>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d102      	bne.n	8000c3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c34:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <_sbrk+0x64>)
 8000c36:	4a12      	ldr	r2, [pc, #72]	@ (8000c80 <_sbrk+0x68>)
 8000c38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3a:	4b10      	ldr	r3, [pc, #64]	@ (8000c7c <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d207      	bcs.n	8000c58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c48:	f004 fe20 	bl	800588c <__errno>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	220c      	movs	r2, #12
 8000c50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c52:	f04f 33ff 	mov.w	r3, #4294967295
 8000c56:	e009      	b.n	8000c6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <_sbrk+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5e:	4b07      	ldr	r3, [pc, #28]	@ (8000c7c <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	4a05      	ldr	r2, [pc, #20]	@ (8000c7c <_sbrk+0x64>)
 8000c68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3718      	adds	r7, #24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20005000 	.word	0x20005000
 8000c78:	00000400 	.word	0x00000400
 8000c7c:	20000204 	.word	0x20000204
 8000c80:	200003e0 	.word	0x200003e0

08000c84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr

08000c90 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08e      	sub	sp, #56	@ 0x38
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]
 8000c9e:	605a      	str	r2, [r3, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
 8000ca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca4:	f107 0320 	add.w	r3, r7, #32
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	1d3b      	adds	r3, r7, #4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
 8000cbc:	615a      	str	r2, [r3, #20]
 8000cbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cc0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cc2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 720-1;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cca:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000cce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b29      	ldr	r3, [pc, #164]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000cd6:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cd8:	2263      	movs	r2, #99	@ 0x63
 8000cda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce2:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ce8:	4823      	ldr	r0, [pc, #140]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000cea:	f003 fafd 	bl	80042e8 <HAL_TIM_Base_Init>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000cf4:	f7ff fe00 	bl	80008f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cfe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d02:	4619      	mov	r1, r3
 8000d04:	481c      	ldr	r0, [pc, #112]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000d06:	f003 fddb 	bl	80048c0 <HAL_TIM_ConfigClockSource>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d10:	f7ff fdf2 	bl	80008f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d14:	4818      	ldr	r0, [pc, #96]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000d16:	f003 fb9f 	bl	8004458 <HAL_TIM_PWM_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d20:	f7ff fdea 	bl	80008f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4619      	mov	r1, r3
 8000d32:	4811      	ldr	r0, [pc, #68]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000d34:	f004 fb84 	bl	8005440 <HAL_TIMEx_MasterConfigSynchronization>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d3e:	f7ff fddb 	bl	80008f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d42:	2370      	movs	r3, #112	@ 0x70
 8000d44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d52:	1d3b      	adds	r3, r7, #4
 8000d54:	2204      	movs	r2, #4
 8000d56:	4619      	mov	r1, r3
 8000d58:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000d5a:	f003 fc3f 	bl	80045dc <HAL_TIM_PWM_ConfigChannel>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d64:	f7ff fdc8 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d68:	4803      	ldr	r0, [pc, #12]	@ (8000d78 <MX_TIM2_Init+0xe8>)
 8000d6a:	f000 f855 	bl	8000e18 <HAL_TIM_MspPostInit>

}
 8000d6e:	bf00      	nop
 8000d70:	3738      	adds	r7, #56	@ 0x38
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000208 	.word	0x20000208

08000d7c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8c:	d139      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e0c <HAL_TIM_Base_MspInit+0x90>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	@ (8000e0c <HAL_TIM_Base_MspInit+0x90>)
 8000d94:	f043 0301 	orr.w	r3, r3, #1
 8000d98:	61d3      	str	r3, [r2, #28]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <HAL_TIM_Base_MspInit+0x90>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH2_CH4 Init */
    hdma_tim2_ch2_ch4.Instance = DMA1_Channel7;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000da8:	4a1a      	ldr	r2, [pc, #104]	@ (8000e14 <HAL_TIM_Base_MspInit+0x98>)
 8000daa:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dba:	2280      	movs	r2, #128	@ 0x80
 8000dbc:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dc0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc4:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dc6:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dc8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dcc:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch2_ch4.Init.Mode = DMA_NORMAL;
 8000dce:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch2_ch4) != HAL_OK)
 8000dda:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000ddc:	f001 fbe8 	bl	80025b0 <HAL_DMA_Init>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000de6:	f7ff fd87 	bl	80008f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim2_ch2_ch4);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dee:	629a      	str	r2, [r3, #40]	@ 0x28
 8000df0:	4a07      	ldr	r2, [pc, #28]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch2_ch4);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dfa:	631a      	str	r2, [r3, #48]	@ 0x30
 8000dfc:	4a04      	ldr	r2, [pc, #16]	@ (8000e10 <HAL_TIM_Base_MspInit+0x94>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	20000250 	.word	0x20000250
 8000e14:	40020080 	.word	0x40020080

08000e18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM2)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e36:	d129      	bne.n	8000e8c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <HAL_TIM_MspPostInit+0x7c>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a15      	ldr	r2, [pc, #84]	@ (8000e94 <HAL_TIM_MspPostInit+0x7c>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b13      	ldr	r3, [pc, #76]	@ (8000e94 <HAL_TIM_MspPostInit+0x7c>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = DRIVER_STEP_PWM_Pin;
 8000e50:	2308      	movs	r3, #8
 8000e52:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(DRIVER_STEP_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	4619      	mov	r1, r3
 8000e62:	480d      	ldr	r0, [pc, #52]	@ (8000e98 <HAL_TIM_MspPostInit+0x80>)
 8000e64:	f001 fdaa 	bl	80029bc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <HAL_TIM_MspPostInit+0x84>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000e7c:	61fb      	str	r3, [r7, #28]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	4a05      	ldr	r2, [pc, #20]	@ (8000e9c <HAL_TIM_MspPostInit+0x84>)
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010c00 	.word	0x40010c00
 8000e9c:	40010000 	.word	0x40010000

08000ea0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ea0:	f7ff fef0 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480b      	ldr	r0, [pc, #44]	@ (8000ed4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ea6:	490c      	ldr	r1, [pc, #48]	@ (8000ed8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8000edc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a09      	ldr	r2, [pc, #36]	@ (8000ee0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ebc:	4c09      	ldr	r4, [pc, #36]	@ (8000ee4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eca:	f004 fce5 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff fc41 	bl	8000754 <main>
  bx lr
 8000ed2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000edc:	08005c38 	.word	0x08005c38
  ldr r2, =_sbss
 8000ee0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000ee4:	200003e0 	.word	0x200003e0

08000ee8 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <CAN1_RX1_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ef0:	4b08      	ldr	r3, [pc, #32]	@ (8000f14 <HAL_Init+0x28>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a07      	ldr	r2, [pc, #28]	@ (8000f14 <HAL_Init+0x28>)
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efc:	2003      	movs	r0, #3
 8000efe:	f001 fae7 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f808 	bl	8000f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f08:	f7ff fdf8 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40022000 	.word	0x40022000

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f20:	4b12      	ldr	r3, [pc, #72]	@ (8000f6c <HAL_InitTick+0x54>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_InitTick+0x58>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fb2e 	bl	8002598 <HAL_SYSTICK_Config>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00e      	b.n	8000f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2b0f      	cmp	r3, #15
 8000f4a:	d80a      	bhi.n	8000f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	6879      	ldr	r1, [r7, #4]
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295
 8000f54:	f001 fadc 	bl	8002510 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f58:	4a06      	ldr	r2, [pc, #24]	@ (8000f74 <HAL_InitTick+0x5c>)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	e000      	b.n	8000f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000008 	.word	0x20000008
 8000f74:	20000004 	.word	0x20000004

08000f78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	@ (8000f94 <HAL_IncTick+0x1c>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a03      	ldr	r2, [pc, #12]	@ (8000f98 <HAL_IncTick+0x20>)
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000294 	.word	0x20000294

08000f9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000fa0:	4b02      	ldr	r3, [pc, #8]	@ (8000fac <HAL_GetTick+0x10>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	20000294 	.word	0x20000294

08000fb0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e154      	b.n	800127c <HAL_ADC_Init+0x2cc>
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a97      	ldr	r2, [pc, #604]	@ (8001234 <HAL_ADC_Init+0x284>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d009      	beq.n	8000ff0 <HAL_ADC_Init+0x40>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a95      	ldr	r2, [pc, #596]	@ (8001238 <HAL_ADC_Init+0x288>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d004      	beq.n	8000ff0 <HAL_ADC_Init+0x40>
 8000fe6:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8000fea:	4894      	ldr	r0, [pc, #592]	@ (800123c <HAL_ADC_Init+0x28c>)
 8000fec:	f7ff fc8a 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d009      	beq.n	800100c <HAL_ADC_Init+0x5c>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001000:	d004      	beq.n	800100c <HAL_ADC_Init+0x5c>
 8001002:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001006:	488d      	ldr	r0, [pc, #564]	@ (800123c <HAL_ADC_Init+0x28c>)
 8001008:	f7ff fc7c 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d009      	beq.n	8001028 <HAL_ADC_Init+0x78>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
 8001018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800101c:	d004      	beq.n	8001028 <HAL_ADC_Init+0x78>
 800101e:	f240 11ab 	movw	r1, #427	@ 0x1ab
 8001022:	4886      	ldr	r0, [pc, #536]	@ (800123c <HAL_ADC_Init+0x28c>)
 8001024:	f7ff fc6e 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7b1b      	ldrb	r3, [r3, #12]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d008      	beq.n	8001042 <HAL_ADC_Init+0x92>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7b1b      	ldrb	r3, [r3, #12]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d004      	beq.n	8001042 <HAL_ADC_Init+0x92>
 8001038:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 800103c:	487f      	ldr	r0, [pc, #508]	@ (800123c <HAL_ADC_Init+0x28c>)
 800103e:	f7ff fc61 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d022      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001052:	d01d      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69db      	ldr	r3, [r3, #28]
 8001058:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800105c:	d018      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69db      	ldr	r3, [r3, #28]
 8001062:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001066:	d013      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69db      	ldr	r3, [r3, #28]
 800106c:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001070:	d00e      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800107a:	d009      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001084:	d004      	beq.n	8001090 <HAL_ADC_Init+0xe0>
 8001086:	f240 11ad 	movw	r1, #429	@ 0x1ad
 800108a:	486c      	ldr	r0, [pc, #432]	@ (800123c <HAL_ADC_Init+0x28c>)
 800108c:	f7ff fc3a 	bl	8000904 <assert_failed>
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	689b      	ldr	r3, [r3, #8]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d02a      	beq.n	80010ee <HAL_ADC_Init+0x13e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	691b      	ldr	r3, [r3, #16]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_ADC_Init+0xf8>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	2b10      	cmp	r3, #16
 80010a6:	d904      	bls.n	80010b2 <HAL_ADC_Init+0x102>
 80010a8:	f240 11b1 	movw	r1, #433	@ 0x1b1
 80010ac:	4863      	ldr	r0, [pc, #396]	@ (800123c <HAL_ADC_Init+0x28c>)
 80010ae:	f7ff fc29 	bl	8000904 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7d1b      	ldrb	r3, [r3, #20]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d008      	beq.n	80010cc <HAL_ADC_Init+0x11c>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7d1b      	ldrb	r3, [r3, #20]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d004      	beq.n	80010cc <HAL_ADC_Init+0x11c>
 80010c2:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80010c6:	485d      	ldr	r0, [pc, #372]	@ (800123c <HAL_ADC_Init+0x28c>)
 80010c8:	f7ff fc1c 	bl	8000904 <assert_failed>
    if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7d1b      	ldrb	r3, [r3, #20]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d00c      	beq.n	80010ee <HAL_ADC_Init+0x13e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_ADC_Init+0x134>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d904      	bls.n	80010ee <HAL_ADC_Init+0x13e>
 80010e4:	f240 11b5 	movw	r1, #437	@ 0x1b5
 80010e8:	4854      	ldr	r0, [pc, #336]	@ (800123c <HAL_ADC_Init+0x28c>)
 80010ea:	f7ff fc0b 	bl	8000904 <assert_failed>
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d109      	bne.n	800110a <HAL_ADC_Init+0x15a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2200      	movs	r2, #0
 8001100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f8dd 	bl	80002c4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 fc86 	bl	8001a1c <ADC_ConversionStop_Disable>
 8001110:	4603      	mov	r3, r0
 8001112:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001118:	f003 0310 	and.w	r3, r3, #16
 800111c:	2b00      	cmp	r3, #0
 800111e:	f040 80a4 	bne.w	800126a <HAL_ADC_Init+0x2ba>
 8001122:	7dfb      	ldrb	r3, [r7, #23]
 8001124:	2b00      	cmp	r3, #0
 8001126:	f040 80a0 	bne.w	800126a <HAL_ADC_Init+0x2ba>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001132:	f023 0302 	bic.w	r3, r3, #2
 8001136:	f043 0202 	orr.w	r2, r3, #2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001146:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	7b1b      	ldrb	r3, [r3, #12]
 800114c:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800114e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001150:	68ba      	ldr	r2, [r7, #8]
 8001152:	4313      	orrs	r3, r2
 8001154:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	689b      	ldr	r3, [r3, #8]
 800115a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800115e:	d003      	beq.n	8001168 <HAL_ADC_Init+0x1b8>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_ADC_Init+0x1be>
 8001168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800116c:	e000      	b.n	8001170 <HAL_ADC_Init+0x1c0>
 800116e:	2300      	movs	r3, #0
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	7d1b      	ldrb	r3, [r3, #20]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d119      	bne.n	80011b2 <HAL_ADC_Init+0x202>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7b1b      	ldrb	r3, [r3, #12]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d109      	bne.n	800119a <HAL_ADC_Init+0x1ea>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	699b      	ldr	r3, [r3, #24]
 800118a:	3b01      	subs	r3, #1
 800118c:	035a      	lsls	r2, r3, #13
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	e00b      	b.n	80011b2 <HAL_ADC_Init+0x202>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800119e:	f043 0220 	orr.w	r2, r3, #32
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011aa:	f043 0201 	orr.w	r2, r3, #1
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	430a      	orrs	r2, r1
 80011c4:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <HAL_ADC_Init+0x290>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	68b9      	ldr	r1, [r7, #8]
 80011d6:	430b      	orrs	r3, r1
 80011d8:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011e2:	d003      	beq.n	80011ec <HAL_ADC_Init+0x23c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d104      	bne.n	80011f6 <HAL_ADC_Init+0x246>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	3b01      	subs	r3, #1
 80011f2:	051b      	lsls	r3, r3, #20
 80011f4:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011fc:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	68fa      	ldr	r2, [r7, #12]
 8001206:	430a      	orrs	r2, r1
 8001208:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	4b0c      	ldr	r3, [pc, #48]	@ (8001244 <HAL_ADC_Init+0x294>)
 8001212:	4013      	ands	r3, r2
 8001214:	68ba      	ldr	r2, [r7, #8]
 8001216:	429a      	cmp	r2, r3
 8001218:	d116      	bne.n	8001248 <HAL_ADC_Init+0x298>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001224:	f023 0303 	bic.w	r3, r3, #3
 8001228:	f043 0201 	orr.w	r2, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001230:	e023      	b.n	800127a <HAL_ADC_Init+0x2ca>
 8001232:	bf00      	nop
 8001234:	40012400 	.word	0x40012400
 8001238:	40012800 	.word	0x40012800
 800123c:	0800598c 	.word	0x0800598c
 8001240:	ffe1f7fd 	.word	0xffe1f7fd
 8001244:	ff1f0efe 	.word	0xff1f0efe
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800124c:	f023 0312 	bic.w	r3, r3, #18
 8001250:	f043 0210 	orr.w	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001268:	e007      	b.n	800127a <HAL_ADC_Init+0x2ca>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800126e:	f043 0210 	orr.w	r2, r3, #16
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001454 <HAL_ADC_IRQHandler+0x1d0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d009      	beq.n	80012ba <HAL_ADC_IRQHandler+0x36>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a6b      	ldr	r2, [pc, #428]	@ (8001458 <HAL_ADC_IRQHandler+0x1d4>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d004      	beq.n	80012ba <HAL_ADC_IRQHandler+0x36>
 80012b0:	f240 61f9 	movw	r1, #1785	@ 0x6f9
 80012b4:	4869      	ldr	r0, [pc, #420]	@ (800145c <HAL_ADC_IRQHandler+0x1d8>)
 80012b6:	f7ff fb25 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7b1b      	ldrb	r3, [r3, #12]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d008      	beq.n	80012d4 <HAL_ADC_IRQHandler+0x50>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	7b1b      	ldrb	r3, [r3, #12]
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d004      	beq.n	80012d4 <HAL_ADC_IRQHandler+0x50>
 80012ca:	f240 61fa 	movw	r1, #1786	@ 0x6fa
 80012ce:	4863      	ldr	r0, [pc, #396]	@ (800145c <HAL_ADC_IRQHandler+0x1d8>)
 80012d0:	f7ff fb18 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_ADC_IRQHandler+0x60>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b10      	cmp	r3, #16
 80012e2:	d904      	bls.n	80012ee <HAL_ADC_IRQHandler+0x6a>
 80012e4:	f240 61fb 	movw	r1, #1787	@ 0x6fb
 80012e8:	485c      	ldr	r0, [pc, #368]	@ (800145c <HAL_ADC_IRQHandler+0x1d8>)
 80012ea:	f7ff fb0b 	bl	8000904 <assert_failed>
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	f003 0320 	and.w	r3, r3, #32
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d03e      	beq.n	8001376 <HAL_ADC_IRQHandler+0xf2>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d039      	beq.n	8001376 <HAL_ADC_IRQHandler+0xf2>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001306:	f003 0310 	and.w	r3, r3, #16
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_ADC_IRQHandler+0x96>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001312:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001324:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001328:	d11d      	bne.n	8001366 <HAL_ADC_IRQHandler+0xe2>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800132e:	2b00      	cmp	r3, #0
 8001330:	d119      	bne.n	8001366 <HAL_ADC_IRQHandler+0xe2>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 0220 	bic.w	r2, r2, #32
 8001340:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001352:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d105      	bne.n	8001366 <HAL_ADC_IRQHandler+0xe2>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800135e:	f043 0201 	orr.w	r2, r3, #1
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f000 f87a 	bl	8001460 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f06f 0212 	mvn.w	r2, #18
 8001374:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04d      	beq.n	800141c <HAL_ADC_IRQHandler+0x198>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	2b00      	cmp	r3, #0
 8001388:	d048      	beq.n	800141c <HAL_ADC_IRQHandler+0x198>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800138e:	f003 0310 	and.w	r3, r3, #16
 8001392:	2b00      	cmp	r3, #0
 8001394:	d105      	bne.n	80013a2 <HAL_ADC_IRQHandler+0x11e>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800139a:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80013ac:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80013b0:	d012      	beq.n	80013d8 <HAL_ADC_IRQHandler+0x154>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d125      	bne.n	800140c <HAL_ADC_IRQHandler+0x188>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80013ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013ce:	d11d      	bne.n	800140c <HAL_ADC_IRQHandler+0x188>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d119      	bne.n	800140c <HAL_ADC_IRQHandler+0x188>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d105      	bne.n	800140c <HAL_ADC_IRQHandler+0x188>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fb46 	bl	8001a9e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f06f 020c 	mvn.w	r2, #12
 800141a:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d012      	beq.n	800144c <HAL_ADC_IRQHandler+0x1c8>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00d      	beq.n	800144c <HAL_ADC_IRQHandler+0x1c8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001434:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f000 f818 	bl	8001472 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f06f 0201 	mvn.w	r2, #1
 800144a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800144c:	bf00      	nop
 800144e:	3710      	adds	r7, #16
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40012400 	.word	0x40012400
 8001458:	40012800 	.word	0x40012800
 800145c:	0800598c 	.word	0x0800598c

08001460 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	bc80      	pop	{r7}
 8001470:	4770      	bx	lr

08001472 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001472:	b480      	push	{r7}
 8001474:	b083      	sub	sp, #12
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr

08001484 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a88      	ldr	r2, [pc, #544]	@ (80016bc <HAL_ADC_ConfigChannel+0x238>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d009      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x30>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a86      	ldr	r2, [pc, #536]	@ (80016c0 <HAL_ADC_ConfigChannel+0x23c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d004      	beq.n	80014b4 <HAL_ADC_ConfigChannel+0x30>
 80014aa:	f240 71d6 	movw	r1, #2006	@ 0x7d6
 80014ae:	4885      	ldr	r0, [pc, #532]	@ (80016c4 <HAL_ADC_ConfigChannel+0x240>)
 80014b0:	f7ff fa28 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d048      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d044      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d040      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	d03c      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d038      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d034      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b06      	cmp	r3, #6
 80014ea:	d030      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b07      	cmp	r3, #7
 80014f2:	d02c      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d028      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b09      	cmp	r3, #9
 8001502:	d024      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b0a      	cmp	r3, #10
 800150a:	d020      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b0b      	cmp	r3, #11
 8001512:	d01c      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b0c      	cmp	r3, #12
 800151a:	d018      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b0d      	cmp	r3, #13
 8001522:	d014      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b0e      	cmp	r3, #14
 800152a:	d010      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b0f      	cmp	r3, #15
 8001532:	d00c      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d008      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b11      	cmp	r3, #17
 8001542:	d004      	beq.n	800154e <HAL_ADC_ConfigChannel+0xca>
 8001544:	f240 71d7 	movw	r1, #2007	@ 0x7d7
 8001548:	485e      	ldr	r0, [pc, #376]	@ (80016c4 <HAL_ADC_ConfigChannel+0x240>)
 800154a:	f7ff f9db 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d040      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d03c      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d038      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b04      	cmp	r3, #4
 800156c:	d034      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b05      	cmp	r3, #5
 8001574:	d030      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b06      	cmp	r3, #6
 800157c:	d02c      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b07      	cmp	r3, #7
 8001584:	d028      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b08      	cmp	r3, #8
 800158c:	d024      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b09      	cmp	r3, #9
 8001594:	d020      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d01c      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b0b      	cmp	r3, #11
 80015a4:	d018      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d014      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b0d      	cmp	r3, #13
 80015b4:	d010      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2b0e      	cmp	r3, #14
 80015bc:	d00c      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	2b0f      	cmp	r3, #15
 80015c4:	d008      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d004      	beq.n	80015d8 <HAL_ADC_ConfigChannel+0x154>
 80015ce:	f44f 61fb 	mov.w	r1, #2008	@ 0x7d8
 80015d2:	483c      	ldr	r0, [pc, #240]	@ (80016c4 <HAL_ADC_ConfigChannel+0x240>)
 80015d4:	f7ff f996 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d020      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d01c      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d018      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	2b03      	cmp	r3, #3
 80015f6:	d014      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d010      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	2b05      	cmp	r3, #5
 8001606:	d00c      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b06      	cmp	r3, #6
 800160e:	d008      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	2b07      	cmp	r3, #7
 8001616:	d004      	beq.n	8001622 <HAL_ADC_ConfigChannel+0x19e>
 8001618:	f240 71d9 	movw	r1, #2009	@ 0x7d9
 800161c:	4829      	ldr	r0, [pc, #164]	@ (80016c4 <HAL_ADC_ConfigChannel+0x240>)
 800161e:	f7ff f971 	bl	8000904 <assert_failed>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001628:	2b01      	cmp	r3, #1
 800162a:	d101      	bne.n	8001630 <HAL_ADC_ConfigChannel+0x1ac>
 800162c:	2302      	movs	r3, #2
 800162e:	e0e2      	b.n	80017f6 <HAL_ADC_ConfigChannel+0x372>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	2b06      	cmp	r3, #6
 800163e:	d81c      	bhi.n	800167a <HAL_ADC_ConfigChannel+0x1f6>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	3b05      	subs	r3, #5
 8001652:	221f      	movs	r2, #31
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	4019      	ands	r1, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6818      	ldr	r0, [r3, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	3b05      	subs	r3, #5
 800166c:	fa00 f203 	lsl.w	r2, r0, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	635a      	str	r2, [r3, #52]	@ 0x34
 8001678:	e042      	b.n	8001700 <HAL_ADC_ConfigChannel+0x27c>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b0c      	cmp	r3, #12
 8001680:	d822      	bhi.n	80016c8 <HAL_ADC_ConfigChannel+0x244>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	3b23      	subs	r3, #35	@ 0x23
 8001694:	221f      	movs	r2, #31
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	4019      	ands	r1, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b23      	subs	r3, #35	@ 0x23
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80016ba:	e021      	b.n	8001700 <HAL_ADC_ConfigChannel+0x27c>
 80016bc:	40012400 	.word	0x40012400
 80016c0:	40012800 	.word	0x40012800
 80016c4:	0800598c 	.word	0x0800598c
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685a      	ldr	r2, [r3, #4]
 80016d2:	4613      	mov	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	4413      	add	r3, r2
 80016d8:	3b41      	subs	r3, #65	@ 0x41
 80016da:	221f      	movs	r2, #31
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	4019      	ands	r1, r3
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	6818      	ldr	r0, [r3, #0]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	3b41      	subs	r3, #65	@ 0x41
 80016f4:	fa00 f203 	lsl.w	r2, r0, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d91c      	bls.n	8001742 <HAL_ADC_ConfigChannel+0x2be>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1e      	subs	r3, #30
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1e      	subs	r3, #30
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]
 8001740:	e019      	b.n	8001776 <HAL_ADC_ConfigChannel+0x2f2>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6919      	ldr	r1, [r3, #16]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	2207      	movs	r2, #7
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	43db      	mvns	r3, r3
 800175a:	4019      	ands	r1, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6898      	ldr	r0, [r3, #8]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4613      	mov	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	4413      	add	r3, r2
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2b10      	cmp	r3, #16
 800177c:	d003      	beq.n	8001786 <HAL_ADC_ConfigChannel+0x302>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001782:	2b11      	cmp	r3, #17
 8001784:	d132      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x368>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <HAL_ADC_ConfigChannel+0x37c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d125      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x358>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800179a:	2b00      	cmp	r3, #0
 800179c:	d126      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x368>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80017ac:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d11a      	bne.n	80017ec <HAL_ADC_ConfigChannel+0x368>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017b6:	4b13      	ldr	r3, [pc, #76]	@ (8001804 <HAL_ADC_ConfigChannel+0x380>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a13      	ldr	r2, [pc, #76]	@ (8001808 <HAL_ADC_ConfigChannel+0x384>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	0c9a      	lsrs	r2, r3, #18
 80017c2:	4613      	mov	r3, r2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4413      	add	r3, r2
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017cc:	e002      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x350>
          {
            wait_loop_index--;
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	3b01      	subs	r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f9      	bne.n	80017ce <HAL_ADC_ConfigChannel+0x34a>
 80017da:	e007      	b.n	80017ec <HAL_ADC_ConfigChannel+0x368>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	f043 0220 	orr.w	r2, r3, #32
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40012400 	.word	0x40012400
 8001804:	20000000 	.word	0x20000000
 8001808:	431bde83 	.word	0x431bde83

0800180c <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc: ADC handle
  * @param  AnalogWDGConfig: Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a79      	ldr	r2, [pc, #484]	@ (8001a00 <HAL_ADC_AnalogWDGConfig+0x1f4>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d009      	beq.n	8001834 <HAL_ADC_AnalogWDGConfig+0x28>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <HAL_ADC_AnalogWDGConfig+0x1f8>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d004      	beq.n	8001834 <HAL_ADC_AnalogWDGConfig+0x28>
 800182a:	f640 0141 	movw	r1, #2113	@ 0x841
 800182e:	4876      	ldr	r0, [pc, #472]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001830:	f7ff f868 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d022      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a72      	ldr	r2, [pc, #456]	@ (8001a0c <HAL_ADC_AnalogWDGConfig+0x200>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d01d      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a71      	ldr	r2, [pc, #452]	@ (8001a10 <HAL_ADC_AnalogWDGConfig+0x204>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d018      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a6f      	ldr	r2, [pc, #444]	@ (8001a14 <HAL_ADC_AnalogWDGConfig+0x208>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d013      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001862:	d00e      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800186c:	d009      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001876:	d004      	beq.n	8001882 <HAL_ADC_AnalogWDGConfig+0x76>
 8001878:	f640 0142 	movw	r1, #2114	@ 0x842
 800187c:	4862      	ldr	r0, [pc, #392]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 800187e:	f7ff f841 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	7a1b      	ldrb	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d008      	beq.n	800189c <HAL_ADC_AnalogWDGConfig+0x90>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	7a1b      	ldrb	r3, [r3, #8]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d004      	beq.n	800189c <HAL_ADC_AnalogWDGConfig+0x90>
 8001892:	f640 0143 	movw	r1, #2115	@ 0x843
 8001896:	485c      	ldr	r0, [pc, #368]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001898:	f7ff f834 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->HighThreshold));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018a4:	d304      	bcc.n	80018b0 <HAL_ADC_AnalogWDGConfig+0xa4>
 80018a6:	f640 0144 	movw	r1, #2116	@ 0x844
 80018aa:	4857      	ldr	r0, [pc, #348]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80018ac:	f7ff f82a 	bl	8000904 <assert_failed>
  assert_param(IS_ADC_RANGE(AnalogWDGConfig->LowThreshold));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018b8:	d304      	bcc.n	80018c4 <HAL_ADC_AnalogWDGConfig+0xb8>
 80018ba:	f640 0145 	movw	r1, #2117	@ 0x845
 80018be:	4852      	ldr	r0, [pc, #328]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 80018c0:	f7ff f820 	bl	8000904 <assert_failed>
  
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a50      	ldr	r2, [pc, #320]	@ (8001a0c <HAL_ADC_AnalogWDGConfig+0x200>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d009      	beq.n	80018e2 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
  if((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80018d2:	4a4f      	ldr	r2, [pc, #316]	@ (8001a10 <HAL_ADC_AnalogWDGConfig+0x204>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_AnalogWDGConfig+0xd6>
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC)  )
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
     (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80018dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a14 <HAL_ADC_AnalogWDGConfig+0x208>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d14c      	bne.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d048      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d044      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d040      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d03c      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b04      	cmp	r3, #4
 8001908:	d038      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b05      	cmp	r3, #5
 8001910:	d034      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b06      	cmp	r3, #6
 8001918:	d030      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b07      	cmp	r3, #7
 8001920:	d02c      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b08      	cmp	r3, #8
 8001928:	d028      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b09      	cmp	r3, #9
 8001930:	d024      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b0a      	cmp	r3, #10
 8001938:	d020      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b0b      	cmp	r3, #11
 8001940:	d01c      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d018      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b0d      	cmp	r3, #13
 8001950:	d014      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b0e      	cmp	r3, #14
 8001958:	d010      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b0f      	cmp	r3, #15
 8001960:	d00c      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b10      	cmp	r3, #16
 8001968:	d008      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b11      	cmp	r3, #17
 8001970:	d004      	beq.n	800197c <HAL_ADC_AnalogWDGConfig+0x170>
 8001972:	f640 014b 	movw	r1, #2123	@ 0x84b
 8001976:	4824      	ldr	r0, [pc, #144]	@ (8001a08 <HAL_ADC_AnalogWDGConfig+0x1fc>)
 8001978:	f7fe ffc4 	bl	8000904 <assert_failed>
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_ADC_AnalogWDGConfig+0x17e>
 8001986:	2302      	movs	r3, #2
 8001988:	e035      	b.n	80019f6 <HAL_ADC_AnalogWDGConfig+0x1ea>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Analog watchdog configuration */

  /* Configure ADC Analog watchdog interrupt */
  if(AnalogWDGConfig->ITMode == ENABLE)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	7a1b      	ldrb	r3, [r3, #8]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d108      	bne.n	80019ac <HAL_ADC_AnalogWDGConfig+0x1a0>
  {
    /* Enable the ADC Analog watchdog interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	e007      	b.n	80019bc <HAL_ADC_AnalogWDGConfig+0x1b0>
  }
  else
  {
    /* Disable the ADC Analog watchdog interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019ba:	605a      	str	r2, [r3, #4]
  /* Configuration of analog watchdog:                                        */
  /*  - Set the analog watchdog enable mode: regular and/or injected groups,  */
  /*    one or all channels.                                                  */
  /*  - Set the Analog watchdog channel (is not used if watchdog              */
  /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                             */
  MODIFY_REG(hadc->Instance->CR1            ,
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <HAL_ADC_AnalogWDGConfig+0x20c>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	6852      	ldr	r2, [r2, #4]
 80019ce:	4311      	orrs	r1, r2
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	430b      	orrs	r3, r1
 80019d6:	6053      	str	r3, [r2, #4]
             ADC_CR1_AWDCH                  ,
             AnalogWDGConfig->WatchdogMode |
             AnalogWDGConfig->Channel        );
  
  /* Set the high threshold */
  WRITE_REG(hadc->Instance->HTR, AnalogWDGConfig->HighThreshold);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	68d2      	ldr	r2, [r2, #12]
 80019e0:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Set the low threshold */
  WRITE_REG(hadc->Instance->LTR, AnalogWDGConfig->LowThreshold);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6912      	ldr	r2, [r2, #16]
 80019ea:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3708      	adds	r7, #8
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40012400 	.word	0x40012400
 8001a04:	40012800 	.word	0x40012800
 8001a08:	0800598c 	.word	0x0800598c
 8001a0c:	00800200 	.word	0x00800200
 8001a10:	00400200 	.word	0x00400200
 8001a14:	00c00200 	.word	0x00c00200
 8001a18:	ff3ffde0 	.word	0xff3ffde0

08001a1c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d12e      	bne.n	8001a94 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0201 	bic.w	r2, r2, #1
 8001a44:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a46:	f7ff faa9 	bl	8000f9c <HAL_GetTick>
 8001a4a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a4c:	e01b      	b.n	8001a86 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a4e:	f7ff faa5 	bl	8000f9c <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d914      	bls.n	8001a86 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d10d      	bne.n	8001a86 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a6e:	f043 0210 	orr.w	r2, r3, #16
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e007      	b.n	8001a96 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d0dc      	beq.n	8001a4e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d101      	bne.n	8001ac2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e209      	b.n	8001ed6 <HAL_CAN_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a8f      	ldr	r2, [pc, #572]	@ (8001d04 <HAL_CAN_Init+0x254>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d004      	beq.n	8001ad6 <HAL_CAN_Init+0x26>
 8001acc:	f240 111d 	movw	r1, #285	@ 0x11d
 8001ad0:	488d      	ldr	r0, [pc, #564]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001ad2:	f7fe ff17 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TimeTriggeredMode));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	7e1b      	ldrb	r3, [r3, #24]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d008      	beq.n	8001af0 <HAL_CAN_Init+0x40>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7e1b      	ldrb	r3, [r3, #24]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d004      	beq.n	8001af0 <HAL_CAN_Init+0x40>
 8001ae6:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8001aea:	4887      	ldr	r0, [pc, #540]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001aec:	f7fe ff0a 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoBusOff));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7e5b      	ldrb	r3, [r3, #25]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d008      	beq.n	8001b0a <HAL_CAN_Init+0x5a>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7e5b      	ldrb	r3, [r3, #25]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d004      	beq.n	8001b0a <HAL_CAN_Init+0x5a>
 8001b00:	f240 111f 	movw	r1, #287	@ 0x11f
 8001b04:	4880      	ldr	r0, [pc, #512]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b06:	f7fe fefd 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoWakeUp));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	7e9b      	ldrb	r3, [r3, #26]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d008      	beq.n	8001b24 <HAL_CAN_Init+0x74>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	7e9b      	ldrb	r3, [r3, #26]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d004      	beq.n	8001b24 <HAL_CAN_Init+0x74>
 8001b1a:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001b1e:	487a      	ldr	r0, [pc, #488]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b20:	f7fe fef0 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.AutoRetransmission));
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	7edb      	ldrb	r3, [r3, #27]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d008      	beq.n	8001b3e <HAL_CAN_Init+0x8e>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7edb      	ldrb	r3, [r3, #27]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d004      	beq.n	8001b3e <HAL_CAN_Init+0x8e>
 8001b34:	f240 1121 	movw	r1, #289	@ 0x121
 8001b38:	4873      	ldr	r0, [pc, #460]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b3a:	f7fe fee3 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.ReceiveFifoLocked));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7f1b      	ldrb	r3, [r3, #28]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d008      	beq.n	8001b58 <HAL_CAN_Init+0xa8>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	7f1b      	ldrb	r3, [r3, #28]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d004      	beq.n	8001b58 <HAL_CAN_Init+0xa8>
 8001b4e:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8001b52:	486d      	ldr	r0, [pc, #436]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b54:	f7fe fed6 	bl	8000904 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hcan->Init.TransmitFifoPriority));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7f5b      	ldrb	r3, [r3, #29]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d008      	beq.n	8001b72 <HAL_CAN_Init+0xc2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7f5b      	ldrb	r3, [r3, #29]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d004      	beq.n	8001b72 <HAL_CAN_Init+0xc2>
 8001b68:	f240 1123 	movw	r1, #291	@ 0x123
 8001b6c:	4866      	ldr	r0, [pc, #408]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b6e:	f7fe fec9 	bl	8000904 <assert_failed>
  assert_param(IS_CAN_MODE(hcan->Init.Mode));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d013      	beq.n	8001ba2 <HAL_CAN_Init+0xf2>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b82:	d00e      	beq.n	8001ba2 <HAL_CAN_Init+0xf2>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001b8c:	d009      	beq.n	8001ba2 <HAL_CAN_Init+0xf2>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8001b96:	d004      	beq.n	8001ba2 <HAL_CAN_Init+0xf2>
 8001b98:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8001b9c:	485a      	ldr	r0, [pc, #360]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001b9e:	f7fe feb1 	bl	8000904 <assert_failed>
  assert_param(IS_CAN_SJW(hcan->Init.SyncJumpWidth));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d013      	beq.n	8001bd2 <HAL_CAN_Init+0x122>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_CAN_Init+0x122>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001bbc:	d009      	beq.n	8001bd2 <HAL_CAN_Init+0x122>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001bc6:	d004      	beq.n	8001bd2 <HAL_CAN_Init+0x122>
 8001bc8:	f240 1125 	movw	r1, #293	@ 0x125
 8001bcc:	484e      	ldr	r0, [pc, #312]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001bce:	f7fe fe99 	bl	8000904 <assert_failed>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d04f      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be2:	d04a      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001bec:	d045      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001bf6:	d040      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001c00:	d03b      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c0a:	d036      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8001c14:	d031      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
 8001c1e:	d02c      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001c28:	d027      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f5b3 2f10 	cmp.w	r3, #589824	@ 0x90000
 8001c32:	d022      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	f5b3 2f20 	cmp.w	r3, #655360	@ 0xa0000
 8001c3c:	d01d      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	691b      	ldr	r3, [r3, #16]
 8001c42:	f5b3 2f30 	cmp.w	r3, #720896	@ 0xb0000
 8001c46:	d018      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001c50:	d013      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	691b      	ldr	r3, [r3, #16]
 8001c56:	f5b3 2f50 	cmp.w	r3, #851968	@ 0xd0000
 8001c5a:	d00e      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	691b      	ldr	r3, [r3, #16]
 8001c60:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001c64:	d009      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f5b3 2f70 	cmp.w	r3, #983040	@ 0xf0000
 8001c6e:	d004      	beq.n	8001c7a <HAL_CAN_Init+0x1ca>
 8001c70:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8001c74:	4824      	ldr	r0, [pc, #144]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001c76:	f7fe fe45 	bl	8000904 <assert_failed>
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d027      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c8a:	d022      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695b      	ldr	r3, [r3, #20]
 8001c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001c94:	d01d      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8001c9e:	d018      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ca8:	d013      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	695b      	ldr	r3, [r3, #20]
 8001cae:	f5b3 0fa0 	cmp.w	r3, #5242880	@ 0x500000
 8001cb2:	d00e      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8001cbc:	d009      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	695b      	ldr	r3, [r3, #20]
 8001cc2:	f5b3 0fe0 	cmp.w	r3, #7340032	@ 0x700000
 8001cc6:	d004      	beq.n	8001cd2 <HAL_CAN_Init+0x222>
 8001cc8:	f240 1127 	movw	r1, #295	@ 0x127
 8001ccc:	480e      	ldr	r0, [pc, #56]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001cce:	f7fe fe19 	bl	8000904 <assert_failed>
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d004      	beq.n	8001ce4 <HAL_CAN_Init+0x234>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce2:	d904      	bls.n	8001cee <HAL_CAN_Init+0x23e>
 8001ce4:	f44f 7194 	mov.w	r1, #296	@ 0x128
 8001ce8:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <HAL_CAN_Init+0x258>)
 8001cea:	f7fe fe0b 	bl	8000904 <assert_failed>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d108      	bne.n	8001d0c <HAL_CAN_Init+0x25c>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe fb90 	bl	8000420 <HAL_CAN_MspInit>
 8001d00:	e004      	b.n	8001d0c <HAL_CAN_Init+0x25c>
 8001d02:	bf00      	nop
 8001d04:	40006400 	.word	0x40006400
 8001d08:	080059c4 	.word	0x080059c4
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 0201 	orr.w	r2, r2, #1
 8001d1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d1c:	f7ff f93e 	bl	8000f9c <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d22:	e012      	b.n	8001d4a <HAL_CAN_Init+0x29a>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d24:	f7ff f93a 	bl	8000f9c <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b0a      	cmp	r3, #10
 8001d30:	d90b      	bls.n	8001d4a <HAL_CAN_Init+0x29a>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2205      	movs	r2, #5
 8001d42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0c5      	b.n	8001ed6 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0e5      	beq.n	8001d24 <HAL_CAN_Init+0x274>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f022 0202 	bic.w	r2, r2, #2
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d68:	f7ff f918 	bl	8000f9c <HAL_GetTick>
 8001d6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d6e:	e012      	b.n	8001d96 <HAL_CAN_Init+0x2e6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d70:	f7ff f914 	bl	8000f9c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d90b      	bls.n	8001d96 <HAL_CAN_Init+0x2e6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2205      	movs	r2, #5
 8001d8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e09f      	b.n	8001ed6 <HAL_CAN_Init+0x426>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e5      	bne.n	8001d70 <HAL_CAN_Init+0x2c0>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d108      	bne.n	8001dbe <HAL_CAN_Init+0x30e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e007      	b.n	8001dce <HAL_CAN_Init+0x31e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7e5b      	ldrb	r3, [r3, #25]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d108      	bne.n	8001de8 <HAL_CAN_Init+0x338>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001de4:	601a      	str	r2, [r3, #0]
 8001de6:	e007      	b.n	8001df8 <HAL_CAN_Init+0x348>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	7e9b      	ldrb	r3, [r3, #26]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d108      	bne.n	8001e12 <HAL_CAN_Init+0x362>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_Init+0x372>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0220 	bic.w	r2, r2, #32
 8001e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	7edb      	ldrb	r3, [r3, #27]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d108      	bne.n	8001e3c <HAL_CAN_Init+0x38c>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0210 	bic.w	r2, r2, #16
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	e007      	b.n	8001e4c <HAL_CAN_Init+0x39c>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0210 	orr.w	r2, r2, #16
 8001e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7f1b      	ldrb	r3, [r3, #28]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d108      	bne.n	8001e66 <HAL_CAN_Init+0x3b6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0208 	orr.w	r2, r2, #8
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	e007      	b.n	8001e76 <HAL_CAN_Init+0x3c6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0208 	bic.w	r2, r2, #8
 8001e74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	7f5b      	ldrb	r3, [r3, #29]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d108      	bne.n	8001e90 <HAL_CAN_Init+0x3e0>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f042 0204 	orr.w	r2, r2, #4
 8001e8c:	601a      	str	r2, [r3, #0]
 8001e8e:	e007      	b.n	8001ea0 <HAL_CAN_Init+0x3f0>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0204 	bic.w	r2, r2, #4
 8001e9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	695b      	ldr	r3, [r3, #20]
 8001eb4:	ea42 0103 	orr.w	r1, r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop

08001ee0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08a      	sub	sp, #40	@ 0x28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f1c:	6a3b      	ldr	r3, [r7, #32]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d07c      	beq.n	8002020 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d023      	beq.n	8001f78 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	f003 0302 	and.w	r3, r3, #2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f983 	bl	800224e <HAL_CAN_TxMailbox0CompleteCallback>
 8001f48:	e016      	b.n	8001f78 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f56:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f5c:	e00c      	b.n	8001f78 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0308 	and.w	r3, r3, #8
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d004      	beq.n	8001f72 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f70:	e002      	b.n	8001f78 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f986 	bl	8002284 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d024      	beq.n	8001fcc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f8a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 f962 	bl	8002260 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f9c:	e016      	b.n	8001fcc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d004      	beq.n	8001fb2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001faa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fb0:	e00c      	b.n	8001fcc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d004      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	e002      	b.n	8001fcc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f965 	bl	8002296 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d024      	beq.n	8002020 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fde:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f941 	bl	8002272 <HAL_CAN_TxMailbox2CompleteCallback>
 8001ff0:	e016      	b.n	8002020 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d004      	beq.n	8002006 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002002:	627b      	str	r3, [r7, #36]	@ 0x24
 8002004:	e00c      	b.n	8002020 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d004      	beq.n	800201a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002012:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
 8002018:	e002      	b.n	8002020 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f944 	bl	80022a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002036:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002044:	6a3b      	ldr	r3, [r7, #32]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00b      	beq.n	8002066 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2208      	movs	r2, #8
 800205e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f000 f933 	bl	80022cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d009      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d002      	beq.n	8002084 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f91b 	bl	80022ba <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002084:	6a3b      	ldr	r3, [r7, #32]
 8002086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800209a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800209e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2210      	movs	r2, #16
 80020a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020a8:	6a3b      	ldr	r3, [r7, #32]
 80020aa:	f003 0320 	and.w	r3, r3, #32
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d006      	beq.n	80020ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 f913 	bl	80022f0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d002      	beq.n	80020e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f8fb 	bl	80022de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00b      	beq.n	800210a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2210      	movs	r2, #16
 8002102:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f8fc 	bl	8002302 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00b      	beq.n	800212c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d006      	beq.n	800212c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2208      	movs	r2, #8
 8002124:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 f8f4 	bl	8002314 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d07b      	beq.n	800222e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	d072      	beq.n	8002226 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d008      	beq.n	800215c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d008      	beq.n	8002178 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	f043 0302 	orr.w	r3, r3, #2
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002178:	6a3b      	ldr	r3, [r7, #32]
 800217a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800219a:	2b00      	cmp	r3, #0
 800219c:	d043      	beq.n	8002226 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d03e      	beq.n	8002226 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021ae:	2b60      	cmp	r3, #96	@ 0x60
 80021b0:	d02b      	beq.n	800220a <HAL_CAN_IRQHandler+0x32a>
 80021b2:	2b60      	cmp	r3, #96	@ 0x60
 80021b4:	d82e      	bhi.n	8002214 <HAL_CAN_IRQHandler+0x334>
 80021b6:	2b50      	cmp	r3, #80	@ 0x50
 80021b8:	d022      	beq.n	8002200 <HAL_CAN_IRQHandler+0x320>
 80021ba:	2b50      	cmp	r3, #80	@ 0x50
 80021bc:	d82a      	bhi.n	8002214 <HAL_CAN_IRQHandler+0x334>
 80021be:	2b40      	cmp	r3, #64	@ 0x40
 80021c0:	d019      	beq.n	80021f6 <HAL_CAN_IRQHandler+0x316>
 80021c2:	2b40      	cmp	r3, #64	@ 0x40
 80021c4:	d826      	bhi.n	8002214 <HAL_CAN_IRQHandler+0x334>
 80021c6:	2b30      	cmp	r3, #48	@ 0x30
 80021c8:	d010      	beq.n	80021ec <HAL_CAN_IRQHandler+0x30c>
 80021ca:	2b30      	cmp	r3, #48	@ 0x30
 80021cc:	d822      	bhi.n	8002214 <HAL_CAN_IRQHandler+0x334>
 80021ce:	2b10      	cmp	r3, #16
 80021d0:	d002      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x2f8>
 80021d2:	2b20      	cmp	r3, #32
 80021d4:	d005      	beq.n	80021e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021d6:	e01d      	b.n	8002214 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80021d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021da:	f043 0308 	orr.w	r3, r3, #8
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021e0:	e019      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e4:	f043 0310 	orr.w	r3, r3, #16
 80021e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021ea:	e014      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	f043 0320 	orr.w	r3, r3, #32
 80021f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021f4:	e00f      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021fe:	e00a      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002208:	e005      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002212:	e000      	b.n	8002216 <HAL_CAN_IRQHandler+0x336>
            break;
 8002214:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	699a      	ldr	r2, [r3, #24]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002224:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2204      	movs	r2, #4
 800222c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2b00      	cmp	r3, #0
 8002232:	d008      	beq.n	8002246 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f870 	bl	8002326 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002246:	bf00      	nop
 8002248:	3728      	adds	r7, #40	@ 0x28
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800224e:	b480      	push	{r7}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002256:	bf00      	nop
 8002258:	370c      	adds	r7, #12
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	bc80      	pop	{r7}
 8002270:	4770      	bx	lr

08002272 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr

08002296 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc80      	pop	{r7}
 80022a6:	4770      	bx	lr

080022a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80022de:	b480      	push	{r7}
 80022e0:	b083      	sub	sp, #12
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr

080022f0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr

08002314 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	bc80      	pop	{r7}
 8002324:	4770      	bx	lr

08002326 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002348:	4b0c      	ldr	r3, [pc, #48]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002354:	4013      	ands	r3, r2
 8002356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002360:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800236a:	4a04      	ldr	r2, [pc, #16]	@ (800237c <__NVIC_SetPriorityGrouping+0x44>)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	60d3      	str	r3, [r2, #12]
}
 8002370:	bf00      	nop
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	e000ed00 	.word	0xe000ed00

08002380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002384:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <__NVIC_GetPriorityGrouping+0x18>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	0a1b      	lsrs	r3, r3, #8
 800238a:	f003 0307 	and.w	r3, r3, #7
}
 800238e:	4618      	mov	r0, r3
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	db0b      	blt.n	80023c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	f003 021f 	and.w	r2, r3, #31
 80023b4:	4906      	ldr	r1, [pc, #24]	@ (80023d0 <__NVIC_EnableIRQ+0x34>)
 80023b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ba:	095b      	lsrs	r3, r3, #5
 80023bc:	2001      	movs	r0, #1
 80023be:	fa00 f202 	lsl.w	r2, r0, r2
 80023c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	e000e100 	.word	0xe000e100

080023d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	4603      	mov	r3, r0
 80023dc:	6039      	str	r1, [r7, #0]
 80023de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	db0a      	blt.n	80023fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	b2da      	uxtb	r2, r3
 80023ec:	490c      	ldr	r1, [pc, #48]	@ (8002420 <__NVIC_SetPriority+0x4c>)
 80023ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f2:	0112      	lsls	r2, r2, #4
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	440b      	add	r3, r1
 80023f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023fc:	e00a      	b.n	8002414 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	b2da      	uxtb	r2, r3
 8002402:	4908      	ldr	r1, [pc, #32]	@ (8002424 <__NVIC_SetPriority+0x50>)
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	f003 030f 	and.w	r3, r3, #15
 800240a:	3b04      	subs	r3, #4
 800240c:	0112      	lsls	r2, r2, #4
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	440b      	add	r3, r1
 8002412:	761a      	strb	r2, [r3, #24]
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	e000e100 	.word	0xe000e100
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002428:	b480      	push	{r7}
 800242a:	b089      	sub	sp, #36	@ 0x24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f003 0307 	and.w	r3, r3, #7
 800243a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	f1c3 0307 	rsb	r3, r3, #7
 8002442:	2b04      	cmp	r3, #4
 8002444:	bf28      	it	cs
 8002446:	2304      	movcs	r3, #4
 8002448:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3304      	adds	r3, #4
 800244e:	2b06      	cmp	r3, #6
 8002450:	d902      	bls.n	8002458 <NVIC_EncodePriority+0x30>
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3b03      	subs	r3, #3
 8002456:	e000      	b.n	800245a <NVIC_EncodePriority+0x32>
 8002458:	2300      	movs	r3, #0
 800245a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	f04f 32ff 	mov.w	r2, #4294967295
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	43da      	mvns	r2, r3
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	401a      	ands	r2, r3
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	fa01 f303 	lsl.w	r3, r1, r3
 800247a:	43d9      	mvns	r1, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002480:	4313      	orrs	r3, r2
         );
}
 8002482:	4618      	mov	r0, r3
 8002484:	3724      	adds	r7, #36	@ 0x24
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ff90 	bl	80023d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2b07      	cmp	r3, #7
 80024dc:	d00f      	beq.n	80024fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b06      	cmp	r3, #6
 80024e2:	d00c      	beq.n	80024fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b05      	cmp	r3, #5
 80024e8:	d009      	beq.n	80024fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d006      	beq.n	80024fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d003      	beq.n	80024fe <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024f6:	2191      	movs	r1, #145	@ 0x91
 80024f8:	4804      	ldr	r0, [pc, #16]	@ (800250c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80024fa:	f7fe fa03 	bl	8000904 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff ff1a 	bl	8002338 <__NVIC_SetPriorityGrouping>
}
 8002504:	bf00      	nop
 8002506:	3708      	adds	r7, #8
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	080059fc 	.word	0x080059fc

08002510 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	4603      	mov	r3, r0
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800251e:	2300      	movs	r3, #0
 8002520:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b0f      	cmp	r3, #15
 8002526:	d903      	bls.n	8002530 <HAL_NVIC_SetPriority+0x20>
 8002528:	21a9      	movs	r1, #169	@ 0xa9
 800252a:	480e      	ldr	r0, [pc, #56]	@ (8002564 <HAL_NVIC_SetPriority+0x54>)
 800252c:	f7fe f9ea 	bl	8000904 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	2b0f      	cmp	r3, #15
 8002534:	d903      	bls.n	800253e <HAL_NVIC_SetPriority+0x2e>
 8002536:	21aa      	movs	r1, #170	@ 0xaa
 8002538:	480a      	ldr	r0, [pc, #40]	@ (8002564 <HAL_NVIC_SetPriority+0x54>)
 800253a:	f7fe f9e3 	bl	8000904 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253e:	f7ff ff1f 	bl	8002380 <__NVIC_GetPriorityGrouping>
 8002542:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	68b9      	ldr	r1, [r7, #8]
 8002548:	6978      	ldr	r0, [r7, #20]
 800254a:	f7ff ff6d 	bl	8002428 <NVIC_EncodePriority>
 800254e:	4602      	mov	r2, r0
 8002550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff ff3c 	bl	80023d4 <__NVIC_SetPriority>
}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	080059fc 	.word	0x080059fc

08002568 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	2b00      	cmp	r3, #0
 8002578:	da03      	bge.n	8002582 <HAL_NVIC_EnableIRQ+0x1a>
 800257a:	21bd      	movs	r1, #189	@ 0xbd
 800257c:	4805      	ldr	r0, [pc, #20]	@ (8002594 <HAL_NVIC_EnableIRQ+0x2c>)
 800257e:	f7fe f9c1 	bl	8000904 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff ff08 	bl	800239c <__NVIC_EnableIRQ>
}
 800258c:	bf00      	nop
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	080059fc 	.word	0x080059fc

08002598 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025a0:	6878      	ldr	r0, [r7, #4]
 80025a2:	f7ff ff73 	bl	800248c <SysTick_Config>
 80025a6:	4603      	mov	r3, r0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0da      	b.n	800277c <HAL_DMA_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002784 <HAL_DMA_Init+0x1d4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d021      	beq.n	8002614 <HAL_DMA_Init+0x64>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6c      	ldr	r2, [pc, #432]	@ (8002788 <HAL_DMA_Init+0x1d8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d01c      	beq.n	8002614 <HAL_DMA_Init+0x64>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a6b      	ldr	r2, [pc, #428]	@ (800278c <HAL_DMA_Init+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d017      	beq.n	8002614 <HAL_DMA_Init+0x64>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a69      	ldr	r2, [pc, #420]	@ (8002790 <HAL_DMA_Init+0x1e0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d012      	beq.n	8002614 <HAL_DMA_Init+0x64>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a68      	ldr	r2, [pc, #416]	@ (8002794 <HAL_DMA_Init+0x1e4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00d      	beq.n	8002614 <HAL_DMA_Init+0x64>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a66      	ldr	r2, [pc, #408]	@ (8002798 <HAL_DMA_Init+0x1e8>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d008      	beq.n	8002614 <HAL_DMA_Init+0x64>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a65      	ldr	r2, [pc, #404]	@ (800279c <HAL_DMA_Init+0x1ec>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <HAL_DMA_Init+0x64>
 800260c:	2199      	movs	r1, #153	@ 0x99
 800260e:	4864      	ldr	r0, [pc, #400]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 8002610:	f7fe f978 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_DMA_Init+0x86>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b10      	cmp	r3, #16
 8002622:	d008      	beq.n	8002636 <HAL_DMA_Init+0x86>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800262c:	d003      	beq.n	8002636 <HAL_DMA_Init+0x86>
 800262e:	219a      	movs	r1, #154	@ 0x9a
 8002630:	485b      	ldr	r0, [pc, #364]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 8002632:	f7fe f967 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	689b      	ldr	r3, [r3, #8]
 800263a:	2b40      	cmp	r3, #64	@ 0x40
 800263c:	d007      	beq.n	800264e <HAL_DMA_Init+0x9e>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_DMA_Init+0x9e>
 8002646:	219b      	movs	r1, #155	@ 0x9b
 8002648:	4855      	ldr	r0, [pc, #340]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 800264a:	f7fe f95b 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	2b80      	cmp	r3, #128	@ 0x80
 8002654:	d007      	beq.n	8002666 <HAL_DMA_Init+0xb6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_DMA_Init+0xb6>
 800265e:	219c      	movs	r1, #156	@ 0x9c
 8002660:	484f      	ldr	r0, [pc, #316]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 8002662:	f7fe f94f 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00d      	beq.n	800268a <HAL_DMA_Init+0xda>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002676:	d008      	beq.n	800268a <HAL_DMA_Init+0xda>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002680:	d003      	beq.n	800268a <HAL_DMA_Init+0xda>
 8002682:	219d      	movs	r1, #157	@ 0x9d
 8002684:	4846      	ldr	r0, [pc, #280]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 8002686:	f7fe f93d 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00d      	beq.n	80026ae <HAL_DMA_Init+0xfe>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Init+0xfe>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026a4:	d003      	beq.n	80026ae <HAL_DMA_Init+0xfe>
 80026a6:	219e      	movs	r1, #158	@ 0x9e
 80026a8:	483d      	ldr	r0, [pc, #244]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 80026aa:	f7fe f92b 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_DMA_Init+0x116>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	2b20      	cmp	r3, #32
 80026bc:	d003      	beq.n	80026c6 <HAL_DMA_Init+0x116>
 80026be:	219f      	movs	r1, #159	@ 0x9f
 80026c0:	4837      	ldr	r0, [pc, #220]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 80026c2:	f7fe f91f 	bl	8000904 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69db      	ldr	r3, [r3, #28]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d012      	beq.n	80026f4 <HAL_DMA_Init+0x144>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026d6:	d00d      	beq.n	80026f4 <HAL_DMA_Init+0x144>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e0:	d008      	beq.n	80026f4 <HAL_DMA_Init+0x144>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA_Init+0x144>
 80026ec:	21a0      	movs	r1, #160	@ 0xa0
 80026ee:	482c      	ldr	r0, [pc, #176]	@ (80027a0 <HAL_DMA_Init+0x1f0>)
 80026f0:	f7fe f908 	bl	8000904 <assert_failed>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	4b2a      	ldr	r3, [pc, #168]	@ (80027a4 <HAL_DMA_Init+0x1f4>)
 80026fc:	4413      	add	r3, r2
 80026fe:	4a2a      	ldr	r2, [pc, #168]	@ (80027a8 <HAL_DMA_Init+0x1f8>)
 8002700:	fba2 2303 	umull	r2, r3, r2, r3
 8002704:	091b      	lsrs	r3, r3, #4
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	4a27      	ldr	r2, [pc, #156]	@ (80027ac <HAL_DMA_Init+0x1fc>)
 8002710:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002728:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800272c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002736:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002742:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800277a:	2300      	movs	r3, #0
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40020008 	.word	0x40020008
 8002788:	4002001c 	.word	0x4002001c
 800278c:	40020030 	.word	0x40020030
 8002790:	40020044 	.word	0x40020044
 8002794:	40020058 	.word	0x40020058
 8002798:	4002006c 	.word	0x4002006c
 800279c:	40020080 	.word	0x40020080
 80027a0:	08005a38 	.word	0x08005a38
 80027a4:	bffdfff8 	.word	0xbffdfff8
 80027a8:	cccccccd 	.word	0xcccccccd
 80027ac:	40020000 	.word	0x40020000

080027b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	2204      	movs	r2, #4
 80027ce:	409a      	lsls	r2, r3
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4013      	ands	r3, r2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d04f      	beq.n	8002878 <HAL_DMA_IRQHandler+0xc8>
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d04a      	beq.n	8002878 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0320 	and.w	r3, r3, #32
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d107      	bne.n	8002800 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0204 	bic.w	r2, r2, #4
 80027fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a66      	ldr	r2, [pc, #408]	@ (80029a0 <HAL_DMA_IRQHandler+0x1f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d029      	beq.n	800285e <HAL_DMA_IRQHandler+0xae>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_DMA_IRQHandler+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0xaa>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a63      	ldr	r2, [pc, #396]	@ (80029a8 <HAL_DMA_IRQHandler+0x1f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_IRQHandler+0xa4>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a62      	ldr	r2, [pc, #392]	@ (80029ac <HAL_DMA_IRQHandler+0x1fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0x9e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a60      	ldr	r2, [pc, #384]	@ (80029b0 <HAL_DMA_IRQHandler+0x200>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00a      	beq.n	8002848 <HAL_DMA_IRQHandler+0x98>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a5f      	ldr	r2, [pc, #380]	@ (80029b4 <HAL_DMA_IRQHandler+0x204>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_DMA_IRQHandler+0x92>
 800283c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002840:	e00e      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002842:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002846:	e00b      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002848:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800284c:	e008      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800284e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002852:	e005      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 8002854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002858:	e002      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800285a:	2340      	movs	r3, #64	@ 0x40
 800285c:	e000      	b.n	8002860 <HAL_DMA_IRQHandler+0xb0>
 800285e:	2304      	movs	r3, #4
 8002860:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_DMA_IRQHandler+0x208>)
 8002862:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 8094 	beq.w	8002996 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002876:	e08e      	b.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	2202      	movs	r2, #2
 800287e:	409a      	lsls	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d056      	beq.n	8002936 <HAL_DMA_IRQHandler+0x186>
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f003 0302 	and.w	r3, r3, #2
 800288e:	2b00      	cmp	r3, #0
 8002890:	d051      	beq.n	8002936 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0320 	and.w	r3, r3, #32
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10b      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 020a 	bic.w	r2, r2, #10
 80028ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a38      	ldr	r2, [pc, #224]	@ (80029a0 <HAL_DMA_IRQHandler+0x1f0>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d029      	beq.n	8002916 <HAL_DMA_IRQHandler+0x166>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a37      	ldr	r2, [pc, #220]	@ (80029a4 <HAL_DMA_IRQHandler+0x1f4>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d022      	beq.n	8002912 <HAL_DMA_IRQHandler+0x162>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a35      	ldr	r2, [pc, #212]	@ (80029a8 <HAL_DMA_IRQHandler+0x1f8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01a      	beq.n	800290c <HAL_DMA_IRQHandler+0x15c>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a34      	ldr	r2, [pc, #208]	@ (80029ac <HAL_DMA_IRQHandler+0x1fc>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d012      	beq.n	8002906 <HAL_DMA_IRQHandler+0x156>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <HAL_DMA_IRQHandler+0x200>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d00a      	beq.n	8002900 <HAL_DMA_IRQHandler+0x150>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a31      	ldr	r2, [pc, #196]	@ (80029b4 <HAL_DMA_IRQHandler+0x204>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d102      	bne.n	80028fa <HAL_DMA_IRQHandler+0x14a>
 80028f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028f8:	e00e      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 80028fa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028fe:	e00b      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002900:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002904:	e008      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800290a:	e005      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 800290c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002910:	e002      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002912:	2320      	movs	r3, #32
 8002914:	e000      	b.n	8002918 <HAL_DMA_IRQHandler+0x168>
 8002916:	2302      	movs	r3, #2
 8002918:	4a27      	ldr	r2, [pc, #156]	@ (80029b8 <HAL_DMA_IRQHandler+0x208>)
 800291a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002928:	2b00      	cmp	r3, #0
 800292a:	d034      	beq.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002934:	e02f      	b.n	8002996 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	2208      	movs	r2, #8
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	4013      	ands	r3, r2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d028      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d023      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 020e 	bic.w	r2, r2, #14
 800295e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	2101      	movs	r1, #1
 800296a:	fa01 f202 	lsl.w	r2, r1, r2
 800296e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
    }
  }
  return;
 8002996:	bf00      	nop
 8002998:	bf00      	nop
}
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40020008 	.word	0x40020008
 80029a4:	4002001c 	.word	0x4002001c
 80029a8:	40020030 	.word	0x40020030
 80029ac:	40020044 	.word	0x40020044
 80029b0:	40020058 	.word	0x40020058
 80029b4:	4002006c 	.word	0x4002006c
 80029b8:	40020000 	.word	0x40020000

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	@ 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029ca:	2300      	movs	r3, #0
 80029cc:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a96      	ldr	r2, [pc, #600]	@ (8002c2c <HAL_GPIO_Init+0x270>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0x42>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a95      	ldr	r2, [pc, #596]	@ (8002c30 <HAL_GPIO_Init+0x274>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d00f      	beq.n	80029fe <HAL_GPIO_Init+0x42>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a94      	ldr	r2, [pc, #592]	@ (8002c34 <HAL_GPIO_Init+0x278>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d00b      	beq.n	80029fe <HAL_GPIO_Init+0x42>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a93      	ldr	r2, [pc, #588]	@ (8002c38 <HAL_GPIO_Init+0x27c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <HAL_GPIO_Init+0x42>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a92      	ldr	r2, [pc, #584]	@ (8002c3c <HAL_GPIO_Init+0x280>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x42>
 80029f6:	21bd      	movs	r1, #189	@ 0xbd
 80029f8:	4891      	ldr	r0, [pc, #580]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 80029fa:	f7fd ff83 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d004      	beq.n	8002a12 <HAL_GPIO_Init+0x56>
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a10:	d303      	bcc.n	8002a1a <HAL_GPIO_Init+0x5e>
 8002a12:	21be      	movs	r1, #190	@ 0xbe
 8002a14:	488a      	ldr	r0, [pc, #552]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002a16:	f7fd ff75 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f000 821d 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	f000 8218 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	2b11      	cmp	r3, #17
 8002a34:	f000 8213 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f000 820e 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b12      	cmp	r3, #18
 8002a48:	f000 8209 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	4a7c      	ldr	r2, [pc, #496]	@ (8002c44 <HAL_GPIO_Init+0x288>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	f000 8203 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	4a7a      	ldr	r2, [pc, #488]	@ (8002c48 <HAL_GPIO_Init+0x28c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	f000 81fd 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	4a78      	ldr	r2, [pc, #480]	@ (8002c4c <HAL_GPIO_Init+0x290>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	f000 81f7 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a76      	ldr	r2, [pc, #472]	@ (8002c50 <HAL_GPIO_Init+0x294>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	f000 81f1 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	4a74      	ldr	r2, [pc, #464]	@ (8002c54 <HAL_GPIO_Init+0x298>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	f000 81eb 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	4a72      	ldr	r2, [pc, #456]	@ (8002c58 <HAL_GPIO_Init+0x29c>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	f000 81e5 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b03      	cmp	r3, #3
 8002a9a:	f000 81e0 	beq.w	8002e5e <HAL_GPIO_Init+0x4a2>
 8002a9e:	21bf      	movs	r1, #191	@ 0xbf
 8002aa0:	4867      	ldr	r0, [pc, #412]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002aa2:	f7fd ff2f 	bl	8000904 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa6:	e1da      	b.n	8002e5e <HAL_GPIO_Init+0x4a2>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f040 81c9 	bne.w	8002e58 <HAL_GPIO_Init+0x49c>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a58      	ldr	r2, [pc, #352]	@ (8002c2c <HAL_GPIO_Init+0x270>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d013      	beq.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a57      	ldr	r2, [pc, #348]	@ (8002c30 <HAL_GPIO_Init+0x274>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d00f      	beq.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	@ (8002c34 <HAL_GPIO_Init+0x278>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a55      	ldr	r2, [pc, #340]	@ (8002c38 <HAL_GPIO_Init+0x27c>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a54      	ldr	r2, [pc, #336]	@ (8002c3c <HAL_GPIO_Init+0x280>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <HAL_GPIO_Init+0x13a>
 8002aee:	21cd      	movs	r1, #205	@ 0xcd
 8002af0:	4853      	ldr	r0, [pc, #332]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002af2:	f7fd ff07 	bl	8000904 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4a57      	ldr	r2, [pc, #348]	@ (8002c58 <HAL_GPIO_Init+0x29c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f000 80c2 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
 8002b02:	4a55      	ldr	r2, [pc, #340]	@ (8002c58 <HAL_GPIO_Init+0x29c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f200 80e8 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b0a:	4a50      	ldr	r2, [pc, #320]	@ (8002c4c <HAL_GPIO_Init+0x290>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	f000 80ba 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
 8002b12:	4a4e      	ldr	r2, [pc, #312]	@ (8002c4c <HAL_GPIO_Init+0x290>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	f200 80e0 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b1a:	4a4e      	ldr	r2, [pc, #312]	@ (8002c54 <HAL_GPIO_Init+0x298>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	f000 80b2 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
 8002b22:	4a4c      	ldr	r2, [pc, #304]	@ (8002c54 <HAL_GPIO_Init+0x298>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	f200 80d8 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b2a:	4a47      	ldr	r2, [pc, #284]	@ (8002c48 <HAL_GPIO_Init+0x28c>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	f000 80aa 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
 8002b32:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <HAL_GPIO_Init+0x28c>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	f200 80d0 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b3a:	4a45      	ldr	r2, [pc, #276]	@ (8002c50 <HAL_GPIO_Init+0x294>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	f000 80a2 	beq.w	8002c86 <HAL_GPIO_Init+0x2ca>
 8002b42:	4a43      	ldr	r2, [pc, #268]	@ (8002c50 <HAL_GPIO_Init+0x294>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f200 80c8 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b4a:	2b12      	cmp	r3, #18
 8002b4c:	d82c      	bhi.n	8002ba8 <HAL_GPIO_Init+0x1ec>
 8002b4e:	2b12      	cmp	r3, #18
 8002b50:	f200 80c3 	bhi.w	8002cda <HAL_GPIO_Init+0x31e>
 8002b54:	a201      	add	r2, pc, #4	@ (adr r2, 8002b5c <HAL_GPIO_Init+0x1a0>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002c87 	.word	0x08002c87
 8002b60:	08002bb1 	.word	0x08002bb1
 8002b64:	08002c03 	.word	0x08002c03
 8002b68:	08002cd5 	.word	0x08002cd5
 8002b6c:	08002cdb 	.word	0x08002cdb
 8002b70:	08002cdb 	.word	0x08002cdb
 8002b74:	08002cdb 	.word	0x08002cdb
 8002b78:	08002cdb 	.word	0x08002cdb
 8002b7c:	08002cdb 	.word	0x08002cdb
 8002b80:	08002cdb 	.word	0x08002cdb
 8002b84:	08002cdb 	.word	0x08002cdb
 8002b88:	08002cdb 	.word	0x08002cdb
 8002b8c:	08002cdb 	.word	0x08002cdb
 8002b90:	08002cdb 	.word	0x08002cdb
 8002b94:	08002cdb 	.word	0x08002cdb
 8002b98:	08002cdb 	.word	0x08002cdb
 8002b9c:	08002cdb 	.word	0x08002cdb
 8002ba0:	08002bd9 	.word	0x08002bd9
 8002ba4:	08002c5d 	.word	0x08002c5d
 8002ba8:	4a26      	ldr	r2, [pc, #152]	@ (8002c44 <HAL_GPIO_Init+0x288>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d06b      	beq.n	8002c86 <HAL_GPIO_Init+0x2ca>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002bae:	e094      	b.n	8002cda <HAL_GPIO_Init+0x31e>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d00b      	beq.n	8002bd0 <HAL_GPIO_Init+0x214>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_Init+0x214>
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x214>
 8002bc8:	21d5      	movs	r1, #213	@ 0xd5
 8002bca:	481d      	ldr	r0, [pc, #116]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002bcc:	f7fd fe9a 	bl	8000904 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	623b      	str	r3, [r7, #32]
          break;
 8002bd6:	e081      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d00b      	beq.n	8002bf8 <HAL_GPIO_Init+0x23c>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d007      	beq.n	8002bf8 <HAL_GPIO_Init+0x23c>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x23c>
 8002bf0:	21dc      	movs	r1, #220	@ 0xdc
 8002bf2:	4813      	ldr	r0, [pc, #76]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002bf4:	f7fd fe86 	bl	8000904 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	623b      	str	r3, [r7, #32]
          break;
 8002c00:	e06c      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d00b      	beq.n	8002c22 <HAL_GPIO_Init+0x266>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d007      	beq.n	8002c22 <HAL_GPIO_Init+0x266>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x266>
 8002c1a:	21e3      	movs	r1, #227	@ 0xe3
 8002c1c:	4808      	ldr	r0, [pc, #32]	@ (8002c40 <HAL_GPIO_Init+0x284>)
 8002c1e:	f7fd fe71 	bl	8000904 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	3308      	adds	r3, #8
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e057      	b.n	8002cdc <HAL_GPIO_Init+0x320>
 8002c2c:	40010800 	.word	0x40010800
 8002c30:	40010c00 	.word	0x40010c00
 8002c34:	40011000 	.word	0x40011000
 8002c38:	40011400 	.word	0x40011400
 8002c3c:	40011800 	.word	0x40011800
 8002c40:	08005a70 	.word	0x08005a70
 8002c44:	10110000 	.word	0x10110000
 8002c48:	10210000 	.word	0x10210000
 8002c4c:	10310000 	.word	0x10310000
 8002c50:	10120000 	.word	0x10120000
 8002c54:	10220000 	.word	0x10220000
 8002c58:	10320000 	.word	0x10320000
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d00b      	beq.n	8002c7c <HAL_GPIO_Init+0x2c0>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d007      	beq.n	8002c7c <HAL_GPIO_Init+0x2c0>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <HAL_GPIO_Init+0x2c0>
 8002c74:	21ea      	movs	r1, #234	@ 0xea
 8002c76:	4880      	ldr	r0, [pc, #512]	@ (8002e78 <HAL_GPIO_Init+0x4bc>)
 8002c78:	f7fd fe44 	bl	8000904 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	330c      	adds	r3, #12
 8002c82:	623b      	str	r3, [r7, #32]
          break;
 8002c84:	e02a      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <HAL_GPIO_Init+0x2ea>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d007      	beq.n	8002ca6 <HAL_GPIO_Init+0x2ea>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d003      	beq.n	8002ca6 <HAL_GPIO_Init+0x2ea>
 8002c9e:	21f7      	movs	r1, #247	@ 0xf7
 8002ca0:	4875      	ldr	r0, [pc, #468]	@ (8002e78 <HAL_GPIO_Init+0x4bc>)
 8002ca2:	f7fd fe2f 	bl	8000904 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d102      	bne.n	8002cb4 <HAL_GPIO_Init+0x2f8>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002cae:	2304      	movs	r3, #4
 8002cb0:	623b      	str	r3, [r7, #32]
          break;
 8002cb2:	e013      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d105      	bne.n	8002cc8 <HAL_GPIO_Init+0x30c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cbc:	2308      	movs	r3, #8
 8002cbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	611a      	str	r2, [r3, #16]
          break;
 8002cc6:	e009      	b.n	8002cdc <HAL_GPIO_Init+0x320>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cc8:	2308      	movs	r3, #8
 8002cca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	615a      	str	r2, [r3, #20]
          break;
 8002cd2:	e003      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	623b      	str	r3, [r7, #32]
          break;
 8002cd8:	e000      	b.n	8002cdc <HAL_GPIO_Init+0x320>
          break;
 8002cda:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	2bff      	cmp	r3, #255	@ 0xff
 8002ce0:	d801      	bhi.n	8002ce6 <HAL_GPIO_Init+0x32a>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	e001      	b.n	8002cea <HAL_GPIO_Init+0x32e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3304      	adds	r3, #4
 8002cea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	2bff      	cmp	r3, #255	@ 0xff
 8002cf0:	d802      	bhi.n	8002cf8 <HAL_GPIO_Init+0x33c>
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	e002      	b.n	8002cfe <HAL_GPIO_Init+0x342>
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	3b08      	subs	r3, #8
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	210f      	movs	r1, #15
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	401a      	ands	r2, r3
 8002d10:	6a39      	ldr	r1, [r7, #32]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 8096 	beq.w	8002e58 <HAL_GPIO_Init+0x49c>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002d2c:	4b53      	ldr	r3, [pc, #332]	@ (8002e7c <HAL_GPIO_Init+0x4c0>)
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	4a52      	ldr	r2, [pc, #328]	@ (8002e7c <HAL_GPIO_Init+0x4c0>)
 8002d32:	f043 0301 	orr.w	r3, r3, #1
 8002d36:	6193      	str	r3, [r2, #24]
 8002d38:	4b50      	ldr	r3, [pc, #320]	@ (8002e7c <HAL_GPIO_Init+0x4c0>)
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	60bb      	str	r3, [r7, #8]
 8002d42:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d44:	4a4e      	ldr	r2, [pc, #312]	@ (8002e80 <HAL_GPIO_Init+0x4c4>)
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	089b      	lsrs	r3, r3, #2
 8002d4a:	3302      	adds	r3, #2
 8002d4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d50:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	68fa      	ldr	r2, [r7, #12]
 8002d64:	4013      	ands	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a46      	ldr	r2, [pc, #280]	@ (8002e84 <HAL_GPIO_Init+0x4c8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <HAL_GPIO_Init+0x3dc>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a45      	ldr	r2, [pc, #276]	@ (8002e88 <HAL_GPIO_Init+0x4cc>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00d      	beq.n	8002d94 <HAL_GPIO_Init+0x3d8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a44      	ldr	r2, [pc, #272]	@ (8002e8c <HAL_GPIO_Init+0x4d0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d007      	beq.n	8002d90 <HAL_GPIO_Init+0x3d4>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a43      	ldr	r2, [pc, #268]	@ (8002e90 <HAL_GPIO_Init+0x4d4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d101      	bne.n	8002d8c <HAL_GPIO_Init+0x3d0>
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e006      	b.n	8002d9a <HAL_GPIO_Init+0x3de>
 8002d8c:	2304      	movs	r3, #4
 8002d8e:	e004      	b.n	8002d9a <HAL_GPIO_Init+0x3de>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e002      	b.n	8002d9a <HAL_GPIO_Init+0x3de>
 8002d94:	2301      	movs	r3, #1
 8002d96:	e000      	b.n	8002d9a <HAL_GPIO_Init+0x3de>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d9c:	f002 0203 	and.w	r2, r2, #3
 8002da0:	0092      	lsls	r2, r2, #2
 8002da2:	4093      	lsls	r3, r2
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002daa:	4935      	ldr	r1, [pc, #212]	@ (8002e80 <HAL_GPIO_Init+0x4c4>)
 8002dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	3302      	adds	r3, #2
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d006      	beq.n	8002dd2 <HAL_GPIO_Init+0x416>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002dc4:	4b33      	ldr	r3, [pc, #204]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4932      	ldr	r1, [pc, #200]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	608b      	str	r3, [r1, #8]
 8002dd0:	e006      	b.n	8002de0 <HAL_GPIO_Init+0x424>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002dd2:	4b30      	ldr	r3, [pc, #192]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	492e      	ldr	r1, [pc, #184]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002ddc:	4013      	ands	r3, r2
 8002dde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d006      	beq.n	8002dfa <HAL_GPIO_Init+0x43e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002dec:	4b29      	ldr	r3, [pc, #164]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002dee:	68da      	ldr	r2, [r3, #12]
 8002df0:	4928      	ldr	r1, [pc, #160]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60cb      	str	r3, [r1, #12]
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x44c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dfa:	4b26      	ldr	r3, [pc, #152]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	43db      	mvns	r3, r3
 8002e02:	4924      	ldr	r1, [pc, #144]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d006      	beq.n	8002e22 <HAL_GPIO_Init+0x466>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002e14:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	491e      	ldr	r1, [pc, #120]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	604b      	str	r3, [r1, #4]
 8002e20:	e006      	b.n	8002e30 <HAL_GPIO_Init+0x474>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002e22:	4b1c      	ldr	r3, [pc, #112]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	491a      	ldr	r1, [pc, #104]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <HAL_GPIO_Init+0x48e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e3c:	4b15      	ldr	r3, [pc, #84]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4914      	ldr	r1, [pc, #80]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	600b      	str	r3, [r1, #0]
 8002e48:	e006      	b.n	8002e58 <HAL_GPIO_Init+0x49c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e4a:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	43db      	mvns	r3, r3
 8002e52:	4910      	ldr	r1, [pc, #64]	@ (8002e94 <HAL_GPIO_Init+0x4d8>)
 8002e54:	4013      	ands	r3, r2
 8002e56:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f47f ae1d 	bne.w	8002aa8 <HAL_GPIO_Init+0xec>
  }
}
 8002e6e:	bf00      	nop
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	@ 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	08005a70 	.word	0x08005a70
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40010000 	.word	0x40010000
 8002e84:	40010800 	.word	0x40010800
 8002e88:	40010c00 	.word	0x40010c00
 8002e8c:	40011000 	.word	0x40011000
 8002e90:	40011400 	.word	0x40011400
 8002e94:	40010400 	.word	0x40010400

08002e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	807b      	strh	r3, [r7, #2]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002ea8:	887b      	ldrh	r3, [r7, #2]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d104      	bne.n	8002eb8 <HAL_GPIO_WritePin+0x20>
 8002eae:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8002eb2:	480e      	ldr	r0, [pc, #56]	@ (8002eec <HAL_GPIO_WritePin+0x54>)
 8002eb4:	f7fd fd26 	bl	8000904 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_WritePin+0x36>
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d004      	beq.n	8002ece <HAL_GPIO_WritePin+0x36>
 8002ec4:	f240 11d5 	movw	r1, #469	@ 0x1d5
 8002ec8:	4808      	ldr	r0, [pc, #32]	@ (8002eec <HAL_GPIO_WritePin+0x54>)
 8002eca:	f7fd fd1b 	bl	8000904 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8002ece:	787b      	ldrb	r3, [r7, #1]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed4:	887a      	ldrh	r2, [r7, #2]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eda:	e003      	b.n	8002ee4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002edc:	887b      	ldrh	r3, [r7, #2]
 8002ede:	041a      	lsls	r2, r3, #16
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	611a      	str	r2, [r3, #16]
}
 8002ee4:	bf00      	nop
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	08005a70 	.word	0x08005a70

08002ef0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002efa:	4b08      	ldr	r3, [pc, #32]	@ (8002f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	88fb      	ldrh	r3, [r7, #6]
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d006      	beq.n	8002f14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f06:	4a05      	ldr	r2, [pc, #20]	@ (8002f1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f08:	88fb      	ldrh	r3, [r7, #6]
 8002f0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f0c:	88fb      	ldrh	r3, [r7, #6]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 f806 	bl	8002f20 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f14:	bf00      	nop
 8002f16:	3708      	adds	r7, #8
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40010400 	.word	0x40010400

08002f20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f2a:	bf00      	nop
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bc80      	pop	{r7}
 8002f32:	4770      	bx	lr

08002f34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e1b4      	b.n	80032b0 <HAL_I2C_Init+0x37c>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a9b      	ldr	r2, [pc, #620]	@ (80031b8 <HAL_I2C_Init+0x284>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_I2C_Init+0x30>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a99      	ldr	r2, [pc, #612]	@ (80031bc <HAL_I2C_Init+0x288>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_I2C_Init+0x30>
 8002f5a:	f240 11db 	movw	r1, #475	@ 0x1db
 8002f5e:	4898      	ldr	r0, [pc, #608]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002f60:	f7fd fcd0 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <HAL_I2C_Init+0x42>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	4a94      	ldr	r2, [pc, #592]	@ (80031c4 <HAL_I2C_Init+0x290>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d904      	bls.n	8002f80 <HAL_I2C_Init+0x4c>
 8002f76:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8002f7a:	4891      	ldr	r0, [pc, #580]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002f7c:	f7fd fcc2 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d009      	beq.n	8002f9c <HAL_I2C_Init+0x68>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f90:	d004      	beq.n	8002f9c <HAL_I2C_Init+0x68>
 8002f92:	f240 11dd 	movw	r1, #477	@ 0x1dd
 8002f96:	488a      	ldr	r0, [pc, #552]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002f98:	f7fd fcb4 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa4:	d304      	bcc.n	8002fb0 <HAL_I2C_Init+0x7c>
 8002fa6:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8002faa:	4885      	ldr	r0, [pc, #532]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002fac:	f7fd fcaa 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fb8:	d009      	beq.n	8002fce <HAL_I2C_Init+0x9a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8002fc2:	d004      	beq.n	8002fce <HAL_I2C_Init+0x9a>
 8002fc4:	f240 11df 	movw	r1, #479	@ 0x1df
 8002fc8:	487d      	ldr	r0, [pc, #500]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002fca:	f7fd fc9b 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_I2C_Init+0xb4>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d004      	beq.n	8002fe8 <HAL_I2C_Init+0xb4>
 8002fde:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8002fe2:	4877      	ldr	r0, [pc, #476]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002fe4:	f7fd fc8e 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d004      	beq.n	8002ffe <HAL_I2C_Init+0xca>
 8002ff4:	f240 11e1 	movw	r1, #481	@ 0x1e1
 8002ff8:	4871      	ldr	r0, [pc, #452]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8002ffa:	f7fd fc83 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d008      	beq.n	8003018 <HAL_I2C_Init+0xe4>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	2b40      	cmp	r3, #64	@ 0x40
 800300c:	d004      	beq.n	8003018 <HAL_I2C_Init+0xe4>
 800300e:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8003012:	486b      	ldr	r0, [pc, #428]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 8003014:	f7fd fc76 	bl	8000904 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d008      	beq.n	8003032 <HAL_I2C_Init+0xfe>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	2b80      	cmp	r3, #128	@ 0x80
 8003026:	d004      	beq.n	8003032 <HAL_I2C_Init+0xfe>
 8003028:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800302c:	4864      	ldr	r0, [pc, #400]	@ (80031c0 <HAL_I2C_Init+0x28c>)
 800302e:	f7fd fc69 	bl	8000904 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_I2C_Init+0x118>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fb46 	bl	80006d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2224      	movs	r2, #36	@ 0x24
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0201 	bic.w	r2, r2, #1
 8003062:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003072:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003082:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003084:	f000 fe76 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 8003088:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	4a4e      	ldr	r2, [pc, #312]	@ (80031c8 <HAL_I2C_Init+0x294>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d807      	bhi.n	80030a4 <HAL_I2C_Init+0x170>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	4a4d      	ldr	r2, [pc, #308]	@ (80031cc <HAL_I2C_Init+0x298>)
 8003098:	4293      	cmp	r3, r2
 800309a:	bf94      	ite	ls
 800309c:	2301      	movls	r3, #1
 800309e:	2300      	movhi	r3, #0
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	e006      	b.n	80030b2 <HAL_I2C_Init+0x17e>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	@ (80031d0 <HAL_I2C_Init+0x29c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	bf94      	ite	ls
 80030ac:	2301      	movls	r3, #1
 80030ae:	2300      	movhi	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_I2C_Init+0x186>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e0fa      	b.n	80032b0 <HAL_I2C_Init+0x37c>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a45      	ldr	r2, [pc, #276]	@ (80031d4 <HAL_I2C_Init+0x2a0>)
 80030be:	fba2 2303 	umull	r2, r3, r2, r3
 80030c2:	0c9b      	lsrs	r3, r3, #18
 80030c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	430a      	orrs	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	4a37      	ldr	r2, [pc, #220]	@ (80031c8 <HAL_I2C_Init+0x294>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d802      	bhi.n	80030f4 <HAL_I2C_Init+0x1c0>
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	e009      	b.n	8003108 <HAL_I2C_Init+0x1d4>
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030fa:	fb02 f303 	mul.w	r3, r2, r3
 80030fe:	4a36      	ldr	r2, [pc, #216]	@ (80031d8 <HAL_I2C_Init+0x2a4>)
 8003100:	fba2 2303 	umull	r2, r3, r2, r3
 8003104:	099b      	lsrs	r3, r3, #6
 8003106:	3301      	adds	r3, #1
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6812      	ldr	r2, [r2, #0]
 800310c:	430b      	orrs	r3, r1
 800310e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800311a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4929      	ldr	r1, [pc, #164]	@ (80031c8 <HAL_I2C_Init+0x294>)
 8003124:	428b      	cmp	r3, r1
 8003126:	d819      	bhi.n	800315c <HAL_I2C_Init+0x228>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1e59      	subs	r1, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	fbb1 f3f3 	udiv	r3, r1, r3
 8003136:	1c59      	adds	r1, r3, #1
 8003138:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800313c:	400b      	ands	r3, r1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_I2C_Init+0x224>
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1e59      	subs	r1, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003150:	3301      	adds	r3, #1
 8003152:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003156:	e064      	b.n	8003222 <HAL_I2C_Init+0x2ee>
 8003158:	2304      	movs	r3, #4
 800315a:	e062      	b.n	8003222 <HAL_I2C_Init+0x2ee>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d111      	bne.n	8003188 <HAL_I2C_Init+0x254>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1e58      	subs	r0, r3, #1
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6859      	ldr	r1, [r3, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	440b      	add	r3, r1
 8003172:	fbb0 f3f3 	udiv	r3, r0, r3
 8003176:	3301      	adds	r3, #1
 8003178:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317c:	2b00      	cmp	r3, #0
 800317e:	bf0c      	ite	eq
 8003180:	2301      	moveq	r3, #1
 8003182:	2300      	movne	r3, #0
 8003184:	b2db      	uxtb	r3, r3
 8003186:	e012      	b.n	80031ae <HAL_I2C_Init+0x27a>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e58      	subs	r0, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6859      	ldr	r1, [r3, #4]
 8003190:	460b      	mov	r3, r1
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	0099      	lsls	r1, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	fbb0 f3f3 	udiv	r3, r0, r3
 800319e:	3301      	adds	r3, #1
 80031a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	bf0c      	ite	eq
 80031a8:	2301      	moveq	r3, #1
 80031aa:	2300      	movne	r3, #0
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d014      	beq.n	80031dc <HAL_I2C_Init+0x2a8>
 80031b2:	2301      	movs	r3, #1
 80031b4:	e035      	b.n	8003222 <HAL_I2C_Init+0x2ee>
 80031b6:	bf00      	nop
 80031b8:	40005400 	.word	0x40005400
 80031bc:	40005800 	.word	0x40005800
 80031c0:	08005aac 	.word	0x08005aac
 80031c4:	00061a80 	.word	0x00061a80
 80031c8:	000186a0 	.word	0x000186a0
 80031cc:	001e847f 	.word	0x001e847f
 80031d0:	003d08ff 	.word	0x003d08ff
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	10624dd3 	.word	0x10624dd3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10e      	bne.n	8003202 <HAL_I2C_Init+0x2ce>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	1e58      	subs	r0, r3, #1
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6859      	ldr	r1, [r3, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	440b      	add	r3, r1
 80031f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f6:	3301      	adds	r3, #1
 80031f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003200:	e00f      	b.n	8003222 <HAL_I2C_Init+0x2ee>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e58      	subs	r0, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	440b      	add	r3, r1
 8003210:	0099      	lsls	r1, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	fbb0 f3f3 	udiv	r3, r0, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	6809      	ldr	r1, [r1, #0]
 8003226:	4313      	orrs	r3, r2
 8003228:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003250:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6911      	ldr	r1, [r2, #16]
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68d2      	ldr	r2, [r2, #12]
 800325c:	4311      	orrs	r1, r2
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	6812      	ldr	r2, [r2, #0]
 8003262:	430b      	orrs	r3, r1
 8003264:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	695a      	ldr	r2, [r3, #20]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	431a      	orrs	r2, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f042 0201 	orr.w	r2, r2, #1
 8003290:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b086      	sub	sp, #24
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e35a      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d01c      	beq.n	800330c <HAL_RCC_OscConfig+0x54>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0301 	and.w	r3, r3, #1
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d116      	bne.n	800330c <HAL_RCC_OscConfig+0x54>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d110      	bne.n	800330c <HAL_RCC_OscConfig+0x54>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10a      	bne.n	800330c <HAL_RCC_OscConfig+0x54>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0304 	and.w	r3, r3, #4
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <HAL_RCC_OscConfig+0x54>
 8003302:	f240 1165 	movw	r1, #357	@ 0x165
 8003306:	488f      	ldr	r0, [pc, #572]	@ (8003544 <HAL_RCC_OscConfig+0x28c>)
 8003308:	f7fd fafc 	bl	8000904 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 809a 	beq.w	800344e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00e      	beq.n	8003340 <HAL_RCC_OscConfig+0x88>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800332a:	d009      	beq.n	8003340 <HAL_RCC_OscConfig+0x88>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003334:	d004      	beq.n	8003340 <HAL_RCC_OscConfig+0x88>
 8003336:	f240 116b 	movw	r1, #363	@ 0x16b
 800333a:	4882      	ldr	r0, [pc, #520]	@ (8003544 <HAL_RCC_OscConfig+0x28c>)
 800333c:	f7fd fae2 	bl	8000904 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003340:	4b81      	ldr	r3, [pc, #516]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f003 030c 	and.w	r3, r3, #12
 8003348:	2b04      	cmp	r3, #4
 800334a:	d00c      	beq.n	8003366 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800334c:	4b7e      	ldr	r3, [pc, #504]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 030c 	and.w	r3, r3, #12
 8003354:	2b08      	cmp	r3, #8
 8003356:	d112      	bne.n	800337e <HAL_RCC_OscConfig+0xc6>
 8003358:	4b7b      	ldr	r3, [pc, #492]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003360:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003364:	d10b      	bne.n	800337e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003366:	4b78      	ldr	r3, [pc, #480]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d06c      	beq.n	800344c <HAL_RCC_OscConfig+0x194>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d168      	bne.n	800344c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e300      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0xde>
 8003388:	4b6f      	ldr	r3, [pc, #444]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800338e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003392:	6013      	str	r3, [r2, #0]
 8003394:	e02e      	b.n	80033f4 <HAL_RCC_OscConfig+0x13c>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <HAL_RCC_OscConfig+0x100>
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a69      	ldr	r2, [pc, #420]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	4b67      	ldr	r3, [pc, #412]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a66      	ldr	r2, [pc, #408]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	e01d      	b.n	80033f4 <HAL_RCC_OscConfig+0x13c>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033c0:	d10c      	bne.n	80033dc <HAL_RCC_OscConfig+0x124>
 80033c2:	4b61      	ldr	r3, [pc, #388]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a60      	ldr	r2, [pc, #384]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033cc:	6013      	str	r3, [r2, #0]
 80033ce:	4b5e      	ldr	r3, [pc, #376]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5d      	ldr	r2, [pc, #372]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	e00b      	b.n	80033f4 <HAL_RCC_OscConfig+0x13c>
 80033dc:	4b5a      	ldr	r3, [pc, #360]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a59      	ldr	r2, [pc, #356]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033e6:	6013      	str	r3, [r2, #0]
 80033e8:	4b57      	ldr	r3, [pc, #348]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a56      	ldr	r2, [pc, #344]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80033ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033f2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d013      	beq.n	8003424 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fc:	f7fd fdce 	bl	8000f9c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003404:	f7fd fdca 	bl	8000f9c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b64      	cmp	r3, #100	@ 0x64
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e2b4      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003416:	4b4c      	ldr	r3, [pc, #304]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x14c>
 8003422:	e014      	b.n	800344e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7fd fdba 	bl	8000f9c <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7fd fdb6 	bl	8000f9c <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	@ 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e2a0      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343e:	4b42      	ldr	r3, [pc, #264]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1f0      	bne.n	800342c <HAL_RCC_OscConfig+0x174>
 800344a:	e000      	b.n	800344e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8080 	beq.w	800355c <HAL_RCC_OscConfig+0x2a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_OscConfig+0x1be>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d004      	beq.n	8003476 <HAL_RCC_OscConfig+0x1be>
 800346c:	f240 119f 	movw	r1, #415	@ 0x19f
 8003470:	4834      	ldr	r0, [pc, #208]	@ (8003544 <HAL_RCC_OscConfig+0x28c>)
 8003472:	f7fd fa47 	bl	8000904 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	2b1f      	cmp	r3, #31
 800347c:	d904      	bls.n	8003488 <HAL_RCC_OscConfig+0x1d0>
 800347e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8003482:	4830      	ldr	r0, [pc, #192]	@ (8003544 <HAL_RCC_OscConfig+0x28c>)
 8003484:	f7fd fa3e 	bl	8000904 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003488:	4b2f      	ldr	r3, [pc, #188]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f003 030c 	and.w	r3, r3, #12
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00b      	beq.n	80034ac <HAL_RCC_OscConfig+0x1f4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003494:	4b2c      	ldr	r3, [pc, #176]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f003 030c 	and.w	r3, r3, #12
 800349c:	2b08      	cmp	r3, #8
 800349e:	d11c      	bne.n	80034da <HAL_RCC_OscConfig+0x222>
 80034a0:	4b29      	ldr	r3, [pc, #164]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d116      	bne.n	80034da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ac:	4b26      	ldr	r3, [pc, #152]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d005      	beq.n	80034c4 <HAL_RCC_OscConfig+0x20c>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e25d      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c4:	4b20      	ldr	r3, [pc, #128]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	695b      	ldr	r3, [r3, #20]
 80034d0:	00db      	lsls	r3, r3, #3
 80034d2:	491d      	ldr	r1, [pc, #116]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d8:	e040      	b.n	800355c <HAL_RCC_OscConfig+0x2a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d020      	beq.n	8003524 <HAL_RCC_OscConfig+0x26c>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e2:	4b1a      	ldr	r3, [pc, #104]	@ (800354c <HAL_RCC_OscConfig+0x294>)
 80034e4:	2201      	movs	r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fd fd58 	bl	8000f9c <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f0:	f7fd fd54 	bl	8000f9c <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e23e      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0x238>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800350e:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	00db      	lsls	r3, r3, #3
 800351c:	490a      	ldr	r1, [pc, #40]	@ (8003548 <HAL_RCC_OscConfig+0x290>)
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]
 8003522:	e01b      	b.n	800355c <HAL_RCC_OscConfig+0x2a4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003524:	4b09      	ldr	r3, [pc, #36]	@ (800354c <HAL_RCC_OscConfig+0x294>)
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352a:	f7fd fd37 	bl	8000f9c <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003530:	e00e      	b.n	8003550 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003532:	f7fd fd33 	bl	8000f9c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d907      	bls.n	8003550 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e21d      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
 8003544:	08005ae4 	.word	0x08005ae4
 8003548:	40021000 	.word	0x40021000
 800354c:	42420000 	.word	0x42420000
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003550:	4b7d      	ldr	r3, [pc, #500]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1ea      	bne.n	8003532 <HAL_RCC_OscConfig+0x27a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0308 	and.w	r3, r3, #8
 8003564:	2b00      	cmp	r3, #0
 8003566:	d040      	beq.n	80035ea <HAL_RCC_OscConfig+0x332>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d008      	beq.n	8003582 <HAL_RCC_OscConfig+0x2ca>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d004      	beq.n	8003582 <HAL_RCC_OscConfig+0x2ca>
 8003578:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 800357c:	4873      	ldr	r0, [pc, #460]	@ (800374c <HAL_RCC_OscConfig+0x494>)
 800357e:	f7fd f9c1 	bl	8000904 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d019      	beq.n	80035be <HAL_RCC_OscConfig+0x306>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b71      	ldr	r3, [pc, #452]	@ (8003750 <HAL_RCC_OscConfig+0x498>)
 800358c:	2201      	movs	r2, #1
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fd fd04 	bl	8000f9c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fd fd00 	bl	8000f9c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x2f2>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e1ea      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035aa:	4b67      	ldr	r3, [pc, #412]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x2e0>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80035b6:	2001      	movs	r0, #1
 80035b8:	f000 fbf0 	bl	8003d9c <RCC_Delay>
 80035bc:	e015      	b.n	80035ea <HAL_RCC_OscConfig+0x332>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035be:	4b64      	ldr	r3, [pc, #400]	@ (8003750 <HAL_RCC_OscConfig+0x498>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c4:	f7fd fcea 	bl	8000f9c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x326>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035cc:	f7fd fce6 	bl	8000f9c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e1d0      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035de:	4b5a      	ldr	r3, [pc, #360]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x314>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80bf 	beq.w	8003776 <HAL_RCC_OscConfig+0x4be>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00c      	beq.n	800361e <HAL_RCC_OscConfig+0x366>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d008      	beq.n	800361e <HAL_RCC_OscConfig+0x366>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b05      	cmp	r3, #5
 8003612:	d004      	beq.n	800361e <HAL_RCC_OscConfig+0x366>
 8003614:	f240 210f 	movw	r1, #527	@ 0x20f
 8003618:	484c      	ldr	r0, [pc, #304]	@ (800374c <HAL_RCC_OscConfig+0x494>)
 800361a:	f7fd f973 	bl	8000904 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800361e:	4b4a      	ldr	r3, [pc, #296]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <HAL_RCC_OscConfig+0x38e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b47      	ldr	r3, [pc, #284]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	4a46      	ldr	r2, [pc, #280]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003634:	61d3      	str	r3, [r2, #28]
 8003636:	4b44      	ldr	r3, [pc, #272]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 8003638:	69db      	ldr	r3, [r3, #28]
 800363a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800363e:	60bb      	str	r3, [r7, #8]
 8003640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003646:	4b43      	ldr	r3, [pc, #268]	@ (8003754 <HAL_RCC_OscConfig+0x49c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364e:	2b00      	cmp	r3, #0
 8003650:	d118      	bne.n	8003684 <HAL_RCC_OscConfig+0x3cc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003652:	4b40      	ldr	r3, [pc, #256]	@ (8003754 <HAL_RCC_OscConfig+0x49c>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_RCC_OscConfig+0x49c>)
 8003658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800365c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800365e:	f7fd fc9d 	bl	8000f9c <HAL_GetTick>
 8003662:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003664:	e008      	b.n	8003678 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003666:	f7fd fc99 	bl	8000f9c <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b64      	cmp	r3, #100	@ 0x64
 8003672:	d901      	bls.n	8003678 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e183      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003678:	4b36      	ldr	r3, [pc, #216]	@ (8003754 <HAL_RCC_OscConfig+0x49c>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x3e2>
 800368c:	4b2e      	ldr	r3, [pc, #184]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	4a2d      	ldr	r2, [pc, #180]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 8003692:	f043 0301 	orr.w	r3, r3, #1
 8003696:	6213      	str	r3, [r2, #32]
 8003698:	e02d      	b.n	80036f6 <HAL_RCC_OscConfig+0x43e>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10c      	bne.n	80036bc <HAL_RCC_OscConfig+0x404>
 80036a2:	4b29      	ldr	r3, [pc, #164]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a28      	ldr	r2, [pc, #160]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036a8:	f023 0301 	bic.w	r3, r3, #1
 80036ac:	6213      	str	r3, [r2, #32]
 80036ae:	4b26      	ldr	r3, [pc, #152]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4a25      	ldr	r2, [pc, #148]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036b4:	f023 0304 	bic.w	r3, r3, #4
 80036b8:	6213      	str	r3, [r2, #32]
 80036ba:	e01c      	b.n	80036f6 <HAL_RCC_OscConfig+0x43e>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d10c      	bne.n	80036de <HAL_RCC_OscConfig+0x426>
 80036c4:	4b20      	ldr	r3, [pc, #128]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036ca:	f043 0304 	orr.w	r3, r3, #4
 80036ce:	6213      	str	r3, [r2, #32]
 80036d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036d2:	6a1b      	ldr	r3, [r3, #32]
 80036d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	6213      	str	r3, [r2, #32]
 80036dc:	e00b      	b.n	80036f6 <HAL_RCC_OscConfig+0x43e>
 80036de:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4a19      	ldr	r2, [pc, #100]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	6213      	str	r3, [r2, #32]
 80036ea:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4a16      	ldr	r2, [pc, #88]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d015      	beq.n	800372a <HAL_RCC_OscConfig+0x472>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036fe:	f7fd fc4d 	bl	8000f9c <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003704:	e00a      	b.n	800371c <HAL_RCC_OscConfig+0x464>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003706:	f7fd fc49 	bl	8000f9c <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003714:	4293      	cmp	r3, r2
 8003716:	d901      	bls.n	800371c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e131      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371c:	4b0a      	ldr	r3, [pc, #40]	@ (8003748 <HAL_RCC_OscConfig+0x490>)
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b00      	cmp	r3, #0
 8003726:	d0ee      	beq.n	8003706 <HAL_RCC_OscConfig+0x44e>
 8003728:	e01c      	b.n	8003764 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372a:	f7fd fc37 	bl	8000f9c <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003730:	e012      	b.n	8003758 <HAL_RCC_OscConfig+0x4a0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fd fc33 	bl	8000f9c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d909      	bls.n	8003758 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e11b      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
 8003748:	40021000 	.word	0x40021000
 800374c:	08005ae4 	.word	0x08005ae4
 8003750:	42420480 	.word	0x42420480
 8003754:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003758:	4b8b      	ldr	r3, [pc, #556]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1e6      	bne.n	8003732 <HAL_RCC_OscConfig+0x47a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d105      	bne.n	8003776 <HAL_RCC_OscConfig+0x4be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800376a:	4b87      	ldr	r3, [pc, #540]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	4a86      	ldr	r2, [pc, #536]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 8003770:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003774:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e0>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d008      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e0>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d004      	beq.n	8003798 <HAL_RCC_OscConfig+0x4e0>
 800378e:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8003792:	487e      	ldr	r0, [pc, #504]	@ (800398c <HAL_RCC_OscConfig+0x6d4>)
 8003794:	f7fd f8b6 	bl	8000904 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 80ee 	beq.w	800397e <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037a2:	4b79      	ldr	r3, [pc, #484]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f003 030c 	and.w	r3, r3, #12
 80037aa:	2b08      	cmp	r3, #8
 80037ac:	f000 80ce 	beq.w	800394c <HAL_RCC_OscConfig+0x694>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	f040 80b2 	bne.w	800391e <HAL_RCC_OscConfig+0x666>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d009      	beq.n	80037d6 <HAL_RCC_OscConfig+0x51e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037ca:	d004      	beq.n	80037d6 <HAL_RCC_OscConfig+0x51e>
 80037cc:	f240 21b6 	movw	r1, #694	@ 0x2b6
 80037d0:	486e      	ldr	r0, [pc, #440]	@ (800398c <HAL_RCC_OscConfig+0x6d4>)
 80037d2:	f7fd f897 	bl	8000904 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d04a      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e6:	d045      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80037f0:	d040      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037fa:	d03b      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003804:	d036      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380a:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800380e:	d031      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003818:	d02c      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003822:	d027      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003828:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800382c:	d022      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003836:	d01d      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003840:	d018      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003854:	d00e      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385a:	f5b3 1f50 	cmp.w	r3, #3407872	@ 0x340000
 800385e:	d009      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003864:	f5b3 1f60 	cmp.w	r3, #3670016	@ 0x380000
 8003868:	d004      	beq.n	8003874 <HAL_RCC_OscConfig+0x5bc>
 800386a:	f240 21b7 	movw	r1, #695	@ 0x2b7
 800386e:	4847      	ldr	r0, [pc, #284]	@ (800398c <HAL_RCC_OscConfig+0x6d4>)
 8003870:	f7fd f848 	bl	8000904 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003874:	4b46      	ldr	r3, [pc, #280]	@ (8003990 <HAL_RCC_OscConfig+0x6d8>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387a:	f7fd fb8f 	bl	8000f9c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x5dc>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003882:	f7fd fb8b 	bl	8000f9c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x5dc>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e075      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003894:	4b3c      	ldr	r3, [pc, #240]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCC_OscConfig+0x5ca>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6a1b      	ldr	r3, [r3, #32]
 80038a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038a8:	d116      	bne.n	80038d8 <HAL_RCC_OscConfig+0x620>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d009      	beq.n	80038c6 <HAL_RCC_OscConfig+0x60e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038ba:	d004      	beq.n	80038c6 <HAL_RCC_OscConfig+0x60e>
 80038bc:	f240 21cd 	movw	r1, #717	@ 0x2cd
 80038c0:	4832      	ldr	r0, [pc, #200]	@ (800398c <HAL_RCC_OscConfig+0x6d4>)
 80038c2:	f7fd f81f 	bl	8000904 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c6:	4b30      	ldr	r3, [pc, #192]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	492d      	ldr	r1, [pc, #180]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d8:	4b2b      	ldr	r3, [pc, #172]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a19      	ldr	r1, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	430b      	orrs	r3, r1
 80038ea:	4927      	ldr	r1, [pc, #156]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b27      	ldr	r3, [pc, #156]	@ (8003990 <HAL_RCC_OscConfig+0x6d8>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd fb51 	bl	8000f9c <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fd fb4d 	bl	8000f9c <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e037      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x646>
 800391c:	e02f      	b.n	800397e <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b1c      	ldr	r3, [pc, #112]	@ (8003990 <HAL_RCC_OscConfig+0x6d8>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd fb3a 	bl	8000f9c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fb36 	bl	8000f9c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e020      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393e:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x674>
 800394a:	e018      	b.n	800397e <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x6a0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e013      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003958:	4b0b      	ldr	r3, [pc, #44]	@ (8003988 <HAL_RCC_OscConfig+0x6d0>)
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	429a      	cmp	r2, r3
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x6c2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3718      	adds	r7, #24
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40021000 	.word	0x40021000
 800398c:	08005ae4 	.word	0x08005ae4
 8003990:	42420060 	.word	0x42420060

08003994 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e176      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d116      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d110      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d10a      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d104      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x4e>
 80039d8:	f240 3136 	movw	r1, #822	@ 0x336
 80039dc:	4874      	ldr	r0, [pc, #464]	@ (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 80039de:	f7fc ff91 	bl	8000904 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d007      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d004      	beq.n	80039fe <HAL_RCC_ClockConfig+0x6a>
 80039f4:	f240 3137 	movw	r1, #823	@ 0x337
 80039f8:	486d      	ldr	r0, [pc, #436]	@ (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 80039fa:	f7fc ff83 	bl	8000904 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039fe:	4b6d      	ldr	r3, [pc, #436]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0307 	and.w	r3, r3, #7
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d910      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0c:	4b69      	ldr	r3, [pc, #420]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f023 0207 	bic.w	r2, r3, #7
 8003a14:	4967      	ldr	r1, [pc, #412]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a1c:	4b65      	ldr	r3, [pc, #404]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0307 	and.w	r3, r3, #7
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d001      	beq.n	8003a2e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e133      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d049      	beq.n	8003ace <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a46:	4b5c      	ldr	r3, [pc, #368]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	4a5b      	ldr	r2, [pc, #364]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a4c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a50:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a5e:	4b56      	ldr	r3, [pc, #344]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a55      	ldr	r2, [pc, #340]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003a64:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a68:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d024      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b80      	cmp	r3, #128	@ 0x80
 8003a78:	d020      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b90      	cmp	r3, #144	@ 0x90
 8003a80:	d01c      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	2ba0      	cmp	r3, #160	@ 0xa0
 8003a88:	d018      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2bb0      	cmp	r3, #176	@ 0xb0
 8003a90:	d014      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a98:	d010      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2bd0      	cmp	r3, #208	@ 0xd0
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2be0      	cmp	r3, #224	@ 0xe0
 8003aa8:	d008      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2bf0      	cmp	r3, #240	@ 0xf0
 8003ab0:	d004      	beq.n	8003abc <HAL_RCC_ClockConfig+0x128>
 8003ab2:	f240 315d 	movw	r1, #861	@ 0x35d
 8003ab6:	483e      	ldr	r0, [pc, #248]	@ (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 8003ab8:	f7fc ff24 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003abc:	4b3e      	ldr	r3, [pc, #248]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	493b      	ldr	r1, [pc, #236]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d051      	beq.n	8003b7e <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d008      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d004      	beq.n	8003afc <HAL_RCC_ClockConfig+0x168>
 8003af2:	f44f 7159 	mov.w	r1, #868	@ 0x364
 8003af6:	482e      	ldr	r0, [pc, #184]	@ (8003bb0 <HAL_RCC_ClockConfig+0x21c>)
 8003af8:	f7fc ff04 	bl	8000904 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b04:	4b2c      	ldr	r3, [pc, #176]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d115      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e0c0      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d107      	bne.n	8003b2c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b1c:	4b26      	ldr	r3, [pc, #152]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d109      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0b4      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d101      	bne.n	8003b3c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e0ac      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f023 0203 	bic.w	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	491b      	ldr	r1, [pc, #108]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b4e:	f7fd fa25 	bl	8000f9c <HAL_GetTick>
 8003b52:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b56:	f7fd fa21 	bl	8000f9c <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e094      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b6c:	4b12      	ldr	r3, [pc, #72]	@ (8003bb8 <HAL_RCC_ClockConfig+0x224>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f003 020c 	and.w	r2, r3, #12
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d1eb      	bne.n	8003b56 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0307 	and.w	r3, r3, #7
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d217      	bcs.n	8003bbc <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8c:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 0207 	bic.w	r2, r3, #7
 8003b94:	4907      	ldr	r1, [pc, #28]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b9c:	4b05      	ldr	r3, [pc, #20]	@ (8003bb4 <HAL_RCC_ClockConfig+0x220>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0307 	and.w	r3, r3, #7
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d008      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e073      	b.n	8003c96 <HAL_RCC_ClockConfig+0x302>
 8003bae:	bf00      	nop
 8003bb0:	08005ae4 	.word	0x08005ae4
 8003bb4:	40022000 	.word	0x40022000
 8003bb8:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d025      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d018      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd8:	d013      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003be2:	d00e      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003bec:	d009      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003bf6:	d004      	beq.n	8003c02 <HAL_RCC_ClockConfig+0x26e>
 8003bf8:	f240 31a2 	movw	r1, #930	@ 0x3a2
 8003bfc:	4828      	ldr	r0, [pc, #160]	@ (8003ca0 <HAL_RCC_ClockConfig+0x30c>)
 8003bfe:	f7fc fe81 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c02:	4b28      	ldr	r3, [pc, #160]	@ (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	4925      	ldr	r1, [pc, #148]	@ (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0308 	and.w	r3, r3, #8
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d018      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c30:	d013      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003c3a:	d00e      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c4e:	d004      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x2c6>
 8003c50:	f240 31a9 	movw	r1, #937	@ 0x3a9
 8003c54:	4812      	ldr	r0, [pc, #72]	@ (8003ca0 <HAL_RCC_ClockConfig+0x30c>)
 8003c56:	f7fc fe55 	bl	8000904 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003c5a:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	490e      	ldr	r1, [pc, #56]	@ (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c6e:	f000 f821 	bl	8003cb4 <HAL_RCC_GetSysClockFreq>
 8003c72:	4602      	mov	r2, r0
 8003c74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca4 <HAL_RCC_ClockConfig+0x310>)
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	490a      	ldr	r1, [pc, #40]	@ (8003ca8 <HAL_RCC_ClockConfig+0x314>)
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	fa22 f303 	lsr.w	r3, r2, r3
 8003c86:	4a09      	ldr	r2, [pc, #36]	@ (8003cac <HAL_RCC_ClockConfig+0x318>)
 8003c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003c8a:	4b09      	ldr	r3, [pc, #36]	@ (8003cb0 <HAL_RCC_ClockConfig+0x31c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fd f942 	bl	8000f18 <HAL_InitTick>

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08005ae4 	.word	0x08005ae4
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	08005c04 	.word	0x08005c04
 8003cac:	20000000 	.word	0x20000000
 8003cb0:	20000004 	.word	0x20000004

08003cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003cce:	4b1e      	ldr	r3, [pc, #120]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	f003 030c 	and.w	r3, r3, #12
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d002      	beq.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_GetSysClockFreq+0x36>
 8003ce2:	e027      	b.n	8003d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ce4:	4b19      	ldr	r3, [pc, #100]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003ce6:	613b      	str	r3, [r7, #16]
      break;
 8003ce8:	e027      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0c9b      	lsrs	r3, r3, #18
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	4a17      	ldr	r2, [pc, #92]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003cf4:	5cd3      	ldrb	r3, [r2, r3]
 8003cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d010      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003d02:	4b11      	ldr	r3, [pc, #68]	@ (8003d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	0c5b      	lsrs	r3, r3, #17
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	4a11      	ldr	r2, [pc, #68]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003d0e:	5cd3      	ldrb	r3, [r2, r3]
 8003d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a0d      	ldr	r2, [pc, #52]	@ (8003d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8003d16:	fb03 f202 	mul.w	r2, r3, r2
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	e004      	b.n	8003d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a0c      	ldr	r2, [pc, #48]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003d28:	fb02 f303 	mul.w	r3, r2, r3
 8003d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	613b      	str	r3, [r7, #16]
      break;
 8003d32:	e002      	b.n	8003d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003d34:	4b09      	ldr	r3, [pc, #36]	@ (8003d5c <HAL_RCC_GetSysClockFreq+0xa8>)
 8003d36:	613b      	str	r3, [r7, #16]
      break;
 8003d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d3a:	693b      	ldr	r3, [r7, #16]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	371c      	adds	r7, #28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	00f42400 	.word	0x00f42400
 8003d50:	08005c1c 	.word	0x08005c1c
 8003d54:	08005c2c 	.word	0x08005c2c
 8003d58:	003d0900 	.word	0x003d0900
 8003d5c:	007a1200 	.word	0x007a1200

08003d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d64:	4b02      	ldr	r3, [pc, #8]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x10>)
 8003d66:	681b      	ldr	r3, [r3, #0]
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	bc80      	pop	{r7}
 8003d6e:	4770      	bx	lr
 8003d70:	20000000 	.word	0x20000000

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d78:	f7ff fff2 	bl	8003d60 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	0a1b      	lsrs	r3, r3, #8
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	@ (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	08005c14 	.word	0x08005c14

08003d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003da4:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd0 <RCC_Delay+0x34>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <RCC_Delay+0x38>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	0a5b      	lsrs	r3, r3, #9
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003db8:	bf00      	nop
  }
  while (Delay --);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	1e5a      	subs	r2, r3, #1
 8003dbe:	60fa      	str	r2, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1f9      	bne.n	8003db8 <RCC_Delay+0x1c>
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr
 8003dd0:	20000000 	.word	0x20000000
 8003dd4:	10624dd3 	.word	0x10624dd3

08003dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b086      	sub	sp, #24
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003de0:	2300      	movs	r3, #0
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]
#if defined(STM32F105xC) || defined(STM32F107xC)
  uint32_t  pllactive = 0U;
#endif /* STM32F105xC || STM32F107xC */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d109      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0310 	and.w	r3, r3, #16
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d103      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003e0c:	216a      	movs	r1, #106	@ 0x6a
 8003e0e:	4873      	ldr	r0, [pc, #460]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003e10:	f7fc fd78 	bl	8000904 <assert_failed>

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8095 	beq.w	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    FlagStatus pwrclkchanged = RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	75fb      	strb	r3, [r7, #23]

    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d012      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e36:	d00d      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e40:	d008      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e4a:	d003      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e4c:	2172      	movs	r1, #114	@ 0x72
 8003e4e:	4863      	ldr	r0, [pc, #396]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003e50:	f7fc fd58 	bl	8000904 <assert_failed>

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e54:	4b62      	ldr	r3, [pc, #392]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b5f      	ldr	r3, [pc, #380]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	4a5e      	ldr	r2, [pc, #376]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e6a:	61d3      	str	r3, [r2, #28]
 8003e6c:	4b5c      	ldr	r3, [pc, #368]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	4b59      	ldr	r3, [pc, #356]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d118      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e88:	4b56      	ldr	r3, [pc, #344]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a55      	ldr	r2, [pc, #340]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e94:	f7fd f882 	bl	8000f9c <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e9a:	e008      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xd6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fd f87e 	bl	8000f9c <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	@ 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xd6>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e092      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eae:	4b4d      	ldr	r3, [pc, #308]	@ (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003eba:	4b49      	ldr	r3, [pc, #292]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ec2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d02e      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d027      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ed8:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003eda:	6a1b      	ldr	r3, [r3, #32]
 8003edc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ee0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee2:	4b41      	ldr	r3, [pc, #260]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003eee:	4a3c      	ldr	r2, [pc, #240]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d014      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efe:	f7fd f84d 	bl	8000f9c <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	e00a      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x144>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f06:	f7fd f849 	bl	8000f9c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x144>
          {
            return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e05b      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f1c:	4b30      	ldr	r3, [pc, #192]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0ee      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f28:	4b2d      	ldr	r3, [pc, #180]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f2a:	6a1b      	ldr	r3, [r3, #32]
 8003f2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	492a      	ldr	r1, [pc, #168]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f3a:	7dfb      	ldrb	r3, [r7, #23]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d105      	bne.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f40:	4b27      	ldr	r3, [pc, #156]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f42:	69db      	ldr	r3, [r3, #28]
 8003f44:	4a26      	ldr	r2, [pc, #152]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f4a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d01f      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d012      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f68:	d00d      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f72:	d008      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8003f7c:	d003      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8003f7e:	21b7      	movs	r1, #183	@ 0xb7
 8003f80:	4816      	ldr	r0, [pc, #88]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003f82:	f7fc fcbf 	bl	8000904 <assert_failed>

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f86:	4b16      	ldr	r3, [pc, #88]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	4913      	ldr	r1, [pc, #76]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d016      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fac:	d008      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fb6:	f240 1113 	movw	r1, #275	@ 0x113
 8003fba:	4808      	ldr	r0, [pc, #32]	@ (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x204>)
 8003fbc:	f7fc fca2 	bl	8000904 <assert_failed>

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fc0:	4b07      	ldr	r3, [pc, #28]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	4904      	ldr	r1, [pc, #16]	@ (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	08005b1c 	.word	0x08005b1c
 8003fe0:	40021000 	.word	0x40021000
 8003fe4:	40007000 	.word	0x40007000
 8003fe8:	42420440 	.word	0x42420440

08003fec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e16d      	b.n	80042da <HAL_SPI_Init+0x2ee>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6b      	ldr	r2, [pc, #428]	@ (80041b0 <HAL_SPI_Init+0x1c4>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x30>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a69      	ldr	r2, [pc, #420]	@ (80041b4 <HAL_SPI_Init+0x1c8>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d004      	beq.n	800401c <HAL_SPI_Init+0x30>
 8004012:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8004016:	4868      	ldr	r0, [pc, #416]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004018:	f7fc fc74 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d009      	beq.n	8004038 <HAL_SPI_Init+0x4c>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402c:	d004      	beq.n	8004038 <HAL_SPI_Init+0x4c>
 800402e:	f240 1157 	movw	r1, #343	@ 0x157
 8004032:	4861      	ldr	r0, [pc, #388]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004034:	f7fc fc66 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <HAL_SPI_Init+0x72>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004048:	d009      	beq.n	800405e <HAL_SPI_Init+0x72>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004052:	d004      	beq.n	800405e <HAL_SPI_Init+0x72>
 8004054:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8004058:	4857      	ldr	r0, [pc, #348]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 800405a:	f7fc fc53 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004066:	d008      	beq.n	800407a <HAL_SPI_Init+0x8e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d004      	beq.n	800407a <HAL_SPI_Init+0x8e>
 8004070:	f240 1159 	movw	r1, #345	@ 0x159
 8004074:	4850      	ldr	r0, [pc, #320]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004076:	f7fc fc45 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004082:	d00d      	beq.n	80040a0 <HAL_SPI_Init+0xb4>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <HAL_SPI_Init+0xb4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004094:	d004      	beq.n	80040a0 <HAL_SPI_Init+0xb4>
 8004096:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800409a:	4847      	ldr	r0, [pc, #284]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 800409c:	f7fc fc32 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d020      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
 80040ac:	2b08      	cmp	r3, #8
 80040ae:	d01c      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b10      	cmp	r3, #16
 80040b6:	d018      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b18      	cmp	r3, #24
 80040be:	d014      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d010      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	2b28      	cmp	r3, #40	@ 0x28
 80040ce:	d00c      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	2b30      	cmp	r3, #48	@ 0x30
 80040d6:	d008      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	69db      	ldr	r3, [r3, #28]
 80040dc:	2b38      	cmp	r3, #56	@ 0x38
 80040de:	d004      	beq.n	80040ea <HAL_SPI_Init+0xfe>
 80040e0:	f240 115b 	movw	r1, #347	@ 0x15b
 80040e4:	4834      	ldr	r0, [pc, #208]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 80040e6:	f7fc fc0d 	bl	8000904 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d008      	beq.n	8004104 <HAL_SPI_Init+0x118>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a1b      	ldr	r3, [r3, #32]
 80040f6:	2b80      	cmp	r3, #128	@ 0x80
 80040f8:	d004      	beq.n	8004104 <HAL_SPI_Init+0x118>
 80040fa:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80040fe:	482e      	ldr	r0, [pc, #184]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004100:	f7fc fc00 	bl	8000904 <assert_failed>
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d004      	beq.n	8004116 <HAL_SPI_Init+0x12a>
 800410c:	f240 115f 	movw	r1, #351	@ 0x15f
 8004110:	4829      	ldr	r0, [pc, #164]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004112:	f7fc fbf7 	bl	8000904 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d14e      	bne.n	80041bc <HAL_SPI_Init+0x1d0>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_SPI_Init+0x14c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b02      	cmp	r3, #2
 800412c:	d004      	beq.n	8004138 <HAL_SPI_Init+0x14c>
 800412e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004132:	4821      	ldr	r0, [pc, #132]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 8004134:	f7fc fbe6 	bl	8000904 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d008      	beq.n	8004152 <HAL_SPI_Init+0x166>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	695b      	ldr	r3, [r3, #20]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d004      	beq.n	8004152 <HAL_SPI_Init+0x166>
 8004148:	f240 1163 	movw	r1, #355	@ 0x163
 800414c:	481a      	ldr	r0, [pc, #104]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 800414e:	f7fc fbd9 	bl	8000904 <assert_failed>

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800415a:	d125      	bne.n	80041a8 <HAL_SPI_Init+0x1bc>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69db      	ldr	r3, [r3, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d056      	beq.n	8004212 <HAL_SPI_Init+0x226>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
 8004168:	2b08      	cmp	r3, #8
 800416a:	d052      	beq.n	8004212 <HAL_SPI_Init+0x226>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	2b10      	cmp	r3, #16
 8004172:	d04e      	beq.n	8004212 <HAL_SPI_Init+0x226>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2b18      	cmp	r3, #24
 800417a:	d04a      	beq.n	8004212 <HAL_SPI_Init+0x226>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	69db      	ldr	r3, [r3, #28]
 8004180:	2b20      	cmp	r3, #32
 8004182:	d046      	beq.n	8004212 <HAL_SPI_Init+0x226>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2b28      	cmp	r3, #40	@ 0x28
 800418a:	d042      	beq.n	8004212 <HAL_SPI_Init+0x226>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b30      	cmp	r3, #48	@ 0x30
 8004192:	d03e      	beq.n	8004212 <HAL_SPI_Init+0x226>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69db      	ldr	r3, [r3, #28]
 8004198:	2b38      	cmp	r3, #56	@ 0x38
 800419a:	d03a      	beq.n	8004212 <HAL_SPI_Init+0x226>
 800419c:	f240 1167 	movw	r1, #359	@ 0x167
 80041a0:	4805      	ldr	r0, [pc, #20]	@ (80041b8 <HAL_SPI_Init+0x1cc>)
 80041a2:	f7fc fbaf 	bl	8000904 <assert_failed>
 80041a6:	e034      	b.n	8004212 <HAL_SPI_Init+0x226>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	61da      	str	r2, [r3, #28]
 80041ae:	e030      	b.n	8004212 <HAL_SPI_Init+0x226>
 80041b0:	40013000 	.word	0x40013000
 80041b4:	40003800 	.word	0x40003800
 80041b8:	08005b58 	.word	0x08005b58
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	69db      	ldr	r3, [r3, #28]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d020      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	d01c      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	2b10      	cmp	r3, #16
 80041d2:	d018      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	2b18      	cmp	r3, #24
 80041da:	d014      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d010      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	2b28      	cmp	r3, #40	@ 0x28
 80041ea:	d00c      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	2b30      	cmp	r3, #48	@ 0x30
 80041f2:	d008      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	2b38      	cmp	r3, #56	@ 0x38
 80041fa:	d004      	beq.n	8004206 <HAL_SPI_Init+0x21a>
 80041fc:	f240 1171 	movw	r1, #369	@ 0x171
 8004200:	4838      	ldr	r0, [pc, #224]	@ (80042e4 <HAL_SPI_Init+0x2f8>)
 8004202:	f7fc fb7f 	bl	8000904 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <HAL_SPI_Init+0x246>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7fc fbdf 	bl	80009f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2202      	movs	r2, #2
 8004236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004248:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004264:	431a      	orrs	r2, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	f003 0302 	and.w	r3, r3, #2
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
 8004288:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004296:	ea42 0103 	orr.w	r1, r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	0c1a      	lsrs	r2, r3, #16
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f002 0204 	and.w	r2, r2, #4
 80042b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69da      	ldr	r2, [r3, #28]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	08005b58 	.word	0x08005b58

080042e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0a1      	b.n	800443e <HAL_TIM_Base_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a52      	ldr	r2, [pc, #328]	@ (8004448 <HAL_TIM_Base_Init+0x160>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_TIM_Base_Init+0x44>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800430c:	d00e      	beq.n	800432c <HAL_TIM_Base_Init+0x44>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a4e      	ldr	r2, [pc, #312]	@ (800444c <HAL_TIM_Base_Init+0x164>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIM_Base_Init+0x44>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a4c      	ldr	r2, [pc, #304]	@ (8004450 <HAL_TIM_Base_Init+0x168>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIM_Base_Init+0x44>
 8004322:	f240 1113 	movw	r1, #275	@ 0x113
 8004326:	484b      	ldr	r0, [pc, #300]	@ (8004454 <HAL_TIM_Base_Init+0x16c>)
 8004328:	f7fc faec 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d014      	beq.n	800435e <HAL_TIM_Base_Init+0x76>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	2b10      	cmp	r3, #16
 800433a:	d010      	beq.n	800435e <HAL_TIM_Base_Init+0x76>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b20      	cmp	r3, #32
 8004342:	d00c      	beq.n	800435e <HAL_TIM_Base_Init+0x76>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d008      	beq.n	800435e <HAL_TIM_Base_Init+0x76>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	2b60      	cmp	r3, #96	@ 0x60
 8004352:	d004      	beq.n	800435e <HAL_TIM_Base_Init+0x76>
 8004354:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8004358:	483e      	ldr	r0, [pc, #248]	@ (8004454 <HAL_TIM_Base_Init+0x16c>)
 800435a:	f7fc fad3 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00e      	beq.n	8004384 <HAL_TIM_Base_Init+0x9c>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800436e:	d009      	beq.n	8004384 <HAL_TIM_Base_Init+0x9c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004378:	d004      	beq.n	8004384 <HAL_TIM_Base_Init+0x9c>
 800437a:	f240 1115 	movw	r1, #277	@ 0x115
 800437e:	4835      	ldr	r0, [pc, #212]	@ (8004454 <HAL_TIM_Base_Init+0x16c>)
 8004380:	f7fc fac0 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <HAL_TIM_Base_Init+0xae>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004394:	d304      	bcc.n	80043a0 <HAL_TIM_Base_Init+0xb8>
 8004396:	f44f 718b 	mov.w	r1, #278	@ 0x116
 800439a:	482e      	ldr	r0, [pc, #184]	@ (8004454 <HAL_TIM_Base_Init+0x16c>)
 800439c:	f7fc fab2 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d008      	beq.n	80043ba <HAL_TIM_Base_Init+0xd2>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b80      	cmp	r3, #128	@ 0x80
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_Base_Init+0xd2>
 80043b0:	f240 1117 	movw	r1, #279	@ 0x117
 80043b4:	4827      	ldr	r0, [pc, #156]	@ (8004454 <HAL_TIM_Base_Init+0x16c>)
 80043b6:	f7fc faa5 	bl	8000904 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_Base_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc fcd4 	bl	8000d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 fd1c 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40012c00 	.word	0x40012c00
 800444c:	40000400 	.word	0x40000400
 8004450:	40000800 	.word	0x40000800
 8004454:	08005b90 	.word	0x08005b90

08004458 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e0a1      	b.n	80045ae <HAL_TIM_PWM_Init+0x156>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a52      	ldr	r2, [pc, #328]	@ (80045b8 <HAL_TIM_PWM_Init+0x160>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d013      	beq.n	800449c <HAL_TIM_PWM_Init+0x44>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800447c:	d00e      	beq.n	800449c <HAL_TIM_PWM_Init+0x44>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a4e      	ldr	r2, [pc, #312]	@ (80045bc <HAL_TIM_PWM_Init+0x164>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d009      	beq.n	800449c <HAL_TIM_PWM_Init+0x44>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a4c      	ldr	r2, [pc, #304]	@ (80045c0 <HAL_TIM_PWM_Init+0x168>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d004      	beq.n	800449c <HAL_TIM_PWM_Init+0x44>
 8004492:	f240 512c 	movw	r1, #1324	@ 0x52c
 8004496:	484b      	ldr	r0, [pc, #300]	@ (80045c4 <HAL_TIM_PWM_Init+0x16c>)
 8004498:	f7fc fa34 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d014      	beq.n	80044ce <HAL_TIM_PWM_Init+0x76>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	2b10      	cmp	r3, #16
 80044aa:	d010      	beq.n	80044ce <HAL_TIM_PWM_Init+0x76>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d00c      	beq.n	80044ce <HAL_TIM_PWM_Init+0x76>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d008      	beq.n	80044ce <HAL_TIM_PWM_Init+0x76>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	2b60      	cmp	r3, #96	@ 0x60
 80044c2:	d004      	beq.n	80044ce <HAL_TIM_PWM_Init+0x76>
 80044c4:	f240 512d 	movw	r1, #1325	@ 0x52d
 80044c8:	483e      	ldr	r0, [pc, #248]	@ (80045c4 <HAL_TIM_PWM_Init+0x16c>)
 80044ca:	f7fc fa1b 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <HAL_TIM_PWM_Init+0x9c>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044de:	d009      	beq.n	80044f4 <HAL_TIM_PWM_Init+0x9c>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d004      	beq.n	80044f4 <HAL_TIM_PWM_Init+0x9c>
 80044ea:	f240 512e 	movw	r1, #1326	@ 0x52e
 80044ee:	4835      	ldr	r0, [pc, #212]	@ (80045c4 <HAL_TIM_PWM_Init+0x16c>)
 80044f0:	f7fc fa08 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_TIM_PWM_Init+0xae>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004504:	d304      	bcc.n	8004510 <HAL_TIM_PWM_Init+0xb8>
 8004506:	f240 512f 	movw	r1, #1327	@ 0x52f
 800450a:	482e      	ldr	r0, [pc, #184]	@ (80045c4 <HAL_TIM_PWM_Init+0x16c>)
 800450c:	f7fc f9fa 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	699b      	ldr	r3, [r3, #24]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d008      	beq.n	800452a <HAL_TIM_PWM_Init+0xd2>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b80      	cmp	r3, #128	@ 0x80
 800451e:	d004      	beq.n	800452a <HAL_TIM_PWM_Init+0xd2>
 8004520:	f44f 61a6 	mov.w	r1, #1328	@ 0x530
 8004524:	4827      	ldr	r0, [pc, #156]	@ (80045c4 <HAL_TIM_PWM_Init+0x16c>)
 8004526:	f7fc f9ed 	bl	8000904 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_PWM_Init+0xec>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f842 	bl	80045c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fc64 	bl	8004e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	40012c00 	.word	0x40012c00
 80045bc:	40000400 	.word	0x40000400
 80045c0:	40000800 	.word	0x40000800
 80045c4:	08005b90 	.word	0x08005b90

080045c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045e8:	2300      	movs	r3, #0
 80045ea:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x38>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2b04      	cmp	r3, #4
 80045f6:	d00d      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x38>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b08      	cmp	r3, #8
 80045fc:	d00a      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x38>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2b0c      	cmp	r3, #12
 8004602:	d007      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x38>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b3c      	cmp	r3, #60	@ 0x3c
 8004608:	d004      	beq.n	8004614 <HAL_TIM_PWM_ConfigChannel+0x38>
 800460a:	f241 017e 	movw	r1, #4222	@ 0x107e
 800460e:	4881      	ldr	r0, [pc, #516]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004610:	f7fc f978 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b60      	cmp	r3, #96	@ 0x60
 800461a:	d008      	beq.n	800462e <HAL_TIM_PWM_ConfigChannel+0x52>
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2b70      	cmp	r3, #112	@ 0x70
 8004622:	d004      	beq.n	800462e <HAL_TIM_PWM_ConfigChannel+0x52>
 8004624:	f241 017f 	movw	r1, #4223	@ 0x107f
 8004628:	487a      	ldr	r0, [pc, #488]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800462a:	f7fc f96b 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d008      	beq.n	8004648 <HAL_TIM_PWM_ConfigChannel+0x6c>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b02      	cmp	r3, #2
 800463c:	d004      	beq.n	8004648 <HAL_TIM_PWM_ConfigChannel+0x6c>
 800463e:	f44f 5184 	mov.w	r1, #4224	@ 0x1080
 8004642:	4874      	ldr	r0, [pc, #464]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8004644:	f7fc f95e 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d008      	beq.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	2b04      	cmp	r3, #4
 8004656:	d004      	beq.n	8004662 <HAL_TIM_PWM_ConfigChannel+0x86>
 8004658:	f241 0181 	movw	r1, #4225	@ 0x1081
 800465c:	486d      	ldr	r0, [pc, #436]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800465e:	f7fc f951 	bl	8000904 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_TIM_PWM_ConfigChannel+0x94>
 800466c:	2302      	movs	r3, #2
 800466e:	e11b      	b.n	80048a8 <HAL_TIM_PWM_ConfigChannel+0x2cc>
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b0c      	cmp	r3, #12
 800467c:	f200 810c 	bhi.w	8004898 <HAL_TIM_PWM_ConfigChannel+0x2bc>
 8004680:	a201      	add	r2, pc, #4	@ (adr r2, 8004688 <HAL_TIM_PWM_ConfigChannel+0xac>)
 8004682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004686:	bf00      	nop
 8004688:	080046bd 	.word	0x080046bd
 800468c:	08004899 	.word	0x08004899
 8004690:	08004899 	.word	0x08004899
 8004694:	08004899 	.word	0x08004899
 8004698:	0800472f 	.word	0x0800472f
 800469c:	08004899 	.word	0x08004899
 80046a0:	08004899 	.word	0x08004899
 80046a4:	08004899 	.word	0x08004899
 80046a8:	080047a3 	.word	0x080047a3
 80046ac:	08004899 	.word	0x08004899
 80046b0:	08004899 	.word	0x08004899
 80046b4:	08004899 	.word	0x08004899
 80046b8:	08004825 	.word	0x08004825
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a55      	ldr	r2, [pc, #340]	@ (8004818 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d013      	beq.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x112>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046ce:	d00e      	beq.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x112>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a51      	ldr	r2, [pc, #324]	@ (800481c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x112>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a50      	ldr	r2, [pc, #320]	@ (8004820 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d004      	beq.n	80046ee <HAL_TIM_PWM_ConfigChannel+0x112>
 80046e4:	f241 018b 	movw	r1, #4235	@ 0x108b
 80046e8:	484a      	ldr	r0, [pc, #296]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80046ea:	f7fc f90b 	bl	8000904 <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68b9      	ldr	r1, [r7, #8]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f000 fbf7 	bl	8004ee8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0208 	orr.w	r2, r2, #8
 8004708:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0204 	bic.w	r2, r2, #4
 8004718:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6999      	ldr	r1, [r3, #24]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	691a      	ldr	r2, [r3, #16]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	619a      	str	r2, [r3, #24]
      break;
 800472c:	e0b7      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a39      	ldr	r2, [pc, #228]	@ (8004818 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d013      	beq.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004740:	d00e      	beq.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a35      	ldr	r2, [pc, #212]	@ (800481c <HAL_TIM_PWM_ConfigChannel+0x240>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d009      	beq.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x184>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a33      	ldr	r2, [pc, #204]	@ (8004820 <HAL_TIM_PWM_ConfigChannel+0x244>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d004      	beq.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004756:	f241 019c 	movw	r1, #4252	@ 0x109c
 800475a:	482e      	ldr	r0, [pc, #184]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 800475c:	f7fc f8d2 	bl	8000904 <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68b9      	ldr	r1, [r7, #8]
 8004766:	4618      	mov	r0, r3
 8004768:	f000 fc4e 	bl	8005008 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	699a      	ldr	r2, [r3, #24]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800477a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699a      	ldr	r2, [r3, #24]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800478a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	6999      	ldr	r1, [r3, #24]
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	021a      	lsls	r2, r3, #8
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	619a      	str	r2, [r3, #24]
      break;
 80047a0:	e07d      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004818 <HAL_TIM_PWM_ConfigChannel+0x23c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d013      	beq.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047b4:	d00e      	beq.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <HAL_TIM_PWM_ConfigChannel+0x240>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d009      	beq.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a16      	ldr	r2, [pc, #88]	@ (8004820 <HAL_TIM_PWM_ConfigChannel+0x244>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d004      	beq.n	80047d4 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 80047ca:	f241 01ad 	movw	r1, #4269	@ 0x10ad
 80047ce:	4811      	ldr	r0, [pc, #68]	@ (8004814 <HAL_TIM_PWM_ConfigChannel+0x238>)
 80047d0:	f7fc f898 	bl	8000904 <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fca8 	bl	8005130 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0208 	orr.w	r2, r2, #8
 80047ee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	69d9      	ldr	r1, [r3, #28]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	61da      	str	r2, [r3, #28]
      break;
 8004812:	e044      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x2c2>
 8004814:	08005b90 	.word	0x08005b90
 8004818:	40012c00 	.word	0x40012c00
 800481c:	40000400 	.word	0x40000400
 8004820:	40000800 	.word	0x40000800
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a21      	ldr	r2, [pc, #132]	@ (80048b0 <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d013      	beq.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x27a>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004836:	d00e      	beq.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a1d      	ldr	r2, [pc, #116]	@ (80048b4 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d009      	beq.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x27a>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a1c      	ldr	r2, [pc, #112]	@ (80048b8 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d004      	beq.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x27a>
 800484c:	f241 01be 	movw	r1, #4286	@ 0x10be
 8004850:	481a      	ldr	r0, [pc, #104]	@ (80048bc <HAL_TIM_PWM_ConfigChannel+0x2e0>)
 8004852:	f7fc f857 	bl	8000904 <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68b9      	ldr	r1, [r7, #8]
 800485c:	4618      	mov	r0, r3
 800485e:	f000 fcfb 	bl	8005258 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69da      	ldr	r2, [r3, #28]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004870:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	69da      	ldr	r2, [r3, #28]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004880:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69d9      	ldr	r1, [r3, #28]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	021a      	lsls	r2, r3, #8
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	430a      	orrs	r2, r1
 8004894:	61da      	str	r2, [r3, #28]
      break;
 8004896:	e002      	b.n	800489e <HAL_TIM_PWM_ConfigChannel+0x2c2>
    }

    default:
      status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80048a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3718      	adds	r7, #24
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	08005b90 	.word	0x08005b90

080048c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d101      	bne.n	80048dc <HAL_TIM_ConfigClockSource+0x1c>
 80048d8:	2302      	movs	r3, #2
 80048da:	e296      	b.n	8004e0a <HAL_TIM_ConfigClockSource+0x54a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80048f4:	d029      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b70      	cmp	r3, #112	@ 0x70
 80048fc:	d025      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004906:	d020      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b40      	cmp	r3, #64	@ 0x40
 800490e:	d01c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b50      	cmp	r3, #80	@ 0x50
 8004916:	d018      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b60      	cmp	r3, #96	@ 0x60
 800491e:	d014      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d010      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2b10      	cmp	r3, #16
 800492e:	d00c      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b20      	cmp	r3, #32
 8004936:	d008      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b30      	cmp	r3, #48	@ 0x30
 800493e:	d004      	beq.n	800494a <HAL_TIM_ConfigClockSource+0x8a>
 8004940:	f241 41be 	movw	r1, #5310	@ 0x14be
 8004944:	486b      	ldr	r0, [pc, #428]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004946:	f7fb ffdd 	bl	8000904 <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004958:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004960:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004972:	f000 80c7 	beq.w	8004b04 <HAL_TIM_ConfigClockSource+0x244>
 8004976:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800497a:	f200 8239 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 800497e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004982:	d02d      	beq.n	80049e0 <HAL_TIM_ConfigClockSource+0x120>
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004988:	f200 8232 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 800498c:	2b70      	cmp	r3, #112	@ 0x70
 800498e:	d045      	beq.n	8004a1c <HAL_TIM_ConfigClockSource+0x15c>
 8004990:	2b70      	cmp	r3, #112	@ 0x70
 8004992:	f200 822d 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 8004996:	2b60      	cmp	r3, #96	@ 0x60
 8004998:	f000 8167 	beq.w	8004c6a <HAL_TIM_ConfigClockSource+0x3aa>
 800499c:	2b60      	cmp	r3, #96	@ 0x60
 800499e:	f200 8227 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 80049a2:	2b50      	cmp	r3, #80	@ 0x50
 80049a4:	f000 8115 	beq.w	8004bd2 <HAL_TIM_ConfigClockSource+0x312>
 80049a8:	2b50      	cmp	r3, #80	@ 0x50
 80049aa:	f200 8221 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 80049ae:	2b40      	cmp	r3, #64	@ 0x40
 80049b0:	f000 81b0 	beq.w	8004d14 <HAL_TIM_ConfigClockSource+0x454>
 80049b4:	2b40      	cmp	r3, #64	@ 0x40
 80049b6:	f200 821b 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 80049ba:	2b30      	cmp	r3, #48	@ 0x30
 80049bc:	f000 81f6 	beq.w	8004dac <HAL_TIM_ConfigClockSource+0x4ec>
 80049c0:	2b30      	cmp	r3, #48	@ 0x30
 80049c2:	f200 8215 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	f000 81f0 	beq.w	8004dac <HAL_TIM_ConfigClockSource+0x4ec>
 80049cc:	2b20      	cmp	r3, #32
 80049ce:	f200 820f 	bhi.w	8004df0 <HAL_TIM_ConfigClockSource+0x530>
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f000 81ea 	beq.w	8004dac <HAL_TIM_ConfigClockSource+0x4ec>
 80049d8:	2b10      	cmp	r3, #16
 80049da:	f000 81e7 	beq.w	8004dac <HAL_TIM_ConfigClockSource+0x4ec>
 80049de:	e207      	b.n	8004df0 <HAL_TIM_ConfigClockSource+0x530>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a44      	ldr	r2, [pc, #272]	@ (8004af8 <HAL_TIM_ConfigClockSource+0x238>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	f000 8205 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x536>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	f000 81ff 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x536>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a3f      	ldr	r2, [pc, #252]	@ (8004afc <HAL_TIM_ConfigClockSource+0x23c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f000 81f9 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x536>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a3d      	ldr	r2, [pc, #244]	@ (8004b00 <HAL_TIM_ConfigClockSource+0x240>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	f000 81f3 	beq.w	8004df6 <HAL_TIM_ConfigClockSource+0x536>
 8004a10:	f241 41ca 	movw	r1, #5322	@ 0x14ca
 8004a14:	4837      	ldr	r0, [pc, #220]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004a16:	f7fb ff75 	bl	8000904 <assert_failed>
      break;
 8004a1a:	e1ec      	b.n	8004df6 <HAL_TIM_ConfigClockSource+0x536>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a35      	ldr	r2, [pc, #212]	@ (8004af8 <HAL_TIM_ConfigClockSource+0x238>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x18e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x18e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a31      	ldr	r2, [pc, #196]	@ (8004afc <HAL_TIM_ConfigClockSource+0x23c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x18e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a30      	ldr	r2, [pc, #192]	@ (8004b00 <HAL_TIM_ConfigClockSource+0x240>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x18e>
 8004a44:	f241 41d1 	movw	r1, #5329	@ 0x14d1
 8004a48:	482a      	ldr	r0, [pc, #168]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004a4a:	f7fb ff5b 	bl	8000904 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d013      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x1be>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a5e:	d00e      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x1be>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a68:	d009      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x1be>
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004a72:	d004      	beq.n	8004a7e <HAL_TIM_ConfigClockSource+0x1be>
 8004a74:	f241 41d4 	movw	r1, #5332	@ 0x14d4
 8004a78:	481e      	ldr	r0, [pc, #120]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004a7a:	f7fb ff43 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a86:	d014      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1f2>
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1f2>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1f2>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d008      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1f2>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b0a      	cmp	r3, #10
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIM_ConfigClockSource+0x1f2>
 8004aa8:	f241 41d5 	movw	r1, #5333	@ 0x14d5
 8004aac:	4811      	ldr	r0, [pc, #68]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004aae:	f7fb ff29 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b0f      	cmp	r3, #15
 8004ab8:	d904      	bls.n	8004ac4 <HAL_TIM_ConfigClockSource+0x204>
 8004aba:	f241 41d6 	movw	r1, #5334	@ 0x14d6
 8004abe:	480d      	ldr	r0, [pc, #52]	@ (8004af4 <HAL_TIM_ConfigClockSource+0x234>)
 8004ac0:	f7fb ff20 	bl	8000904 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ad4:	f000 fc95 	bl	8005402 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	689b      	ldr	r3, [r3, #8]
 8004ade:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ae6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68ba      	ldr	r2, [r7, #8]
 8004aee:	609a      	str	r2, [r3, #8]
      break;
 8004af0:	e182      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
 8004af2:	bf00      	nop
 8004af4:	08005b90 	.word	0x08005b90
 8004af8:	40012c00 	.word	0x40012c00
 8004afc:	40000400 	.word	0x40000400
 8004b00:	40000800 	.word	0x40000800
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a7e      	ldr	r2, [pc, #504]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x444>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x276>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b16:	d00e      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x276>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x448>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x276>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a79      	ldr	r2, [pc, #484]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x44c>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_TIM_ConfigClockSource+0x276>
 8004b2c:	f241 41e9 	movw	r1, #5353	@ 0x14e9
 8004b30:	4877      	ldr	r0, [pc, #476]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004b32:	f7fb fee7 	bl	8000904 <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d013      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x2a6>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	d00e      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x2a6>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b50:	d009      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x2a6>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b5a:	d004      	beq.n	8004b66 <HAL_TIM_ConfigClockSource+0x2a6>
 8004b5c:	f241 41ec 	movw	r1, #5356	@ 0x14ec
 8004b60:	486b      	ldr	r0, [pc, #428]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004b62:	f7fb fecf 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b6e:	d014      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x2da>
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x2da>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00c      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x2da>
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d008      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x2da>
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	2b0a      	cmp	r3, #10
 8004b8e:	d004      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x2da>
 8004b90:	f241 41ed 	movw	r1, #5357	@ 0x14ed
 8004b94:	485e      	ldr	r0, [pc, #376]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004b96:	f7fb feb5 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d904      	bls.n	8004bac <HAL_TIM_ConfigClockSource+0x2ec>
 8004ba2:	f241 41ee 	movw	r1, #5358	@ 0x14ee
 8004ba6:	485a      	ldr	r0, [pc, #360]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004ba8:	f7fb feac 	bl	8000904 <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	f000 fc21 	bl	8005402 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bce:	609a      	str	r2, [r3, #8]
      break;
 8004bd0:	e112      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a4b      	ldr	r2, [pc, #300]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x444>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d013      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x344>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be4:	d00e      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x344>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a47      	ldr	r2, [pc, #284]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x448>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d009      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x344>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a45      	ldr	r2, [pc, #276]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x44c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d004      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x344>
 8004bfa:	f241 41fd 	movw	r1, #5373	@ 0x14fd
 8004bfe:	4844      	ldr	r0, [pc, #272]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004c00:	f7fb fe80 	bl	8000904 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c0c:	d014      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x378>
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d010      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x378>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x378>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d008      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x378>
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIM_ConfigClockSource+0x378>
 8004c2e:	f44f 51a8 	mov.w	r1, #5376	@ 0x1500
 8004c32:	4837      	ldr	r0, [pc, #220]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004c34:	f7fb fe66 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b0f      	cmp	r3, #15
 8004c3e:	d904      	bls.n	8004c4a <HAL_TIM_ConfigClockSource+0x38a>
 8004c40:	f241 5101 	movw	r1, #5377	@ 0x1501
 8004c44:	4832      	ldr	r0, [pc, #200]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004c46:	f7fb fe5d 	bl	8000904 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c56:	461a      	mov	r2, r3
 8004c58:	f000 fb5c 	bl	8005314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2150      	movs	r1, #80	@ 0x50
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fbb3 	bl	80053ce <TIM_ITRx_SetConfig>
      break;
 8004c68:	e0c6      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a25      	ldr	r2, [pc, #148]	@ (8004d04 <HAL_TIM_ConfigClockSource+0x444>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0x3dc>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7c:	d00e      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0x3dc>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a21      	ldr	r2, [pc, #132]	@ (8004d08 <HAL_TIM_ConfigClockSource+0x448>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0x3dc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <HAL_TIM_ConfigClockSource+0x44c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_TIM_ConfigClockSource+0x3dc>
 8004c92:	f241 510d 	movw	r1, #5389	@ 0x150d
 8004c96:	481e      	ldr	r0, [pc, #120]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004c98:	f7fb fe34 	bl	8000904 <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca4:	d014      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x410>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d010      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x410>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00c      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x410>
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d008      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x410>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2b0a      	cmp	r3, #10
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIM_ConfigClockSource+0x410>
 8004cc6:	f241 5110 	movw	r1, #5392	@ 0x1510
 8004cca:	4811      	ldr	r0, [pc, #68]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004ccc:	f7fb fe1a 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	68db      	ldr	r3, [r3, #12]
 8004cd4:	2b0f      	cmp	r3, #15
 8004cd6:	d904      	bls.n	8004ce2 <HAL_TIM_ConfigClockSource+0x422>
 8004cd8:	f241 5111 	movw	r1, #5393	@ 0x1511
 8004cdc:	480c      	ldr	r0, [pc, #48]	@ (8004d10 <HAL_TIM_ConfigClockSource+0x450>)
 8004cde:	f7fb fe11 	bl	8000904 <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cee:	461a      	mov	r2, r3
 8004cf0:	f000 fb3e 	bl	8005370 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2160      	movs	r1, #96	@ 0x60
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 fb67 	bl	80053ce <TIM_ITRx_SetConfig>
      break;
 8004d00:	e07a      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
 8004d02:	bf00      	nop
 8004d04:	40012c00 	.word	0x40012c00
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40000800 	.word	0x40000800
 8004d10:	08005b90 	.word	0x08005b90
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a3e      	ldr	r2, [pc, #248]	@ (8004e14 <HAL_TIM_ConfigClockSource+0x554>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x486>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d26:	d00e      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x486>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e18 <HAL_TIM_ConfigClockSource+0x558>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d009      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x486>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a39      	ldr	r2, [pc, #228]	@ (8004e1c <HAL_TIM_ConfigClockSource+0x55c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d004      	beq.n	8004d46 <HAL_TIM_ConfigClockSource+0x486>
 8004d3c:	f241 511d 	movw	r1, #5405	@ 0x151d
 8004d40:	4837      	ldr	r0, [pc, #220]	@ (8004e20 <HAL_TIM_ConfigClockSource+0x560>)
 8004d42:	f7fb fddf 	bl	8000904 <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d4e:	d014      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x4ba>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d010      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x4ba>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x4ba>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d008      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x4ba>
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2b0a      	cmp	r3, #10
 8004d6e:	d004      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x4ba>
 8004d70:	f44f 51a9 	mov.w	r1, #5408	@ 0x1520
 8004d74:	482a      	ldr	r0, [pc, #168]	@ (8004e20 <HAL_TIM_ConfigClockSource+0x560>)
 8004d76:	f7fb fdc5 	bl	8000904 <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	2b0f      	cmp	r3, #15
 8004d80:	d904      	bls.n	8004d8c <HAL_TIM_ConfigClockSource+0x4cc>
 8004d82:	f241 5121 	movw	r1, #5409	@ 0x1521
 8004d86:	4826      	ldr	r0, [pc, #152]	@ (8004e20 <HAL_TIM_ConfigClockSource+0x560>)
 8004d88:	f7fb fdbc 	bl	8000904 <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d98:	461a      	mov	r2, r3
 8004d9a:	f000 fabb 	bl	8005314 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2140      	movs	r1, #64	@ 0x40
 8004da4:	4618      	mov	r0, r3
 8004da6:	f000 fb12 	bl	80053ce <TIM_ITRx_SetConfig>
      break;
 8004daa:	e025      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <HAL_TIM_ConfigClockSource+0x554>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d013      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x51e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dbe:	d00e      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x51e>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	@ (8004e18 <HAL_TIM_ConfigClockSource+0x558>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d009      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x51e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a13      	ldr	r2, [pc, #76]	@ (8004e1c <HAL_TIM_ConfigClockSource+0x55c>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d004      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x51e>
 8004dd4:	f241 5130 	movw	r1, #5424	@ 0x1530
 8004dd8:	4811      	ldr	r0, [pc, #68]	@ (8004e20 <HAL_TIM_ConfigClockSource+0x560>)
 8004dda:	f7fb fd93 	bl	8000904 <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4619      	mov	r1, r3
 8004de8:	4610      	mov	r0, r2
 8004dea:	f000 faf0 	bl	80053ce <TIM_ITRx_SetConfig>
      break;
 8004dee:	e003      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
    }

    default:
      status = HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	73fb      	strb	r3, [r7, #15]
      break;
 8004df4:	e000      	b.n	8004df8 <HAL_TIM_ConfigClockSource+0x538>
      break;
 8004df6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	08005b90 	.word	0x08005b90

08004e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a29      	ldr	r2, [pc, #164]	@ (8004edc <TIM_Base_SetConfig+0xb8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <TIM_Base_SetConfig+0x30>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e42:	d007      	beq.n	8004e54 <TIM_Base_SetConfig+0x30>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a26      	ldr	r2, [pc, #152]	@ (8004ee0 <TIM_Base_SetConfig+0xbc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d003      	beq.n	8004e54 <TIM_Base_SetConfig+0x30>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a25      	ldr	r2, [pc, #148]	@ (8004ee4 <TIM_Base_SetConfig+0xc0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d108      	bne.n	8004e66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a1c      	ldr	r2, [pc, #112]	@ (8004edc <TIM_Base_SetConfig+0xb8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0x62>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0x62>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a19      	ldr	r2, [pc, #100]	@ (8004ee0 <TIM_Base_SetConfig+0xbc>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0x62>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a18      	ldr	r2, [pc, #96]	@ (8004ee4 <TIM_Base_SetConfig+0xc0>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a07      	ldr	r2, [pc, #28]	@ (8004edc <TIM_Base_SetConfig+0xb8>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d103      	bne.n	8004ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	615a      	str	r2, [r3, #20]
}
 8004ed2:	bf00      	nop
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bc80      	pop	{r7}
 8004eda:	4770      	bx	lr
 8004edc:	40012c00 	.word	0x40012c00
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800

08004ee8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a1b      	ldr	r3, [r3, #32]
 8004ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f023 0201 	bic.w	r2, r3, #1
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	f023 0302 	bic.w	r3, r3, #2
 8004f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a30      	ldr	r2, [pc, #192]	@ (8005000 <TIM_OC1_SetConfig+0x118>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d119      	bne.n	8004f78 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <TIM_OC1_SetConfig+0x76>
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b08      	cmp	r3, #8
 8004f52:	d004      	beq.n	8004f5e <TIM_OC1_SetConfig+0x76>
 8004f54:	f641 21c4 	movw	r1, #6852	@ 0x1ac4
 8004f58:	482a      	ldr	r0, [pc, #168]	@ (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004f5a:	f7fb fcd3 	bl	8000904 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f023 0308 	bic.w	r3, r3, #8
 8004f64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0304 	bic.w	r3, r3, #4
 8004f76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a21      	ldr	r2, [pc, #132]	@ (8005000 <TIM_OC1_SetConfig+0x118>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d12d      	bne.n	8004fdc <TIM_OC1_SetConfig+0xf4>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f88:	d008      	beq.n	8004f9c <TIM_OC1_SetConfig+0xb4>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d004      	beq.n	8004f9c <TIM_OC1_SetConfig+0xb4>
 8004f92:	f641 21d1 	movw	r1, #6865	@ 0x1ad1
 8004f96:	481b      	ldr	r0, [pc, #108]	@ (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004f98:	f7fb fcb4 	bl	8000904 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa4:	d008      	beq.n	8004fb8 <TIM_OC1_SetConfig+0xd0>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d004      	beq.n	8004fb8 <TIM_OC1_SetConfig+0xd0>
 8004fae:	f641 21d2 	movw	r1, #6866	@ 0x1ad2
 8004fb2:	4814      	ldr	r0, [pc, #80]	@ (8005004 <TIM_OC1_SetConfig+0x11c>)
 8004fb4:	f7fb fca6 	bl	8000904 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	697a      	ldr	r2, [r7, #20]
 8004ff4:	621a      	str	r2, [r3, #32]
}
 8004ff6:	bf00      	nop
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	40012c00 	.word	0x40012c00
 8005004:	08005b90 	.word	0x08005b90

08005008 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	f023 0210 	bic.w	r2, r3, #16
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800503e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0320 	bic.w	r3, r3, #32
 8005052:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	011b      	lsls	r3, r3, #4
 800505a:	697a      	ldr	r2, [r7, #20]
 800505c:	4313      	orrs	r3, r2
 800505e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a31      	ldr	r2, [pc, #196]	@ (8005128 <TIM_OC2_SetConfig+0x120>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d11a      	bne.n	800509e <TIM_OC2_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d008      	beq.n	8005082 <TIM_OC2_SetConfig+0x7a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b08      	cmp	r3, #8
 8005076:	d004      	beq.n	8005082 <TIM_OC2_SetConfig+0x7a>
 8005078:	f641 3110 	movw	r1, #6928	@ 0x1b10
 800507c:	482b      	ldr	r0, [pc, #172]	@ (800512c <TIM_OC2_SetConfig+0x124>)
 800507e:	f7fb fc41 	bl	8000904 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	68db      	ldr	r3, [r3, #12]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800509c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	@ (8005128 <TIM_OC2_SetConfig+0x120>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d12f      	bne.n	8005106 <TIM_OC2_SetConfig+0xfe>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050ae:	d008      	beq.n	80050c2 <TIM_OC2_SetConfig+0xba>
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d004      	beq.n	80050c2 <TIM_OC2_SetConfig+0xba>
 80050b8:	f641 311e 	movw	r1, #6942	@ 0x1b1e
 80050bc:	481b      	ldr	r0, [pc, #108]	@ (800512c <TIM_OC2_SetConfig+0x124>)
 80050be:	f7fb fc21 	bl	8000904 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ca:	d008      	beq.n	80050de <TIM_OC2_SetConfig+0xd6>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d004      	beq.n	80050de <TIM_OC2_SetConfig+0xd6>
 80050d4:	f641 311f 	movw	r1, #6943	@ 0x1b1f
 80050d8:	4814      	ldr	r0, [pc, #80]	@ (800512c <TIM_OC2_SetConfig+0x124>)
 80050da:	f7fb fc13 	bl	8000904 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	621a      	str	r2, [r3, #32]
}
 8005120:	bf00      	nop
 8005122:	3718      	adds	r7, #24
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40012c00 	.word	0x40012c00
 800512c:	08005b90 	.word	0x08005b90

08005130 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f023 0303 	bic.w	r3, r3, #3
 8005166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a31      	ldr	r2, [pc, #196]	@ (8005250 <TIM_OC3_SetConfig+0x120>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d11a      	bne.n	80051c4 <TIM_OC3_SetConfig+0x94>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d008      	beq.n	80051a8 <TIM_OC3_SetConfig+0x78>
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b08      	cmp	r3, #8
 800519c:	d004      	beq.n	80051a8 <TIM_OC3_SetConfig+0x78>
 800519e:	f641 315c 	movw	r1, #7004	@ 0x1b5c
 80051a2:	482c      	ldr	r0, [pc, #176]	@ (8005254 <TIM_OC3_SetConfig+0x124>)
 80051a4:	f7fb fbae 	bl	8000904 <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a22      	ldr	r2, [pc, #136]	@ (8005250 <TIM_OC3_SetConfig+0x120>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d12f      	bne.n	800522c <TIM_OC3_SetConfig+0xfc>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	699b      	ldr	r3, [r3, #24]
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051d4:	d008      	beq.n	80051e8 <TIM_OC3_SetConfig+0xb8>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d004      	beq.n	80051e8 <TIM_OC3_SetConfig+0xb8>
 80051de:	f641 3169 	movw	r1, #7017	@ 0x1b69
 80051e2:	481c      	ldr	r0, [pc, #112]	@ (8005254 <TIM_OC3_SetConfig+0x124>)
 80051e4:	f7fb fb8e 	bl	8000904 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051f0:	d008      	beq.n	8005204 <TIM_OC3_SetConfig+0xd4>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d004      	beq.n	8005204 <TIM_OC3_SetConfig+0xd4>
 80051fa:	f641 316a 	movw	r1, #7018	@ 0x1b6a
 80051fe:	4815      	ldr	r0, [pc, #84]	@ (8005254 <TIM_OC3_SetConfig+0x124>)
 8005200:	f7fb fb80 	bl	8000904 <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800520a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	4313      	orrs	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	011b      	lsls	r3, r3, #4
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	685a      	ldr	r2, [r3, #4]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	3718      	adds	r7, #24
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40012c00 	.word	0x40012c00
 8005254:	08005b90 	.word	0x08005b90

08005258 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800528e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	021b      	lsls	r3, r3, #8
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	031b      	lsls	r3, r3, #12
 80052aa:	693a      	ldr	r2, [r7, #16]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a16      	ldr	r2, [pc, #88]	@ (800530c <TIM_OC4_SetConfig+0xb4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d117      	bne.n	80052e8 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c0:	d008      	beq.n	80052d4 <TIM_OC4_SetConfig+0x7c>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d004      	beq.n	80052d4 <TIM_OC4_SetConfig+0x7c>
 80052ca:	f641 31a9 	movw	r1, #7081	@ 0x1ba9
 80052ce:	4810      	ldr	r0, [pc, #64]	@ (8005310 <TIM_OC4_SetConfig+0xb8>)
 80052d0:	f7fb fb18 	bl	8000904 <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80052da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	019b      	lsls	r3, r3, #6
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	40012c00 	.word	0x40012c00
 8005310:	08005b90 	.word	0x08005b90

08005314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005314:	b480      	push	{r7}
 8005316:	b087      	sub	sp, #28
 8005318:	af00      	add	r7, sp, #0
 800531a:	60f8      	str	r0, [r7, #12]
 800531c:	60b9      	str	r1, [r7, #8]
 800531e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a1b      	ldr	r3, [r3, #32]
 8005324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	f023 0201 	bic.w	r2, r3, #1
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800533e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	011b      	lsls	r3, r3, #4
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 030a 	bic.w	r3, r3, #10
 8005350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	693a      	ldr	r2, [r7, #16]
 800535e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	621a      	str	r2, [r3, #32]
}
 8005366:	bf00      	nop
 8005368:	371c      	adds	r7, #28
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f023 0210 	bic.w	r2, r3, #16
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800539a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	031b      	lsls	r3, r3, #12
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80053ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	697a      	ldr	r2, [r7, #20]
 80053c2:	621a      	str	r2, [r3, #32]
}
 80053c4:	bf00      	nop
 80053c6:	371c      	adds	r7, #28
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bc80      	pop	{r7}
 80053cc:	4770      	bx	lr

080053ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f043 0307 	orr.w	r3, r3, #7
 80053f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	609a      	str	r2, [r3, #8]
}
 80053f8:	bf00      	nop
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bc80      	pop	{r7}
 8005400:	4770      	bx	lr

08005402 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005402:	b480      	push	{r7}
 8005404:	b087      	sub	sp, #28
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	607a      	str	r2, [r7, #4]
 800540e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800541c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	021a      	lsls	r2, r3, #8
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	431a      	orrs	r2, r3
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	4313      	orrs	r3, r2
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	609a      	str	r2, [r3, #8]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	bc80      	pop	{r7}
 800543e:	4770      	bx	lr

08005440 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b084      	sub	sp, #16
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4d      	ldr	r2, [pc, #308]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d013      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800545c:	d00e      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a49      	ldr	r2, [pc, #292]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d009      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a47      	ldr	r2, [pc, #284]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d004      	beq.n	800547c <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8005472:	f240 71b4 	movw	r1, #1972	@ 0x7b4
 8005476:	4846      	ldr	r0, [pc, #280]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 8005478:	f7fb fa44 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d020      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2b10      	cmp	r3, #16
 800548a:	d01c      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b20      	cmp	r3, #32
 8005492:	d018      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b30      	cmp	r3, #48	@ 0x30
 800549a:	d014      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b40      	cmp	r3, #64	@ 0x40
 80054a2:	d010      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b50      	cmp	r3, #80	@ 0x50
 80054aa:	d00c      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b60      	cmp	r3, #96	@ 0x60
 80054b2:	d008      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	2b70      	cmp	r3, #112	@ 0x70
 80054ba:	d004      	beq.n	80054c6 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80054bc:	f240 71b5 	movw	r1, #1973	@ 0x7b5
 80054c0:	4833      	ldr	r0, [pc, #204]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80054c2:	f7fb fa1f 	bl	8000904 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	d008      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 80054d6:	f240 71b6 	movw	r1, #1974	@ 0x7b6
 80054da:	482d      	ldr	r0, [pc, #180]	@ (8005590 <HAL_TIMEx_MasterConfigSynchronization+0x150>)
 80054dc:	f7fb fa12 	bl	8000904 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80054ea:	2302      	movs	r3, #2
 80054ec:	e046      	b.n	800557c <HAL_TIMEx_MasterConfigSynchronization+0x13c>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2201      	movs	r2, #1
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2202      	movs	r2, #2
 80054fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005514:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a15      	ldr	r2, [pc, #84]	@ (8005584 <HAL_TIMEx_MasterConfigSynchronization+0x144>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00e      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553a:	d009      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a11      	ldr	r2, [pc, #68]	@ (8005588 <HAL_TIMEx_MasterConfigSynchronization+0x148>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d004      	beq.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x110>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a10      	ldr	r2, [pc, #64]	@ (800558c <HAL_TIMEx_MasterConfigSynchronization+0x14c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d10c      	bne.n	800556a <HAL_TIMEx_MasterConfigSynchronization+0x12a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005556:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	68ba      	ldr	r2, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68ba      	ldr	r2, [r7, #8]
 8005568:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	40012c00 	.word	0x40012c00
 8005588:	40000400 	.word	0x40000400
 800558c:	40000800 	.word	0x40000800
 8005590:	08005bc8 	.word	0x08005bc8

08005594 <create_queue>:
 */

#include "queue.h"

Queue_TypeDef* create_queue()
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
    Queue_TypeDef *new_queue = malloc(sizeof(Queue_TypeDef));
 800559a:	2008      	movs	r0, #8
 800559c:	f000 f8a0 	bl	80056e0 <malloc>
 80055a0:	4603      	mov	r3, r0
 80055a2:	607b      	str	r3, [r7, #4]
    if (new_queue == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <create_queue+0x1a>
    {
        return NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	e006      	b.n	80055bc <create_queue+0x28>
    }
    new_queue->head = NULL;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	601a      	str	r2, [r3, #0]
    new_queue->tail = NULL;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	605a      	str	r2, [r3, #4]
    return new_queue;
 80055ba:	687b      	ldr	r3, [r7, #4]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <destroy_queue>:

void destroy_queue(Queue_TypeDef *queue)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
    while (!queue_empty(queue))
 80055cc:	e002      	b.n	80055d4 <destroy_queue+0x10>
    {
        queue_dequeue(queue);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f862 	bl	8005698 <queue_dequeue>
    while (!queue_empty(queue))
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f808 	bl	80055ea <queue_empty>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0f6      	beq.n	80055ce <destroy_queue+0xa>
    }
//    free(queue);
}
 80055e0:	bf00      	nop
 80055e2:	bf00      	nop
 80055e4:	3708      	adds	r7, #8
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <queue_empty>:

uint8_t queue_empty(Queue_TypeDef *queue)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
    if (queue->head == NULL && queue->tail == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d105      	bne.n	8005606 <queue_empty+0x1c>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <queue_empty+0x1c>
    {
        return 1;
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <queue_empty+0x1e>
    }
    return 0;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	bc80      	pop	{r7}
 8005610:	4770      	bx	lr

08005612 <queue_enqueue>:

void queue_enqueue(Queue_TypeDef *queue, void *new_data)
{
 8005612:	b590      	push	{r4, r7, lr}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
 800561a:	6039      	str	r1, [r7, #0]
    if (queue->tail == NULL)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d117      	bne.n	8005654 <queue_enqueue+0x42>
    {
        // handle empty queue
        queue->tail = malloc(sizeof(Node_TypeDef));
 8005624:	2008      	movs	r0, #8
 8005626:	f000 f85b 	bl	80056e0 <malloc>
 800562a:	4603      	mov	r3, r0
 800562c:	461a      	mov	r2, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	605a      	str	r2, [r3, #4]
        if (queue->tail == NULL)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d028      	beq.n	800568c <queue_enqueue+0x7a>
        {
            // todo handle mem error
            return;
        }
        queue->tail->data = new_data;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	601a      	str	r2, [r3, #0]
        queue->tail->next = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	605a      	str	r2, [r3, #4]
        // update head too
        queue->head = queue->tail;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	601a      	str	r2, [r3, #0]
        return;
 8005652:	e01e      	b.n	8005692 <queue_enqueue+0x80>
    }
    queue->tail->next = malloc(sizeof(Node_TypeDef));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685c      	ldr	r4, [r3, #4]
 8005658:	2008      	movs	r0, #8
 800565a:	f000 f841 	bl	80056e0 <malloc>
 800565e:	4603      	mov	r3, r0
 8005660:	6063      	str	r3, [r4, #4]
    if (queue->tail->next == NULL)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d011      	beq.n	8005690 <queue_enqueue+0x7e>
    {
        // todo handle mem error
        return;
    }
    queue->tail->next->data = new_data;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	601a      	str	r2, [r3, #0]
    queue->tail->next->next = NULL;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	605a      	str	r2, [r3, #4]
    queue->tail = queue->tail->next;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	605a      	str	r2, [r3, #4]
 800568a:	e002      	b.n	8005692 <queue_enqueue+0x80>
            return;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <queue_enqueue+0x80>
        return;
 8005690:	bf00      	nop
}
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bd90      	pop	{r4, r7, pc}

08005698 <queue_dequeue>:

void queue_dequeue(Queue_TypeDef *queue)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
    if (queue->head != NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d016      	beq.n	80056d6 <queue_dequeue+0x3e>
    {
        Node_TypeDef *temp = queue->head;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	60fb      	str	r3, [r7, #12]
        queue->head = queue->head->next;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	685a      	ldr	r2, [r3, #4]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
        // if the queue is now empty, update the tail too
        if (queue->head == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d102      	bne.n	80056c6 <queue_dequeue+0x2e>
        {
            queue->tail = NULL;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	605a      	str	r2, [r3, #4]
        }
        free(temp->data);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 f810 	bl	80056f0 <free>
        free(temp);
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f000 f80d 	bl	80056f0 <free>
    }
}
 80056d6:	bf00      	nop
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <malloc>:
 80056e0:	4b02      	ldr	r3, [pc, #8]	@ (80056ec <malloc+0xc>)
 80056e2:	4601      	mov	r1, r0
 80056e4:	6818      	ldr	r0, [r3, #0]
 80056e6:	f000 b82d 	b.w	8005744 <_malloc_r>
 80056ea:	bf00      	nop
 80056ec:	2000000c 	.word	0x2000000c

080056f0 <free>:
 80056f0:	4b02      	ldr	r3, [pc, #8]	@ (80056fc <free+0xc>)
 80056f2:	4601      	mov	r1, r0
 80056f4:	6818      	ldr	r0, [r3, #0]
 80056f6:	f000 b8f5 	b.w	80058e4 <_free_r>
 80056fa:	bf00      	nop
 80056fc:	2000000c 	.word	0x2000000c

08005700 <sbrk_aligned>:
 8005700:	b570      	push	{r4, r5, r6, lr}
 8005702:	4e0f      	ldr	r6, [pc, #60]	@ (8005740 <sbrk_aligned+0x40>)
 8005704:	460c      	mov	r4, r1
 8005706:	6831      	ldr	r1, [r6, #0]
 8005708:	4605      	mov	r5, r0
 800570a:	b911      	cbnz	r1, 8005712 <sbrk_aligned+0x12>
 800570c:	f000 f8ae 	bl	800586c <_sbrk_r>
 8005710:	6030      	str	r0, [r6, #0]
 8005712:	4621      	mov	r1, r4
 8005714:	4628      	mov	r0, r5
 8005716:	f000 f8a9 	bl	800586c <_sbrk_r>
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d103      	bne.n	8005726 <sbrk_aligned+0x26>
 800571e:	f04f 34ff 	mov.w	r4, #4294967295
 8005722:	4620      	mov	r0, r4
 8005724:	bd70      	pop	{r4, r5, r6, pc}
 8005726:	1cc4      	adds	r4, r0, #3
 8005728:	f024 0403 	bic.w	r4, r4, #3
 800572c:	42a0      	cmp	r0, r4
 800572e:	d0f8      	beq.n	8005722 <sbrk_aligned+0x22>
 8005730:	1a21      	subs	r1, r4, r0
 8005732:	4628      	mov	r0, r5
 8005734:	f000 f89a 	bl	800586c <_sbrk_r>
 8005738:	3001      	adds	r0, #1
 800573a:	d1f2      	bne.n	8005722 <sbrk_aligned+0x22>
 800573c:	e7ef      	b.n	800571e <sbrk_aligned+0x1e>
 800573e:	bf00      	nop
 8005740:	20000298 	.word	0x20000298

08005744 <_malloc_r>:
 8005744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005748:	1ccd      	adds	r5, r1, #3
 800574a:	f025 0503 	bic.w	r5, r5, #3
 800574e:	3508      	adds	r5, #8
 8005750:	2d0c      	cmp	r5, #12
 8005752:	bf38      	it	cc
 8005754:	250c      	movcc	r5, #12
 8005756:	2d00      	cmp	r5, #0
 8005758:	4606      	mov	r6, r0
 800575a:	db01      	blt.n	8005760 <_malloc_r+0x1c>
 800575c:	42a9      	cmp	r1, r5
 800575e:	d904      	bls.n	800576a <_malloc_r+0x26>
 8005760:	230c      	movs	r3, #12
 8005762:	6033      	str	r3, [r6, #0]
 8005764:	2000      	movs	r0, #0
 8005766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800576a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005840 <_malloc_r+0xfc>
 800576e:	f000 f869 	bl	8005844 <__malloc_lock>
 8005772:	f8d8 3000 	ldr.w	r3, [r8]
 8005776:	461c      	mov	r4, r3
 8005778:	bb44      	cbnz	r4, 80057cc <_malloc_r+0x88>
 800577a:	4629      	mov	r1, r5
 800577c:	4630      	mov	r0, r6
 800577e:	f7ff ffbf 	bl	8005700 <sbrk_aligned>
 8005782:	1c43      	adds	r3, r0, #1
 8005784:	4604      	mov	r4, r0
 8005786:	d158      	bne.n	800583a <_malloc_r+0xf6>
 8005788:	f8d8 4000 	ldr.w	r4, [r8]
 800578c:	4627      	mov	r7, r4
 800578e:	2f00      	cmp	r7, #0
 8005790:	d143      	bne.n	800581a <_malloc_r+0xd6>
 8005792:	2c00      	cmp	r4, #0
 8005794:	d04b      	beq.n	800582e <_malloc_r+0xea>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	4639      	mov	r1, r7
 800579a:	4630      	mov	r0, r6
 800579c:	eb04 0903 	add.w	r9, r4, r3
 80057a0:	f000 f864 	bl	800586c <_sbrk_r>
 80057a4:	4581      	cmp	r9, r0
 80057a6:	d142      	bne.n	800582e <_malloc_r+0xea>
 80057a8:	6821      	ldr	r1, [r4, #0]
 80057aa:	4630      	mov	r0, r6
 80057ac:	1a6d      	subs	r5, r5, r1
 80057ae:	4629      	mov	r1, r5
 80057b0:	f7ff ffa6 	bl	8005700 <sbrk_aligned>
 80057b4:	3001      	adds	r0, #1
 80057b6:	d03a      	beq.n	800582e <_malloc_r+0xea>
 80057b8:	6823      	ldr	r3, [r4, #0]
 80057ba:	442b      	add	r3, r5
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	f8d8 3000 	ldr.w	r3, [r8]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	bb62      	cbnz	r2, 8005820 <_malloc_r+0xdc>
 80057c6:	f8c8 7000 	str.w	r7, [r8]
 80057ca:	e00f      	b.n	80057ec <_malloc_r+0xa8>
 80057cc:	6822      	ldr	r2, [r4, #0]
 80057ce:	1b52      	subs	r2, r2, r5
 80057d0:	d420      	bmi.n	8005814 <_malloc_r+0xd0>
 80057d2:	2a0b      	cmp	r2, #11
 80057d4:	d917      	bls.n	8005806 <_malloc_r+0xc2>
 80057d6:	1961      	adds	r1, r4, r5
 80057d8:	42a3      	cmp	r3, r4
 80057da:	6025      	str	r5, [r4, #0]
 80057dc:	bf18      	it	ne
 80057de:	6059      	strne	r1, [r3, #4]
 80057e0:	6863      	ldr	r3, [r4, #4]
 80057e2:	bf08      	it	eq
 80057e4:	f8c8 1000 	streq.w	r1, [r8]
 80057e8:	5162      	str	r2, [r4, r5]
 80057ea:	604b      	str	r3, [r1, #4]
 80057ec:	4630      	mov	r0, r6
 80057ee:	f000 f82f 	bl	8005850 <__malloc_unlock>
 80057f2:	f104 000b 	add.w	r0, r4, #11
 80057f6:	1d23      	adds	r3, r4, #4
 80057f8:	f020 0007 	bic.w	r0, r0, #7
 80057fc:	1ac2      	subs	r2, r0, r3
 80057fe:	bf1c      	itt	ne
 8005800:	1a1b      	subne	r3, r3, r0
 8005802:	50a3      	strne	r3, [r4, r2]
 8005804:	e7af      	b.n	8005766 <_malloc_r+0x22>
 8005806:	6862      	ldr	r2, [r4, #4]
 8005808:	42a3      	cmp	r3, r4
 800580a:	bf0c      	ite	eq
 800580c:	f8c8 2000 	streq.w	r2, [r8]
 8005810:	605a      	strne	r2, [r3, #4]
 8005812:	e7eb      	b.n	80057ec <_malloc_r+0xa8>
 8005814:	4623      	mov	r3, r4
 8005816:	6864      	ldr	r4, [r4, #4]
 8005818:	e7ae      	b.n	8005778 <_malloc_r+0x34>
 800581a:	463c      	mov	r4, r7
 800581c:	687f      	ldr	r7, [r7, #4]
 800581e:	e7b6      	b.n	800578e <_malloc_r+0x4a>
 8005820:	461a      	mov	r2, r3
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	42a3      	cmp	r3, r4
 8005826:	d1fb      	bne.n	8005820 <_malloc_r+0xdc>
 8005828:	2300      	movs	r3, #0
 800582a:	6053      	str	r3, [r2, #4]
 800582c:	e7de      	b.n	80057ec <_malloc_r+0xa8>
 800582e:	230c      	movs	r3, #12
 8005830:	4630      	mov	r0, r6
 8005832:	6033      	str	r3, [r6, #0]
 8005834:	f000 f80c 	bl	8005850 <__malloc_unlock>
 8005838:	e794      	b.n	8005764 <_malloc_r+0x20>
 800583a:	6005      	str	r5, [r0, #0]
 800583c:	e7d6      	b.n	80057ec <_malloc_r+0xa8>
 800583e:	bf00      	nop
 8005840:	2000029c 	.word	0x2000029c

08005844 <__malloc_lock>:
 8005844:	4801      	ldr	r0, [pc, #4]	@ (800584c <__malloc_lock+0x8>)
 8005846:	f000 b84b 	b.w	80058e0 <__retarget_lock_acquire_recursive>
 800584a:	bf00      	nop
 800584c:	200003dc 	.word	0x200003dc

08005850 <__malloc_unlock>:
 8005850:	4801      	ldr	r0, [pc, #4]	@ (8005858 <__malloc_unlock+0x8>)
 8005852:	f000 b846 	b.w	80058e2 <__retarget_lock_release_recursive>
 8005856:	bf00      	nop
 8005858:	200003dc 	.word	0x200003dc

0800585c <memset>:
 800585c:	4603      	mov	r3, r0
 800585e:	4402      	add	r2, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <_sbrk_r>:
 800586c:	b538      	push	{r3, r4, r5, lr}
 800586e:	2300      	movs	r3, #0
 8005870:	4d05      	ldr	r5, [pc, #20]	@ (8005888 <_sbrk_r+0x1c>)
 8005872:	4604      	mov	r4, r0
 8005874:	4608      	mov	r0, r1
 8005876:	602b      	str	r3, [r5, #0]
 8005878:	f7fb f9ce 	bl	8000c18 <_sbrk>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_sbrk_r+0x1a>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_sbrk_r+0x1a>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	200003d8 	.word	0x200003d8

0800588c <__errno>:
 800588c:	4b01      	ldr	r3, [pc, #4]	@ (8005894 <__errno+0x8>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	2000000c 	.word	0x2000000c

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	2600      	movs	r6, #0
 800589c:	4d0c      	ldr	r5, [pc, #48]	@ (80058d0 <__libc_init_array+0x38>)
 800589e:	4c0d      	ldr	r4, [pc, #52]	@ (80058d4 <__libc_init_array+0x3c>)
 80058a0:	1b64      	subs	r4, r4, r5
 80058a2:	10a4      	asrs	r4, r4, #2
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	f000 f864 	bl	8005974 <_init>
 80058ac:	2600      	movs	r6, #0
 80058ae:	4d0a      	ldr	r5, [pc, #40]	@ (80058d8 <__libc_init_array+0x40>)
 80058b0:	4c0a      	ldr	r4, [pc, #40]	@ (80058dc <__libc_init_array+0x44>)
 80058b2:	1b64      	subs	r4, r4, r5
 80058b4:	10a4      	asrs	r4, r4, #2
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	08005c30 	.word	0x08005c30
 80058d4:	08005c30 	.word	0x08005c30
 80058d8:	08005c30 	.word	0x08005c30
 80058dc:	08005c34 	.word	0x08005c34

080058e0 <__retarget_lock_acquire_recursive>:
 80058e0:	4770      	bx	lr

080058e2 <__retarget_lock_release_recursive>:
 80058e2:	4770      	bx	lr

080058e4 <_free_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4605      	mov	r5, r0
 80058e8:	2900      	cmp	r1, #0
 80058ea:	d040      	beq.n	800596e <_free_r+0x8a>
 80058ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f0:	1f0c      	subs	r4, r1, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	bfb8      	it	lt
 80058f6:	18e4      	addlt	r4, r4, r3
 80058f8:	f7ff ffa4 	bl	8005844 <__malloc_lock>
 80058fc:	4a1c      	ldr	r2, [pc, #112]	@ (8005970 <_free_r+0x8c>)
 80058fe:	6813      	ldr	r3, [r2, #0]
 8005900:	b933      	cbnz	r3, 8005910 <_free_r+0x2c>
 8005902:	6063      	str	r3, [r4, #4]
 8005904:	6014      	str	r4, [r2, #0]
 8005906:	4628      	mov	r0, r5
 8005908:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800590c:	f7ff bfa0 	b.w	8005850 <__malloc_unlock>
 8005910:	42a3      	cmp	r3, r4
 8005912:	d908      	bls.n	8005926 <_free_r+0x42>
 8005914:	6820      	ldr	r0, [r4, #0]
 8005916:	1821      	adds	r1, r4, r0
 8005918:	428b      	cmp	r3, r1
 800591a:	bf01      	itttt	eq
 800591c:	6819      	ldreq	r1, [r3, #0]
 800591e:	685b      	ldreq	r3, [r3, #4]
 8005920:	1809      	addeq	r1, r1, r0
 8005922:	6021      	streq	r1, [r4, #0]
 8005924:	e7ed      	b.n	8005902 <_free_r+0x1e>
 8005926:	461a      	mov	r2, r3
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	b10b      	cbz	r3, 8005930 <_free_r+0x4c>
 800592c:	42a3      	cmp	r3, r4
 800592e:	d9fa      	bls.n	8005926 <_free_r+0x42>
 8005930:	6811      	ldr	r1, [r2, #0]
 8005932:	1850      	adds	r0, r2, r1
 8005934:	42a0      	cmp	r0, r4
 8005936:	d10b      	bne.n	8005950 <_free_r+0x6c>
 8005938:	6820      	ldr	r0, [r4, #0]
 800593a:	4401      	add	r1, r0
 800593c:	1850      	adds	r0, r2, r1
 800593e:	4283      	cmp	r3, r0
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	d1e0      	bne.n	8005906 <_free_r+0x22>
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	4408      	add	r0, r1
 800594a:	6010      	str	r0, [r2, #0]
 800594c:	6053      	str	r3, [r2, #4]
 800594e:	e7da      	b.n	8005906 <_free_r+0x22>
 8005950:	d902      	bls.n	8005958 <_free_r+0x74>
 8005952:	230c      	movs	r3, #12
 8005954:	602b      	str	r3, [r5, #0]
 8005956:	e7d6      	b.n	8005906 <_free_r+0x22>
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	1821      	adds	r1, r4, r0
 800595c:	428b      	cmp	r3, r1
 800595e:	bf01      	itttt	eq
 8005960:	6819      	ldreq	r1, [r3, #0]
 8005962:	685b      	ldreq	r3, [r3, #4]
 8005964:	1809      	addeq	r1, r1, r0
 8005966:	6021      	streq	r1, [r4, #0]
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	6054      	str	r4, [r2, #4]
 800596c:	e7cb      	b.n	8005906 <_free_r+0x22>
 800596e:	bd38      	pop	{r3, r4, r5, pc}
 8005970:	2000029c 	.word	0x2000029c

08005974 <_init>:
 8005974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005976:	bf00      	nop
 8005978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597a:	bc08      	pop	{r3}
 800597c:	469e      	mov	lr, r3
 800597e:	4770      	bx	lr

08005980 <_fini>:
 8005980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005982:	bf00      	nop
 8005984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005986:	bc08      	pop	{r3}
 8005988:	469e      	mov	lr, r3
 800598a:	4770      	bx	lr
