
AT24C04C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fe0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080030ec  080030ec  000040ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003118  08003118  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003118  08003118  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003118  08003118  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003118  08003118  00004118  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800311c  0800311c  0000411c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003120  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  2000000c  0800312c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000114  0800312c  00005114  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ff9  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d6e  00000000  00000000  0000e02e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000fda0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000690  00000000  00000000  00010650  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001772d  00000000  00000000  00010ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c421  00000000  00000000  0002840d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000848b0  00000000  00000000  0003482e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b90de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  000b9124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000bb310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080030d4 	.word	0x080030d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080030d4 	.word	0x080030d4

0800014c <MX_AT24C04C_1_Init>:


AT24C04C_HandleTypeDef at24c04c_1;

void MX_AT24C04C_1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    at24c04c_1.Init.I2C_HandlerInstance = &hi2c1;
 8000150:	4b0a      	ldr	r3, [pc, #40]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000152:	4a0b      	ldr	r2, [pc, #44]	@ (8000180 <MX_AT24C04C_1_Init+0x34>)
 8000154:	601a      	str	r2, [r3, #0]
    at24c04c_1.Init.device_identifier = 0b10100000;
 8000156:	4b09      	ldr	r3, [pc, #36]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000158:	22a0      	movs	r2, #160	@ 0xa0
 800015a:	711a      	strb	r2, [r3, #4]
    at24c04c_1.Init.a2_pin = 0;
 800015c:	4b07      	ldr	r3, [pc, #28]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 800015e:	2200      	movs	r2, #0
 8000160:	715a      	strb	r2, [r3, #5]
    at24c04c_1.Init.a1_pin = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	719a      	strb	r2, [r3, #6]


    if (AT24C04C_Init(&at24c04c_1) != AT24C04C_OK)
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 800016a:	f000 fab2 	bl	80006d2 <AT24C04C_Init>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d001      	beq.n	8000178 <MX_AT24C04C_1_Init+0x2c>
    {
        Error_Handler();
 8000174:	f000 fa14 	bl	80005a0 <Error_Handler>
    }
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000028 	.word	0x20000028
 8000180:	20000060 	.word	0x20000060

08000184 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000188:	4b18      	ldr	r3, [pc, #96]	@ (80001ec <MX_CAN_Init+0x68>)
 800018a:	4a19      	ldr	r2, [pc, #100]	@ (80001f0 <MX_CAN_Init+0x6c>)
 800018c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800018e:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <MX_CAN_Init+0x68>)
 8000190:	2202      	movs	r2, #2
 8000192:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000194:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <MX_CAN_Init+0x68>)
 8000196:	2200      	movs	r2, #0
 8000198:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800019a:	4b14      	ldr	r3, [pc, #80]	@ (80001ec <MX_CAN_Init+0x68>)
 800019c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80001a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80001a2:	4b12      	ldr	r3, [pc, #72]	@ (80001ec <MX_CAN_Init+0x68>)
 80001a4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001aa:	4b10      	ldr	r3, [pc, #64]	@ (80001ec <MX_CAN_Init+0x68>)
 80001ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001b0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <MX_CAN_Init+0x68>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <MX_CAN_Init+0x68>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80001be:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <MX_CAN_Init+0x68>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80001c4:	4b09      	ldr	r3, [pc, #36]	@ (80001ec <MX_CAN_Init+0x68>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001ca:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <MX_CAN_Init+0x68>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80001d0:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <MX_CAN_Init+0x68>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001d6:	4805      	ldr	r0, [pc, #20]	@ (80001ec <MX_CAN_Init+0x68>)
 80001d8:	f000 fc4c 	bl	8000a74 <HAL_CAN_Init>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001e2:	f000 f9dd 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000038 	.word	0x20000038
 80001f0:	40006400 	.word	0x40006400

080001f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a20      	ldr	r2, [pc, #128]	@ (8000290 <HAL_CAN_MspInit+0x9c>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d139      	bne.n	8000288 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000214:	4b1f      	ldr	r3, [pc, #124]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000216:	69db      	ldr	r3, [r3, #28]
 8000218:	4a1e      	ldr	r2, [pc, #120]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800021e:	61d3      	str	r3, [r2, #28]
 8000220:	4b1c      	ldr	r3, [pc, #112]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000222:	69db      	ldr	r3, [r3, #28]
 8000224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	4b19      	ldr	r3, [pc, #100]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0304 	and.w	r3, r3, #4
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	480f      	ldr	r0, [pc, #60]	@ (8000298 <HAL_CAN_MspInit+0xa4>)
 800025a:	f001 f90f 	bl	800147c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800025e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000264:	2302      	movs	r3, #2
 8000266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000268:	2303      	movs	r3, #3
 800026a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4809      	ldr	r0, [pc, #36]	@ (8000298 <HAL_CAN_MspInit+0xa4>)
 8000274:	f001 f902 	bl	800147c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	2014      	movs	r0, #20
 800027e:	f001 f8c6 	bl	800140e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000282:	2014      	movs	r0, #20
 8000284:	f001 f8df 	bl	8001446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000288:	bf00      	nop
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40006400 	.word	0x40006400
 8000294:	40021000 	.word	0x40021000
 8000298:	40010800 	.word	0x40010800

0800029c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2104      	movs	r1, #4
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_GPIO_Init+0x90>)
 80002fe:	f001 fa41 	bl	8001784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000302:	2304      	movs	r3, #4
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	4619      	mov	r1, r3
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_GPIO_Init+0x90>)
 800031a:	f001 f8af 	bl	800147c <HAL_GPIO_Init>

}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40010c00 	.word	0x40010c00

08000330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000336:	4a13      	ldr	r2, [pc, #76]	@ (8000384 <MX_I2C1_Init+0x54>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_I2C1_Init+0x50>)
 800033c:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <MX_I2C1_Init+0x58>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_I2C1_Init+0x50>)
 800034e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	@ (8000380 <MX_I2C1_Init+0x50>)
 800036e:	f001 fa21 	bl	80017b4 <HAL_I2C_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f912 	bl	80005a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000060 	.word	0x20000060
 8000384:	40005400 	.word	0x40005400
 8000388:	000186a0 	.word	0x000186a0

0800038c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a15      	ldr	r2, [pc, #84]	@ (80003fc <HAL_I2C_MspInit+0x70>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d123      	bne.n	80003f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a13      	ldr	r2, [pc, #76]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003c4:	23c0      	movs	r3, #192	@ 0xc0
 80003c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c8:	2312      	movs	r3, #18
 80003ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	@ (8000404 <HAL_I2C_MspInit+0x78>)
 80003d8:	f001 f850 	bl	800147c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e6:	61d3      	str	r3, [r2, #28]
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40005400 	.word	0x40005400
 8000400:	40021000 	.word	0x40021000
 8000404:	40010c00 	.word	0x40010c00

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */


	map1.radID = 9;
 800040e:	4b36      	ldr	r3, [pc, #216]	@ (80004e8 <main+0xe0>)
 8000410:	2209      	movs	r2, #9
 8000412:	701a      	strb	r2, [r3, #0]
	map1.p_value = 3.37;
 8000414:	4b34      	ldr	r3, [pc, #208]	@ (80004e8 <main+0xe0>)
 8000416:	4a35      	ldr	r2, [pc, #212]	@ (80004ec <main+0xe4>)
 8000418:	f8c3 2001 	str.w	r2, [r3, #1]
	map1.i_value = 1.5;
 800041c:	4b32      	ldr	r3, [pc, #200]	@ (80004e8 <main+0xe0>)
 800041e:	f04f 527f 	mov.w	r2, #1069547520	@ 0x3fc00000
 8000422:	f8c3 2005 	str.w	r2, [r3, #5]
	map1.d_value = 7.6;
 8000426:	4b30      	ldr	r3, [pc, #192]	@ (80004e8 <main+0xe0>)
 8000428:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <main+0xe8>)
 800042a:	f8c3 2009 	str.w	r2, [r3, #9]
	uint32_t DriveConfRegisterValue = 0b01100100010011000101;
 800042e:	4b31      	ldr	r3, [pc, #196]	@ (80004f4 <main+0xec>)
 8000430:	60bb      	str	r3, [r7, #8]
	memcpy(&map1.DRVConfRegister, &DriveConfRegisterValue, sizeof(map1.DRVConfRegister));
 8000432:	4b2d      	ldr	r3, [pc, #180]	@ (80004e8 <main+0xe0>)
 8000434:	330d      	adds	r3, #13
 8000436:	f107 0208 	add.w	r2, r7, #8
 800043a:	8811      	ldrh	r1, [r2, #0]
 800043c:	7892      	ldrb	r2, [r2, #2]
 800043e:	8019      	strh	r1, [r3, #0]
 8000440:	709a      	strb	r2, [r3, #2]

	memcpy(&map1_e.data, &map1, sizeof(map1));
 8000442:	4a2d      	ldr	r2, [pc, #180]	@ (80004f8 <main+0xf0>)
 8000444:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <main+0xe0>)
 8000446:	4614      	mov	r4, r2
 8000448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800044a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800044e:	f000 fa8b 	bl	8000968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000452:	f000 f85f 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000456:	f7ff ff21 	bl	800029c <MX_GPIO_Init>
  MX_CAN_Init();
 800045a:	f7ff fe93 	bl	8000184 <MX_CAN_Init>
  MX_I2C1_Init();
 800045e:	f7ff ff67 	bl	8000330 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MX_AT24C04C_1_Init();
 8000462:	f7ff fe73 	bl	800014c <MX_AT24C04C_1_Init>
  while (1)
  {

    //dummy variables

    uint16_t eeprom_address = 321;
 8000466:	f240 1341 	movw	r3, #321	@ 0x141
 800046a:	81fb      	strh	r3, [r7, #14]
    uint8_t penguinsChampionships_2000s[3];
    uint16_t len_bytes = 3;
 800046c:	2303      	movs	r3, #3
 800046e:	81bb      	strh	r3, [r7, #12]

    penguinsChampionships_2000s[0] = 9;
 8000470:	2309      	movs	r3, #9
 8000472:	713b      	strb	r3, [r7, #4]
    penguinsChampionships_2000s[1] = 16;
 8000474:	2310      	movs	r3, #16
 8000476:	717b      	strb	r3, [r7, #5]
    penguinsChampionships_2000s[2] = 17;
 8000478:	2311      	movs	r3, #17
 800047a:	71bb      	strb	r3, [r7, #6]

    AT24C04C_WriteData(&at24c04c_1, eeprom_address, penguinsChampionships_2000s, sizeof(penguinsChampionships_2000s));
 800047c:	1d3a      	adds	r2, r7, #4
 800047e:	89f9      	ldrh	r1, [r7, #14]
 8000480:	2303      	movs	r3, #3
 8000482:	481e      	ldr	r0, [pc, #120]	@ (80004fc <main+0xf4>)
 8000484:	f000 f993 	bl	80007ae <AT24C04C_WriteData>

    HAL_Delay(1000);
 8000488:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800048c:	f000 face 	bl	8000a2c <HAL_Delay>


    uint8_t readData[3];

    AT24C04C_ReadData(&at24c04c_1, eeprom_address, readData, sizeof(penguinsChampionships_2000s));
 8000490:	463a      	mov	r2, r7
 8000492:	89f9      	ldrh	r1, [r7, #14]
 8000494:	2303      	movs	r3, #3
 8000496:	4819      	ldr	r0, [pc, #100]	@ (80004fc <main+0xf4>)
 8000498:	f000 f948 	bl	800072c <AT24C04C_ReadData>

    //Can read results over CAN or Breakpoints. 

    
    TxHeader.DLC = 1;
 800049c:	4b18      	ldr	r3, [pc, #96]	@ (8000500 <main+0xf8>)
 800049e:	2201      	movs	r2, #1
 80004a0:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, readData, &TxMailbox);
 80004a2:	463a      	mov	r2, r7
 80004a4:	4b17      	ldr	r3, [pc, #92]	@ (8000504 <main+0xfc>)
 80004a6:	4916      	ldr	r1, [pc, #88]	@ (8000500 <main+0xf8>)
 80004a8:	4817      	ldr	r0, [pc, #92]	@ (8000508 <main+0x100>)
 80004aa:	f000 fbde 	bl	8000c6a <HAL_CAN_AddTxMessage>

    eeprom_address = 52;
 80004ae:	2334      	movs	r3, #52	@ 0x34
 80004b0:	81fb      	strh	r3, [r7, #14]
    AT24C04C_WriteData(&at24c04c_1, eeprom_address, (uint8_t*)&(map1_e.array[0]), sizeof(eeprom_map));
 80004b2:	89f9      	ldrh	r1, [r7, #14]
 80004b4:	2310      	movs	r3, #16
 80004b6:	4a10      	ldr	r2, [pc, #64]	@ (80004f8 <main+0xf0>)
 80004b8:	4810      	ldr	r0, [pc, #64]	@ (80004fc <main+0xf4>)
 80004ba:	f000 f978 	bl	80007ae <AT24C04C_WriteData>
    HAL_Delay(100);
 80004be:	2064      	movs	r0, #100	@ 0x64
 80004c0:	f000 fab4 	bl	8000a2c <HAL_Delay>
    AT24C04C_ReadData(&at24c04c_1, eeprom_address, (uint8_t*)&(read_e.array[0]), sizeof(eeprom_map));
 80004c4:	89f9      	ldrh	r1, [r7, #14]
 80004c6:	2310      	movs	r3, #16
 80004c8:	4a10      	ldr	r2, [pc, #64]	@ (800050c <main+0x104>)
 80004ca:	480c      	ldr	r0, [pc, #48]	@ (80004fc <main+0xf4>)
 80004cc:	f000 f92e 	bl	800072c <AT24C04C_ReadData>
    memcpy(&read, &read_e.data, sizeof(read));
 80004d0:	4a0f      	ldr	r2, [pc, #60]	@ (8000510 <main+0x108>)
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <main+0x104>)
 80004d4:	4614      	mov	r4, r2
 80004d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    HAL_Delay(1000);
 80004dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80004e0:	f000 faa4 	bl	8000a2c <HAL_Delay>
  {
 80004e4:	bf00      	nop
 80004e6:	e7be      	b.n	8000466 <main+0x5e>
 80004e8:	200000d0 	.word	0x200000d0
 80004ec:	4057ae14 	.word	0x4057ae14
 80004f0:	40f33333 	.word	0x40f33333
 80004f4:	000644c5 	.word	0x000644c5
 80004f8:	200000e0 	.word	0x200000e0
 80004fc:	20000028 	.word	0x20000028
 8000500:	200000b4 	.word	0x200000b4
 8000504:	200000cc 	.word	0x200000cc
 8000508:	20000038 	.word	0x20000038
 800050c:	20000100 	.word	0x20000100
 8000510:	200000f0 	.word	0x200000f0

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b090      	sub	sp, #64	@ 0x40
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2228      	movs	r2, #40	@ 0x28
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fdaa 	bl	800307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800053e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 8000540:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000544:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000546:	2301      	movs	r3, #1
 8000548:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800054a:	2302      	movs	r3, #2
 800054c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000552:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000554:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000558:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	4618      	mov	r0, r3
 8000560:	f002 f98e 	bl	8002880 <HAL_RCC_OscConfig>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800056a:	f000 f819 	bl	80005a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056e:	230f      	movs	r3, #15
 8000570:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000572:	2302      	movs	r3, #2
 8000574:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800057a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800057e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2102      	movs	r1, #2
 8000588:	4618      	mov	r0, r3
 800058a:	f002 fbfb 	bl	8002d84 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f804 	bl	80005a0 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3740      	adds	r7, #64	@ 0x40
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a4:	b672      	cpsid	i
}
 80005a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <Error_Handler+0x8>

080005ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b4:	699b      	ldr	r3, [r3, #24]
 80005b6:	4a14      	ldr	r2, [pc, #80]	@ (8000608 <HAL_MspInit+0x5c>)
 80005b8:	f043 0301 	orr.w	r3, r3, #1
 80005bc:	6193      	str	r3, [r2, #24]
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_MspInit+0x5c>)
 80005c0:	699b      	ldr	r3, [r3, #24]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x5c>)
 80005cc:	69db      	ldr	r3, [r3, #28]
 80005ce:	4a0e      	ldr	r2, [pc, #56]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d4:	61d3      	str	r3, [r2, #28]
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x5c>)
 80005d8:	69db      	ldr	r3, [r3, #28]
 80005da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005e2:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_MspInit+0x60>)
 80005e4:	685b      	ldr	r3, [r3, #4]
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	4a04      	ldr	r2, [pc, #16]	@ (800060c <HAL_MspInit+0x60>)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	bf00      	nop
 8000600:	3714      	adds	r7, #20
 8000602:	46bd      	mov	sp, r7
 8000604:	bc80      	pop	{r7}
 8000606:	4770      	bx	lr
 8000608:	40021000 	.word	0x40021000
 800060c:	40010000 	.word	0x40010000

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <UsageFault_Handler+0x4>

08000638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000660:	f000 f9c8 	bl	80009f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 800066c:	4802      	ldr	r0, [pc, #8]	@ (8000678 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800066e:	f000 fbcb 	bl	8000e08 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000038 	.word	0x20000038

0800067c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000680:	bf00      	nop
 8000682:	46bd      	mov	sp, r7
 8000684:	bc80      	pop	{r7}
 8000686:	4770      	bx	lr

08000688 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000688:	f7ff fff8 	bl	800067c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800068c:	480b      	ldr	r0, [pc, #44]	@ (80006bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800068e:	490c      	ldr	r1, [pc, #48]	@ (80006c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000690:	4a0c      	ldr	r2, [pc, #48]	@ (80006c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000694:	e002      	b.n	800069c <LoopCopyDataInit>

08000696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800069a:	3304      	adds	r3, #4

0800069c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800069c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800069e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006a0:	d3f9      	bcc.n	8000696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006a2:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006a4:	4c09      	ldr	r4, [pc, #36]	@ (80006cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006a8:	e001      	b.n	80006ae <LoopFillZerobss>

080006aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006ac:	3204      	adds	r2, #4

080006ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006b0:	d3fb      	bcc.n	80006aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006b2:	f002 fceb 	bl	800308c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006b6:	f7ff fea7 	bl	8000408 <main>
  bx lr
 80006ba:	4770      	bx	lr
  ldr r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006c4:	08003120 	.word	0x08003120
  ldr r2, =_sbss
 80006c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006cc:	20000114 	.word	0x20000114

080006d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006d0:	e7fe      	b.n	80006d0 <ADC1_2_IRQHandler>

080006d2 <AT24C04C_Init>:
 */

#include "stm32f1xx_at24c04c.h"

AT24C04C_StatusTypeDef AT24C04C_Init(AT24C04C_HandleTypeDef *hat24c04c)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d101      	bne.n	80006e4 <AT24C04C_Init+0x12>
    {
        return AT24C04C_ERROR;
 80006e0:	2301      	movs	r3, #1
 80006e2:	e01e      	b.n	8000722 <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_READY)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7a1b      	ldrb	r3, [r3, #8]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b01      	cmp	r3, #1
 80006ec:	d101      	bne.n	80006f2 <AT24C04C_Init+0x20>
    {
        // Peripheral is already initialized
        return AT24C04C_ERROR;
 80006ee:	2301      	movs	r3, #1
 80006f0:	e017      	b.n	8000722 <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	7a1b      	ldrb	r3, [r3, #8]
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d101      	bne.n	8000700 <AT24C04C_Init+0x2e>
    {
        return AT24C04C_BUSY;
 80006fc:	2302      	movs	r3, #2
 80006fe:	e010      	b.n	8000722 <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7a1b      	ldrb	r3, [r3, #8]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	2b06      	cmp	r3, #6
 8000708:	d101      	bne.n	800070e <AT24C04C_Init+0x3c>
    {
        return AT24C04C_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	e009      	b.n	8000722 <AT24C04C_Init+0x50>
    }

    if (hat24c04c->Init.I2C_HandlerInstance == NULL)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d101      	bne.n	800071a <AT24C04C_Init+0x48>
    {
        return AT24C04C_ERROR;
 8000716:	2301      	movs	r3, #1
 8000718:	e003      	b.n	8000722 <AT24C04C_Init+0x50>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2201      	movs	r2, #1
 800071e:	721a      	strb	r2, [r3, #8]

    // return status
    return AT24C04C_OK;
 8000720:	2300      	movs	r3, #0
}
 8000722:	4618      	mov	r0, r3
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <AT24C04C_ReadData>:

    return AT24C04C_OK;
}

AT24C04C_StatusTypeDef AT24C04C_ReadData(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *buffer, uint16_t len_bytes)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	461a      	mov	r2, r3
 8000738:	460b      	mov	r3, r1
 800073a:	817b      	strh	r3, [r7, #10]
 800073c:	4613      	mov	r3, r2
 800073e:	813b      	strh	r3, [r7, #8]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d101      	bne.n	800074a <AT24C04C_ReadData+0x1e>
    {
        return AT24C04C_ERROR;
 8000746:	2301      	movs	r3, #1
 8000748:	e02d      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }
    // check eepromt state
    if (hat24c04c->State == AT24C04C_STATE_RESET)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	7a1b      	ldrb	r3, [r3, #8]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	2b00      	cmp	r3, #0
 8000752:	d101      	bne.n	8000758 <AT24C04C_ReadData+0x2c>
    {
        // Peripheral is not initialized
        return AT24C04C_ERROR;
 8000754:	2301      	movs	r3, #1
 8000756:	e026      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	7a1b      	ldrb	r3, [r3, #8]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b02      	cmp	r3, #2
 8000760:	d101      	bne.n	8000766 <AT24C04C_ReadData+0x3a>
    {
        return AT24C04C_BUSY;
 8000762:	2302      	movs	r3, #2
 8000764:	e01f      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	7a1b      	ldrb	r3, [r3, #8]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b06      	cmp	r3, #6
 800076e:	d101      	bne.n	8000774 <AT24C04C_ReadData+0x48>
    {
        return AT24C04C_ERROR;
 8000770:	2301      	movs	r3, #1
 8000772:	e018      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }
    // set driver state
    hat24c04c->State = AT24C04C_STATE_BUSY;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2202      	movs	r2, #2
 8000778:	721a      	strb	r2, [r3, #8]

    uint16_t I2C_Status = __mem_read(hat24c04c, address, buffer, len_bytes);
 800077a:	893b      	ldrh	r3, [r7, #8]
 800077c:	8979      	ldrh	r1, [r7, #10]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	68f8      	ldr	r0, [r7, #12]
 8000782:	f000 f855 	bl	8000830 <__mem_read>
 8000786:	4603      	mov	r3, r0
 8000788:	82fb      	strh	r3, [r7, #22]

    if (I2C_Status == HAL_I2C_ERROR_TIMEOUT)
 800078a:	8afb      	ldrh	r3, [r7, #22]
 800078c:	2b20      	cmp	r3, #32
 800078e:	d101      	bne.n	8000794 <AT24C04C_ReadData+0x68>
    {
        return AT24C04C_TIMEOUT;
 8000790:	2303      	movs	r3, #3
 8000792:	e008      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }
    else if (I2C_Status != HAL_I2C_ERROR_NONE)
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <AT24C04C_ReadData+0x72>
    {
        return AT24C04C_ERROR;
 800079a:	2301      	movs	r3, #1
 800079c:	e003      	b.n	80007a6 <AT24C04C_ReadData+0x7a>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	2201      	movs	r2, #1
 80007a2:	721a      	strb	r2, [r3, #8]

    return AT24C04C_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}

080007ae <AT24C04C_WriteData>:

AT24C04C_StatusTypeDef AT24C04C_WriteData(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *data, uint16_t len_bytes)
{
 80007ae:	b580      	push	{r7, lr}
 80007b0:	b086      	sub	sp, #24
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	461a      	mov	r2, r3
 80007ba:	460b      	mov	r3, r1
 80007bc:	817b      	strh	r3, [r7, #10]
 80007be:	4613      	mov	r3, r2
 80007c0:	813b      	strh	r3, [r7, #8]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d101      	bne.n	80007cc <AT24C04C_WriteData+0x1e>
    {
        return AT24C04C_ERROR;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e02d      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }
    // check EEPROM state
    if (hat24c04c->State == AT24C04C_STATE_RESET)
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	7a1b      	ldrb	r3, [r3, #8]
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d101      	bne.n	80007da <AT24C04C_WriteData+0x2c>
    {
        // Peripheral is not initialized
        return AT24C04C_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e026      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d101      	bne.n	80007e8 <AT24C04C_WriteData+0x3a>
    {
        return AT24C04C_BUSY;
 80007e4:	2302      	movs	r3, #2
 80007e6:	e01f      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	7a1b      	ldrb	r3, [r3, #8]
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	2b06      	cmp	r3, #6
 80007f0:	d101      	bne.n	80007f6 <AT24C04C_WriteData+0x48>
    {
        return AT24C04C_ERROR;
 80007f2:	2301      	movs	r3, #1
 80007f4:	e018      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }

    // set driver state
    hat24c04c->State = AT24C04C_STATE_BUSY;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2202      	movs	r2, #2
 80007fa:	721a      	strb	r2, [r3, #8]

   uint16_t I2C_Status = __mem_write(hat24c04c, address, data, len_bytes);
 80007fc:	893b      	ldrh	r3, [r7, #8]
 80007fe:	8979      	ldrh	r1, [r7, #10]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68f8      	ldr	r0, [r7, #12]
 8000804:	f000 f863 	bl	80008ce <__mem_write>
 8000808:	4603      	mov	r3, r0
 800080a:	82fb      	strh	r3, [r7, #22]

    if (I2C_Status == HAL_I2C_ERROR_TIMEOUT)
 800080c:	8afb      	ldrh	r3, [r7, #22]
 800080e:	2b20      	cmp	r3, #32
 8000810:	d101      	bne.n	8000816 <AT24C04C_WriteData+0x68>
    {
        return AT24C04C_TIMEOUT;
 8000812:	2303      	movs	r3, #3
 8000814:	e008      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }
    else if (I2C_Status != HAL_I2C_ERROR_NONE)
 8000816:	8afb      	ldrh	r3, [r7, #22]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <AT24C04C_WriteData+0x72>
    {
        return AT24C04C_ERROR;
 800081c:	2301      	movs	r3, #1
 800081e:	e003      	b.n	8000828 <AT24C04C_WriteData+0x7a>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	2201      	movs	r2, #1
 8000824:	721a      	strb	r2, [r3, #8]

    return AT24C04C_OK;
 8000826:	2300      	movs	r3, #0
}
 8000828:	4618      	mov	r0, r3
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <__mem_read>:

uint16_t __mem_read(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *buffer, uint16_t len_bytes)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af04      	add	r7, sp, #16
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	461a      	mov	r2, r3
 800083c:	460b      	mov	r3, r1
 800083e:	817b      	strh	r3, [r7, #10]
 8000840:	4613      	mov	r3, r2
 8000842:	813b      	strh	r3, [r7, #8]

    uint8_t i2c_address = hat24c04c->Init.device_identifier | (hat24c04c->Init.a2_pin << 3) | (hat24c04c->Init.a1_pin << 2) | ((address & 0x1FF) >> 8) << 1 | 1; // limit eeprom address to 9 bits, get eeprom addr MSB, read command
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	791b      	ldrb	r3, [r3, #4]
 8000848:	b25a      	sxtb	r2, r3
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	795b      	ldrb	r3, [r3, #5]
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	b25b      	sxtb	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b25a      	sxtb	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	799b      	ldrb	r3, [r3, #6]
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	b25b      	sxtb	r3, r3
 800085e:	4313      	orrs	r3, r2
 8000860:	b25a      	sxtb	r2, r3
 8000862:	897b      	ldrh	r3, [r7, #10]
 8000864:	121b      	asrs	r3, r3, #8
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	b25b      	sxtb	r3, r3
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	b25b      	sxtb	r3, r3
 8000870:	4313      	orrs	r3, r2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	b25b      	sxtb	r3, r3
 800087a:	75fb      	strb	r3, [r7, #23]

    while (HAL_I2C_Mem_Read(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, buffer, len_bytes, 10000) != HAL_OK)
 800087c:	e00b      	b.n	8000896 <__mem_read+0x66>
    {

        uint16_t I2C_Error = HAL_I2C_GetError(hat24c04c->Init.I2C_HandlerInstance);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fc3c 	bl	8002100 <HAL_I2C_GetError>
 8000888:	4603      	mov	r3, r0
 800088a:	82bb      	strh	r3, [r7, #20]

        if (I2C_Error != HAL_I2C_ERROR_AF)
 800088c:	8abb      	ldrh	r3, [r7, #20]
 800088e:	2b04      	cmp	r3, #4
 8000890:	d001      	beq.n	8000896 <__mem_read+0x66>
        {
            return I2C_Error;
 8000892:	8abb      	ldrh	r3, [r7, #20]
 8000894:	e017      	b.n	80008c6 <__mem_read+0x96>
    while (HAL_I2C_Mem_Read(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, buffer, len_bytes, 10000) != HAL_OK)
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	7dfb      	ldrb	r3, [r7, #23]
 800089c:	b29b      	uxth	r3, r3
 800089e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80008a2:	b299      	uxth	r1, r3
 80008a4:	897b      	ldrh	r3, [r7, #10]
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	b29a      	uxth	r2, r3
 80008aa:	f242 7310 	movw	r3, #10000	@ 0x2710
 80008ae:	9302      	str	r3, [sp, #8]
 80008b0:	893b      	ldrh	r3, [r7, #8]
 80008b2:	9301      	str	r3, [sp, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	2301      	movs	r3, #1
 80008ba:	f001 f9b9 	bl	8001c30 <HAL_I2C_Mem_Read>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d1dc      	bne.n	800087e <__mem_read+0x4e>
        }
    }

    return HAL_I2C_ERROR_NONE;
 80008c4:	2300      	movs	r3, #0

}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <__mem_write>:

uint16_t __mem_write(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *data, uint16_t len_bytes)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b08a      	sub	sp, #40	@ 0x28
 80008d2:	af04      	add	r7, sp, #16
 80008d4:	60f8      	str	r0, [r7, #12]
 80008d6:	607a      	str	r2, [r7, #4]
 80008d8:	461a      	mov	r2, r3
 80008da:	460b      	mov	r3, r1
 80008dc:	817b      	strh	r3, [r7, #10]
 80008de:	4613      	mov	r3, r2
 80008e0:	813b      	strh	r3, [r7, #8]

    uint8_t i2c_address = hat24c04c->Init.device_identifier | (hat24c04c->Init.a2_pin << 3) | (hat24c04c->Init.a1_pin << 2) | ((address & 0x1FF) >> 8) << 1 | 0; // limit eeprom address to 9 bits, get eeprom addr MSB, write command
 80008e2:	68fb      	ldr	r3, [r7, #12]
 80008e4:	791b      	ldrb	r3, [r3, #4]
 80008e6:	b25a      	sxtb	r2, r3
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	795b      	ldrb	r3, [r3, #5]
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	799b      	ldrb	r3, [r3, #6]
 80008f8:	009b      	lsls	r3, r3, #2
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b25a      	sxtb	r2, r3
 8000900:	897b      	ldrh	r3, [r7, #10]
 8000902:	121b      	asrs	r3, r3, #8
 8000904:	005b      	lsls	r3, r3, #1
 8000906:	b25b      	sxtb	r3, r3
 8000908:	f003 0302 	and.w	r3, r3, #2
 800090c:	b25b      	sxtb	r3, r3
 800090e:	4313      	orrs	r3, r2
 8000910:	b25b      	sxtb	r3, r3
 8000912:	75fb      	strb	r3, [r7, #23]

    while (HAL_I2C_Mem_Write(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, data, len_bytes, 10000) != HAL_OK)
 8000914:	e00b      	b.n	800092e <__mem_write+0x60>
    {
        uint16_t I2C_Error = HAL_I2C_GetError(hat24c04c->Init.I2C_HandlerInstance);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f001 fbf0 	bl	8002100 <HAL_I2C_GetError>
 8000920:	4603      	mov	r3, r0
 8000922:	82bb      	strh	r3, [r7, #20]

        if (I2C_Error != HAL_I2C_ERROR_AF)
 8000924:	8abb      	ldrh	r3, [r7, #20]
 8000926:	2b04      	cmp	r3, #4
 8000928:	d001      	beq.n	800092e <__mem_write+0x60>
        {
            return I2C_Error;
 800092a:	8abb      	ldrh	r3, [r7, #20]
 800092c:	e017      	b.n	800095e <__mem_write+0x90>
    while (HAL_I2C_Mem_Write(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, data, len_bytes, 10000) != HAL_OK)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	7dfb      	ldrb	r3, [r7, #23]
 8000934:	b29b      	uxth	r3, r3
 8000936:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800093a:	b299      	uxth	r1, r3
 800093c:	897b      	ldrh	r3, [r7, #10]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	b29a      	uxth	r2, r3
 8000942:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000946:	9302      	str	r3, [sp, #8]
 8000948:	893b      	ldrh	r3, [r7, #8]
 800094a:	9301      	str	r3, [sp, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	9300      	str	r3, [sp, #0]
 8000950:	2301      	movs	r3, #1
 8000952:	f001 f873 	bl	8001a3c <HAL_I2C_Mem_Write>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1dc      	bne.n	8000916 <__mem_write+0x48>
        }
    }

    return HAL_I2C_ERROR_NONE;
 800095c:	2300      	movs	r3, #0

}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800096c:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <HAL_Init+0x28>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a07      	ldr	r2, [pc, #28]	@ (8000990 <HAL_Init+0x28>)
 8000972:	f043 0310 	orr.w	r3, r3, #16
 8000976:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000978:	2003      	movs	r0, #3
 800097a:	f000 fd3d 	bl	80013f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800097e:	200f      	movs	r0, #15
 8000980:	f000 f808 	bl	8000994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000984:	f7ff fe12 	bl	80005ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800099c:	4b12      	ldr	r3, [pc, #72]	@ (80009e8 <HAL_InitTick+0x54>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	4b12      	ldr	r3, [pc, #72]	@ (80009ec <HAL_InitTick+0x58>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	4619      	mov	r1, r3
 80009a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f000 fd55 	bl	8001462 <HAL_SYSTICK_Config>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
 80009c0:	e00e      	b.n	80009e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	2b0f      	cmp	r3, #15
 80009c6:	d80a      	bhi.n	80009de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c8:	2200      	movs	r2, #0
 80009ca:	6879      	ldr	r1, [r7, #4]
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f000 fd1d 	bl	800140e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009d4:	4a06      	ldr	r2, [pc, #24]	@ (80009f0 <HAL_InitTick+0x5c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3708      	adds	r7, #8
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000004 	.word	0x20000004

080009f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <HAL_IncTick+0x1c>)
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4413      	add	r3, r2
 8000a04:	4a03      	ldr	r2, [pc, #12]	@ (8000a14 <HAL_IncTick+0x20>)
 8000a06:	6013      	str	r3, [r2, #0]
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000110 	.word	0x20000110

08000a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <HAL_GetTick+0x10>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr
 8000a28:	20000110 	.word	0x20000110

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff fff0 	bl	8000a18 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffe0 	bl	8000a18 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008

08000a74 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d101      	bne.n	8000a86 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	e0ed      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d102      	bne.n	8000a98 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff fbae 	bl	80001f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f042 0201 	orr.w	r2, r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000aa8:	f7ff ffb6 	bl	8000a18 <HAL_GetTick>
 8000aac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000aae:	e012      	b.n	8000ad6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ab0:	f7ff ffb2 	bl	8000a18 <HAL_GetTick>
 8000ab4:	4602      	mov	r2, r0
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	2b0a      	cmp	r3, #10
 8000abc:	d90b      	bls.n	8000ad6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ac2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2205      	movs	r2, #5
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0c5      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0e5      	beq.n	8000ab0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 0202 	bic.w	r2, r2, #2
 8000af2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000af4:	f7ff ff90 	bl	8000a18 <HAL_GetTick>
 8000af8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000afa:	e012      	b.n	8000b22 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000afc:	f7ff ff8c 	bl	8000a18 <HAL_GetTick>
 8000b00:	4602      	mov	r2, r0
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	1ad3      	subs	r3, r2, r3
 8000b06:	2b0a      	cmp	r3, #10
 8000b08:	d90b      	bls.n	8000b22 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b0e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2205      	movs	r2, #5
 8000b1a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e09f      	b.n	8000c62 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d1e5      	bne.n	8000afc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7e1b      	ldrb	r3, [r3, #24]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d108      	bne.n	8000b4a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000b58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	7e5b      	ldrb	r3, [r3, #25]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d108      	bne.n	8000b74 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	e007      	b.n	8000b84 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000b82:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	7e9b      	ldrb	r3, [r3, #26]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d108      	bne.n	8000b9e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f042 0220 	orr.w	r2, r2, #32
 8000b9a:	601a      	str	r2, [r3, #0]
 8000b9c:	e007      	b.n	8000bae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0220 	bic.w	r2, r2, #32
 8000bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	7edb      	ldrb	r3, [r3, #27]
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d108      	bne.n	8000bc8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 0210 	bic.w	r2, r2, #16
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	e007      	b.n	8000bd8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f042 0210 	orr.w	r2, r2, #16
 8000bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	7f1b      	ldrb	r3, [r3, #28]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d108      	bne.n	8000bf2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0208 	orr.w	r2, r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	e007      	b.n	8000c02 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0208 	bic.w	r2, r2, #8
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	7f5b      	ldrb	r3, [r3, #29]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d108      	bne.n	8000c1c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f042 0204 	orr.w	r2, r2, #4
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	e007      	b.n	8000c2c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f022 0204 	bic.w	r2, r2, #4
 8000c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689a      	ldr	r2, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	431a      	orrs	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	431a      	orrs	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	695b      	ldr	r3, [r3, #20]
 8000c40:	ea42 0103 	orr.w	r1, r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	1e5a      	subs	r2, r3, #1
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	430a      	orrs	r2, r1
 8000c50:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2200      	movs	r2, #0
 8000c56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	b089      	sub	sp, #36	@ 0x24
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	60f8      	str	r0, [r7, #12]
 8000c72:	60b9      	str	r1, [r7, #8]
 8000c74:	607a      	str	r2, [r7, #4]
 8000c76:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c88:	7ffb      	ldrb	r3, [r7, #31]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d003      	beq.n	8000c96 <HAL_CAN_AddTxMessage+0x2c>
 8000c8e:	7ffb      	ldrb	r3, [r7, #31]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	f040 80ad 	bne.w	8000df0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d10a      	bne.n	8000cb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000ca0:	69bb      	ldr	r3, [r7, #24]
 8000ca2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d105      	bne.n	8000cb6 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	f000 8095 	beq.w	8000de0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	0e1b      	lsrs	r3, r3, #24
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d10d      	bne.n	8000cee <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000cdc:	68f9      	ldr	r1, [r7, #12]
 8000cde:	6809      	ldr	r1, [r1, #0]
 8000ce0:	431a      	orrs	r2, r3
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3318      	adds	r3, #24
 8000ce6:	011b      	lsls	r3, r3, #4
 8000ce8:	440b      	add	r3, r1
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	e00f      	b.n	8000d0e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cf8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000cfa:	68bb      	ldr	r3, [r7, #8]
 8000cfc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000cfe:	68f9      	ldr	r1, [r7, #12]
 8000d00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000d02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	3318      	adds	r3, #24
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	440b      	add	r3, r1
 8000d0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	691a      	ldr	r2, [r3, #16]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	3318      	adds	r3, #24
 8000d1a:	011b      	lsls	r3, r3, #4
 8000d1c:	440b      	add	r3, r1
 8000d1e:	3304      	adds	r3, #4
 8000d20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	7d1b      	ldrb	r3, [r3, #20]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d111      	bne.n	8000d4e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	3318      	adds	r3, #24
 8000d32:	011b      	lsls	r3, r3, #4
 8000d34:	4413      	add	r3, r2
 8000d36:	3304      	adds	r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	6811      	ldr	r1, [r2, #0]
 8000d3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3318      	adds	r3, #24
 8000d46:	011b      	lsls	r3, r3, #4
 8000d48:	440b      	add	r3, r1
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3307      	adds	r3, #7
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	061a      	lsls	r2, r3, #24
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3306      	adds	r3, #6
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	041b      	lsls	r3, r3, #16
 8000d5e:	431a      	orrs	r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3305      	adds	r3, #5
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	021b      	lsls	r3, r3, #8
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	687a      	ldr	r2, [r7, #4]
 8000d6c:	3204      	adds	r2, #4
 8000d6e:	7812      	ldrb	r2, [r2, #0]
 8000d70:	4610      	mov	r0, r2
 8000d72:	68fa      	ldr	r2, [r7, #12]
 8000d74:	6811      	ldr	r1, [r2, #0]
 8000d76:	ea43 0200 	orr.w	r2, r3, r0
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	011b      	lsls	r3, r3, #4
 8000d7e:	440b      	add	r3, r1
 8000d80:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000d84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3303      	adds	r3, #3
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	061a      	lsls	r2, r3, #24
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3302      	adds	r3, #2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	041b      	lsls	r3, r3, #16
 8000d96:	431a      	orrs	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	4313      	orrs	r3, r2
 8000da2:	687a      	ldr	r2, [r7, #4]
 8000da4:	7812      	ldrb	r2, [r2, #0]
 8000da6:	4610      	mov	r0, r2
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	6811      	ldr	r1, [r2, #0]
 8000dac:	ea43 0200 	orr.w	r2, r3, r0
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	011b      	lsls	r3, r3, #4
 8000db4:	440b      	add	r3, r1
 8000db6:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000dba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	3318      	adds	r3, #24
 8000dc4:	011b      	lsls	r3, r3, #4
 8000dc6:	4413      	add	r3, r2
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	6811      	ldr	r1, [r2, #0]
 8000dce:	f043 0201 	orr.w	r2, r3, #1
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3318      	adds	r3, #24
 8000dd6:	011b      	lsls	r3, r3, #4
 8000dd8:	440b      	add	r3, r1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e00e      	b.n	8000dfe <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e006      	b.n	8000dfe <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
  }
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3724      	adds	r7, #36	@ 0x24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr

08000e08 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	@ 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000e10:	2300      	movs	r3, #0
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	691b      	ldr	r3, [r3, #16]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d07c      	beq.n	8000f48 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000e4e:	69bb      	ldr	r3, [r7, #24]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d023      	beq.n	8000ea0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 f983 	bl	8001176 <HAL_CAN_TxMailbox0CompleteCallback>
 8000e70:	e016      	b.n	8000ea0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d004      	beq.n	8000e86 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e84:	e00c      	b.n	8000ea0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d004      	beq.n	8000e9a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e98:	e002      	b.n	8000ea0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f000 f986 	bl	80011ac <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d024      	beq.n	8000ef4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f000 f962 	bl	8001188 <HAL_CAN_TxMailbox1CompleteCallback>
 8000ec4:	e016      	b.n	8000ef4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000ec6:	69bb      	ldr	r3, [r7, #24]
 8000ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ed8:	e00c      	b.n	8000ef4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eec:	e002      	b.n	8000ef4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f000 f965 	bl	80011be <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d024      	beq.n	8000f48 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f06:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000f08:	69bb      	ldr	r3, [r7, #24]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f000 f941 	bl	800119a <HAL_CAN_TxMailbox2CompleteCallback>
 8000f18:	e016      	b.n	8000f48 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d004      	beq.n	8000f2e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f2c:	e00c      	b.n	8000f48 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d004      	beq.n	8000f42 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f40:	e002      	b.n	8000f48 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f000 f944 	bl	80011d0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00c      	beq.n	8000f6c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	f003 0310 	and.w	r3, r3, #16
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d007      	beq.n	8000f6c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	2210      	movs	r2, #16
 8000f6a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000f6c:	6a3b      	ldr	r3, [r7, #32]
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d006      	beq.n	8000f8e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2208      	movs	r2, #8
 8000f86:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f933 	bl	80011f4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d009      	beq.n	8000fac <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d002      	beq.n	8000fac <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f000 f91b 	bl	80011e2 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00c      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	f003 0310 	and.w	r3, r3, #16
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d007      	beq.n	8000fd0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fc6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2210      	movs	r2, #16
 8000fce:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000fd0:	6a3b      	ldr	r3, [r7, #32]
 8000fd2:	f003 0320 	and.w	r3, r3, #32
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00b      	beq.n	8000ff2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d006      	beq.n	8000ff2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2208      	movs	r2, #8
 8000fea:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f000 f913 	bl	8001218 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	f003 0310 	and.w	r3, r3, #16
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d009      	beq.n	8001010 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 f8fb 	bl	8001206 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d00b      	beq.n	8001032 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	f003 0310 	and.w	r3, r3, #16
 8001020:	2b00      	cmp	r3, #0
 8001022:	d006      	beq.n	8001032 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2210      	movs	r2, #16
 800102a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f000 f8fc 	bl	800122a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001032:	6a3b      	ldr	r3, [r7, #32]
 8001034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00b      	beq.n	8001054 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0308 	and.w	r3, r3, #8
 8001042:	2b00      	cmp	r3, #0
 8001044:	d006      	beq.n	8001054 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2208      	movs	r2, #8
 800104c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f000 f8f4 	bl	800123c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001054:	6a3b      	ldr	r3, [r7, #32]
 8001056:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800105a:	2b00      	cmp	r3, #0
 800105c:	d07b      	beq.n	8001156 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	d072      	beq.n	800114e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106e:	2b00      	cmp	r3, #0
 8001070:	d008      	beq.n	8001084 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001084:	6a3b      	ldr	r3, [r7, #32]
 8001086:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800108a:	2b00      	cmp	r3, #0
 800108c:	d008      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109a:	f043 0302 	orr.w	r3, r3, #2
 800109e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010a0:	6a3b      	ldr	r3, [r7, #32]
 80010a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d003      	beq.n	80010bc <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010b6:	f043 0304 	orr.w	r3, r3, #4
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d043      	beq.n	800114e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d03e      	beq.n	800114e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80010d6:	2b60      	cmp	r3, #96	@ 0x60
 80010d8:	d02b      	beq.n	8001132 <HAL_CAN_IRQHandler+0x32a>
 80010da:	2b60      	cmp	r3, #96	@ 0x60
 80010dc:	d82e      	bhi.n	800113c <HAL_CAN_IRQHandler+0x334>
 80010de:	2b50      	cmp	r3, #80	@ 0x50
 80010e0:	d022      	beq.n	8001128 <HAL_CAN_IRQHandler+0x320>
 80010e2:	2b50      	cmp	r3, #80	@ 0x50
 80010e4:	d82a      	bhi.n	800113c <HAL_CAN_IRQHandler+0x334>
 80010e6:	2b40      	cmp	r3, #64	@ 0x40
 80010e8:	d019      	beq.n	800111e <HAL_CAN_IRQHandler+0x316>
 80010ea:	2b40      	cmp	r3, #64	@ 0x40
 80010ec:	d826      	bhi.n	800113c <HAL_CAN_IRQHandler+0x334>
 80010ee:	2b30      	cmp	r3, #48	@ 0x30
 80010f0:	d010      	beq.n	8001114 <HAL_CAN_IRQHandler+0x30c>
 80010f2:	2b30      	cmp	r3, #48	@ 0x30
 80010f4:	d822      	bhi.n	800113c <HAL_CAN_IRQHandler+0x334>
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d002      	beq.n	8001100 <HAL_CAN_IRQHandler+0x2f8>
 80010fa:	2b20      	cmp	r3, #32
 80010fc:	d005      	beq.n	800110a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80010fe:	e01d      	b.n	800113c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001102:	f043 0308 	orr.w	r3, r3, #8
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001108:	e019      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	f043 0310 	orr.w	r3, r3, #16
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001112:	e014      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800111c:	e00f      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800111e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001124:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001126:	e00a      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800112e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001130:	e005      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800113a:	e000      	b.n	800113e <HAL_CAN_IRQHandler+0x336>
            break;
 800113c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	699a      	ldr	r2, [r3, #24]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800114c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2204      	movs	r2, #4
 8001154:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001162:	431a      	orrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f000 f870 	bl	800124e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	@ 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800117e:	bf00      	nop
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr

08001188 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800119a:	b480      	push	{r7}
 800119c:	b083      	sub	sp, #12
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	bc80      	pop	{r7}
 80011e0:	4770      	bx	lr

080011e2 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011e2:	b480      	push	{r7}
 80011e4:	b083      	sub	sp, #12
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	bc80      	pop	{r7}
 8001216:	4770      	bx	lr

08001218 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800124e:	b480      	push	{r7}
 8001250:	b083      	sub	sp, #12
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b480      	push	{r7}
 8001262:	b085      	sub	sp, #20
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f003 0307 	and.w	r3, r3, #7
 800126e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001270:	4b0c      	ldr	r3, [pc, #48]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800127c:	4013      	ands	r3, r2
 800127e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001288:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800128c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001290:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001292:	4a04      	ldr	r2, [pc, #16]	@ (80012a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	60d3      	str	r3, [r2, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ac:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	0a1b      	lsrs	r3, r3, #8
 80012b2:	f003 0307 	and.w	r3, r3, #7
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	db0b      	blt.n	80012ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d6:	79fb      	ldrb	r3, [r7, #7]
 80012d8:	f003 021f 	and.w	r2, r3, #31
 80012dc:	4906      	ldr	r1, [pc, #24]	@ (80012f8 <__NVIC_EnableIRQ+0x34>)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	095b      	lsrs	r3, r3, #5
 80012e4:	2001      	movs	r0, #1
 80012e6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	@ (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	@ (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	@ 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	@ 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bc80      	pop	{r7}
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3b01      	subs	r3, #1
 80013c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013c4:	d301      	bcc.n	80013ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013c6:	2301      	movs	r3, #1
 80013c8:	e00f      	b.n	80013ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ca:	4a0a      	ldr	r2, [pc, #40]	@ (80013f4 <SysTick_Config+0x40>)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	3b01      	subs	r3, #1
 80013d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d2:	210f      	movs	r1, #15
 80013d4:	f04f 30ff 	mov.w	r0, #4294967295
 80013d8:	f7ff ff90 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013dc:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <SysTick_Config+0x40>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e2:	4b04      	ldr	r3, [pc, #16]	@ (80013f4 <SysTick_Config+0x40>)
 80013e4:	2207      	movs	r2, #7
 80013e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	e000e010 	.word	0xe000e010

080013f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff2d 	bl	8001260 <__NVIC_SetPriorityGrouping>
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800140e:	b580      	push	{r7, lr}
 8001410:	b086      	sub	sp, #24
 8001412:	af00      	add	r7, sp, #0
 8001414:	4603      	mov	r3, r0
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
 800141a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001420:	f7ff ff42 	bl	80012a8 <__NVIC_GetPriorityGrouping>
 8001424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	6978      	ldr	r0, [r7, #20]
 800142c:	f7ff ff90 	bl	8001350 <NVIC_EncodePriority>
 8001430:	4602      	mov	r2, r0
 8001432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff5f 	bl	80012fc <__NVIC_SetPriority>
}
 800143e:	bf00      	nop
 8001440:	3718      	adds	r7, #24
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff ff35 	bl	80012c4 <__NVIC_EnableIRQ>
}
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ffa2 	bl	80013b4 <SysTick_Config>
 8001470:	4603      	mov	r3, r0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800147c:	b480      	push	{r7}
 800147e:	b08b      	sub	sp, #44	@ 0x2c
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800148e:	e169      	b.n	8001764 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001490:	2201      	movs	r2, #1
 8001492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69fa      	ldr	r2, [r7, #28]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014a4:	69ba      	ldr	r2, [r7, #24]
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	f040 8158 	bne.w	800175e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a9a      	ldr	r2, [pc, #616]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d05e      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014b8:	4a98      	ldr	r2, [pc, #608]	@ (800171c <HAL_GPIO_Init+0x2a0>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d875      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014be:	4a98      	ldr	r2, [pc, #608]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d058      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014c4:	4a96      	ldr	r2, [pc, #600]	@ (8001720 <HAL_GPIO_Init+0x2a4>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d86f      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ca:	4a96      	ldr	r2, [pc, #600]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d052      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014d0:	4a94      	ldr	r2, [pc, #592]	@ (8001724 <HAL_GPIO_Init+0x2a8>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d869      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014d6:	4a94      	ldr	r2, [pc, #592]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d04c      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014dc:	4a92      	ldr	r2, [pc, #584]	@ (8001728 <HAL_GPIO_Init+0x2ac>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d863      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014e2:	4a92      	ldr	r2, [pc, #584]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d046      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
 80014e8:	4a90      	ldr	r2, [pc, #576]	@ (800172c <HAL_GPIO_Init+0x2b0>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d85d      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014ee:	2b12      	cmp	r3, #18
 80014f0:	d82a      	bhi.n	8001548 <HAL_GPIO_Init+0xcc>
 80014f2:	2b12      	cmp	r3, #18
 80014f4:	d859      	bhi.n	80015aa <HAL_GPIO_Init+0x12e>
 80014f6:	a201      	add	r2, pc, #4	@ (adr r2, 80014fc <HAL_GPIO_Init+0x80>)
 80014f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014fc:	08001577 	.word	0x08001577
 8001500:	08001551 	.word	0x08001551
 8001504:	08001563 	.word	0x08001563
 8001508:	080015a5 	.word	0x080015a5
 800150c:	080015ab 	.word	0x080015ab
 8001510:	080015ab 	.word	0x080015ab
 8001514:	080015ab 	.word	0x080015ab
 8001518:	080015ab 	.word	0x080015ab
 800151c:	080015ab 	.word	0x080015ab
 8001520:	080015ab 	.word	0x080015ab
 8001524:	080015ab 	.word	0x080015ab
 8001528:	080015ab 	.word	0x080015ab
 800152c:	080015ab 	.word	0x080015ab
 8001530:	080015ab 	.word	0x080015ab
 8001534:	080015ab 	.word	0x080015ab
 8001538:	080015ab 	.word	0x080015ab
 800153c:	080015ab 	.word	0x080015ab
 8001540:	08001559 	.word	0x08001559
 8001544:	0800156d 	.word	0x0800156d
 8001548:	4a79      	ldr	r2, [pc, #484]	@ (8001730 <HAL_GPIO_Init+0x2b4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800154e:	e02c      	b.n	80015aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e029      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	3304      	adds	r3, #4
 800155e:	623b      	str	r3, [r7, #32]
          break;
 8001560:	e024      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	3308      	adds	r3, #8
 8001568:	623b      	str	r3, [r7, #32]
          break;
 800156a:	e01f      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	330c      	adds	r3, #12
 8001572:	623b      	str	r3, [r7, #32]
          break;
 8001574:	e01a      	b.n	80015ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d102      	bne.n	8001584 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800157e:	2304      	movs	r3, #4
 8001580:	623b      	str	r3, [r7, #32]
          break;
 8001582:	e013      	b.n	80015ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800158c:	2308      	movs	r3, #8
 800158e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	69fa      	ldr	r2, [r7, #28]
 8001594:	611a      	str	r2, [r3, #16]
          break;
 8001596:	e009      	b.n	80015ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001598:	2308      	movs	r3, #8
 800159a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	69fa      	ldr	r2, [r7, #28]
 80015a0:	615a      	str	r2, [r3, #20]
          break;
 80015a2:	e003      	b.n	80015ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
          break;
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x130>
          break;
 80015aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2bff      	cmp	r3, #255	@ 0xff
 80015b0:	d801      	bhi.n	80015b6 <HAL_GPIO_Init+0x13a>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	e001      	b.n	80015ba <HAL_GPIO_Init+0x13e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3304      	adds	r3, #4
 80015ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	2bff      	cmp	r3, #255	@ 0xff
 80015c0:	d802      	bhi.n	80015c8 <HAL_GPIO_Init+0x14c>
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x152>
 80015c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ca:	3b08      	subs	r3, #8
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	210f      	movs	r1, #15
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	fa01 f303 	lsl.w	r3, r1, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	401a      	ands	r2, r3
 80015e0:	6a39      	ldr	r1, [r7, #32]
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 80b1 	beq.w	800175e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015fc:	4b4d      	ldr	r3, [pc, #308]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a4c      	ldr	r2, [pc, #304]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 8001602:	f043 0301 	orr.w	r3, r3, #1
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b4a      	ldr	r3, [pc, #296]	@ (8001734 <HAL_GPIO_Init+0x2b8>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001614:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	3302      	adds	r3, #2
 800161c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001620:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001624:	f003 0303 	and.w	r3, r3, #3
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	68fa      	ldr	r2, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a40      	ldr	r2, [pc, #256]	@ (800173c <HAL_GPIO_Init+0x2c0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_GPIO_Init+0x1ec>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a3f      	ldr	r2, [pc, #252]	@ (8001740 <HAL_GPIO_Init+0x2c4>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d00d      	beq.n	8001664 <HAL_GPIO_Init+0x1e8>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3e      	ldr	r2, [pc, #248]	@ (8001744 <HAL_GPIO_Init+0x2c8>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d007      	beq.n	8001660 <HAL_GPIO_Init+0x1e4>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	4a3d      	ldr	r2, [pc, #244]	@ (8001748 <HAL_GPIO_Init+0x2cc>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d101      	bne.n	800165c <HAL_GPIO_Init+0x1e0>
 8001658:	2303      	movs	r3, #3
 800165a:	e006      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 800165c:	2304      	movs	r3, #4
 800165e:	e004      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001660:	2302      	movs	r3, #2
 8001662:	e002      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001664:	2301      	movs	r3, #1
 8001666:	e000      	b.n	800166a <HAL_GPIO_Init+0x1ee>
 8001668:	2300      	movs	r3, #0
 800166a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800166c:	f002 0203 	and.w	r2, r2, #3
 8001670:	0092      	lsls	r2, r2, #2
 8001672:	4093      	lsls	r3, r2
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800167a:	492f      	ldr	r1, [pc, #188]	@ (8001738 <HAL_GPIO_Init+0x2bc>)
 800167c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167e:	089b      	lsrs	r3, r3, #2
 8001680:	3302      	adds	r3, #2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d006      	beq.n	80016a2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001694:	4b2d      	ldr	r3, [pc, #180]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	492c      	ldr	r1, [pc, #176]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	4313      	orrs	r3, r2
 800169e:	608b      	str	r3, [r1, #8]
 80016a0:	e006      	b.n	80016b0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016a2:	4b2a      	ldr	r3, [pc, #168]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	4928      	ldr	r1, [pc, #160]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	4922      	ldr	r1, [pc, #136]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60cb      	str	r3, [r1, #12]
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016cc:	68da      	ldr	r2, [r3, #12]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	491e      	ldr	r1, [pc, #120]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016d4:	4013      	ands	r3, r2
 80016d6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d006      	beq.n	80016f2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80016e4:	4b19      	ldr	r3, [pc, #100]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	4918      	ldr	r1, [pc, #96]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	e006      	b.n	8001700 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	43db      	mvns	r3, r3
 80016fa:	4914      	ldr	r1, [pc, #80]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 80016fc:	4013      	ands	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001708:	2b00      	cmp	r3, #0
 800170a:	d021      	beq.n	8001750 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	490e      	ldr	r1, [pc, #56]	@ (800174c <HAL_GPIO_Init+0x2d0>)
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
 8001718:	e021      	b.n	800175e <HAL_GPIO_Init+0x2e2>
 800171a:	bf00      	nop
 800171c:	10320000 	.word	0x10320000
 8001720:	10310000 	.word	0x10310000
 8001724:	10220000 	.word	0x10220000
 8001728:	10210000 	.word	0x10210000
 800172c:	10120000 	.word	0x10120000
 8001730:	10110000 	.word	0x10110000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0b      	ldr	r3, [pc, #44]	@ (8001780 <HAL_GPIO_Init+0x304>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	43db      	mvns	r3, r3
 8001758:	4909      	ldr	r1, [pc, #36]	@ (8001780 <HAL_GPIO_Init+0x304>)
 800175a:	4013      	ands	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001760:	3301      	adds	r3, #1
 8001762:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	fa22 f303 	lsr.w	r3, r2, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	f47f ae8e 	bne.w	8001490 <HAL_GPIO_Init+0x14>
  }
}
 8001774:	bf00      	nop
 8001776:	bf00      	nop
 8001778:	372c      	adds	r7, #44	@ 0x2c
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr
 8001780:	40010400 	.word	0x40010400

08001784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	460b      	mov	r3, r1
 800178e:	807b      	strh	r3, [r7, #2]
 8001790:	4613      	mov	r3, r2
 8001792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001794:	787b      	ldrb	r3, [r7, #1]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017a0:	e003      	b.n	80017aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017a2:	887b      	ldrh	r3, [r7, #2]
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e12b      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d106      	bne.n	80017e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2200      	movs	r2, #0
 80017d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7fe fdd6 	bl	800038c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2224      	movs	r2, #36	@ 0x24
 80017e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 0201 	bic.w	r2, r2, #1
 80017f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001806:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001816:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001818:	f001 fbfe 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 800181c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	4a81      	ldr	r2, [pc, #516]	@ (8001a28 <HAL_I2C_Init+0x274>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d807      	bhi.n	8001838 <HAL_I2C_Init+0x84>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4a80      	ldr	r2, [pc, #512]	@ (8001a2c <HAL_I2C_Init+0x278>)
 800182c:	4293      	cmp	r3, r2
 800182e:	bf94      	ite	ls
 8001830:	2301      	movls	r3, #1
 8001832:	2300      	movhi	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	e006      	b.n	8001846 <HAL_I2C_Init+0x92>
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a7d      	ldr	r2, [pc, #500]	@ (8001a30 <HAL_I2C_Init+0x27c>)
 800183c:	4293      	cmp	r3, r2
 800183e:	bf94      	ite	ls
 8001840:	2301      	movls	r3, #1
 8001842:	2300      	movhi	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0e7      	b.n	8001a1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	4a78      	ldr	r2, [pc, #480]	@ (8001a34 <HAL_I2C_Init+0x280>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	430a      	orrs	r2, r1
 800186c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6a1b      	ldr	r3, [r3, #32]
 8001874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	4a6a      	ldr	r2, [pc, #424]	@ (8001a28 <HAL_I2C_Init+0x274>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d802      	bhi.n	8001888 <HAL_I2C_Init+0xd4>
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	3301      	adds	r3, #1
 8001886:	e009      	b.n	800189c <HAL_I2C_Init+0xe8>
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800188e:	fb02 f303 	mul.w	r3, r2, r3
 8001892:	4a69      	ldr	r2, [pc, #420]	@ (8001a38 <HAL_I2C_Init+0x284>)
 8001894:	fba2 2303 	umull	r2, r3, r2, r3
 8001898:	099b      	lsrs	r3, r3, #6
 800189a:	3301      	adds	r3, #1
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	495c      	ldr	r1, [pc, #368]	@ (8001a28 <HAL_I2C_Init+0x274>)
 80018b8:	428b      	cmp	r3, r1
 80018ba:	d819      	bhi.n	80018f0 <HAL_I2C_Init+0x13c>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1e59      	subs	r1, r3, #1
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018d0:	400b      	ands	r3, r1
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d00a      	beq.n	80018ec <HAL_I2C_Init+0x138>
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1e59      	subs	r1, r3, #1
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80018e4:	3301      	adds	r3, #1
 80018e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ea:	e051      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018ec:	2304      	movs	r3, #4
 80018ee:	e04f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_I2C_Init+0x168>
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1e58      	subs	r0, r3, #1
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6859      	ldr	r1, [r3, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	440b      	add	r3, r1
 8001906:	fbb0 f3f3 	udiv	r3, r0, r3
 800190a:	3301      	adds	r3, #1
 800190c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e012      	b.n	8001942 <HAL_I2C_Init+0x18e>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	1e58      	subs	r0, r3, #1
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6859      	ldr	r1, [r3, #4]
 8001924:	460b      	mov	r3, r1
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	0099      	lsls	r1, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001932:	3301      	adds	r3, #1
 8001934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001938:	2b00      	cmp	r3, #0
 800193a:	bf0c      	ite	eq
 800193c:	2301      	moveq	r3, #1
 800193e:	2300      	movne	r3, #0
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Init+0x196>
 8001946:	2301      	movs	r3, #1
 8001948:	e022      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d10e      	bne.n	8001970 <HAL_I2C_Init+0x1bc>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	1e58      	subs	r0, r3, #1
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	460b      	mov	r3, r1
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	440b      	add	r3, r1
 8001960:	fbb0 f3f3 	udiv	r3, r0, r3
 8001964:	3301      	adds	r3, #1
 8001966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800196e:	e00f      	b.n	8001990 <HAL_I2C_Init+0x1dc>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	0099      	lsls	r1, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001990:	6879      	ldr	r1, [r7, #4]
 8001992:	6809      	ldr	r1, [r1, #0]
 8001994:	4313      	orrs	r3, r2
 8001996:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a1b      	ldr	r3, [r3, #32]
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	430a      	orrs	r2, r1
 80019b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6911      	ldr	r1, [r2, #16]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68d2      	ldr	r2, [r2, #12]
 80019ca:	4311      	orrs	r1, r2
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	430b      	orrs	r3, r1
 80019d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	68db      	ldr	r3, [r3, #12]
 80019da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695a      	ldr	r2, [r3, #20]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	000186a0 	.word	0x000186a0
 8001a2c:	001e847f 	.word	0x001e847f
 8001a30:	003d08ff 	.word	0x003d08ff
 8001a34:	431bde83 	.word	0x431bde83
 8001a38:	10624dd3 	.word	0x10624dd3

08001a3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	817b      	strh	r3, [r7, #10]
 8001a4e:	460b      	mov	r3, r1
 8001a50:	813b      	strh	r3, [r7, #8]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a56:	f7fe ffdf 	bl	8000a18 <HAL_GetTick>
 8001a5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b20      	cmp	r3, #32
 8001a66:	f040 80d9 	bne.w	8001c1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2319      	movs	r3, #25
 8001a70:	2201      	movs	r2, #1
 8001a72:	496d      	ldr	r1, [pc, #436]	@ (8001c28 <HAL_I2C_Mem_Write+0x1ec>)
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 fccd 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001a80:	2302      	movs	r3, #2
 8001a82:	e0cc      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2C_Mem_Write+0x56>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0c5      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d007      	beq.n	8001ab8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f042 0201 	orr.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ac6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2221      	movs	r2, #33	@ 0x21
 8001acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2240      	movs	r2, #64	@ 0x40
 8001ad4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a3a      	ldr	r2, [r7, #32]
 8001ae2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4a4d      	ldr	r2, [pc, #308]	@ (8001c2c <HAL_I2C_Mem_Write+0x1f0>)
 8001af8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001afa:	88f8      	ldrh	r0, [r7, #6]
 8001afc:	893a      	ldrh	r2, [r7, #8]
 8001afe:	8979      	ldrh	r1, [r7, #10]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	9301      	str	r3, [sp, #4]
 8001b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b06:	9300      	str	r3, [sp, #0]
 8001b08:	4603      	mov	r3, r0
 8001b0a:	68f8      	ldr	r0, [r7, #12]
 8001b0c:	f000 fb04 	bl	8002118 <I2C_RequestMemoryWrite>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d052      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e081      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fd92 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00d      	beq.n	8001b46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d107      	bne.n	8001b42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e06b      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4a:	781a      	ldrb	r2, [r3, #0]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	d11b      	bne.n	8001bbc <HAL_I2C_Mem_Write+0x180>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d017      	beq.n	8001bbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	b29a      	uxth	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	3b01      	subs	r3, #1
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d1aa      	bne.n	8001b1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 fd85 	bl	80026d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00d      	beq.n	8001bf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	2b04      	cmp	r3, #4
 8001bda:	d107      	bne.n	8001bec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e016      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2220      	movs	r2, #32
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	e000      	b.n	8001c1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001c1c:	2302      	movs	r3, #2
  }
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3718      	adds	r7, #24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	00100002 	.word	0x00100002
 8001c2c:	ffff0000 	.word	0xffff0000

08001c30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	4608      	mov	r0, r1
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4603      	mov	r3, r0
 8001c40:	817b      	strh	r3, [r7, #10]
 8001c42:	460b      	mov	r3, r1
 8001c44:	813b      	strh	r3, [r7, #8]
 8001c46:	4613      	mov	r3, r2
 8001c48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c4e:	f7fe fee3 	bl	8000a18 <HAL_GetTick>
 8001c52:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	f040 8244 	bne.w	80020ea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2319      	movs	r3, #25
 8001c68:	2201      	movs	r2, #1
 8001c6a:	4982      	ldr	r1, [pc, #520]	@ (8001e74 <HAL_I2C_Mem_Read+0x244>)
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fbd1 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	e237      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d101      	bne.n	8001c8a <HAL_I2C_Mem_Read+0x5a>
 8001c86:	2302      	movs	r3, #2
 8001c88:	e230      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d007      	beq.n	8001cb0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cbe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2222      	movs	r2, #34	@ 0x22
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2240      	movs	r2, #64	@ 0x40
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a62      	ldr	r2, [pc, #392]	@ (8001e78 <HAL_I2C_Mem_Read+0x248>)
 8001cf0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001cf2:	88f8      	ldrh	r0, [r7, #6]
 8001cf4:	893a      	ldrh	r2, [r7, #8]
 8001cf6:	8979      	ldrh	r1, [r7, #10]
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	9301      	str	r3, [sp, #4]
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4603      	mov	r3, r0
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 fa9e 	bl	8002244 <I2C_RequestMemoryRead>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e1ec      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d113      	bne.n	8001d42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	695b      	ldr	r3, [r3, #20]
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	61fb      	str	r3, [r7, #28]
 8001d2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e1c0      	b.n	80020c4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d11e      	bne.n	8001d88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d5a:	b672      	cpsid	i
}
 8001d5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001d82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d84:	b662      	cpsie	i
}
 8001d86:	e035      	b.n	8001df4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d11e      	bne.n	8001dce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001da0:	b672      	cpsid	i
}
 8001da2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001da4:	2300      	movs	r3, #0
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001dc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dca:	b662      	cpsie	i
}
 8001dcc:	e012      	b.n	8001df4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ddc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001df4:	e166      	b.n	80020c4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dfa:	2b03      	cmp	r3, #3
 8001dfc:	f200 811f 	bhi.w	800203e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d123      	bne.n	8001e50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fcab 	bl	8002768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e167      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	691a      	ldr	r2, [r3, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e26:	b2d2      	uxtb	r2, r2
 8001e28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e4e:	e139      	b.n	80020c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d152      	bne.n	8001efe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e5e:	2200      	movs	r2, #0
 8001e60:	4906      	ldr	r1, [pc, #24]	@ (8001e7c <HAL_I2C_Mem_Read+0x24c>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 fad6 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d008      	beq.n	8001e80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e13c      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
 8001e72:	bf00      	nop
 8001e74:	00100002 	.word	0x00100002
 8001e78:	ffff0000 	.word	0xffff0000
 8001e7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001e80:	b672      	cpsid	i
}
 8001e82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001eb0:	3b01      	subs	r3, #1
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec6:	b662      	cpsie	i
}
 8001ec8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001edc:	1c5a      	adds	r2, r3, #1
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	3b01      	subs	r3, #1
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001efc:	e0e2      	b.n	80020c4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f04:	2200      	movs	r2, #0
 8001f06:	497b      	ldr	r1, [pc, #492]	@ (80020f4 <HAL_I2C_Mem_Read+0x4c4>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fa83 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0e9      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f28:	b672      	cpsid	i
}
 8001f2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691a      	ldr	r2, [r3, #16]
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001f5e:	4b66      	ldr	r3, [pc, #408]	@ (80020f8 <HAL_I2C_Mem_Read+0x4c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	4a65      	ldr	r2, [pc, #404]	@ (80020fc <HAL_I2C_Mem_Read+0x4cc>)
 8001f66:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6a:	0a1a      	lsrs	r2, r3, #8
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	00da      	lsls	r2, r3, #3
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001f78:	6a3b      	ldr	r3, [r7, #32]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001f7e:	6a3b      	ldr	r3, [r7, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d118      	bne.n	8001fb6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2200      	movs	r2, #0
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	f043 0220 	orr.w	r2, r3, #32
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001fa6:	b662      	cpsie	i
}
 8001fa8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e09a      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d1d9      	bne.n	8001f78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fde:	b2d2      	uxtb	r2, r2
 8001fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	1c5a      	adds	r2, r3, #1
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ff0:	3b01      	subs	r3, #1
 8001ff2:	b29a      	uxth	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29a      	uxth	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002006:	b662      	cpsie	i
}
 8002008:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800203c:	e042      	b.n	80020c4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002040:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 fb90 	bl	8002768 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e04c      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002064:	1c5a      	adds	r2, r3, #1
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800206e:	3b01      	subs	r3, #1
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b04      	cmp	r3, #4
 8002090:	d118      	bne.n	80020c4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	b2d2      	uxtb	r2, r2
 800209e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f47f ae94 	bne.w	8001df6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e000      	b.n	80020ec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80020ea:	2302      	movs	r3, #2
  }
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	00010004 	.word	0x00010004
 80020f8:	20000000 	.word	0x20000000
 80020fc:	14f8b589 	.word	0x14f8b589

08002100 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800210c:	4618      	mov	r0, r3
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
	...

08002118 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	4608      	mov	r0, r1
 8002122:	4611      	mov	r1, r2
 8002124:	461a      	mov	r2, r3
 8002126:	4603      	mov	r3, r0
 8002128:	817b      	strh	r3, [r7, #10]
 800212a:	460b      	mov	r3, r1
 800212c:	813b      	strh	r3, [r7, #8]
 800212e:	4613      	mov	r3, r2
 8002130:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002140:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	6a3b      	ldr	r3, [r7, #32]
 8002148:	2200      	movs	r2, #0
 800214a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800214e:	68f8      	ldr	r0, [r7, #12]
 8002150:	f000 f960 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002168:	d103      	bne.n	8002172 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002170:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e05f      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002176:	897b      	ldrh	r3, [r7, #10]
 8002178:	b2db      	uxtb	r3, r3
 800217a:	461a      	mov	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002184:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	6a3a      	ldr	r2, [r7, #32]
 800218a:	492d      	ldr	r1, [pc, #180]	@ (8002240 <I2C_RequestMemoryWrite+0x128>)
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f000 f9bb 	bl	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e04c      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021b4:	6a39      	ldr	r1, [r7, #32]
 80021b6:	68f8      	ldr	r0, [r7, #12]
 80021b8:	f000 fa46 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00d      	beq.n	80021de <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d107      	bne.n	80021da <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80021d8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e02b      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d105      	bne.n	80021f0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021e4:	893b      	ldrh	r3, [r7, #8]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	611a      	str	r2, [r3, #16]
 80021ee:	e021      	b.n	8002234 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80021f0:	893b      	ldrh	r3, [r7, #8]
 80021f2:	0a1b      	lsrs	r3, r3, #8
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80021fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa20 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002224:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e005      	b.n	8002236 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800222a:	893b      	ldrh	r3, [r7, #8]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	00010002 	.word	0x00010002

08002244 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b088      	sub	sp, #32
 8002248:	af02      	add	r7, sp, #8
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	4608      	mov	r0, r1
 800224e:	4611      	mov	r1, r2
 8002250:	461a      	mov	r2, r3
 8002252:	4603      	mov	r3, r0
 8002254:	817b      	strh	r3, [r7, #10]
 8002256:	460b      	mov	r3, r1
 8002258:	813b      	strh	r3, [r7, #8]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800226c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	2200      	movs	r2, #0
 8002286:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f8c2 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a4:	d103      	bne.n	80022ae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0aa      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80022b2:	897b      	ldrh	r3, [r7, #10]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80022c0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	6a3a      	ldr	r2, [r7, #32]
 80022c6:	4952      	ldr	r1, [pc, #328]	@ (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80022c8:	68f8      	ldr	r0, [r7, #12]
 80022ca:	f000 f91d 	bl	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e097      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022f0:	6a39      	ldr	r1, [r7, #32]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f9a8 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d00d      	beq.n	800231a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d107      	bne.n	8002316 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002314:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e076      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800231a:	88fb      	ldrh	r3, [r7, #6]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d105      	bne.n	800232c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002320:	893b      	ldrh	r3, [r7, #8]
 8002322:	b2da      	uxtb	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e021      	b.n	8002370 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800232c:	893b      	ldrh	r3, [r7, #8]
 800232e:	0a1b      	lsrs	r3, r3, #8
 8002330:	b29b      	uxth	r3, r3
 8002332:	b2da      	uxtb	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800233a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800233c:	6a39      	ldr	r1, [r7, #32]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 f982 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00d      	beq.n	8002366 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800234e:	2b04      	cmp	r3, #4
 8002350:	d107      	bne.n	8002362 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002360:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e050      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002366:	893b      	ldrh	r3, [r7, #8]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002372:	6a39      	ldr	r1, [r7, #32]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f967 	bl	8002648 <I2C_WaitOnTXEFlagUntilTimeout>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00d      	beq.n	800239c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002384:	2b04      	cmp	r3, #4
 8002386:	d107      	bne.n	8002398 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002396:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e035      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f82b 	bl	8002414 <I2C_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023d2:	d103      	bne.n	80023dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e013      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	b2da      	uxtb	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f2:	6a3a      	ldr	r2, [r7, #32]
 80023f4:	4906      	ldr	r1, [pc, #24]	@ (8002410 <I2C_RequestMemoryRead+0x1cc>)
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f886 	bl	8002508 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010002 	.word	0x00010002

08002414 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	603b      	str	r3, [r7, #0]
 8002420:	4613      	mov	r3, r2
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002424:	e048      	b.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800242c:	d044      	beq.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800242e:	f7fe faf3 	bl	8000a18 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d302      	bcc.n	8002444 <I2C_WaitOnFlagUntilTimeout+0x30>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d139      	bne.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	0c1b      	lsrs	r3, r3, #16
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10d      	bne.n	800246a <I2C_WaitOnFlagUntilTimeout+0x56>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	43da      	mvns	r2, r3
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	b29b      	uxth	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	e00c      	b.n	8002484 <I2C_WaitOnFlagUntilTimeout+0x70>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	43da      	mvns	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	4013      	ands	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	2b00      	cmp	r3, #0
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	429a      	cmp	r2, r3
 8002488:	d116      	bne.n	80024b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e023      	b.n	8002500 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	0c1b      	lsrs	r3, r3, #16
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d10d      	bne.n	80024de <I2C_WaitOnFlagUntilTimeout+0xca>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	43da      	mvns	r2, r3
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4013      	ands	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf0c      	ite	eq
 80024d4:	2301      	moveq	r3, #1
 80024d6:	2300      	movne	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
 80024dc:	e00c      	b.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	43da      	mvns	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	4013      	ands	r3, r2
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d093      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3710      	adds	r7, #16
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002516:	e071      	b.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695b      	ldr	r3, [r3, #20]
 800251e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002526:	d123      	bne.n	8002570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002536:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002540:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2220      	movs	r2, #32
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255c:	f043 0204 	orr.w	r2, r3, #4
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e067      	b.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002576:	d041      	beq.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002578:	f7fe fa4e 	bl	8000a18 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	429a      	cmp	r2, r3
 8002586:	d302      	bcc.n	800258e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d136      	bne.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d10c      	bne.n	80025b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	e00b      	b.n	80025ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf14      	ite	ne
 80025c4:	2301      	movne	r3, #1
 80025c6:	2300      	moveq	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d016      	beq.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e8:	f043 0220 	orr.w	r2, r3, #32
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e021      	b.n	8002640 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	0c1b      	lsrs	r3, r3, #16
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d10c      	bne.n	8002620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	43da      	mvns	r2, r3
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	4013      	ands	r3, r2
 8002612:	b29b      	uxth	r3, r3
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf14      	ite	ne
 8002618:	2301      	movne	r3, #1
 800261a:	2300      	moveq	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	e00b      	b.n	8002638 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	4013      	ands	r3, r2
 800262c:	b29b      	uxth	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	f47f af6d 	bne.w	8002518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002654:	e034      	b.n	80026c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f8e3 	bl	8002822 <I2C_IsAcknowledgeFailed>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d001      	beq.n	8002666 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e034      	b.n	80026d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800266c:	d028      	beq.n	80026c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266e:	f7fe f9d3 	bl	8000a18 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d11d      	bne.n	80026c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268e:	2b80      	cmp	r3, #128	@ 0x80
 8002690:	d016      	beq.n	80026c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e007      	b.n	80026d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b80      	cmp	r3, #128	@ 0x80
 80026cc:	d1c3      	bne.n	8002656 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3710      	adds	r7, #16
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026e4:	e034      	b.n	8002750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f89b 	bl	8002822 <I2C_IsAcknowledgeFailed>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e034      	b.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d028      	beq.n	8002750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026fe:	f7fe f98b 	bl	8000a18 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	429a      	cmp	r2, r3
 800270c:	d302      	bcc.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d11d      	bne.n	8002750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	f003 0304 	and.w	r3, r3, #4
 800271e:	2b04      	cmp	r3, #4
 8002720:	d016      	beq.n	8002750 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2200      	movs	r2, #0
 8002726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800273c:	f043 0220 	orr.w	r2, r3, #32
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e007      	b.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d1c3      	bne.n	80026e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002774:	e049      	b.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b10      	cmp	r3, #16
 8002782:	d119      	bne.n	80027b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f06f 0210 	mvn.w	r2, #16
 800278c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e030      	b.n	800281a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b8:	f7fe f92e 	bl	8000a18 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d302      	bcc.n	80027ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	2b40      	cmp	r3, #64	@ 0x40
 80027da:	d016      	beq.n	800280a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e007      	b.n	800281a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002814:	2b40      	cmp	r3, #64	@ 0x40
 8002816:	d1ae      	bne.n	8002776 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002838:	d11b      	bne.n	8002872 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002842:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f043 0204 	orr.w	r2, r3, #4
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e000      	b.n	8002874 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr
	...

08002880 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e272      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8087 	beq.w	80029ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028a0:	4b92      	ldr	r3, [pc, #584]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b04      	cmp	r3, #4
 80028aa:	d00c      	beq.n	80028c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028ac:	4b8f      	ldr	r3, [pc, #572]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f003 030c 	and.w	r3, r3, #12
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d112      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
 80028b8:	4b8c      	ldr	r3, [pc, #560]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028c4:	d10b      	bne.n	80028de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c6:	4b89      	ldr	r3, [pc, #548]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d06c      	beq.n	80029ac <HAL_RCC_OscConfig+0x12c>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d168      	bne.n	80029ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e24c      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028e6:	d106      	bne.n	80028f6 <HAL_RCC_OscConfig+0x76>
 80028e8:	4b80      	ldr	r3, [pc, #512]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a7f      	ldr	r2, [pc, #508]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80028ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	e02e      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10c      	bne.n	8002918 <HAL_RCC_OscConfig+0x98>
 80028fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a7a      	ldr	r2, [pc, #488]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b78      	ldr	r3, [pc, #480]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a77      	ldr	r2, [pc, #476]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002910:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002914:	6013      	str	r3, [r2, #0]
 8002916:	e01d      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002920:	d10c      	bne.n	800293c <HAL_RCC_OscConfig+0xbc>
 8002922:	4b72      	ldr	r3, [pc, #456]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a71      	ldr	r2, [pc, #452]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002928:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	4b6f      	ldr	r3, [pc, #444]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a6e      	ldr	r2, [pc, #440]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	e00b      	b.n	8002954 <HAL_RCC_OscConfig+0xd4>
 800293c:	4b6b      	ldr	r3, [pc, #428]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a6a      	ldr	r2, [pc, #424]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002942:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002946:	6013      	str	r3, [r2, #0]
 8002948:	4b68      	ldr	r3, [pc, #416]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 800294e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002952:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d013      	beq.n	8002984 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295c:	f7fe f85c 	bl	8000a18 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002964:	f7fe f858 	bl	8000a18 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b64      	cmp	r3, #100	@ 0x64
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e200      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002976:	4b5d      	ldr	r3, [pc, #372]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0xe4>
 8002982:	e014      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe f848 	bl	8000a18 <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe f844 	bl	8000a18 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	@ 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e1ec      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299e:	4b53      	ldr	r3, [pc, #332]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x10c>
 80029aa:	e000      	b.n	80029ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d063      	beq.n	8002a82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ba:	4b4c      	ldr	r3, [pc, #304]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029c6:	4b49      	ldr	r3, [pc, #292]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f003 030c 	and.w	r3, r3, #12
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11c      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
 80029d2:	4b46      	ldr	r3, [pc, #280]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d116      	bne.n	8002a0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029de:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d005      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d001      	beq.n	80029f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e1c0      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029f6:	4b3d      	ldr	r3, [pc, #244]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	00db      	lsls	r3, r3, #3
 8002a04:	4939      	ldr	r1, [pc, #228]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a0a:	e03a      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a14:	4b36      	ldr	r3, [pc, #216]	@ (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a16:	2201      	movs	r2, #1
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fd fffd 	bl	8000a18 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a22:	f7fd fff9 	bl	8000a18 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e1a1      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a34:	4b2d      	ldr	r3, [pc, #180]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0f0      	beq.n	8002a22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a40:	4b2a      	ldr	r3, [pc, #168]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	4927      	ldr	r1, [pc, #156]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e015      	b.n	8002a82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a56:	4b26      	ldr	r3, [pc, #152]	@ (8002af0 <HAL_RCC_OscConfig+0x270>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7fd ffdc 	bl	8000a18 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a64:	f7fd ffd8 	bl	8000a18 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e180      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a76:	4b1d      	ldr	r3, [pc, #116]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d03a      	beq.n	8002b04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a96:	4b17      	ldr	r3, [pc, #92]	@ (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002a98:	2201      	movs	r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a9c:	f7fd ffbc 	bl	8000a18 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7fd ffb8 	bl	8000a18 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e160      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8002aec <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0f0      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ac2:	2001      	movs	r0, #1
 8002ac4:	f000 fabc 	bl	8003040 <RCC_Delay>
 8002ac8:	e01c      	b.n	8002b04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aca:	4b0a      	ldr	r3, [pc, #40]	@ (8002af4 <HAL_RCC_OscConfig+0x274>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad0:	f7fd ffa2 	bl	8000a18 <HAL_GetTick>
 8002ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ad6:	e00f      	b.n	8002af8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad8:	f7fd ff9e 	bl	8000a18 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d908      	bls.n	8002af8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e146      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	42420000 	.word	0x42420000
 8002af4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002af8:	4b92      	ldr	r3, [pc, #584]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e9      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80a6 	beq.w	8002c5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b16:	4b8b      	ldr	r3, [pc, #556]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10d      	bne.n	8002b3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b22:	4b88      	ldr	r3, [pc, #544]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	4a87      	ldr	r2, [pc, #540]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b2c:	61d3      	str	r3, [r2, #28]
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b30:	69db      	ldr	r3, [r3, #28]
 8002b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b3e:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d118      	bne.n	8002b7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b56:	f7fd ff5f 	bl	8000a18 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b5e:	f7fd ff5b 	bl	8000a18 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b64      	cmp	r3, #100	@ 0x64
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e103      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b70:	4b75      	ldr	r3, [pc, #468]	@ (8002d48 <HAL_RCC_OscConfig+0x4c8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d106      	bne.n	8002b92 <HAL_RCC_OscConfig+0x312>
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b86:	6a1b      	ldr	r3, [r3, #32]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b8a:	f043 0301 	orr.w	r3, r3, #1
 8002b8e:	6213      	str	r3, [r2, #32]
 8002b90:	e02d      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10c      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x334>
 8002b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	4a69      	ldr	r2, [pc, #420]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	f023 0301 	bic.w	r3, r3, #1
 8002ba4:	6213      	str	r3, [r2, #32]
 8002ba6:	4b67      	ldr	r3, [pc, #412]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	4a66      	ldr	r2, [pc, #408]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bac:	f023 0304 	bic.w	r3, r3, #4
 8002bb0:	6213      	str	r3, [r2, #32]
 8002bb2:	e01c      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	2b05      	cmp	r3, #5
 8002bba:	d10c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x356>
 8002bbc:	4b61      	ldr	r3, [pc, #388]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bbe:	6a1b      	ldr	r3, [r3, #32]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bc2:	f043 0304 	orr.w	r3, r3, #4
 8002bc6:	6213      	str	r3, [r2, #32]
 8002bc8:	4b5e      	ldr	r3, [pc, #376]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	4a5d      	ldr	r2, [pc, #372]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bce:	f043 0301 	orr.w	r3, r3, #1
 8002bd2:	6213      	str	r3, [r2, #32]
 8002bd4:	e00b      	b.n	8002bee <HAL_RCC_OscConfig+0x36e>
 8002bd6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	4a5a      	ldr	r2, [pc, #360]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002bdc:	f023 0301 	bic.w	r3, r3, #1
 8002be0:	6213      	str	r3, [r2, #32]
 8002be2:	4b58      	ldr	r3, [pc, #352]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	4a57      	ldr	r2, [pc, #348]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002be8:	f023 0304 	bic.w	r3, r3, #4
 8002bec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7fd ff0f 	bl	8000a18 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bfc:	e00a      	b.n	8002c14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfe:	f7fd ff0b 	bl	8000a18 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0b1      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c14:	4b4b      	ldr	r3, [pc, #300]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ee      	beq.n	8002bfe <HAL_RCC_OscConfig+0x37e>
 8002c20:	e014      	b.n	8002c4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c22:	f7fd fef9 	bl	8000a18 <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fd fef5 	bl	8000a18 <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e09b      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c40:	4b40      	ldr	r3, [pc, #256]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ee      	bne.n	8002c2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c4c:	7dfb      	ldrb	r3, [r7, #23]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d105      	bne.n	8002c5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c52:	4b3c      	ldr	r3, [pc, #240]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 8087 	beq.w	8002d76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c68:	4b36      	ldr	r3, [pc, #216]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f003 030c 	and.w	r3, r3, #12
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d061      	beq.n	8002d38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d146      	bne.n	8002d0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	4b33      	ldr	r3, [pc, #204]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fd fec9 	bl	8000a18 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fd fec5 	bl	8000a18 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e06d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c9c:	4b29      	ldr	r3, [pc, #164]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1f0      	bne.n	8002c8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002cb2:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	4921      	ldr	r1, [pc, #132]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a19      	ldr	r1, [r3, #32]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	430b      	orrs	r3, r1
 8002cd6:	491b      	ldr	r1, [pc, #108]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fe99 	bl	8000a18 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fd fe95 	bl	8000a18 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e03d      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cfc:	4b11      	ldr	r3, [pc, #68]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x46a>
 8002d08:	e035      	b.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d0a:	4b10      	ldr	r3, [pc, #64]	@ (8002d4c <HAL_RCC_OscConfig+0x4cc>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d10:	f7fd fe82 	bl	8000a18 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d18:	f7fd fe7e 	bl	8000a18 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e026      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d2a:	4b06      	ldr	r3, [pc, #24]	@ (8002d44 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f0      	bne.n	8002d18 <HAL_RCC_OscConfig+0x498>
 8002d36:	e01e      	b.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d107      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e019      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	40007000 	.word	0x40007000
 8002d4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d50:	4b0b      	ldr	r3, [pc, #44]	@ (8002d80 <HAL_RCC_OscConfig+0x500>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d106      	bne.n	8002d72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40021000 	.word	0x40021000

08002d84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e0d0      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d98:	4b6a      	ldr	r3, [pc, #424]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d910      	bls.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b67      	ldr	r3, [pc, #412]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4965      	ldr	r1, [pc, #404]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b63      	ldr	r3, [pc, #396]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e0b8      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0304 	and.w	r3, r3, #4
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002de0:	4b59      	ldr	r3, [pc, #356]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a58      	ldr	r2, [pc, #352]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002de6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002dea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002df8:	4b53      	ldr	r3, [pc, #332]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	4a52      	ldr	r2, [pc, #328]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002e02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e04:	4b50      	ldr	r3, [pc, #320]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	494d      	ldr	r1, [pc, #308]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d040      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d107      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d115      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e07f      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e42:	4b41      	ldr	r3, [pc, #260]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e073      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e52:	4b3d      	ldr	r3, [pc, #244]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0302 	and.w	r3, r3, #2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e06b      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e62:	4b39      	ldr	r3, [pc, #228]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f023 0203 	bic.w	r2, r3, #3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4936      	ldr	r1, [pc, #216]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e74:	f7fd fdd0 	bl	8000a18 <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e7a:	e00a      	b.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e7c:	f7fd fdcc 	bl	8000a18 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e053      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e92:	4b2d      	ldr	r3, [pc, #180]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 020c 	and.w	r2, r3, #12
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d1eb      	bne.n	8002e7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d210      	bcs.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b24      	ldr	r3, [pc, #144]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 0207 	bic.w	r2, r3, #7
 8002eba:	4922      	ldr	r1, [pc, #136]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e032      	b.n	8002f3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ee0:	4b19      	ldr	r3, [pc, #100]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4916      	ldr	r1, [pc, #88]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d009      	beq.n	8002f12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	00db      	lsls	r3, r3, #3
 8002f0c:	490e      	ldr	r1, [pc, #56]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f12:	f000 f821 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 8002f16:	4602      	mov	r2, r0
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	490a      	ldr	r1, [pc, #40]	@ (8002f4c <HAL_RCC_ClockConfig+0x1c8>)
 8002f24:	5ccb      	ldrb	r3, [r1, r3]
 8002f26:	fa22 f303 	lsr.w	r3, r2, r3
 8002f2a:	4a09      	ldr	r2, [pc, #36]	@ (8002f50 <HAL_RCC_ClockConfig+0x1cc>)
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_RCC_ClockConfig+0x1d0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fd2e 	bl	8000994 <HAL_InitTick>

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40022000 	.word	0x40022000
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	080030ec 	.word	0x080030ec
 8002f50:	20000000 	.word	0x20000000
 8002f54:	20000004 	.word	0x20000004

08002f58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	2300      	movs	r3, #0
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002f72:	4b1e      	ldr	r3, [pc, #120]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 030c 	and.w	r3, r3, #12
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d002      	beq.n	8002f88 <HAL_RCC_GetSysClockFreq+0x30>
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d003      	beq.n	8002f8e <HAL_RCC_GetSysClockFreq+0x36>
 8002f86:	e027      	b.n	8002fd8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f8a:	613b      	str	r3, [r7, #16]
      break;
 8002f8c:	e027      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	0c9b      	lsrs	r3, r3, #18
 8002f92:	f003 030f 	and.w	r3, r3, #15
 8002f96:	4a17      	ldr	r2, [pc, #92]	@ (8002ff4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f98:	5cd3      	ldrb	r3, [r2, r3]
 8002f9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d010      	beq.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002fa6:	4b11      	ldr	r3, [pc, #68]	@ (8002fec <HAL_RCC_GetSysClockFreq+0x94>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	0c5b      	lsrs	r3, r3, #17
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	4a11      	ldr	r2, [pc, #68]	@ (8002ff8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002fba:	fb03 f202 	mul.w	r2, r3, r2
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e004      	b.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0c      	ldr	r2, [pc, #48]	@ (8002ffc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002fcc:	fb02 f303 	mul.w	r3, r2, r3
 8002fd0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
      break;
 8002fd6:	e002      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002fd8:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002fda:	613b      	str	r3, [r7, #16]
      break;
 8002fdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fde:	693b      	ldr	r3, [r7, #16]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	371c      	adds	r7, #28
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	00f42400 	.word	0x00f42400
 8002ff4:	08003104 	.word	0x08003104
 8002ff8:	08003114 	.word	0x08003114
 8002ffc:	003d0900 	.word	0x003d0900
 8003000:	007a1200 	.word	0x007a1200

08003004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003008:	4b02      	ldr	r3, [pc, #8]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x10>)
 800300a:	681b      	ldr	r3, [r3, #0]
}
 800300c:	4618      	mov	r0, r3
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr
 8003014:	20000000 	.word	0x20000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800301c:	f7ff fff2 	bl	8003004 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b05      	ldr	r3, [pc, #20]	@ (8003038 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4903      	ldr	r1, [pc, #12]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}
 8003038:	40021000 	.word	0x40021000
 800303c:	080030fc 	.word	0x080030fc

08003040 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003048:	4b0a      	ldr	r3, [pc, #40]	@ (8003074 <RCC_Delay+0x34>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a0a      	ldr	r2, [pc, #40]	@ (8003078 <RCC_Delay+0x38>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a5b      	lsrs	r3, r3, #9
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800305c:	bf00      	nop
  }
  while (Delay --);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1e5a      	subs	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f9      	bne.n	800305c <RCC_Delay+0x1c>
}
 8003068:	bf00      	nop
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bc80      	pop	{r7}
 8003072:	4770      	bx	lr
 8003074:	20000000 	.word	0x20000000
 8003078:	10624dd3 	.word	0x10624dd3

0800307c <memset>:
 800307c:	4603      	mov	r3, r0
 800307e:	4402      	add	r2, r0
 8003080:	4293      	cmp	r3, r2
 8003082:	d100      	bne.n	8003086 <memset+0xa>
 8003084:	4770      	bx	lr
 8003086:	f803 1b01 	strb.w	r1, [r3], #1
 800308a:	e7f9      	b.n	8003080 <memset+0x4>

0800308c <__libc_init_array>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2600      	movs	r6, #0
 8003090:	4d0c      	ldr	r5, [pc, #48]	@ (80030c4 <__libc_init_array+0x38>)
 8003092:	4c0d      	ldr	r4, [pc, #52]	@ (80030c8 <__libc_init_array+0x3c>)
 8003094:	1b64      	subs	r4, r4, r5
 8003096:	10a4      	asrs	r4, r4, #2
 8003098:	42a6      	cmp	r6, r4
 800309a:	d109      	bne.n	80030b0 <__libc_init_array+0x24>
 800309c:	f000 f81a 	bl	80030d4 <_init>
 80030a0:	2600      	movs	r6, #0
 80030a2:	4d0a      	ldr	r5, [pc, #40]	@ (80030cc <__libc_init_array+0x40>)
 80030a4:	4c0a      	ldr	r4, [pc, #40]	@ (80030d0 <__libc_init_array+0x44>)
 80030a6:	1b64      	subs	r4, r4, r5
 80030a8:	10a4      	asrs	r4, r4, #2
 80030aa:	42a6      	cmp	r6, r4
 80030ac:	d105      	bne.n	80030ba <__libc_init_array+0x2e>
 80030ae:	bd70      	pop	{r4, r5, r6, pc}
 80030b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030b4:	4798      	blx	r3
 80030b6:	3601      	adds	r6, #1
 80030b8:	e7ee      	b.n	8003098 <__libc_init_array+0xc>
 80030ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80030be:	4798      	blx	r3
 80030c0:	3601      	adds	r6, #1
 80030c2:	e7f2      	b.n	80030aa <__libc_init_array+0x1e>
 80030c4:	08003118 	.word	0x08003118
 80030c8:	08003118 	.word	0x08003118
 80030cc:	08003118 	.word	0x08003118
 80030d0:	0800311c 	.word	0x0800311c

080030d4 <_init>:
 80030d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030d6:	bf00      	nop
 80030d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030da:	bc08      	pop	{r3}
 80030dc:	469e      	mov	lr, r3
 80030de:	4770      	bx	lr

080030e0 <_fini>:
 80030e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e2:	bf00      	nop
 80030e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e6:	bc08      	pop	{r3}
 80030e8:	469e      	mov	lr, r3
 80030ea:	4770      	bx	lr
