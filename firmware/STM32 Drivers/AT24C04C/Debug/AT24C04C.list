
AT24C04C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f58  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003090  08003090  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003090  08003090  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003090  08003090  00004090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003094  08003094  00004094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003098  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000000c  080030a4  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000d4  080030a4  000050d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f07  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d40  00000000  00000000  0000df3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  0000fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000690  00000000  00000000  00010530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ca7  00000000  00000000  00010bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c29a  00000000  00000000  00027867  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081104  00000000  00000000  00033b01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021ec  00000000  00000000  000b4c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  000b6e34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800304c 	.word	0x0800304c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800304c 	.word	0x0800304c

0800014c <MX_AT24C04C_1_Init>:


AT24C04C_HandleTypeDef at24c04c_1;

void MX_AT24C04C_1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    at24c04c_1.Init.I2C_HandlerInstance = &hi2c1;
 8000150:	4b0a      	ldr	r3, [pc, #40]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000152:	4a0b      	ldr	r2, [pc, #44]	@ (8000180 <MX_AT24C04C_1_Init+0x34>)
 8000154:	601a      	str	r2, [r3, #0]
    at24c04c_1.Init.device_identifier = 0b10100000;
 8000156:	4b09      	ldr	r3, [pc, #36]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000158:	22a0      	movs	r2, #160	@ 0xa0
 800015a:	711a      	strb	r2, [r3, #4]
    at24c04c_1.Init.a2_pin = 0;
 800015c:	4b07      	ldr	r3, [pc, #28]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 800015e:	2200      	movs	r2, #0
 8000160:	715a      	strb	r2, [r3, #5]
    at24c04c_1.Init.a1_pin = 0;
 8000162:	4b06      	ldr	r3, [pc, #24]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 8000164:	2200      	movs	r2, #0
 8000166:	719a      	strb	r2, [r3, #6]


    if (AT24C04C_Init(&at24c04c_1) != AT24C04C_OK)
 8000168:	4804      	ldr	r0, [pc, #16]	@ (800017c <MX_AT24C04C_1_Init+0x30>)
 800016a:	f000 fa6e 	bl	800064a <AT24C04C_Init>
 800016e:	4603      	mov	r3, r0
 8000170:	2b00      	cmp	r3, #0
 8000172:	d001      	beq.n	8000178 <MX_AT24C04C_1_Init+0x2c>
    {
        Error_Handler();
 8000174:	f000 f9d0 	bl	8000518 <Error_Handler>
    }
}
 8000178:	bf00      	nop
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000028 	.word	0x20000028
 8000180:	20000060 	.word	0x20000060

08000184 <MX_CAN_Init>:

CAN_HandleTypeDef hcan;

/* CAN init function */
void MX_CAN_Init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000188:	4b18      	ldr	r3, [pc, #96]	@ (80001ec <MX_CAN_Init+0x68>)
 800018a:	4a19      	ldr	r2, [pc, #100]	@ (80001f0 <MX_CAN_Init+0x6c>)
 800018c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 2;
 800018e:	4b17      	ldr	r3, [pc, #92]	@ (80001ec <MX_CAN_Init+0x68>)
 8000190:	2202      	movs	r2, #2
 8000192:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000194:	4b15      	ldr	r3, [pc, #84]	@ (80001ec <MX_CAN_Init+0x68>)
 8000196:	2200      	movs	r2, #0
 8000198:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800019a:	4b14      	ldr	r3, [pc, #80]	@ (80001ec <MX_CAN_Init+0x68>)
 800019c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80001a0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80001a2:	4b12      	ldr	r3, [pc, #72]	@ (80001ec <MX_CAN_Init+0x68>)
 80001a4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001a8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80001aa:	4b10      	ldr	r3, [pc, #64]	@ (80001ec <MX_CAN_Init+0x68>)
 80001ac:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80001b0:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80001b2:	4b0e      	ldr	r3, [pc, #56]	@ (80001ec <MX_CAN_Init+0x68>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	@ (80001ec <MX_CAN_Init+0x68>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80001be:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <MX_CAN_Init+0x68>)
 80001c0:	2200      	movs	r2, #0
 80001c2:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80001c4:	4b09      	ldr	r3, [pc, #36]	@ (80001ec <MX_CAN_Init+0x68>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80001ca:	4b08      	ldr	r3, [pc, #32]	@ (80001ec <MX_CAN_Init+0x68>)
 80001cc:	2200      	movs	r2, #0
 80001ce:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80001d0:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <MX_CAN_Init+0x68>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80001d6:	4805      	ldr	r0, [pc, #20]	@ (80001ec <MX_CAN_Init+0x68>)
 80001d8:	f000 fc08 	bl	80009ec <HAL_CAN_Init>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 80001e2:	f000 f999 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80001e6:	bf00      	nop
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	20000038 	.word	0x20000038
 80001f0:	40006400 	.word	0x40006400

080001f4 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b088      	sub	sp, #32
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001fc:	f107 0310 	add.w	r3, r7, #16
 8000200:	2200      	movs	r2, #0
 8000202:	601a      	str	r2, [r3, #0]
 8000204:	605a      	str	r2, [r3, #4]
 8000206:	609a      	str	r2, [r3, #8]
 8000208:	60da      	str	r2, [r3, #12]
  if(canHandle->Instance==CAN1)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	4a20      	ldr	r2, [pc, #128]	@ (8000290 <HAL_CAN_MspInit+0x9c>)
 8000210:	4293      	cmp	r3, r2
 8000212:	d139      	bne.n	8000288 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000214:	4b1f      	ldr	r3, [pc, #124]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000216:	69db      	ldr	r3, [r3, #28]
 8000218:	4a1e      	ldr	r2, [pc, #120]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800021a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800021e:	61d3      	str	r3, [r2, #28]
 8000220:	4b1c      	ldr	r3, [pc, #112]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000222:	69db      	ldr	r3, [r3, #28]
 8000224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000228:	60fb      	str	r3, [r7, #12]
 800022a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800022c:	4b19      	ldr	r3, [pc, #100]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800022e:	699b      	ldr	r3, [r3, #24]
 8000230:	4a18      	ldr	r2, [pc, #96]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 8000232:	f043 0304 	orr.w	r3, r3, #4
 8000236:	6193      	str	r3, [r2, #24]
 8000238:	4b16      	ldr	r3, [pc, #88]	@ (8000294 <HAL_CAN_MspInit+0xa0>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	f003 0304 	and.w	r3, r3, #4
 8000240:	60bb      	str	r3, [r7, #8]
 8000242:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000244:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000248:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024e:	2300      	movs	r3, #0
 8000250:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000252:	f107 0310 	add.w	r3, r7, #16
 8000256:	4619      	mov	r1, r3
 8000258:	480f      	ldr	r0, [pc, #60]	@ (8000298 <HAL_CAN_MspInit+0xa4>)
 800025a:	f001 f8cb 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800025e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000262:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000264:	2302      	movs	r3, #2
 8000266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000268:	2303      	movs	r3, #3
 800026a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800026c:	f107 0310 	add.w	r3, r7, #16
 8000270:	4619      	mov	r1, r3
 8000272:	4809      	ldr	r0, [pc, #36]	@ (8000298 <HAL_CAN_MspInit+0xa4>)
 8000274:	f001 f8be 	bl	80013f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	2014      	movs	r0, #20
 800027e:	f001 f882 	bl	8001386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000282:	2014      	movs	r0, #20
 8000284:	f001 f89b 	bl	80013be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000288:	bf00      	nop
 800028a:	3720      	adds	r7, #32
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	40006400 	.word	0x40006400
 8000294:	40021000 	.word	0x40021000
 8000298:	40010800 	.word	0x40010800

0800029c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b088      	sub	sp, #32
 80002a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002a2:	f107 0310 	add.w	r3, r7, #16
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a1c      	ldr	r2, [pc, #112]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0320 	and.w	r3, r3, #32
 80002c4:	60fb      	str	r3, [r7, #12]
 80002c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b17      	ldr	r3, [pc, #92]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a16      	ldr	r2, [pc, #88]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b14      	ldr	r3, [pc, #80]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002e0:	4b11      	ldr	r3, [pc, #68]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a10      	ldr	r2, [pc, #64]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000328 <MX_GPIO_Init+0x8c>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2104      	movs	r1, #4
 80002fc:	480b      	ldr	r0, [pc, #44]	@ (800032c <MX_GPIO_Init+0x90>)
 80002fe:	f001 f9fd 	bl	80016fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000302:	2304      	movs	r3, #4
 8000304:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000306:	2301      	movs	r3, #1
 8000308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2302      	movs	r3, #2
 8000310:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	4619      	mov	r1, r3
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <MX_GPIO_Init+0x90>)
 800031a:	f001 f86b 	bl	80013f4 <HAL_GPIO_Init>

}
 800031e:	bf00      	nop
 8000320:	3720      	adds	r7, #32
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40021000 	.word	0x40021000
 800032c:	40010c00 	.word	0x40010c00

08000330 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000336:	4a13      	ldr	r2, [pc, #76]	@ (8000384 <MX_I2C1_Init+0x54>)
 8000338:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800033a:	4b11      	ldr	r3, [pc, #68]	@ (8000380 <MX_I2C1_Init+0x50>)
 800033c:	4a12      	ldr	r2, [pc, #72]	@ (8000388 <MX_I2C1_Init+0x58>)
 800033e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000340:	4b0f      	ldr	r3, [pc, #60]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000346:	4b0e      	ldr	r3, [pc, #56]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000348:	2200      	movs	r2, #0
 800034a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800034c:	4b0c      	ldr	r3, [pc, #48]	@ (8000380 <MX_I2C1_Init+0x50>)
 800034e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000352:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000354:	4b0a      	ldr	r3, [pc, #40]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800035a:	4b09      	ldr	r3, [pc, #36]	@ (8000380 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000360:	4b07      	ldr	r3, [pc, #28]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000362:	2200      	movs	r2, #0
 8000364:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000366:	4b06      	ldr	r3, [pc, #24]	@ (8000380 <MX_I2C1_Init+0x50>)
 8000368:	2200      	movs	r2, #0
 800036a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800036c:	4804      	ldr	r0, [pc, #16]	@ (8000380 <MX_I2C1_Init+0x50>)
 800036e:	f001 f9dd 	bl	800172c <HAL_I2C_Init>
 8000372:	4603      	mov	r3, r0
 8000374:	2b00      	cmp	r3, #0
 8000376:	d001      	beq.n	800037c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000378:	f000 f8ce 	bl	8000518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000060 	.word	0x20000060
 8000384:	40005400 	.word	0x40005400
 8000388:	000186a0 	.word	0x000186a0

0800038c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a15      	ldr	r2, [pc, #84]	@ (80003fc <HAL_I2C_MspInit+0x70>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d123      	bne.n	80003f4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a13      	ldr	r2, [pc, #76]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003c4:	23c0      	movs	r3, #192	@ 0xc0
 80003c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c8:	2312      	movs	r3, #18
 80003ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	@ (8000404 <HAL_I2C_MspInit+0x78>)
 80003d8:	f001 f80c 	bl	80013f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e6:	61d3      	str	r3, [r2, #28]
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40005400 	.word	0x40005400
 8000400:	40021000 	.word	0x40021000
 8000404:	40010c00 	.word	0x40010c00

08000408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b084      	sub	sp, #16
 800040c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040e:	f000 fa67 	bl	80008e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000412:	f000 f83b 	bl	800048c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000416:	f7ff ff41 	bl	800029c <MX_GPIO_Init>
  MX_CAN_Init();
 800041a:	f7ff feb3 	bl	8000184 <MX_CAN_Init>
  MX_I2C1_Init();
 800041e:	f7ff ff87 	bl	8000330 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MX_AT24C04C_1_Init();
 8000422:	f7ff fe93 	bl	800014c <MX_AT24C04C_1_Init>
  while (1)
  {

    //dummy variables

    uint16_t eeprom_address = 321;
 8000426:	f240 1341 	movw	r3, #321	@ 0x141
 800042a:	81fb      	strh	r3, [r7, #14]
    uint8_t penguinsChampionships_2000s[3];
    uint16_t len_bytes = 3;
 800042c:	2303      	movs	r3, #3
 800042e:	81bb      	strh	r3, [r7, #12]

    penguinsChampionships_2000s[0] = 9;
 8000430:	2309      	movs	r3, #9
 8000432:	723b      	strb	r3, [r7, #8]
    penguinsChampionships_2000s[1] = 16;
 8000434:	2310      	movs	r3, #16
 8000436:	727b      	strb	r3, [r7, #9]
    penguinsChampionships_2000s[2] = 17;
 8000438:	2311      	movs	r3, #17
 800043a:	72bb      	strb	r3, [r7, #10]

    AT24C04C_WriteData(&at24c04c_1, eeprom_address, penguinsChampionships_2000s, len_bytes);
 800043c:	89bb      	ldrh	r3, [r7, #12]
 800043e:	f107 0208 	add.w	r2, r7, #8
 8000442:	89f9      	ldrh	r1, [r7, #14]
 8000444:	480d      	ldr	r0, [pc, #52]	@ (800047c <main+0x74>)
 8000446:	f000 f96e 	bl	8000726 <AT24C04C_WriteData>

    HAL_Delay(1000);
 800044a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800044e:	f000 faa9 	bl	80009a4 <HAL_Delay>


    uint8_t readData[3];

    AT24C04C_ReadData(&at24c04c_1, eeprom_address, readData, len_bytes);
 8000452:	89bb      	ldrh	r3, [r7, #12]
 8000454:	1d3a      	adds	r2, r7, #4
 8000456:	89f9      	ldrh	r1, [r7, #14]
 8000458:	4808      	ldr	r0, [pc, #32]	@ (800047c <main+0x74>)
 800045a:	f000 f923 	bl	80006a4 <AT24C04C_ReadData>

    //Can read results over CAN or Breakpoints. 

    
    TxHeader.DLC = 1;
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <main+0x78>)
 8000460:	2201      	movs	r2, #1
 8000462:	611a      	str	r2, [r3, #16]
    HAL_CAN_AddTxMessage(&hcan, &TxHeader, readData, &TxMailbox);
 8000464:	1d3a      	adds	r2, r7, #4
 8000466:	4b07      	ldr	r3, [pc, #28]	@ (8000484 <main+0x7c>)
 8000468:	4905      	ldr	r1, [pc, #20]	@ (8000480 <main+0x78>)
 800046a:	4807      	ldr	r0, [pc, #28]	@ (8000488 <main+0x80>)
 800046c:	f000 fbb9 	bl	8000be2 <HAL_CAN_AddTxMessage>

    HAL_Delay(1000);
 8000470:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000474:	f000 fa96 	bl	80009a4 <HAL_Delay>
  {
 8000478:	bf00      	nop
 800047a:	e7d4      	b.n	8000426 <main+0x1e>
 800047c:	20000028 	.word	0x20000028
 8000480:	200000b4 	.word	0x200000b4
 8000484:	200000cc 	.word	0x200000cc
 8000488:	20000038 	.word	0x20000038

0800048c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b090      	sub	sp, #64	@ 0x40
 8000490:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000492:	f107 0318 	add.w	r3, r7, #24
 8000496:	2228      	movs	r2, #40	@ 0x28
 8000498:	2100      	movs	r1, #0
 800049a:	4618      	mov	r0, r3
 800049c:	f002 fdaa 	bl	8002ff4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2200      	movs	r2, #0
 80004a4:	601a      	str	r2, [r3, #0]
 80004a6:	605a      	str	r2, [r3, #4]
 80004a8:	609a      	str	r2, [r3, #8]
 80004aa:	60da      	str	r2, [r3, #12]
 80004ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004ae:	2301      	movs	r3, #1
 80004b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80004b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80004bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004be:	2301      	movs	r3, #1
 80004c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c2:	2302      	movs	r3, #2
 80004c4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004cc:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 f98e 	bl	80027f8 <HAL_RCC_OscConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80004e2:	f000 f819 	bl	8000518 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004e6:	230f      	movs	r3, #15
 80004e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004ea:	2302      	movs	r3, #2
 80004ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2102      	movs	r1, #2
 8000500:	4618      	mov	r0, r3
 8000502:	f002 fbfb 	bl	8002cfc <HAL_RCC_ClockConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800050c:	f000 f804 	bl	8000518 <Error_Handler>
  }
}
 8000510:	bf00      	nop
 8000512:	3740      	adds	r7, #64	@ 0x40
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}

08000518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000520:	bf00      	nop
 8000522:	e7fd      	b.n	8000520 <Error_Handler+0x8>

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	@ (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	@ (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	@ (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800058c:	bf00      	nop
 800058e:	e7fd      	b.n	800058c <NMI_Handler+0x4>

08000590 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000594:	bf00      	nop
 8000596:	e7fd      	b.n	8000594 <HardFault_Handler+0x4>

08000598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <MemManage_Handler+0x4>

080005a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005a4:	bf00      	nop
 80005a6:	e7fd      	b.n	80005a4 <BusFault_Handler+0x4>

080005a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005ac:	bf00      	nop
 80005ae:	e7fd      	b.n	80005ac <UsageFault_Handler+0x4>

080005b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005cc:	bf00      	nop
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bc80      	pop	{r7}
 80005d2:	4770      	bx	lr

080005d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d8:	f000 f9c8 	bl	800096c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80005e4:	4802      	ldr	r0, [pc, #8]	@ (80005f0 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80005e6:	f000 fbcb 	bl	8000d80 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	20000038 	.word	0x20000038

080005f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bc80      	pop	{r7}
 80005fe:	4770      	bx	lr

08000600 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000600:	f7ff fff8 	bl	80005f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480b      	ldr	r0, [pc, #44]	@ (8000634 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000606:	490c      	ldr	r1, [pc, #48]	@ (8000638 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000608:	4a0c      	ldr	r2, [pc, #48]	@ (800063c <LoopFillZerobss+0x16>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a09      	ldr	r2, [pc, #36]	@ (8000640 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800061c:	4c09      	ldr	r4, [pc, #36]	@ (8000644 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800062a:	f002 fceb 	bl	8003004 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062e:	f7ff feeb 	bl	8000408 <main>
  bx lr
 8000632:	4770      	bx	lr
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800063c:	08003098 	.word	0x08003098
  ldr r2, =_sbss
 8000640:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000644:	200000d4 	.word	0x200000d4

08000648 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC1_2_IRQHandler>

0800064a <AT24C04C_Init>:
 */

#include "stm32f1xx_at24c04c.h"

AT24C04C_StatusTypeDef AT24C04C_Init(AT24C04C_HandleTypeDef *hat24c04c)
{
 800064a:	b480      	push	{r7}
 800064c:	b083      	sub	sp, #12
 800064e:	af00      	add	r7, sp, #0
 8000650:	6078      	str	r0, [r7, #4]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d101      	bne.n	800065c <AT24C04C_Init+0x12>
    {
        return AT24C04C_ERROR;
 8000658:	2301      	movs	r3, #1
 800065a:	e01e      	b.n	800069a <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_READY)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	7a1b      	ldrb	r3, [r3, #8]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	2b01      	cmp	r3, #1
 8000664:	d101      	bne.n	800066a <AT24C04C_Init+0x20>
    {
        // Peripheral is already initialized
        return AT24C04C_ERROR;
 8000666:	2301      	movs	r3, #1
 8000668:	e017      	b.n	800069a <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	7a1b      	ldrb	r3, [r3, #8]
 800066e:	b2db      	uxtb	r3, r3
 8000670:	2b02      	cmp	r3, #2
 8000672:	d101      	bne.n	8000678 <AT24C04C_Init+0x2e>
    {
        return AT24C04C_BUSY;
 8000674:	2302      	movs	r3, #2
 8000676:	e010      	b.n	800069a <AT24C04C_Init+0x50>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	7a1b      	ldrb	r3, [r3, #8]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b06      	cmp	r3, #6
 8000680:	d101      	bne.n	8000686 <AT24C04C_Init+0x3c>
    {
        return AT24C04C_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	e009      	b.n	800069a <AT24C04C_Init+0x50>
    }

    if (hat24c04c->Init.I2C_HandlerInstance == NULL)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d101      	bne.n	8000692 <AT24C04C_Init+0x48>
    {
        return AT24C04C_ERROR;
 800068e:	2301      	movs	r3, #1
 8000690:	e003      	b.n	800069a <AT24C04C_Init+0x50>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	721a      	strb	r2, [r3, #8]

    // return status
    return AT24C04C_OK;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	bc80      	pop	{r7}
 80006a2:	4770      	bx	lr

080006a4 <AT24C04C_ReadData>:

    return AT24C04C_OK;
}

AT24C04C_StatusTypeDef AT24C04C_ReadData(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *buffer, uint16_t len_bytes)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	607a      	str	r2, [r7, #4]
 80006ae:	461a      	mov	r2, r3
 80006b0:	460b      	mov	r3, r1
 80006b2:	817b      	strh	r3, [r7, #10]
 80006b4:	4613      	mov	r3, r2
 80006b6:	813b      	strh	r3, [r7, #8]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <AT24C04C_ReadData+0x1e>
    {
        return AT24C04C_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e02d      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }
    // check eepromt state
    if (hat24c04c->State == AT24C04C_STATE_RESET)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	7a1b      	ldrb	r3, [r3, #8]
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d101      	bne.n	80006d0 <AT24C04C_ReadData+0x2c>
    {
        // Peripheral is not initialized
        return AT24C04C_ERROR;
 80006cc:	2301      	movs	r3, #1
 80006ce:	e026      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	7a1b      	ldrb	r3, [r3, #8]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2b02      	cmp	r3, #2
 80006d8:	d101      	bne.n	80006de <AT24C04C_ReadData+0x3a>
    {
        return AT24C04C_BUSY;
 80006da:	2302      	movs	r3, #2
 80006dc:	e01f      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	7a1b      	ldrb	r3, [r3, #8]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b06      	cmp	r3, #6
 80006e6:	d101      	bne.n	80006ec <AT24C04C_ReadData+0x48>
    {
        return AT24C04C_ERROR;
 80006e8:	2301      	movs	r3, #1
 80006ea:	e018      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }
    // set driver state
    hat24c04c->State = AT24C04C_STATE_BUSY;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	2202      	movs	r2, #2
 80006f0:	721a      	strb	r2, [r3, #8]

    uint16_t I2C_Status = __mem_read(hat24c04c, address, buffer, len_bytes);
 80006f2:	893b      	ldrh	r3, [r7, #8]
 80006f4:	8979      	ldrh	r1, [r7, #10]
 80006f6:	687a      	ldr	r2, [r7, #4]
 80006f8:	68f8      	ldr	r0, [r7, #12]
 80006fa:	f000 f855 	bl	80007a8 <__mem_read>
 80006fe:	4603      	mov	r3, r0
 8000700:	82fb      	strh	r3, [r7, #22]

    if (I2C_Status == HAL_I2C_ERROR_TIMEOUT)
 8000702:	8afb      	ldrh	r3, [r7, #22]
 8000704:	2b20      	cmp	r3, #32
 8000706:	d101      	bne.n	800070c <AT24C04C_ReadData+0x68>
    {
        return AT24C04C_TIMEOUT;
 8000708:	2303      	movs	r3, #3
 800070a:	e008      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }
    else if (I2C_Status != HAL_I2C_ERROR_NONE)
 800070c:	8afb      	ldrh	r3, [r7, #22]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <AT24C04C_ReadData+0x72>
    {
        return AT24C04C_ERROR;
 8000712:	2301      	movs	r3, #1
 8000714:	e003      	b.n	800071e <AT24C04C_ReadData+0x7a>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2201      	movs	r2, #1
 800071a:	721a      	strb	r2, [r3, #8]

    return AT24C04C_OK;
 800071c:	2300      	movs	r3, #0
}
 800071e:	4618      	mov	r0, r3
 8000720:	3718      	adds	r7, #24
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <AT24C04C_WriteData>:

AT24C04C_StatusTypeDef AT24C04C_WriteData(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *data, uint16_t len_bytes)
{
 8000726:	b580      	push	{r7, lr}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	60f8      	str	r0, [r7, #12]
 800072e:	607a      	str	r2, [r7, #4]
 8000730:	461a      	mov	r2, r3
 8000732:	460b      	mov	r3, r1
 8000734:	817b      	strh	r3, [r7, #10]
 8000736:	4613      	mov	r3, r2
 8000738:	813b      	strh	r3, [r7, #8]
    // check at24c04c handle allocation
    if (hat24c04c == NULL)
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d101      	bne.n	8000744 <AT24C04C_WriteData+0x1e>
    {
        return AT24C04C_ERROR;
 8000740:	2301      	movs	r3, #1
 8000742:	e02d      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }
    // check EEPROM state
    if (hat24c04c->State == AT24C04C_STATE_RESET)
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	7a1b      	ldrb	r3, [r3, #8]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d101      	bne.n	8000752 <AT24C04C_WriteData+0x2c>
    {
        // Peripheral is not initialized
        return AT24C04C_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e026      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_BUSY)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	7a1b      	ldrb	r3, [r3, #8]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	2b02      	cmp	r3, #2
 800075a:	d101      	bne.n	8000760 <AT24C04C_WriteData+0x3a>
    {
        return AT24C04C_BUSY;
 800075c:	2302      	movs	r3, #2
 800075e:	e01f      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }

    if (hat24c04c->State == AT24C04C_STATE_ERROR)
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	7a1b      	ldrb	r3, [r3, #8]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b06      	cmp	r3, #6
 8000768:	d101      	bne.n	800076e <AT24C04C_WriteData+0x48>
    {
        return AT24C04C_ERROR;
 800076a:	2301      	movs	r3, #1
 800076c:	e018      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }

    // set driver state
    hat24c04c->State = AT24C04C_STATE_BUSY;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	2202      	movs	r2, #2
 8000772:	721a      	strb	r2, [r3, #8]

   uint16_t I2C_Status = __mem_write(hat24c04c, address, data, len_bytes);
 8000774:	893b      	ldrh	r3, [r7, #8]
 8000776:	8979      	ldrh	r1, [r7, #10]
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	68f8      	ldr	r0, [r7, #12]
 800077c:	f000 f863 	bl	8000846 <__mem_write>
 8000780:	4603      	mov	r3, r0
 8000782:	82fb      	strh	r3, [r7, #22]

    if (I2C_Status == HAL_I2C_ERROR_TIMEOUT)
 8000784:	8afb      	ldrh	r3, [r7, #22]
 8000786:	2b20      	cmp	r3, #32
 8000788:	d101      	bne.n	800078e <AT24C04C_WriteData+0x68>
    {
        return AT24C04C_TIMEOUT;
 800078a:	2303      	movs	r3, #3
 800078c:	e008      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }
    else if (I2C_Status != HAL_I2C_ERROR_NONE)
 800078e:	8afb      	ldrh	r3, [r7, #22]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <AT24C04C_WriteData+0x72>
    {
        return AT24C04C_ERROR;
 8000794:	2301      	movs	r3, #1
 8000796:	e003      	b.n	80007a0 <AT24C04C_WriteData+0x7a>
    }

    hat24c04c->State = AT24C04C_STATE_READY;
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2201      	movs	r2, #1
 800079c:	721a      	strb	r2, [r3, #8]

    return AT24C04C_OK;
 800079e:	2300      	movs	r3, #0
}
 80007a0:	4618      	mov	r0, r3
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <__mem_read>:

uint16_t __mem_read(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *buffer, uint16_t len_bytes)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af04      	add	r7, sp, #16
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	607a      	str	r2, [r7, #4]
 80007b2:	461a      	mov	r2, r3
 80007b4:	460b      	mov	r3, r1
 80007b6:	817b      	strh	r3, [r7, #10]
 80007b8:	4613      	mov	r3, r2
 80007ba:	813b      	strh	r3, [r7, #8]

    uint8_t i2c_address = hat24c04c->Init.device_identifier | (hat24c04c->Init.a2_pin << 3) | (hat24c04c->Init.a1_pin << 2) | ((address & 0x1FF) >> 8) << 1 | 1; // limit eeprom address to 9 bits, get eeprom addr MSB, read command
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	68fb      	ldr	r3, [r7, #12]
 80007c4:	795b      	ldrb	r3, [r3, #5]
 80007c6:	00db      	lsls	r3, r3, #3
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	4313      	orrs	r3, r2
 80007cc:	b25a      	sxtb	r2, r3
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	799b      	ldrb	r3, [r3, #6]
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	b25b      	sxtb	r3, r3
 80007d6:	4313      	orrs	r3, r2
 80007d8:	b25a      	sxtb	r2, r3
 80007da:	897b      	ldrh	r3, [r7, #10]
 80007dc:	121b      	asrs	r3, r3, #8
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	b25b      	sxtb	r3, r3
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	b25b      	sxtb	r3, r3
 80007e8:	4313      	orrs	r3, r2
 80007ea:	b25b      	sxtb	r3, r3
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	75fb      	strb	r3, [r7, #23]

    while (HAL_I2C_Mem_Read(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, buffer, len_bytes, 10000) != HAL_OK)
 80007f4:	e00b      	b.n	800080e <__mem_read+0x66>
    {

        uint16_t I2C_Error = HAL_I2C_GetError(hat24c04c->Init.I2C_HandlerInstance);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f001 fc3c 	bl	8002078 <HAL_I2C_GetError>
 8000800:	4603      	mov	r3, r0
 8000802:	82bb      	strh	r3, [r7, #20]

        if (I2C_Error != HAL_I2C_ERROR_AF)
 8000804:	8abb      	ldrh	r3, [r7, #20]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d001      	beq.n	800080e <__mem_read+0x66>
        {
            return I2C_Error;
 800080a:	8abb      	ldrh	r3, [r7, #20]
 800080c:	e017      	b.n	800083e <__mem_read+0x96>
    while (HAL_I2C_Mem_Read(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, buffer, len_bytes, 10000) != HAL_OK)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	7dfb      	ldrb	r3, [r7, #23]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800081a:	b299      	uxth	r1, r3
 800081c:	897b      	ldrh	r3, [r7, #10]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	b29a      	uxth	r2, r3
 8000822:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000826:	9302      	str	r3, [sp, #8]
 8000828:	893b      	ldrh	r3, [r7, #8]
 800082a:	9301      	str	r3, [sp, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	9300      	str	r3, [sp, #0]
 8000830:	2301      	movs	r3, #1
 8000832:	f001 f9b9 	bl	8001ba8 <HAL_I2C_Mem_Read>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d1dc      	bne.n	80007f6 <__mem_read+0x4e>
        }
    }

    return HAL_I2C_ERROR_NONE;
 800083c:	2300      	movs	r3, #0

}
 800083e:	4618      	mov	r0, r3
 8000840:	3718      	adds	r7, #24
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}

08000846 <__mem_write>:

uint16_t __mem_write(AT24C04C_HandleTypeDef *hat24c04c, uint16_t address, uint8_t *data, uint16_t len_bytes)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b08a      	sub	sp, #40	@ 0x28
 800084a:	af04      	add	r7, sp, #16
 800084c:	60f8      	str	r0, [r7, #12]
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	461a      	mov	r2, r3
 8000852:	460b      	mov	r3, r1
 8000854:	817b      	strh	r3, [r7, #10]
 8000856:	4613      	mov	r3, r2
 8000858:	813b      	strh	r3, [r7, #8]

    uint8_t i2c_address = hat24c04c->Init.device_identifier | (hat24c04c->Init.a2_pin << 3) | (hat24c04c->Init.a1_pin << 2) | ((address & 0x1FF) >> 8) << 1 | 0; // limit eeprom address to 9 bits, get eeprom addr MSB, write command
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	b25a      	sxtb	r2, r3
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	795b      	ldrb	r3, [r3, #5]
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	b25b      	sxtb	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b25a      	sxtb	r2, r3
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	799b      	ldrb	r3, [r3, #6]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	b25b      	sxtb	r3, r3
 8000874:	4313      	orrs	r3, r2
 8000876:	b25a      	sxtb	r2, r3
 8000878:	897b      	ldrh	r3, [r7, #10]
 800087a:	121b      	asrs	r3, r3, #8
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	b25b      	sxtb	r3, r3
 8000880:	f003 0302 	and.w	r3, r3, #2
 8000884:	b25b      	sxtb	r3, r3
 8000886:	4313      	orrs	r3, r2
 8000888:	b25b      	sxtb	r3, r3
 800088a:	75fb      	strb	r3, [r7, #23]

    while (HAL_I2C_Mem_Write(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, data, len_bytes, 10000) != HAL_OK)
 800088c:	e00b      	b.n	80008a6 <__mem_write+0x60>
    {
        uint16_t I2C_Error = HAL_I2C_GetError(hat24c04c->Init.I2C_HandlerInstance);
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fbf0 	bl	8002078 <HAL_I2C_GetError>
 8000898:	4603      	mov	r3, r0
 800089a:	82bb      	strh	r3, [r7, #20]

        if (I2C_Error != HAL_I2C_ERROR_AF)
 800089c:	8abb      	ldrh	r3, [r7, #20]
 800089e:	2b04      	cmp	r3, #4
 80008a0:	d001      	beq.n	80008a6 <__mem_write+0x60>
        {
            return I2C_Error;
 80008a2:	8abb      	ldrh	r3, [r7, #20]
 80008a4:	e017      	b.n	80008d6 <__mem_write+0x90>
    while (HAL_I2C_Mem_Write(hat24c04c->Init.I2C_HandlerInstance, (uint16_t)(i2c_address & 0xFE), (uint16_t) (address & 0xFF), I2C_MEMADD_SIZE_8BIT, data, len_bytes, 10000) != HAL_OK)
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6818      	ldr	r0, [r3, #0]
 80008aa:	7dfb      	ldrb	r3, [r7, #23]
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80008b2:	b299      	uxth	r1, r3
 80008b4:	897b      	ldrh	r3, [r7, #10]
 80008b6:	b2db      	uxtb	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	f242 7310 	movw	r3, #10000	@ 0x2710
 80008be:	9302      	str	r3, [sp, #8]
 80008c0:	893b      	ldrh	r3, [r7, #8]
 80008c2:	9301      	str	r3, [sp, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	9300      	str	r3, [sp, #0]
 80008c8:	2301      	movs	r3, #1
 80008ca:	f001 f873 	bl	80019b4 <HAL_I2C_Mem_Write>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1dc      	bne.n	800088e <__mem_write+0x48>
        }
    }

    return HAL_I2C_ERROR_NONE;
 80008d4:	2300      	movs	r3, #0

}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x28>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x28>)
 80008ea:	f043 0310 	orr.w	r3, r3, #16
 80008ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 fd3d 	bl	8001370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	200f      	movs	r0, #15
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff fe12 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40022000 	.word	0x40022000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 fd55 	bl	80013da <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 fd1d 	bl	8001386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <HAL_IncTick+0x1c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	461a      	mov	r2, r3
 8000976:	4b05      	ldr	r3, [pc, #20]	@ (800098c <HAL_IncTick+0x20>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4413      	add	r3, r2
 800097c:	4a03      	ldr	r2, [pc, #12]	@ (800098c <HAL_IncTick+0x20>)
 800097e:	6013      	str	r3, [r2, #0]
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	20000008 	.word	0x20000008
 800098c:	200000d0 	.word	0x200000d0

08000990 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  return uwTick;
 8000994:	4b02      	ldr	r3, [pc, #8]	@ (80009a0 <HAL_GetTick+0x10>)
 8000996:	681b      	ldr	r3, [r3, #0]
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	200000d0 	.word	0x200000d0

080009a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009ac:	f7ff fff0 	bl	8000990 <HAL_GetTick>
 80009b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d005      	beq.n	80009ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <HAL_Delay+0x44>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	461a      	mov	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009ca:	bf00      	nop
 80009cc:	f7ff ffe0 	bl	8000990 <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d8f7      	bhi.n	80009cc <HAL_Delay+0x28>
  {
  }
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008

080009ec <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
 80009fc:	e0ed      	b.n	8000bda <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fbf2 	bl	80001f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	f042 0201 	orr.w	r2, r2, #1
 8000a1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a20:	f7ff ffb6 	bl	8000990 <HAL_GetTick>
 8000a24:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a26:	e012      	b.n	8000a4e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a28:	f7ff ffb2 	bl	8000990 <HAL_GetTick>
 8000a2c:	4602      	mov	r2, r0
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	2b0a      	cmp	r3, #10
 8000a34:	d90b      	bls.n	8000a4e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a3a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2205      	movs	r2, #5
 8000a46:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e0c5      	b.n	8000bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d0e5      	beq.n	8000a28 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681a      	ldr	r2, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f022 0202 	bic.w	r2, r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000a6c:	f7ff ff90 	bl	8000990 <HAL_GetTick>
 8000a70:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a72:	e012      	b.n	8000a9a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000a74:	f7ff ff8c 	bl	8000990 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	2b0a      	cmp	r3, #10
 8000a80:	d90b      	bls.n	8000a9a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a86:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2205      	movs	r2, #5
 8000a92:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e09f      	b.n	8000bda <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0302 	and.w	r3, r3, #2
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d1e5      	bne.n	8000a74 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	7e1b      	ldrb	r3, [r3, #24]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d108      	bne.n	8000ac2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	e007      	b.n	8000ad2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	681a      	ldr	r2, [r3, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	7e5b      	ldrb	r3, [r3, #25]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d108      	bne.n	8000aec <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	e007      	b.n	8000afc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000afa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7e9b      	ldrb	r3, [r3, #26]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d108      	bne.n	8000b16 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f042 0220 	orr.w	r2, r2, #32
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	e007      	b.n	8000b26 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f022 0220 	bic.w	r2, r2, #32
 8000b24:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	7edb      	ldrb	r3, [r3, #27]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d108      	bne.n	8000b40 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	f022 0210 	bic.w	r2, r2, #16
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e007      	b.n	8000b50 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f042 0210 	orr.w	r2, r2, #16
 8000b4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7f1b      	ldrb	r3, [r3, #28]
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d108      	bne.n	8000b6a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0208 	orr.w	r2, r2, #8
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	e007      	b.n	8000b7a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f022 0208 	bic.w	r2, r2, #8
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7f5b      	ldrb	r3, [r3, #29]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d108      	bne.n	8000b94 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f042 0204 	orr.w	r2, r2, #4
 8000b90:	601a      	str	r2, [r3, #0]
 8000b92:	e007      	b.n	8000ba4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0204 	bic.w	r2, r2, #4
 8000ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	689a      	ldr	r2, [r3, #8]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	431a      	orrs	r2, r3
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	691b      	ldr	r3, [r3, #16]
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	695b      	ldr	r3, [r3, #20]
 8000bb8:	ea42 0103 	orr.w	r1, r2, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	1e5a      	subs	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3710      	adds	r7, #16
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b089      	sub	sp, #36	@ 0x24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60f8      	str	r0, [r7, #12]
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c00:	7ffb      	ldrb	r3, [r7, #31]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d003      	beq.n	8000c0e <HAL_CAN_AddTxMessage+0x2c>
 8000c06:	7ffb      	ldrb	r3, [r7, #31]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	f040 80ad 	bne.w	8000d68 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d10a      	bne.n	8000c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c18:	69bb      	ldr	r3, [r7, #24]
 8000c1a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d105      	bne.n	8000c2e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c22:	69bb      	ldr	r3, [r7, #24]
 8000c24:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 8095 	beq.w	8000d58 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	0e1b      	lsrs	r3, r3, #24
 8000c32:	f003 0303 	and.w	r3, r3, #3
 8000c36:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c38:	2201      	movs	r2, #1
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	409a      	lsls	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d10d      	bne.n	8000c66 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c54:	68f9      	ldr	r1, [r7, #12]
 8000c56:	6809      	ldr	r1, [r1, #0]
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	3318      	adds	r3, #24
 8000c5e:	011b      	lsls	r3, r3, #4
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	e00f      	b.n	8000c86 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c70:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c76:	68f9      	ldr	r1, [r7, #12]
 8000c78:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8000c7a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	3318      	adds	r3, #24
 8000c80:	011b      	lsls	r3, r3, #4
 8000c82:	440b      	add	r3, r1
 8000c84:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	3318      	adds	r3, #24
 8000c92:	011b      	lsls	r3, r3, #4
 8000c94:	440b      	add	r3, r1
 8000c96:	3304      	adds	r3, #4
 8000c98:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	7d1b      	ldrb	r3, [r3, #20]
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d111      	bne.n	8000cc6 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3318      	adds	r3, #24
 8000caa:	011b      	lsls	r3, r3, #4
 8000cac:	4413      	add	r3, r2
 8000cae:	3304      	adds	r3, #4
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	6811      	ldr	r1, [r2, #0]
 8000cb6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	3318      	adds	r3, #24
 8000cbe:	011b      	lsls	r3, r3, #4
 8000cc0:	440b      	add	r3, r1
 8000cc2:	3304      	adds	r3, #4
 8000cc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	3307      	adds	r3, #7
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	061a      	lsls	r2, r3, #24
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	3306      	adds	r3, #6
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	041b      	lsls	r3, r3, #16
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3305      	adds	r3, #5
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	021b      	lsls	r3, r3, #8
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	687a      	ldr	r2, [r7, #4]
 8000ce4:	3204      	adds	r2, #4
 8000ce6:	7812      	ldrb	r2, [r2, #0]
 8000ce8:	4610      	mov	r0, r2
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	6811      	ldr	r1, [r2, #0]
 8000cee:	ea43 0200 	orr.w	r2, r3, r0
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000cfc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	3303      	adds	r3, #3
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	061a      	lsls	r2, r3, #24
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3302      	adds	r3, #2
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	041b      	lsls	r3, r3, #16
 8000d0e:	431a      	orrs	r2, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3301      	adds	r3, #1
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	021b      	lsls	r3, r3, #8
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	4610      	mov	r0, r2
 8000d20:	68fa      	ldr	r2, [r7, #12]
 8000d22:	6811      	ldr	r1, [r2, #0]
 8000d24:	ea43 0200 	orr.w	r2, r3, r0
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	011b      	lsls	r3, r3, #4
 8000d2c:	440b      	add	r3, r1
 8000d2e:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000d32:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	3318      	adds	r3, #24
 8000d3c:	011b      	lsls	r3, r3, #4
 8000d3e:	4413      	add	r3, r2
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	68fa      	ldr	r2, [r7, #12]
 8000d44:	6811      	ldr	r1, [r2, #0]
 8000d46:	f043 0201 	orr.w	r2, r3, #1
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	3318      	adds	r3, #24
 8000d4e:	011b      	lsls	r3, r3, #4
 8000d50:	440b      	add	r3, r1
 8000d52:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e00e      	b.n	8000d76 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e006      	b.n	8000d76 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d6c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
  }
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	@ 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	691b      	ldr	r3, [r3, #16]
 8000db2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d07c      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	f003 0301 	and.w	r3, r3, #1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d023      	beq.n	8000e18 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d003      	beq.n	8000dea <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f000 f983 	bl	80010ee <HAL_CAN_TxMailbox0CompleteCallback>
 8000de8:	e016      	b.n	8000e18 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8000dea:	69bb      	ldr	r3, [r7, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d004      	beq.n	8000dfe <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8000df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dfc:	e00c      	b.n	8000e18 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8000dfe:	69bb      	ldr	r3, [r7, #24]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d004      	beq.n	8000e12 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8000e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e10:	e002      	b.n	8000e18 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8000e12:	6878      	ldr	r0, [r7, #4]
 8000e14:	f000 f986 	bl	8001124 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d024      	beq.n	8000e6c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d003      	beq.n	8000e3e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f962 	bl	8001100 <HAL_CAN_TxMailbox1CompleteCallback>
 8000e3c:	e016      	b.n	8000e6c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8000e3e:	69bb      	ldr	r3, [r7, #24]
 8000e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d004      	beq.n	8000e52 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8000e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e4a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e50:	e00c      	b.n	8000e6c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d004      	beq.n	8000e66 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e64:	e002      	b.n	8000e6c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f000 f965 	bl	8001136 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d024      	beq.n	8000ec0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000e7e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 f941 	bl	8001112 <HAL_CAN_TxMailbox2CompleteCallback>
 8000e90:	e016      	b.n	8000ec0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d004      	beq.n	8000ea6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8000e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ea4:	e00c      	b.n	8000ec0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d004      	beq.n	8000eba <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8000eb8:	e002      	b.n	8000ec0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f000 f944 	bl	8001148 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d00c      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d007      	beq.n	8000ee4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8000ee4:	6a3b      	ldr	r3, [r7, #32]
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d00b      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	f003 0308 	and.w	r3, r3, #8
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d006      	beq.n	8000f06 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2208      	movs	r2, #8
 8000efe:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f933 	bl	800116c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8000f06:	6a3b      	ldr	r3, [r7, #32]
 8000f08:	f003 0302 	and.w	r3, r3, #2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d009      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	f003 0303 	and.w	r3, r3, #3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d002      	beq.n	8000f24 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f91b 	bl	800115a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8000f24:	6a3b      	ldr	r3, [r7, #32]
 8000f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d00c      	beq.n	8000f48 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8000f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f3a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f3e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2210      	movs	r2, #16
 8000f46:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8000f48:	6a3b      	ldr	r3, [r7, #32]
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00b      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d006      	beq.n	8000f6a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2208      	movs	r2, #8
 8000f62:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f000 f913 	bl	8001190 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8000f6a:	6a3b      	ldr	r3, [r7, #32]
 8000f6c:	f003 0310 	and.w	r3, r3, #16
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d009      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	691b      	ldr	r3, [r3, #16]
 8000f7a:	f003 0303 	and.w	r3, r3, #3
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d002      	beq.n	8000f88 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f8fb 	bl	800117e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d00b      	beq.n	8000faa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	f003 0310 	and.w	r3, r3, #16
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d006      	beq.n	8000faa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f000 f8fc 	bl	80011a2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8000faa:	6a3b      	ldr	r3, [r7, #32]
 8000fac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d00b      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8000fb4:	69fb      	ldr	r3, [r7, #28]
 8000fb6:	f003 0308 	and.w	r3, r3, #8
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d006      	beq.n	8000fcc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f000 f8f4 	bl	80011b4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d07b      	beq.n	80010ce <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	f003 0304 	and.w	r3, r3, #4
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d072      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000fe0:	6a3b      	ldr	r3, [r7, #32]
 8000fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d008      	beq.n	8000ffc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8000ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8000ffc:	6a3b      	ldr	r3, [r7, #32]
 8000ffe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001002:	2b00      	cmp	r3, #0
 8001004:	d008      	beq.n	8001018 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800101e:	2b00      	cmp	r3, #0
 8001020:	d008      	beq.n	8001034 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102e:	f043 0304 	orr.w	r3, r3, #4
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001034:	6a3b      	ldr	r3, [r7, #32]
 8001036:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800103a:	2b00      	cmp	r3, #0
 800103c:	d043      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001044:	2b00      	cmp	r3, #0
 8001046:	d03e      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800104e:	2b60      	cmp	r3, #96	@ 0x60
 8001050:	d02b      	beq.n	80010aa <HAL_CAN_IRQHandler+0x32a>
 8001052:	2b60      	cmp	r3, #96	@ 0x60
 8001054:	d82e      	bhi.n	80010b4 <HAL_CAN_IRQHandler+0x334>
 8001056:	2b50      	cmp	r3, #80	@ 0x50
 8001058:	d022      	beq.n	80010a0 <HAL_CAN_IRQHandler+0x320>
 800105a:	2b50      	cmp	r3, #80	@ 0x50
 800105c:	d82a      	bhi.n	80010b4 <HAL_CAN_IRQHandler+0x334>
 800105e:	2b40      	cmp	r3, #64	@ 0x40
 8001060:	d019      	beq.n	8001096 <HAL_CAN_IRQHandler+0x316>
 8001062:	2b40      	cmp	r3, #64	@ 0x40
 8001064:	d826      	bhi.n	80010b4 <HAL_CAN_IRQHandler+0x334>
 8001066:	2b30      	cmp	r3, #48	@ 0x30
 8001068:	d010      	beq.n	800108c <HAL_CAN_IRQHandler+0x30c>
 800106a:	2b30      	cmp	r3, #48	@ 0x30
 800106c:	d822      	bhi.n	80010b4 <HAL_CAN_IRQHandler+0x334>
 800106e:	2b10      	cmp	r3, #16
 8001070:	d002      	beq.n	8001078 <HAL_CAN_IRQHandler+0x2f8>
 8001072:	2b20      	cmp	r3, #32
 8001074:	d005      	beq.n	8001082 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001076:	e01d      	b.n	80010b4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001080:	e019      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001084:	f043 0310 	orr.w	r3, r3, #16
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800108a:	e014      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800108c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108e:	f043 0320 	orr.w	r3, r3, #32
 8001092:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001094:	e00f      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001098:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800109c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800109e:	e00a      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010a8:	e005      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80010b2:	e000      	b.n	80010b6 <HAL_CAN_IRQHandler+0x336>
            break;
 80010b4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	699a      	ldr	r2, [r3, #24]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80010c4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2204      	movs	r2, #4
 80010cc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	431a      	orrs	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f000 f870 	bl	80011c6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80010e6:	bf00      	nop
 80010e8:	3728      	adds	r7, #40	@ 0x28
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001108:	bf00      	nop
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	bc80      	pop	{r7}
 8001110:	4770      	bx	lr

08001112 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001136:	b480      	push	{r7}
 8001138:	b083      	sub	sp, #12
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr

0800117e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800117e:	b480      	push	{r7}
 8001180:	b083      	sub	sp, #12
 8001182:	af00      	add	r7, sp, #0
 8001184:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	bc80      	pop	{r7}
 80011a0:	4770      	bx	lr

080011a2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80011a2:	b480      	push	{r7}
 80011a4:	b083      	sub	sp, #12
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr

080011b4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bc80      	pop	{r7}
 80011d6:	4770      	bx	lr

080011d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b480      	push	{r7}
 80011da:	b085      	sub	sp, #20
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e8:	4b0c      	ldr	r3, [pc, #48]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011f4:	4013      	ands	r3, r2
 80011f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001200:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001204:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001208:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800120a:	4a04      	ldr	r2, [pc, #16]	@ (800121c <__NVIC_SetPriorityGrouping+0x44>)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	60d3      	str	r3, [r2, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bc80      	pop	{r7}
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001224:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <__NVIC_GetPriorityGrouping+0x18>)
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	0a1b      	lsrs	r3, r3, #8
 800122a:	f003 0307 	and.w	r3, r3, #7
}
 800122e:	4618      	mov	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db0b      	blt.n	8001266 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	f003 021f 	and.w	r2, r3, #31
 8001254:	4906      	ldr	r1, [pc, #24]	@ (8001270 <__NVIC_EnableIRQ+0x34>)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	095b      	lsrs	r3, r3, #5
 800125c:	2001      	movs	r0, #1
 800125e:	fa00 f202 	lsl.w	r2, r0, r2
 8001262:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001266:	bf00      	nop
 8001268:	370c      	adds	r7, #12
 800126a:	46bd      	mov	sp, r7
 800126c:	bc80      	pop	{r7}
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100

08001274 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	6039      	str	r1, [r7, #0]
 800127e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	2b00      	cmp	r3, #0
 8001286:	db0a      	blt.n	800129e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	490c      	ldr	r1, [pc, #48]	@ (80012c0 <__NVIC_SetPriority+0x4c>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	0112      	lsls	r2, r2, #4
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	440b      	add	r3, r1
 8001298:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800129c:	e00a      	b.n	80012b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	4908      	ldr	r1, [pc, #32]	@ (80012c4 <__NVIC_SetPriority+0x50>)
 80012a4:	79fb      	ldrb	r3, [r7, #7]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	3b04      	subs	r3, #4
 80012ac:	0112      	lsls	r2, r2, #4
 80012ae:	b2d2      	uxtb	r2, r2
 80012b0:	440b      	add	r3, r1
 80012b2:	761a      	strb	r2, [r3, #24]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e100 	.word	0xe000e100
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b089      	sub	sp, #36	@ 0x24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f1c3 0307 	rsb	r3, r3, #7
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	bf28      	it	cs
 80012e6:	2304      	movcs	r3, #4
 80012e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	3304      	adds	r3, #4
 80012ee:	2b06      	cmp	r3, #6
 80012f0:	d902      	bls.n	80012f8 <NVIC_EncodePriority+0x30>
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	3b03      	subs	r3, #3
 80012f6:	e000      	b.n	80012fa <NVIC_EncodePriority+0x32>
 80012f8:	2300      	movs	r3, #0
 80012fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43da      	mvns	r2, r3
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	401a      	ands	r2, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001310:	f04f 31ff 	mov.w	r1, #4294967295
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	43d9      	mvns	r1, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001320:	4313      	orrs	r3, r2
         );
}
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	@ 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	3b01      	subs	r3, #1
 8001338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800133c:	d301      	bcc.n	8001342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800133e:	2301      	movs	r3, #1
 8001340:	e00f      	b.n	8001362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001342:	4a0a      	ldr	r2, [pc, #40]	@ (800136c <SysTick_Config+0x40>)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800134a:	210f      	movs	r1, #15
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f7ff ff90 	bl	8001274 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001354:	4b05      	ldr	r3, [pc, #20]	@ (800136c <SysTick_Config+0x40>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800135a:	4b04      	ldr	r3, [pc, #16]	@ (800136c <SysTick_Config+0x40>)
 800135c:	2207      	movs	r2, #7
 800135e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	e000e010 	.word	0xe000e010

08001370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f7ff ff2d 	bl	80011d8 <__NVIC_SetPriorityGrouping>
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001386:	b580      	push	{r7, lr}
 8001388:	b086      	sub	sp, #24
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	60b9      	str	r1, [r7, #8]
 8001390:	607a      	str	r2, [r7, #4]
 8001392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001398:	f7ff ff42 	bl	8001220 <__NVIC_GetPriorityGrouping>
 800139c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	68b9      	ldr	r1, [r7, #8]
 80013a2:	6978      	ldr	r0, [r7, #20]
 80013a4:	f7ff ff90 	bl	80012c8 <NVIC_EncodePriority>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ae:	4611      	mov	r1, r2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff5f 	bl	8001274 <__NVIC_SetPriority>
}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff35 	bl	800123c <__NVIC_EnableIRQ>
}
 80013d2:	bf00      	nop
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}

080013da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ffa2 	bl	800132c <SysTick_Config>
 80013e8:	4603      	mov	r3, r0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
	...

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b08b      	sub	sp, #44	@ 0x2c
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013fe:	2300      	movs	r3, #0
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001406:	e169      	b.n	80016dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001408:	2201      	movs	r2, #1
 800140a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	429a      	cmp	r2, r3
 8001422:	f040 8158 	bne.w	80016d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4a9a      	ldr	r2, [pc, #616]	@ (8001694 <HAL_GPIO_Init+0x2a0>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d05e      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001430:	4a98      	ldr	r2, [pc, #608]	@ (8001694 <HAL_GPIO_Init+0x2a0>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d875      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001436:	4a98      	ldr	r2, [pc, #608]	@ (8001698 <HAL_GPIO_Init+0x2a4>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d058      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 800143c:	4a96      	ldr	r2, [pc, #600]	@ (8001698 <HAL_GPIO_Init+0x2a4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d86f      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001442:	4a96      	ldr	r2, [pc, #600]	@ (800169c <HAL_GPIO_Init+0x2a8>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d052      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001448:	4a94      	ldr	r2, [pc, #592]	@ (800169c <HAL_GPIO_Init+0x2a8>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d869      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800144e:	4a94      	ldr	r2, [pc, #592]	@ (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d04c      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001454:	4a92      	ldr	r2, [pc, #584]	@ (80016a0 <HAL_GPIO_Init+0x2ac>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d863      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800145a:	4a92      	ldr	r2, [pc, #584]	@ (80016a4 <HAL_GPIO_Init+0x2b0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d046      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
 8001460:	4a90      	ldr	r2, [pc, #576]	@ (80016a4 <HAL_GPIO_Init+0x2b0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d85d      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 8001466:	2b12      	cmp	r3, #18
 8001468:	d82a      	bhi.n	80014c0 <HAL_GPIO_Init+0xcc>
 800146a:	2b12      	cmp	r3, #18
 800146c:	d859      	bhi.n	8001522 <HAL_GPIO_Init+0x12e>
 800146e:	a201      	add	r2, pc, #4	@ (adr r2, 8001474 <HAL_GPIO_Init+0x80>)
 8001470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001474:	080014ef 	.word	0x080014ef
 8001478:	080014c9 	.word	0x080014c9
 800147c:	080014db 	.word	0x080014db
 8001480:	0800151d 	.word	0x0800151d
 8001484:	08001523 	.word	0x08001523
 8001488:	08001523 	.word	0x08001523
 800148c:	08001523 	.word	0x08001523
 8001490:	08001523 	.word	0x08001523
 8001494:	08001523 	.word	0x08001523
 8001498:	08001523 	.word	0x08001523
 800149c:	08001523 	.word	0x08001523
 80014a0:	08001523 	.word	0x08001523
 80014a4:	08001523 	.word	0x08001523
 80014a8:	08001523 	.word	0x08001523
 80014ac:	08001523 	.word	0x08001523
 80014b0:	08001523 	.word	0x08001523
 80014b4:	08001523 	.word	0x08001523
 80014b8:	080014d1 	.word	0x080014d1
 80014bc:	080014e5 	.word	0x080014e5
 80014c0:	4a79      	ldr	r2, [pc, #484]	@ (80016a8 <HAL_GPIO_Init+0x2b4>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d013      	beq.n	80014ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014c6:	e02c      	b.n	8001522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	623b      	str	r3, [r7, #32]
          break;
 80014ce:	e029      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	3304      	adds	r3, #4
 80014d6:	623b      	str	r3, [r7, #32]
          break;
 80014d8:	e024      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	3308      	adds	r3, #8
 80014e0:	623b      	str	r3, [r7, #32]
          break;
 80014e2:	e01f      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	330c      	adds	r3, #12
 80014ea:	623b      	str	r3, [r7, #32]
          break;
 80014ec:	e01a      	b.n	8001524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014f6:	2304      	movs	r3, #4
 80014f8:	623b      	str	r3, [r7, #32]
          break;
 80014fa:	e013      	b.n	8001524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001504:	2308      	movs	r3, #8
 8001506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69fa      	ldr	r2, [r7, #28]
 800150c:	611a      	str	r2, [r3, #16]
          break;
 800150e:	e009      	b.n	8001524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001510:	2308      	movs	r3, #8
 8001512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	615a      	str	r2, [r3, #20]
          break;
 800151a:	e003      	b.n	8001524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800151c:	2300      	movs	r3, #0
 800151e:	623b      	str	r3, [r7, #32]
          break;
 8001520:	e000      	b.n	8001524 <HAL_GPIO_Init+0x130>
          break;
 8001522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2bff      	cmp	r3, #255	@ 0xff
 8001528:	d801      	bhi.n	800152e <HAL_GPIO_Init+0x13a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	e001      	b.n	8001532 <HAL_GPIO_Init+0x13e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3304      	adds	r3, #4
 8001532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	2bff      	cmp	r3, #255	@ 0xff
 8001538:	d802      	bhi.n	8001540 <HAL_GPIO_Init+0x14c>
 800153a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	e002      	b.n	8001546 <HAL_GPIO_Init+0x152>
 8001540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001542:	3b08      	subs	r3, #8
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	210f      	movs	r1, #15
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	fa01 f303 	lsl.w	r3, r1, r3
 8001554:	43db      	mvns	r3, r3
 8001556:	401a      	ands	r2, r3
 8001558:	6a39      	ldr	r1, [r7, #32]
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80b1 	beq.w	80016d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001574:	4b4d      	ldr	r3, [pc, #308]	@ (80016ac <HAL_GPIO_Init+0x2b8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a4c      	ldr	r2, [pc, #304]	@ (80016ac <HAL_GPIO_Init+0x2b8>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b4a      	ldr	r3, [pc, #296]	@ (80016ac <HAL_GPIO_Init+0x2b8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800158c:	4a48      	ldr	r2, [pc, #288]	@ (80016b0 <HAL_GPIO_Init+0x2bc>)
 800158e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001590:	089b      	lsrs	r3, r3, #2
 8001592:	3302      	adds	r3, #2
 8001594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	f003 0303 	and.w	r3, r3, #3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	220f      	movs	r2, #15
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	4013      	ands	r3, r2
 80015ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a40      	ldr	r2, [pc, #256]	@ (80016b4 <HAL_GPIO_Init+0x2c0>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d013      	beq.n	80015e0 <HAL_GPIO_Init+0x1ec>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a3f      	ldr	r2, [pc, #252]	@ (80016b8 <HAL_GPIO_Init+0x2c4>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d00d      	beq.n	80015dc <HAL_GPIO_Init+0x1e8>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4a3e      	ldr	r2, [pc, #248]	@ (80016bc <HAL_GPIO_Init+0x2c8>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d007      	beq.n	80015d8 <HAL_GPIO_Init+0x1e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4a3d      	ldr	r2, [pc, #244]	@ (80016c0 <HAL_GPIO_Init+0x2cc>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d101      	bne.n	80015d4 <HAL_GPIO_Init+0x1e0>
 80015d0:	2303      	movs	r3, #3
 80015d2:	e006      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d4:	2304      	movs	r3, #4
 80015d6:	e004      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015d8:	2302      	movs	r3, #2
 80015da:	e002      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_GPIO_Init+0x1ee>
 80015e0:	2300      	movs	r3, #0
 80015e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e4:	f002 0203 	and.w	r2, r2, #3
 80015e8:	0092      	lsls	r2, r2, #2
 80015ea:	4093      	lsls	r3, r2
 80015ec:	68fa      	ldr	r2, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015f2:	492f      	ldr	r1, [pc, #188]	@ (80016b0 <HAL_GPIO_Init+0x2bc>)
 80015f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	3302      	adds	r3, #2
 80015fa:	68fa      	ldr	r2, [r7, #12]
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800160c:	4b2d      	ldr	r3, [pc, #180]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	492c      	ldr	r1, [pc, #176]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	608b      	str	r3, [r1, #8]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4928      	ldr	r1, [pc, #160]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001634:	4b23      	ldr	r3, [pc, #140]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	4922      	ldr	r1, [pc, #136]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	60cb      	str	r3, [r1, #12]
 8001640:	e006      	b.n	8001650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001644:	68da      	ldr	r2, [r3, #12]
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	43db      	mvns	r3, r3
 800164a:	491e      	ldr	r1, [pc, #120]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800164c:	4013      	ands	r3, r2
 800164e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d006      	beq.n	800166a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800165c:	4b19      	ldr	r3, [pc, #100]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800165e:	685a      	ldr	r2, [r3, #4]
 8001660:	4918      	ldr	r1, [pc, #96]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001662:	69bb      	ldr	r3, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	604b      	str	r3, [r1, #4]
 8001668:	e006      	b.n	8001678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800166a:	4b16      	ldr	r3, [pc, #88]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	43db      	mvns	r3, r3
 8001672:	4914      	ldr	r1, [pc, #80]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001674:	4013      	ands	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d021      	beq.n	80016c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001684:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	490e      	ldr	r1, [pc, #56]	@ (80016c4 <HAL_GPIO_Init+0x2d0>)
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	4313      	orrs	r3, r2
 800168e:	600b      	str	r3, [r1, #0]
 8001690:	e021      	b.n	80016d6 <HAL_GPIO_Init+0x2e2>
 8001692:	bf00      	nop
 8001694:	10320000 	.word	0x10320000
 8001698:	10310000 	.word	0x10310000
 800169c:	10220000 	.word	0x10220000
 80016a0:	10210000 	.word	0x10210000
 80016a4:	10120000 	.word	0x10120000
 80016a8:	10110000 	.word	0x10110000
 80016ac:	40021000 	.word	0x40021000
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40010800 	.word	0x40010800
 80016b8:	40010c00 	.word	0x40010c00
 80016bc:	40011000 	.word	0x40011000
 80016c0:	40011400 	.word	0x40011400
 80016c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80016c8:	4b0b      	ldr	r3, [pc, #44]	@ (80016f8 <HAL_GPIO_Init+0x304>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	43db      	mvns	r3, r3
 80016d0:	4909      	ldr	r1, [pc, #36]	@ (80016f8 <HAL_GPIO_Init+0x304>)
 80016d2:	4013      	ands	r3, r2
 80016d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016d8:	3301      	adds	r3, #1
 80016da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	fa22 f303 	lsr.w	r3, r2, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f47f ae8e 	bne.w	8001408 <HAL_GPIO_Init+0x14>
  }
}
 80016ec:	bf00      	nop
 80016ee:	bf00      	nop
 80016f0:	372c      	adds	r7, #44	@ 0x2c
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bc80      	pop	{r7}
 80016f6:	4770      	bx	lr
 80016f8:	40010400 	.word	0x40010400

080016fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	460b      	mov	r3, r1
 8001706:	807b      	strh	r3, [r7, #2]
 8001708:	4613      	mov	r3, r2
 800170a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800170c:	787b      	ldrb	r3, [r7, #1]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001712:	887a      	ldrh	r2, [r7, #2]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001718:	e003      	b.n	8001722 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800171a:	887b      	ldrh	r3, [r7, #2]
 800171c:	041a      	lsls	r2, r3, #16
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	611a      	str	r2, [r3, #16]
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e12b      	b.n	8001996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d106      	bne.n	8001758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe fe1a 	bl	800038c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2224      	movs	r2, #36	@ 0x24
 800175c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f022 0201 	bic.w	r2, r2, #1
 800176e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800177e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800178e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001790:	f001 fbfe 	bl	8002f90 <HAL_RCC_GetPCLK1Freq>
 8001794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a81      	ldr	r2, [pc, #516]	@ (80019a0 <HAL_I2C_Init+0x274>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d807      	bhi.n	80017b0 <HAL_I2C_Init+0x84>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4a80      	ldr	r2, [pc, #512]	@ (80019a4 <HAL_I2C_Init+0x278>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bf94      	ite	ls
 80017a8:	2301      	movls	r3, #1
 80017aa:	2300      	movhi	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	e006      	b.n	80017be <HAL_I2C_Init+0x92>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4a7d      	ldr	r2, [pc, #500]	@ (80019a8 <HAL_I2C_Init+0x27c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	bf94      	ite	ls
 80017b8:	2301      	movls	r3, #1
 80017ba:	2300      	movhi	r3, #0
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0e7      	b.n	8001996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4a78      	ldr	r2, [pc, #480]	@ (80019ac <HAL_I2C_Init+0x280>)
 80017ca:	fba2 2303 	umull	r2, r3, r2, r3
 80017ce:	0c9b      	lsrs	r3, r3, #18
 80017d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4a6a      	ldr	r2, [pc, #424]	@ (80019a0 <HAL_I2C_Init+0x274>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d802      	bhi.n	8001800 <HAL_I2C_Init+0xd4>
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	3301      	adds	r3, #1
 80017fe:	e009      	b.n	8001814 <HAL_I2C_Init+0xe8>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001806:	fb02 f303 	mul.w	r3, r2, r3
 800180a:	4a69      	ldr	r2, [pc, #420]	@ (80019b0 <HAL_I2C_Init+0x284>)
 800180c:	fba2 2303 	umull	r2, r3, r2, r3
 8001810:	099b      	lsrs	r3, r3, #6
 8001812:	3301      	adds	r3, #1
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001826:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	495c      	ldr	r1, [pc, #368]	@ (80019a0 <HAL_I2C_Init+0x274>)
 8001830:	428b      	cmp	r3, r1
 8001832:	d819      	bhi.n	8001868 <HAL_I2C_Init+0x13c>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e59      	subs	r1, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001842:	1c59      	adds	r1, r3, #1
 8001844:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001848:	400b      	ands	r3, r1
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00a      	beq.n	8001864 <HAL_I2C_Init+0x138>
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	1e59      	subs	r1, r3, #1
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fbb1 f3f3 	udiv	r3, r1, r3
 800185c:	3301      	adds	r3, #1
 800185e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001862:	e051      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 8001864:	2304      	movs	r3, #4
 8001866:	e04f      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d111      	bne.n	8001894 <HAL_I2C_Init+0x168>
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1e58      	subs	r0, r3, #1
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6859      	ldr	r1, [r3, #4]
 8001878:	460b      	mov	r3, r1
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	440b      	add	r3, r1
 800187e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001882:	3301      	adds	r3, #1
 8001884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001888:	2b00      	cmp	r3, #0
 800188a:	bf0c      	ite	eq
 800188c:	2301      	moveq	r3, #1
 800188e:	2300      	movne	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	e012      	b.n	80018ba <HAL_I2C_Init+0x18e>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1e58      	subs	r0, r3, #1
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6859      	ldr	r1, [r3, #4]
 800189c:	460b      	mov	r3, r1
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	0099      	lsls	r1, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80018aa:	3301      	adds	r3, #1
 80018ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf0c      	ite	eq
 80018b4:	2301      	moveq	r3, #1
 80018b6:	2300      	movne	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Init+0x196>
 80018be:	2301      	movs	r3, #1
 80018c0:	e022      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10e      	bne.n	80018e8 <HAL_I2C_Init+0x1bc>
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1e58      	subs	r0, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6859      	ldr	r1, [r3, #4]
 80018d2:	460b      	mov	r3, r1
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	440b      	add	r3, r1
 80018d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018e6:	e00f      	b.n	8001908 <HAL_I2C_Init+0x1dc>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1e58      	subs	r0, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6859      	ldr	r1, [r3, #4]
 80018f0:	460b      	mov	r3, r1
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	0099      	lsls	r1, r3, #2
 80018f8:	440b      	add	r3, r1
 80018fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80018fe:	3301      	adds	r3, #1
 8001900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001904:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	6809      	ldr	r1, [r1, #0]
 800190c:	4313      	orrs	r3, r2
 800190e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69da      	ldr	r2, [r3, #28]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a1b      	ldr	r3, [r3, #32]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001936:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6911      	ldr	r1, [r2, #16]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68d2      	ldr	r2, [r2, #12]
 8001942:	4311      	orrs	r1, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	430b      	orrs	r3, r1
 800194a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	695a      	ldr	r2, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f042 0201 	orr.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2220      	movs	r2, #32
 8001982:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2200      	movs	r2, #0
 8001990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3710      	adds	r7, #16
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	000186a0 	.word	0x000186a0
 80019a4:	001e847f 	.word	0x001e847f
 80019a8:	003d08ff 	.word	0x003d08ff
 80019ac:	431bde83 	.word	0x431bde83
 80019b0:	10624dd3 	.word	0x10624dd3

080019b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af02      	add	r7, sp, #8
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80019ce:	f7fe ffdf 	bl	8000990 <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b20      	cmp	r3, #32
 80019de:	f040 80d9 	bne.w	8001b94 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	9300      	str	r3, [sp, #0]
 80019e6:	2319      	movs	r3, #25
 80019e8:	2201      	movs	r2, #1
 80019ea:	496d      	ldr	r1, [pc, #436]	@ (8001ba0 <HAL_I2C_Mem_Write+0x1ec>)
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fccd 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019f8:	2302      	movs	r3, #2
 80019fa:	e0cc      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_I2C_Mem_Write+0x56>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e0c5      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d007      	beq.n	8001a30 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f042 0201 	orr.w	r2, r2, #1
 8001a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2221      	movs	r2, #33	@ 0x21
 8001a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2240      	movs	r2, #64	@ 0x40
 8001a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2200      	movs	r2, #0
 8001a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	6a3a      	ldr	r2, [r7, #32]
 8001a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a66:	b29a      	uxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba4 <HAL_I2C_Mem_Write+0x1f0>)
 8001a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a72:	88f8      	ldrh	r0, [r7, #6]
 8001a74:	893a      	ldrh	r2, [r7, #8]
 8001a76:	8979      	ldrh	r1, [r7, #10]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9301      	str	r3, [sp, #4]
 8001a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	4603      	mov	r3, r0
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fb04 	bl	8002090 <I2C_RequestMemoryWrite>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d052      	beq.n	8001b34 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e081      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a92:	697a      	ldr	r2, [r7, #20]
 8001a94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f000 fd92 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00d      	beq.n	8001abe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d107      	bne.n	8001aba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ab8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06b      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	781a      	ldrb	r2, [r3, #0]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b29a      	uxth	r2, r3
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	695b      	ldr	r3, [r3, #20]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b04      	cmp	r3, #4
 8001afa:	d11b      	bne.n	8001b34 <HAL_I2C_Mem_Write+0x180>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d017      	beq.n	8001b34 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b08:	781a      	ldrb	r2, [r3, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	1c5a      	adds	r2, r3, #1
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	b29a      	uxth	r2, r3
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1aa      	bne.n	8001a92 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 fd85 	bl	8002650 <I2C_WaitOnBTFFlagUntilTimeout>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d00d      	beq.n	8001b68 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d107      	bne.n	8001b64 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b62:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e016      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2200      	movs	r2, #0
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	e000      	b.n	8001b96 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b94:	2302      	movs	r3, #2
  }
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	00100002 	.word	0x00100002
 8001ba4:	ffff0000 	.word	0xffff0000

08001ba8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08c      	sub	sp, #48	@ 0x30
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	4608      	mov	r0, r1
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	817b      	strh	r3, [r7, #10]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	813b      	strh	r3, [r7, #8]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001bc6:	f7fe fee3 	bl	8000990 <HAL_GetTick>
 8001bca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	f040 8244 	bne.w	8002062 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	9300      	str	r3, [sp, #0]
 8001bde:	2319      	movs	r3, #25
 8001be0:	2201      	movs	r2, #1
 8001be2:	4982      	ldr	r1, [pc, #520]	@ (8001dec <HAL_I2C_Mem_Read+0x244>)
 8001be4:	68f8      	ldr	r0, [r7, #12]
 8001be6:	f000 fbd1 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	e237      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d101      	bne.n	8001c02 <HAL_I2C_Mem_Read+0x5a>
 8001bfe:	2302      	movs	r3, #2
 8001c00:	e230      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d007      	beq.n	8001c28 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0201 	orr.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2222      	movs	r2, #34	@ 0x22
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	2240      	movs	r2, #64	@ 0x40
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001c58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4a62      	ldr	r2, [pc, #392]	@ (8001df0 <HAL_I2C_Mem_Read+0x248>)
 8001c68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c6a:	88f8      	ldrh	r0, [r7, #6]
 8001c6c:	893a      	ldrh	r2, [r7, #8]
 8001c6e:	8979      	ldrh	r1, [r7, #10]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	4603      	mov	r3, r0
 8001c7a:	68f8      	ldr	r0, [r7, #12]
 8001c7c:	f000 fa9e 	bl	80021bc <I2C_RequestMemoryRead>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e1ec      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d113      	bne.n	8001cba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	695b      	ldr	r3, [r3, #20]
 8001c9c:	61fb      	str	r3, [r7, #28]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	699b      	ldr	r3, [r3, #24]
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e1c0      	b.n	800203c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d11e      	bne.n	8001d00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001cd0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd2:	b672      	cpsid	i
}
 8001cd4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	61bb      	str	r3, [r7, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001cfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001cfc:	b662      	cpsie	i
}
 8001cfe:	e035      	b.n	8001d6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d11e      	bne.n	8001d46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d18:	b672      	cpsid	i
}
 8001d1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d42:	b662      	cpsie	i
}
 8001d44:	e012      	b.n	8001d6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001d54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	695b      	ldr	r3, [r3, #20]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001d6c:	e166      	b.n	800203c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d72:	2b03      	cmp	r3, #3
 8001d74:	f200 811f 	bhi.w	8001fb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d123      	bne.n	8001dc8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 fcab 	bl	80026e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e167      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	691a      	ldr	r2, [r3, #16]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001db0:	3b01      	subs	r3, #1
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001dc6:	e139      	b.n	800203c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d152      	bne.n	8001e76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	4906      	ldr	r1, [pc, #24]	@ (8001df4 <HAL_I2C_Mem_Read+0x24c>)
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 fad6 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d008      	beq.n	8001df8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e13c      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
 8001dea:	bf00      	nop
 8001dec:	00100002 	.word	0x00100002
 8001df0:	ffff0000 	.word	0xffff0000
 8001df4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001df8:	b672      	cpsid	i
}
 8001dfa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e3e:	b662      	cpsie	i
}
 8001e40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	691a      	ldr	r2, [r3, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001e74:	e0e2      	b.n	800203c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	497b      	ldr	r1, [pc, #492]	@ (800206c <HAL_I2C_Mem_Read+0x4c4>)
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fa83 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0e9      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea0:	b672      	cpsid	i
}
 8001ea2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001ed6:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_I2C_Mem_Read+0x4c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	08db      	lsrs	r3, r3, #3
 8001edc:	4a65      	ldr	r2, [pc, #404]	@ (8002074 <HAL_I2C_Mem_Read+0x4cc>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0a1a      	lsrs	r2, r3, #8
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	00da      	lsls	r2, r3, #3
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001ef6:	6a3b      	ldr	r3, [r7, #32]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d118      	bne.n	8001f2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2200      	movs	r2, #0
 8001f00:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2220      	movs	r2, #32
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f16:	f043 0220 	orr.w	r2, r3, #32
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1e:	b662      	cpsie	i
}
 8001f20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e09a      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695b      	ldr	r3, [r3, #20]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d1d9      	bne.n	8001ef0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f56:	b2d2      	uxtb	r2, r2
 8001f58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5e:	1c5a      	adds	r2, r3, #1
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	3b01      	subs	r3, #1
 8001f78:	b29a      	uxth	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f7e:	b662      	cpsie	i
}
 8001f80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f94:	1c5a      	adds	r2, r3, #1
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	3b01      	subs	r3, #1
 8001fae:	b29a      	uxth	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001fb4:	e042      	b.n	800203c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fb90 	bl	80026e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e04c      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	691a      	ldr	r2, [r3, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fd4:	b2d2      	uxtb	r2, r2
 8001fd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	b29a      	uxth	r2, r3
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d118      	bne.n	800203c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	691a      	ldr	r2, [r3, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002026:	3b01      	subs	r3, #1
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f ae94 	bne.w	8001d6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002062:	2302      	movs	r3, #2
  }
}
 8002064:	4618      	mov	r0, r3
 8002066:	3728      	adds	r7, #40	@ 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	00010004 	.word	0x00010004
 8002070:	20000000 	.word	0x20000000
 8002074:	14f8b589 	.word	0x14f8b589

08002078 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
	...

08002090 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b088      	sub	sp, #32
 8002094:	af02      	add	r7, sp, #8
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	4608      	mov	r0, r1
 800209a:	4611      	mov	r1, r2
 800209c:	461a      	mov	r2, r3
 800209e:	4603      	mov	r3, r0
 80020a0:	817b      	strh	r3, [r7, #10]
 80020a2:	460b      	mov	r3, r1
 80020a4:	813b      	strh	r3, [r7, #8]
 80020a6:	4613      	mov	r3, r2
 80020a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	f000 f960 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00d      	beq.n	80020ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80020e0:	d103      	bne.n	80020ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80020ea:	2303      	movs	r3, #3
 80020ec:	e05f      	b.n	80021ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80020ee:	897b      	ldrh	r3, [r7, #10]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80020fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	492d      	ldr	r1, [pc, #180]	@ (80021b8 <I2C_RequestMemoryWrite+0x128>)
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 f9bb 	bl	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e04c      	b.n	80021ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	695b      	ldr	r3, [r3, #20]
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	6a39      	ldr	r1, [r7, #32]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fa46 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00d      	beq.n	8002156 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213e:	2b04      	cmp	r3, #4
 8002140:	d107      	bne.n	8002152 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002150:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e02b      	b.n	80021ae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800215c:	893b      	ldrh	r3, [r7, #8]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	e021      	b.n	80021ac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002168:	893b      	ldrh	r3, [r7, #8]
 800216a:	0a1b      	lsrs	r3, r3, #8
 800216c:	b29b      	uxth	r3, r3
 800216e:	b2da      	uxtb	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002178:	6a39      	ldr	r1, [r7, #32]
 800217a:	68f8      	ldr	r0, [r7, #12]
 800217c:	f000 fa20 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00d      	beq.n	80021a2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218a:	2b04      	cmp	r3, #4
 800218c:	d107      	bne.n	800219e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800219c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e005      	b.n	80021ae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80021a2:	893b      	ldrh	r3, [r7, #8]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80021ac:	2300      	movs	r3, #0
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00010002 	.word	0x00010002

080021bc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af02      	add	r7, sp, #8
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	817b      	strh	r3, [r7, #10]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80021e4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f8c2 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800221c:	d103      	bne.n	8002226 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002224:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e0aa      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800222a:	897b      	ldrh	r3, [r7, #10]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	461a      	mov	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002238:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	6a3a      	ldr	r2, [r7, #32]
 800223e:	4952      	ldr	r1, [pc, #328]	@ (8002388 <I2C_RequestMemoryRead+0x1cc>)
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f91d 	bl	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e097      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002250:	2300      	movs	r3, #0
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	617b      	str	r3, [r7, #20]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	617b      	str	r3, [r7, #20]
 8002264:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002268:	6a39      	ldr	r1, [r7, #32]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f9a8 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d00d      	beq.n	8002292 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227a:	2b04      	cmp	r3, #4
 800227c:	d107      	bne.n	800228e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800228c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e076      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d105      	bne.n	80022a4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002298:	893b      	ldrh	r3, [r7, #8]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	611a      	str	r2, [r3, #16]
 80022a2:	e021      	b.n	80022e8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80022a4:	893b      	ldrh	r3, [r7, #8]
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022b4:	6a39      	ldr	r1, [r7, #32]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f982 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d107      	bne.n	80022da <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e050      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80022de:	893b      	ldrh	r3, [r7, #8]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022ea:	6a39      	ldr	r1, [r7, #32]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f967 	bl	80025c0 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d00d      	beq.n	8002314 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d107      	bne.n	8002310 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e035      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002322:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	6a3b      	ldr	r3, [r7, #32]
 800232a:	2200      	movs	r2, #0
 800232c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 f82b 	bl	800238c <I2C_WaitOnFlagUntilTimeout>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00d      	beq.n	8002358 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800234a:	d103      	bne.n	8002354 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002352:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e013      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002358:	897b      	ldrh	r3, [r7, #10]
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	4906      	ldr	r1, [pc, #24]	@ (8002388 <I2C_RequestMemoryRead+0x1cc>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f886 	bl	8002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	00010002 	.word	0x00010002

0800238c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800239c:	e048      	b.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a4:	d044      	beq.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023a6:	f7fe faf3 	bl	8000990 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	69bb      	ldr	r3, [r7, #24]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d302      	bcc.n	80023bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d139      	bne.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	0c1b      	lsrs	r3, r3, #16
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d10d      	bne.n	80023e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	43da      	mvns	r2, r3
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	4013      	ands	r3, r2
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	bf0c      	ite	eq
 80023d8:	2301      	moveq	r3, #1
 80023da:	2300      	movne	r3, #0
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	461a      	mov	r2, r3
 80023e0:	e00c      	b.n	80023fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	43da      	mvns	r2, r3
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	4013      	ands	r3, r2
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	461a      	mov	r2, r3
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d116      	bne.n	8002430 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241c:	f043 0220 	orr.w	r2, r3, #32
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e023      	b.n	8002478 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	0c1b      	lsrs	r3, r3, #16
 8002434:	b2db      	uxtb	r3, r3
 8002436:	2b01      	cmp	r3, #1
 8002438:	d10d      	bne.n	8002456 <I2C_WaitOnFlagUntilTimeout+0xca>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	43da      	mvns	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	4013      	ands	r3, r2
 8002446:	b29b      	uxth	r3, r3
 8002448:	2b00      	cmp	r3, #0
 800244a:	bf0c      	ite	eq
 800244c:	2301      	moveq	r3, #1
 800244e:	2300      	movne	r3, #0
 8002450:	b2db      	uxtb	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	e00c      	b.n	8002470 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	43da      	mvns	r2, r3
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	4013      	ands	r3, r2
 8002462:	b29b      	uxth	r3, r3
 8002464:	2b00      	cmp	r3, #0
 8002466:	bf0c      	ite	eq
 8002468:	2301      	moveq	r3, #1
 800246a:	2300      	movne	r3, #0
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	429a      	cmp	r2, r3
 8002474:	d093      	beq.n	800239e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800248e:	e071      	b.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	695b      	ldr	r3, [r3, #20]
 8002496:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249e:	d123      	bne.n	80024e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80024b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d4:	f043 0204 	orr.w	r2, r3, #4
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e067      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024ee:	d041      	beq.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024f0:	f7fe fa4e 	bl	8000990 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d302      	bcc.n	8002506 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d136      	bne.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10c      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4013      	ands	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e00b      	b.n	8002542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	43da      	mvns	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4013      	ands	r3, r2
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002560:	f043 0220 	orr.w	r2, r3, #32
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e021      	b.n	80025b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	0c1b      	lsrs	r3, r3, #16
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b01      	cmp	r3, #1
 800257c:	d10c      	bne.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	695b      	ldr	r3, [r3, #20]
 8002584:	43da      	mvns	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4013      	ands	r3, r2
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf14      	ite	ne
 8002590:	2301      	movne	r3, #1
 8002592:	2300      	moveq	r3, #0
 8002594:	b2db      	uxtb	r3, r3
 8002596:	e00b      	b.n	80025b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	bf14      	ite	ne
 80025aa:	2301      	movne	r3, #1
 80025ac:	2300      	moveq	r3, #0
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	f47f af6d 	bne.w	8002490 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025cc:	e034      	b.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f8e3 	bl	800279a <I2C_IsAcknowledgeFailed>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e034      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e4:	d028      	beq.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7fe f9d3 	bl	8000990 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	68ba      	ldr	r2, [r7, #8]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d11d      	bne.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002606:	2b80      	cmp	r3, #128	@ 0x80
 8002608:	d016      	beq.n	8002638 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2220      	movs	r2, #32
 8002614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2200      	movs	r2, #0
 800261c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	f043 0220 	orr.w	r2, r3, #32
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e007      	b.n	8002648 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b80      	cmp	r3, #128	@ 0x80
 8002644:	d1c3      	bne.n	80025ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002646:	2300      	movs	r3, #0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3710      	adds	r7, #16
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800265c:	e034      	b.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f89b 	bl	800279a <I2C_IsAcknowledgeFailed>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e034      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002674:	d028      	beq.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002676:	f7fe f98b 	bl	8000990 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	429a      	cmp	r2, r3
 8002684:	d302      	bcc.n	800268c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d11d      	bne.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b04      	cmp	r3, #4
 8002698:	d016      	beq.n	80026c8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f043 0220 	orr.w	r2, r3, #32
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e007      	b.n	80026d8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d1c3      	bne.n	800265e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026ec:	e049      	b.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	695b      	ldr	r3, [r3, #20]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d119      	bne.n	8002730 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0210 	mvn.w	r2, #16
 8002704:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2200      	movs	r2, #0
 800270a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2220      	movs	r2, #32
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e030      	b.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002730:	f7fe f92e 	bl	8000990 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	68ba      	ldr	r2, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d302      	bcc.n	8002746 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d11d      	bne.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002750:	2b40      	cmp	r3, #64	@ 0x40
 8002752:	d016      	beq.n	8002782 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2220      	movs	r2, #32
 800275e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f043 0220 	orr.w	r2, r3, #32
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e007      	b.n	8002792 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	695b      	ldr	r3, [r3, #20]
 8002788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800278c:	2b40      	cmp	r3, #64	@ 0x40
 800278e:	d1ae      	bne.n	80026ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b0:	d11b      	bne.n	80027ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2220      	movs	r2, #32
 80027c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d6:	f043 0204 	orr.w	r2, r3, #4
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e272      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8087 	beq.w	8002926 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002818:	4b92      	ldr	r3, [pc, #584]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d00c      	beq.n	800283e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002824:	4b8f      	ldr	r3, [pc, #572]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 030c 	and.w	r3, r3, #12
 800282c:	2b08      	cmp	r3, #8
 800282e:	d112      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
 8002830:	4b8c      	ldr	r3, [pc, #560]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800283c:	d10b      	bne.n	8002856 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800283e:	4b89      	ldr	r3, [pc, #548]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d06c      	beq.n	8002924 <HAL_RCC_OscConfig+0x12c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d168      	bne.n	8002924 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e24c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800285e:	d106      	bne.n	800286e <HAL_RCC_OscConfig+0x76>
 8002860:	4b80      	ldr	r3, [pc, #512]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a7f      	ldr	r2, [pc, #508]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002866:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e02e      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d10c      	bne.n	8002890 <HAL_RCC_OscConfig+0x98>
 8002876:	4b7b      	ldr	r3, [pc, #492]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a7a      	ldr	r2, [pc, #488]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800287c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002880:	6013      	str	r3, [r2, #0]
 8002882:	4b78      	ldr	r3, [pc, #480]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a77      	ldr	r2, [pc, #476]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002888:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xbc>
 800289a:	4b72      	ldr	r3, [pc, #456]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a71      	ldr	r2, [pc, #452]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6e      	ldr	r2, [pc, #440]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xd4>
 80028b4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6a      	ldr	r2, [pc, #424]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b68      	ldr	r3, [pc, #416]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a67      	ldr	r2, [pc, #412]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d4:	f7fe f85c 	bl	8000990 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe f858 	bl	8000990 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e200      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b5d      	ldr	r3, [pc, #372]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xe4>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7fe f848 	bl	8000990 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe f844 	bl	8000990 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e1ec      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b53      	ldr	r3, [pc, #332]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x10c>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d063      	beq.n	80029fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002932:	4b4c      	ldr	r3, [pc, #304]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800293e:	4b49      	ldr	r3, [pc, #292]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b08      	cmp	r3, #8
 8002948:	d11c      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
 800294a:	4b46      	ldr	r3, [pc, #280]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d116      	bne.n	8002984 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002956:	4b43      	ldr	r3, [pc, #268]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b01      	cmp	r3, #1
 8002968:	d001      	beq.n	800296e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e1c0      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	4939      	ldr	r1, [pc, #228]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 800297e:	4313      	orrs	r3, r2
 8002980:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002982:	e03a      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d020      	beq.n	80029ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800298c:	4b36      	ldr	r3, [pc, #216]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002992:	f7fd fffd 	bl	8000990 <HAL_GetTick>
 8002996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002998:	e008      	b.n	80029ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800299a:	f7fd fff9 	bl	8000990 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e1a1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0f0      	beq.n	800299a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	00db      	lsls	r3, r3, #3
 80029c6:	4927      	ldr	r1, [pc, #156]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	600b      	str	r3, [r1, #0]
 80029cc:	e015      	b.n	80029fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_RCC_OscConfig+0x270>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fd ffdc 	bl	8000990 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029dc:	f7fd ffd8 	bl	8000990 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e180      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d03a      	beq.n	8002a7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d019      	beq.n	8002a42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a0e:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a10:	2201      	movs	r2, #1
 8002a12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a14:	f7fd ffbc 	bl	8000990 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fd ffb8 	bl	8000990 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e160      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a64 <HAL_RCC_OscConfig+0x26c>)
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0f0      	beq.n	8002a1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f000 fabc 	bl	8002fb8 <RCC_Delay>
 8002a40:	e01c      	b.n	8002a7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a42:	4b0a      	ldr	r3, [pc, #40]	@ (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fd ffa2 	bl	8000990 <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4e:	e00f      	b.n	8002a70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a50:	f7fd ff9e 	bl	8000990 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e146      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
 8002a68:	42420000 	.word	0x42420000
 8002a6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a70:	4b92      	ldr	r3, [pc, #584]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e9      	bne.n	8002a50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80a6 	beq.w	8002bd6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8e:	4b8b      	ldr	r3, [pc, #556]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d10d      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	4b88      	ldr	r3, [pc, #544]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	4a87      	ldr	r2, [pc, #540]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	61d3      	str	r3, [r2, #28]
 8002aa6:	4b85      	ldr	r3, [pc, #532]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b82      	ldr	r3, [pc, #520]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b7f      	ldr	r3, [pc, #508]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a7e      	ldr	r2, [pc, #504]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7fd ff5f 	bl	8000990 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7fd ff5b 	bl	8000990 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b64      	cmp	r3, #100	@ 0x64
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e103      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b75      	ldr	r3, [pc, #468]	@ (8002cc0 <HAL_RCC_OscConfig+0x4c8>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x312>
 8002afc:	4b6f      	ldr	r3, [pc, #444]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	4a6e      	ldr	r2, [pc, #440]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6213      	str	r3, [r2, #32]
 8002b08:	e02d      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x334>
 8002b12:	4b6a      	ldr	r3, [pc, #424]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a69      	ldr	r2, [pc, #420]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	4b67      	ldr	r3, [pc, #412]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4a66      	ldr	r2, [pc, #408]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b24:	f023 0304 	bic.w	r3, r3, #4
 8002b28:	6213      	str	r3, [r2, #32]
 8002b2a:	e01c      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d10c      	bne.n	8002b4e <HAL_RCC_OscConfig+0x356>
 8002b34:	4b61      	ldr	r3, [pc, #388]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	4a60      	ldr	r2, [pc, #384]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b3a:	f043 0304 	orr.w	r3, r3, #4
 8002b3e:	6213      	str	r3, [r2, #32]
 8002b40:	4b5e      	ldr	r3, [pc, #376]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4a5d      	ldr	r2, [pc, #372]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6213      	str	r3, [r2, #32]
 8002b4c:	e00b      	b.n	8002b66 <HAL_RCC_OscConfig+0x36e>
 8002b4e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a5a      	ldr	r2, [pc, #360]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b58      	ldr	r3, [pc, #352]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a57      	ldr	r2, [pc, #348]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b60:	f023 0304 	bic.w	r3, r3, #4
 8002b64:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d015      	beq.n	8002b9a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fd ff0f 	bl	8000990 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b74:	e00a      	b.n	8002b8c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b76:	f7fd ff0b 	bl	8000990 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e0b1      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8c:	4b4b      	ldr	r3, [pc, #300]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002b8e:	6a1b      	ldr	r3, [r3, #32]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0ee      	beq.n	8002b76 <HAL_RCC_OscConfig+0x37e>
 8002b98:	e014      	b.n	8002bc4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b9a:	f7fd fef9 	bl	8000990 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba0:	e00a      	b.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fd fef5 	bl	8000990 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e09b      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb8:	4b40      	ldr	r3, [pc, #256]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ee      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002bc4:	7dfb      	ldrb	r3, [r7, #23]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d105      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bca:	4b3c      	ldr	r3, [pc, #240]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	4a3b      	ldr	r2, [pc, #236]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002bd0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 8087 	beq.w	8002cee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002be0:	4b36      	ldr	r3, [pc, #216]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 030c 	and.w	r3, r3, #12
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d061      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d146      	bne.n	8002c82 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf4:	4b33      	ldr	r3, [pc, #204]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bfa:	f7fd fec9 	bl	8000990 <HAL_GetTick>
 8002bfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e008      	b.n	8002c14 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fd fec5 	bl	8000990 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d901      	bls.n	8002c14 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e06d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c14:	4b29      	ldr	r3, [pc, #164]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f0      	bne.n	8002c02 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a1b      	ldr	r3, [r3, #32]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c28:	d108      	bne.n	8002c3c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4921      	ldr	r1, [pc, #132]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a19      	ldr	r1, [r3, #32]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	430b      	orrs	r3, r1
 8002c4e:	491b      	ldr	r1, [pc, #108]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c54:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c5a:	f7fd fe99 	bl	8000990 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c62:	f7fd fe95 	bl	8000990 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e03d      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002c74:	4b11      	ldr	r3, [pc, #68]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x46a>
 8002c80:	e035      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <HAL_RCC_OscConfig+0x4cc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c88:	f7fd fe82 	bl	8000990 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fd fe7e 	bl	8000990 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e026      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_OscConfig+0x4c4>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x498>
 8002cae:	e01e      	b.n	8002cee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e019      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40007000 	.word	0x40007000
 8002cc4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_OscConfig+0x500>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d001      	beq.n	8002cee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e000      	b.n	8002cf0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3718      	adds	r7, #24
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000

08002cfc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e0d0      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d10:	4b6a      	ldr	r3, [pc, #424]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	683a      	ldr	r2, [r7, #0]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d910      	bls.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d1e:	4b67      	ldr	r3, [pc, #412]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f023 0207 	bic.w	r2, r3, #7
 8002d26:	4965      	ldr	r1, [pc, #404]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d2e:	4b63      	ldr	r3, [pc, #396]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0307 	and.w	r3, r3, #7
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d001      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e0b8      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d020      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d58:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a58      	ldr	r2, [pc, #352]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002d62:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0308 	and.w	r3, r3, #8
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d70:	4b53      	ldr	r3, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	4a52      	ldr	r2, [pc, #328]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d76:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002d7a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7c:	4b50      	ldr	r3, [pc, #320]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	494d      	ldr	r1, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0301 	and.w	r3, r3, #1
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d040      	beq.n	8002e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da2:	4b47      	ldr	r3, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d115      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e07f      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	4b41      	ldr	r3, [pc, #260]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d109      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e073      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dca:	4b3d      	ldr	r3, [pc, #244]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e06b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dda:	4b39      	ldr	r3, [pc, #228]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4936      	ldr	r1, [pc, #216]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fd fdd0 	bl	8000990 <HAL_GetTick>
 8002df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002df2:	e00a      	b.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002df4:	f7fd fdcc 	bl	8000990 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e053      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e0a:	4b2d      	ldr	r3, [pc, #180]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 020c 	and.w	r2, r3, #12
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d1eb      	bne.n	8002df4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1c:	4b27      	ldr	r3, [pc, #156]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	683a      	ldr	r2, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d210      	bcs.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e2a:	4b24      	ldr	r3, [pc, #144]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f023 0207 	bic.w	r2, r3, #7
 8002e32:	4922      	ldr	r1, [pc, #136]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e3a:	4b20      	ldr	r3, [pc, #128]	@ (8002ebc <HAL_RCC_ClockConfig+0x1c0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	683a      	ldr	r2, [r7, #0]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e032      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d008      	beq.n	8002e6a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e58:	4b19      	ldr	r3, [pc, #100]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4916      	ldr	r1, [pc, #88]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d009      	beq.n	8002e8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002e76:	4b12      	ldr	r3, [pc, #72]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e8a:	f000 f821 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	4b0b      	ldr	r3, [pc, #44]	@ (8002ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	490a      	ldr	r1, [pc, #40]	@ (8002ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e9c:	5ccb      	ldrb	r3, [r1, r3]
 8002e9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea2:	4a09      	ldr	r2, [pc, #36]	@ (8002ec8 <HAL_RCC_ClockConfig+0x1cc>)
 8002ea4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCC_ClockConfig+0x1d0>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd fd2e 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40022000 	.word	0x40022000
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	08003064 	.word	0x08003064
 8002ec8:	20000000 	.word	0x20000000
 8002ecc:	20000004 	.word	0x20000004

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b087      	sub	sp, #28
 8002ed4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002eea:	4b1e      	ldr	r3, [pc, #120]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 030c 	and.w	r3, r3, #12
 8002ef6:	2b04      	cmp	r3, #4
 8002ef8:	d002      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x30>
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d003      	beq.n	8002f06 <HAL_RCC_GetSysClockFreq+0x36>
 8002efe:	e027      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f02:	613b      	str	r3, [r7, #16]
      break;
 8002f04:	e027      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0c9b      	lsrs	r3, r3, #18
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f10:	5cd3      	ldrb	r3, [r2, r3]
 8002f12:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d010      	beq.n	8002f40 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f1e:	4b11      	ldr	r3, [pc, #68]	@ (8002f64 <HAL_RCC_GetSysClockFreq+0x94>)
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	0c5b      	lsrs	r3, r3, #17
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	4a11      	ldr	r2, [pc, #68]	@ (8002f70 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f2a:	5cd3      	ldrb	r3, [r2, r3]
 8002f2c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a0d      	ldr	r2, [pc, #52]	@ (8002f68 <HAL_RCC_GetSysClockFreq+0x98>)
 8002f32:	fb03 f202 	mul.w	r2, r3, r2
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e004      	b.n	8002f4a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	4a0c      	ldr	r2, [pc, #48]	@ (8002f74 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f44:	fb02 f303 	mul.w	r3, r2, r3
 8002f48:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	613b      	str	r3, [r7, #16]
      break;
 8002f4e:	e002      	b.n	8002f56 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f50:	4b09      	ldr	r3, [pc, #36]	@ (8002f78 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f52:	613b      	str	r3, [r7, #16]
      break;
 8002f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f56:	693b      	ldr	r3, [r7, #16]
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	371c      	adds	r7, #28
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bc80      	pop	{r7}
 8002f60:	4770      	bx	lr
 8002f62:	bf00      	nop
 8002f64:	40021000 	.word	0x40021000
 8002f68:	00f42400 	.word	0x00f42400
 8002f6c:	0800307c 	.word	0x0800307c
 8002f70:	0800308c 	.word	0x0800308c
 8002f74:	003d0900 	.word	0x003d0900
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b02      	ldr	r3, [pc, #8]	@ (8002f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bc80      	pop	{r7}
 8002f8a:	4770      	bx	lr
 8002f8c:	20000000 	.word	0x20000000

08002f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f94:	f7ff fff2 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	0a1b      	lsrs	r3, r3, #8
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	4903      	ldr	r1, [pc, #12]	@ (8002fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fa6:	5ccb      	ldrb	r3, [r1, r3]
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	08003074 	.word	0x08003074

08002fb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <RCC_Delay+0x34>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <RCC_Delay+0x38>)
 8002fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fca:	0a5b      	lsrs	r3, r3, #9
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fd4:	bf00      	nop
  }
  while (Delay --);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e5a      	subs	r2, r3, #1
 8002fda:	60fa      	str	r2, [r7, #12]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d1f9      	bne.n	8002fd4 <RCC_Delay+0x1c>
}
 8002fe0:	bf00      	nop
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	20000000 	.word	0x20000000
 8002ff0:	10624dd3 	.word	0x10624dd3

08002ff4 <memset>:
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	4402      	add	r2, r0
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d100      	bne.n	8002ffe <memset+0xa>
 8002ffc:	4770      	bx	lr
 8002ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8003002:	e7f9      	b.n	8002ff8 <memset+0x4>

08003004 <__libc_init_array>:
 8003004:	b570      	push	{r4, r5, r6, lr}
 8003006:	2600      	movs	r6, #0
 8003008:	4d0c      	ldr	r5, [pc, #48]	@ (800303c <__libc_init_array+0x38>)
 800300a:	4c0d      	ldr	r4, [pc, #52]	@ (8003040 <__libc_init_array+0x3c>)
 800300c:	1b64      	subs	r4, r4, r5
 800300e:	10a4      	asrs	r4, r4, #2
 8003010:	42a6      	cmp	r6, r4
 8003012:	d109      	bne.n	8003028 <__libc_init_array+0x24>
 8003014:	f000 f81a 	bl	800304c <_init>
 8003018:	2600      	movs	r6, #0
 800301a:	4d0a      	ldr	r5, [pc, #40]	@ (8003044 <__libc_init_array+0x40>)
 800301c:	4c0a      	ldr	r4, [pc, #40]	@ (8003048 <__libc_init_array+0x44>)
 800301e:	1b64      	subs	r4, r4, r5
 8003020:	10a4      	asrs	r4, r4, #2
 8003022:	42a6      	cmp	r6, r4
 8003024:	d105      	bne.n	8003032 <__libc_init_array+0x2e>
 8003026:	bd70      	pop	{r4, r5, r6, pc}
 8003028:	f855 3b04 	ldr.w	r3, [r5], #4
 800302c:	4798      	blx	r3
 800302e:	3601      	adds	r6, #1
 8003030:	e7ee      	b.n	8003010 <__libc_init_array+0xc>
 8003032:	f855 3b04 	ldr.w	r3, [r5], #4
 8003036:	4798      	blx	r3
 8003038:	3601      	adds	r6, #1
 800303a:	e7f2      	b.n	8003022 <__libc_init_array+0x1e>
 800303c:	08003090 	.word	0x08003090
 8003040:	08003090 	.word	0x08003090
 8003044:	08003090 	.word	0x08003090
 8003048:	08003094 	.word	0x08003094

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
